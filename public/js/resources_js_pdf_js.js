/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_js_pdf_js"],{

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0hBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzPzgxNDQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/regenerator/index.js\n");

/***/ }),

/***/ "./resources/js/pdf.js":
/*!*****************************!*\
  !*** ./resources/js/pdf.js ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n/* module decorator */ module = __webpack_require__.hmd(module);\n/* provided dependency */ var process = __webpack_require__(/*! process/browser.js */ \"./node_modules/process/browser.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\nfunction _classStaticPrivateMethodGet(receiver,classConstructor,method){_classCheckPrivateStaticAccess(receiver,classConstructor);return method;}function _get(){if(typeof Reflect!==\"undefined\"&&Reflect.get){_get=Reflect.get;}else{_get=function _get(target,property,receiver){var base=_superPropBase(target,property);if(!base)return;var desc=Object.getOwnPropertyDescriptor(base,property);if(desc.get){return desc.get.call(arguments.length<3?target:receiver);}return desc.value;};}return _get.apply(this,arguments);}function _superPropBase(object,property){while(!Object.prototype.hasOwnProperty.call(object,property)){object=_getPrototypeOf(object);if(object===null)break;}return object;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classPrivateMethodInitSpec(obj,privateSet){_checkPrivateRedeclaration(obj,privateSet);privateSet.add(obj);}function _classPrivateMethodGet(receiver,privateSet,fn){if(!privateSet.has(receiver)){throw new TypeError(\"attempted to get private field on non-instance\");}return fn;}function _classPrivateFieldInitSpec(obj,privateMap,value){_checkPrivateRedeclaration(obj,privateMap);privateMap.set(obj,value);}function _checkPrivateRedeclaration(obj,privateCollection){if(privateCollection.has(obj)){throw new TypeError(\"Cannot initialize the same private elements twice on an object\");}}function _classPrivateFieldSet(receiver,privateMap,value){var descriptor=_classExtractFieldDescriptor(receiver,privateMap,\"set\");_classApplyDescriptorSet(receiver,descriptor,value);return value;}function _classPrivateFieldGet(receiver,privateMap){var descriptor=_classExtractFieldDescriptor(receiver,privateMap,\"get\");return _classApplyDescriptorGet(receiver,descriptor);}function _classExtractFieldDescriptor(receiver,privateMap,action){if(!privateMap.has(receiver)){throw new TypeError(\"attempted to \"+action+\" private field on non-instance\");}return privateMap.get(receiver);}function _classStaticPrivateFieldSpecSet(receiver,classConstructor,descriptor,value){_classCheckPrivateStaticAccess(receiver,classConstructor);_classCheckPrivateStaticFieldDescriptor(descriptor,\"set\");_classApplyDescriptorSet(receiver,descriptor,value);return value;}function _classApplyDescriptorSet(receiver,descriptor,value){if(descriptor.set){descriptor.set.call(receiver,value);}else{if(!descriptor.writable){throw new TypeError(\"attempted to set read only private field\");}descriptor.value=value;}}function _classStaticPrivateFieldSpecGet(receiver,classConstructor,descriptor){_classCheckPrivateStaticAccess(receiver,classConstructor);_classCheckPrivateStaticFieldDescriptor(descriptor,\"get\");return _classApplyDescriptorGet(receiver,descriptor);}function _classCheckPrivateStaticFieldDescriptor(descriptor,action){if(descriptor===undefined){throw new TypeError(\"attempted to \"+action+\" private static field before its declaration\");}}function _classCheckPrivateStaticAccess(receiver,classConstructor){if(receiver!==classConstructor){throw new TypeError(\"Private static access of wrong provenance\");}}function _classApplyDescriptorGet(receiver,descriptor){if(descriptor.get){return descriptor.get.call(receiver);}return descriptor.value;}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{Promise.resolve(value).then(_next,_throw);}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,\"next\",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,\"throw\",err);}_next(undefined);});};}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_unsupportedIterableToArray(arr)||_nonIterableSpread();}function _nonIterableSpread(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _iterableToArray(iter){if(typeof Symbol!==\"undefined\"&&iter[Symbol.iterator]!=null||iter[\"@@iterator\"]!=null)return Array.from(iter);}function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr);}function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest();}function _nonIterableRest(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _iterableToArrayLimit(arr,i){var _i=arr==null?null:typeof Symbol!==\"undefined\"&&arr[Symbol.iterator]||arr[\"@@iterator\"];if(_i==null)return;var _arr=[];var _n=true;var _d=false;var _s,_e;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i[\"return\"]!=null)_i[\"return\"]();}finally{if(_d)throw _e;}}return _arr;}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr;}function _createForOfIteratorHelper(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};},e:function e(_e2){throw _e2;},f:F};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}var normalCompletion=true,didErr=false,err;return{s:function s(){it=it.call(o);},n:function n(){var step=it.next();normalCompletion=step.done;return step;},e:function e(_e3){didErr=true;err=_e3;},f:function f(){try{if(!normalCompletion&&it[\"return\"]!=null)it[\"return\"]();}finally{if(didErr)throw err;}}};}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}else if(call!==void 0){throw new TypeError(\"Derived constructors may only return object or undefined\");}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _typeof(obj){\"@babel/helpers - typeof\";if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}(function webpackUniversalModuleDefinition(root,factory){if((typeof exports===\"undefined\"?\"undefined\":_typeof(exports))==='object'&&( false?0:_typeof(module))==='object')module.exports=factory();else if(typeof define==='function'&&__webpack_require__.amdO)define(\"pdfjs-dist/build/pdf\",[],factory);else if((typeof exports===\"undefined\"?\"undefined\":_typeof(exports))==='object')exports[\"pdfjs-dist/build/pdf\"]=factory();else root[\"pdfjs-dist/build/pdf\"]=root.pdfjsLib=factory();})(undefined,function(){return(/******/function(){// webpackBootstrap\n/******/\"use strict\";/******/var __webpack_modules__=[/* 0 */,/* 1 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.VerbosityLevel=exports.Util=exports.UnknownErrorException=exports.UnexpectedResponseException=exports.UNSUPPORTED_FEATURES=exports.TextRenderingMode=exports.StreamType=exports.RenderingIntentFlag=exports.PermissionFlag=exports.PasswordResponses=exports.PasswordException=exports.PageActionEventType=exports.OPS=exports.MissingPDFException=exports.IsLittleEndianCached=exports.IsEvalSupportedCached=exports.InvalidPDFException=exports.ImageKind=exports.IDENTITY_MATRIX=exports.FormatError=exports.FontType=exports.FONT_IDENTITY_MATRIX=exports.DocumentActionEventType=exports.CMapCompressionType=exports.BaseException=exports.AnnotationType=exports.AnnotationStateModelType=exports.AnnotationReviewState=exports.AnnotationReplyType=exports.AnnotationMode=exports.AnnotationMarkedState=exports.AnnotationFlag=exports.AnnotationFieldFlag=exports.AnnotationBorderStyleType=exports.AnnotationActionEventType=exports.AbortException=void 0;exports.arrayByteLength=arrayByteLength;exports.arraysToBytes=arraysToBytes;exports.assert=assert;exports.bytesToString=bytesToString;exports.createPromiseCapability=createPromiseCapability;exports.createValidAbsoluteUrl=createValidAbsoluteUrl;exports.escapeString=escapeString;exports.getModificationDate=getModificationDate;exports.getVerbosityLevel=getVerbosityLevel;exports.info=info;exports.isArrayBuffer=isArrayBuffer;exports.isArrayEqual=isArrayEqual;exports.isAscii=isAscii;exports.objectFromMap=objectFromMap;exports.objectSize=objectSize;exports.setVerbosityLevel=setVerbosityLevel;exports.shadow=shadow;exports.string32=string32;exports.stringToBytes=stringToBytes;exports.stringToPDFString=stringToPDFString;exports.stringToUTF16BEString=stringToUTF16BEString;exports.stringToUTF8String=stringToUTF8String;exports.unreachable=unreachable;exports.utf8StringToString=utf8StringToString;exports.warn=warn;__w_pdfjs_require__(2);var IDENTITY_MATRIX=[1,0,0,1,0,0];exports.IDENTITY_MATRIX=IDENTITY_MATRIX;var FONT_IDENTITY_MATRIX=[0.001,0,0,0.001,0,0];exports.FONT_IDENTITY_MATRIX=FONT_IDENTITY_MATRIX;var RenderingIntentFlag={ANY:0x01,DISPLAY:0x02,PRINT:0x04,ANNOTATIONS_FORMS:0x10,ANNOTATIONS_STORAGE:0x20,ANNOTATIONS_DISABLE:0x40,OPLIST:0x100};exports.RenderingIntentFlag=RenderingIntentFlag;var AnnotationMode={DISABLE:0,ENABLE:1,ENABLE_FORMS:2,ENABLE_STORAGE:3};exports.AnnotationMode=AnnotationMode;var PermissionFlag={PRINT:0x04,MODIFY_CONTENTS:0x08,COPY:0x10,MODIFY_ANNOTATIONS:0x20,FILL_INTERACTIVE_FORMS:0x100,COPY_FOR_ACCESSIBILITY:0x200,ASSEMBLE:0x400,PRINT_HIGH_QUALITY:0x800};exports.PermissionFlag=PermissionFlag;var TextRenderingMode={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4};exports.TextRenderingMode=TextRenderingMode;var ImageKind={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3};exports.ImageKind=ImageKind;var AnnotationType={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26};exports.AnnotationType=AnnotationType;var AnnotationStateModelType={MARKED:\"Marked\",REVIEW:\"Review\"};exports.AnnotationStateModelType=AnnotationStateModelType;var AnnotationMarkedState={MARKED:\"Marked\",UNMARKED:\"Unmarked\"};exports.AnnotationMarkedState=AnnotationMarkedState;var AnnotationReviewState={ACCEPTED:\"Accepted\",REJECTED:\"Rejected\",CANCELLED:\"Cancelled\",COMPLETED:\"Completed\",NONE:\"None\"};exports.AnnotationReviewState=AnnotationReviewState;var AnnotationReplyType={GROUP:\"Group\",REPLY:\"R\"};exports.AnnotationReplyType=AnnotationReplyType;var AnnotationFlag={INVISIBLE:0x01,HIDDEN:0x02,PRINT:0x04,NOZOOM:0x08,NOROTATE:0x10,NOVIEW:0x20,READONLY:0x40,LOCKED:0x80,TOGGLENOVIEW:0x100,LOCKEDCONTENTS:0x200};exports.AnnotationFlag=AnnotationFlag;var AnnotationFieldFlag={READONLY:0x0000001,REQUIRED:0x0000002,NOEXPORT:0x0000004,MULTILINE:0x0001000,PASSWORD:0x0002000,NOTOGGLETOOFF:0x0004000,RADIO:0x0008000,PUSHBUTTON:0x0010000,COMBO:0x0020000,EDIT:0x0040000,SORT:0x0080000,FILESELECT:0x0100000,MULTISELECT:0x0200000,DONOTSPELLCHECK:0x0400000,DONOTSCROLL:0x0800000,COMB:0x1000000,RICHTEXT:0x2000000,RADIOSINUNISON:0x2000000,COMMITONSELCHANGE:0x4000000};exports.AnnotationFieldFlag=AnnotationFieldFlag;var AnnotationBorderStyleType={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5};exports.AnnotationBorderStyleType=AnnotationBorderStyleType;var AnnotationActionEventType={E:\"Mouse Enter\",X:\"Mouse Exit\",D:\"Mouse Down\",U:\"Mouse Up\",Fo:\"Focus\",Bl:\"Blur\",PO:\"PageOpen\",PC:\"PageClose\",PV:\"PageVisible\",PI:\"PageInvisible\",K:\"Keystroke\",F:\"Format\",V:\"Validate\",C:\"Calculate\"};exports.AnnotationActionEventType=AnnotationActionEventType;var DocumentActionEventType={WC:\"WillClose\",WS:\"WillSave\",DS:\"DidSave\",WP:\"WillPrint\",DP:\"DidPrint\"};exports.DocumentActionEventType=DocumentActionEventType;var PageActionEventType={O:\"PageOpen\",C:\"PageClose\"};exports.PageActionEventType=PageActionEventType;var StreamType={UNKNOWN:\"UNKNOWN\",FLATE:\"FLATE\",LZW:\"LZW\",DCT:\"DCT\",JPX:\"JPX\",JBIG:\"JBIG\",A85:\"A85\",AHX:\"AHX\",CCF:\"CCF\",RLX:\"RLX\"};exports.StreamType=StreamType;var FontType={UNKNOWN:\"UNKNOWN\",TYPE1:\"TYPE1\",TYPE1STANDARD:\"TYPE1STANDARD\",TYPE1C:\"TYPE1C\",CIDFONTTYPE0:\"CIDFONTTYPE0\",CIDFONTTYPE0C:\"CIDFONTTYPE0C\",TRUETYPE:\"TRUETYPE\",CIDFONTTYPE2:\"CIDFONTTYPE2\",TYPE3:\"TYPE3\",OPENTYPE:\"OPENTYPE\",TYPE0:\"TYPE0\",MMTYPE1:\"MMTYPE1\"};exports.FontType=FontType;var VerbosityLevel={ERRORS:0,WARNINGS:1,INFOS:5};exports.VerbosityLevel=VerbosityLevel;var CMapCompressionType={NONE:0,BINARY:1,STREAM:2};exports.CMapCompressionType=CMapCompressionType;var OPS={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotations:78,endAnnotations:79,beginAnnotation:80,endAnnotation:81,paintJpegXObject:82,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91};exports.OPS=OPS;var UNSUPPORTED_FEATURES={unknown:\"unknown\",forms:\"forms\",javaScript:\"javaScript\",signatures:\"signatures\",smask:\"smask\",shadingPattern:\"shadingPattern\",font:\"font\",errorTilingPattern:\"errorTilingPattern\",errorExtGState:\"errorExtGState\",errorXObject:\"errorXObject\",errorFontLoadType3:\"errorFontLoadType3\",errorFontState:\"errorFontState\",errorFontMissing:\"errorFontMissing\",errorFontTranslate:\"errorFontTranslate\",errorColorSpace:\"errorColorSpace\",errorOperatorList:\"errorOperatorList\",errorFontToUnicode:\"errorFontToUnicode\",errorFontLoadNative:\"errorFontLoadNative\",errorFontBuildPath:\"errorFontBuildPath\",errorFontGetPath:\"errorFontGetPath\",errorMarkedContent:\"errorMarkedContent\",errorContentSubStream:\"errorContentSubStream\"};exports.UNSUPPORTED_FEATURES=UNSUPPORTED_FEATURES;var PasswordResponses={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};exports.PasswordResponses=PasswordResponses;var verbosity=VerbosityLevel.WARNINGS;function setVerbosityLevel(level){if(Number.isInteger(level)){verbosity=level;}}function getVerbosityLevel(){return verbosity;}function info(msg){if(verbosity>=VerbosityLevel.INFOS){console.log(\"Info: \".concat(msg));}}function warn(msg){if(verbosity>=VerbosityLevel.WARNINGS){console.log(\"Warning: \".concat(msg));}}function unreachable(msg){throw new Error(msg);}function assert(cond,msg){if(!cond){unreachable(msg);}}function _isValidProtocol(url){if(!url){return false;}switch(url.protocol){case\"http:\":case\"https:\":case\"ftp:\":case\"mailto:\":case\"tel:\":return true;default:return false;}}function createValidAbsoluteUrl(url){var baseUrl=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;if(!url){return null;}try{if(options&&typeof url===\"string\"){if(options.addDefaultProtocol&&url.startsWith(\"www.\")){var dots=url.match(/\\./g);if(dots&&dots.length>=2){url=\"http://\".concat(url);}}if(options.tryConvertEncoding){try{url=stringToUTF8String(url);}catch(ex){}}}var absoluteUrl=baseUrl?new URL(url,baseUrl):new URL(url);if(_isValidProtocol(absoluteUrl)){return absoluteUrl;}}catch(ex){}return null;}function shadow(obj,prop,value){Object.defineProperty(obj,prop,{value:value,enumerable:true,configurable:true,writable:false});return value;}var BaseException=function BaseExceptionClosure(){function BaseException(message,name){if(this.constructor===BaseException){unreachable(\"Cannot initialize BaseException.\");}this.message=message;this.name=name;}BaseException.prototype=new Error();BaseException.constructor=BaseException;return BaseException;}();exports.BaseException=BaseException;var PasswordException=/*#__PURE__*/function(_BaseException){_inherits(PasswordException,_BaseException);var _super=_createSuper(PasswordException);function PasswordException(msg,code){var _this;_classCallCheck(this,PasswordException);_this=_super.call(this,msg,\"PasswordException\");_this.code=code;return _this;}return PasswordException;}(BaseException);exports.PasswordException=PasswordException;var UnknownErrorException=/*#__PURE__*/function(_BaseException2){_inherits(UnknownErrorException,_BaseException2);var _super2=_createSuper(UnknownErrorException);function UnknownErrorException(msg,details){var _this2;_classCallCheck(this,UnknownErrorException);_this2=_super2.call(this,msg,\"UnknownErrorException\");_this2.details=details;return _this2;}return UnknownErrorException;}(BaseException);exports.UnknownErrorException=UnknownErrorException;var InvalidPDFException=/*#__PURE__*/function(_BaseException3){_inherits(InvalidPDFException,_BaseException3);var _super3=_createSuper(InvalidPDFException);function InvalidPDFException(msg){_classCallCheck(this,InvalidPDFException);return _super3.call(this,msg,\"InvalidPDFException\");}return InvalidPDFException;}(BaseException);exports.InvalidPDFException=InvalidPDFException;var MissingPDFException=/*#__PURE__*/function(_BaseException4){_inherits(MissingPDFException,_BaseException4);var _super4=_createSuper(MissingPDFException);function MissingPDFException(msg){_classCallCheck(this,MissingPDFException);return _super4.call(this,msg,\"MissingPDFException\");}return MissingPDFException;}(BaseException);exports.MissingPDFException=MissingPDFException;var UnexpectedResponseException=/*#__PURE__*/function(_BaseException5){_inherits(UnexpectedResponseException,_BaseException5);var _super5=_createSuper(UnexpectedResponseException);function UnexpectedResponseException(msg,status){var _this3;_classCallCheck(this,UnexpectedResponseException);_this3=_super5.call(this,msg,\"UnexpectedResponseException\");_this3.status=status;return _this3;}return UnexpectedResponseException;}(BaseException);exports.UnexpectedResponseException=UnexpectedResponseException;var FormatError=/*#__PURE__*/function(_BaseException6){_inherits(FormatError,_BaseException6);var _super6=_createSuper(FormatError);function FormatError(msg){_classCallCheck(this,FormatError);return _super6.call(this,msg,\"FormatError\");}return FormatError;}(BaseException);exports.FormatError=FormatError;var AbortException=/*#__PURE__*/function(_BaseException7){_inherits(AbortException,_BaseException7);var _super7=_createSuper(AbortException);function AbortException(msg){_classCallCheck(this,AbortException);return _super7.call(this,msg,\"AbortException\");}return AbortException;}(BaseException);exports.AbortException=AbortException;function bytesToString(bytes){if(_typeof(bytes)!==\"object\"||bytes===null||bytes.length===undefined){unreachable(\"Invalid argument for bytesToString\");}var length=bytes.length;var MAX_ARGUMENT_COUNT=8192;if(length<MAX_ARGUMENT_COUNT){return String.fromCharCode.apply(null,bytes);}var strBuf=[];for(var i=0;i<length;i+=MAX_ARGUMENT_COUNT){var chunkEnd=Math.min(i+MAX_ARGUMENT_COUNT,length);var chunk=bytes.subarray(i,chunkEnd);strBuf.push(String.fromCharCode.apply(null,chunk));}return strBuf.join(\"\");}function stringToBytes(str){if(typeof str!==\"string\"){unreachable(\"Invalid argument for stringToBytes\");}var length=str.length;var bytes=new Uint8Array(length);for(var i=0;i<length;++i){bytes[i]=str.charCodeAt(i)&0xff;}return bytes;}function arrayByteLength(arr){if(arr.length!==undefined){return arr.length;}if(arr.byteLength!==undefined){return arr.byteLength;}unreachable(\"Invalid argument for arrayByteLength\");}function arraysToBytes(arr){var length=arr.length;if(length===1&&arr[0]instanceof Uint8Array){return arr[0];}var resultLength=0;for(var i=0;i<length;i++){resultLength+=arrayByteLength(arr[i]);}var pos=0;var data=new Uint8Array(resultLength);for(var _i=0;_i<length;_i++){var item=arr[_i];if(!(item instanceof Uint8Array)){if(typeof item===\"string\"){item=stringToBytes(item);}else{item=new Uint8Array(item);}}var itemLength=item.byteLength;data.set(item,pos);pos+=itemLength;}return data;}function string32(value){return String.fromCharCode(value>>24&0xff,value>>16&0xff,value>>8&0xff,value&0xff);}function objectSize(obj){return Object.keys(obj).length;}function objectFromMap(map){var obj=Object.create(null);var _iterator=_createForOfIteratorHelper(map),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step$value=_slicedToArray(_step.value,2),key=_step$value[0],value=_step$value[1];obj[key]=value;}}catch(err){_iterator.e(err);}finally{_iterator.f();}return obj;}function isLittleEndian(){var buffer8=new Uint8Array(4);buffer8[0]=1;var view32=new Uint32Array(buffer8.buffer,0,1);return view32[0]===1;}var IsLittleEndianCached={get value(){return shadow(this,\"value\",isLittleEndian());}};exports.IsLittleEndianCached=IsLittleEndianCached;function isEvalSupported(){try{new Function(\"\");return true;}catch(e){return false;}}var IsEvalSupportedCached={get value(){return shadow(this,\"value\",isEvalSupported());}};exports.IsEvalSupportedCached=IsEvalSupportedCached;var hexNumbers=_toConsumableArray(Array(256).keys()).map(function(n){return n.toString(16).padStart(2,\"0\");});var Util=/*#__PURE__*/function(){function Util(){_classCallCheck(this,Util);}_createClass(Util,null,[{key:\"makeHexColor\",value:function makeHexColor(r,g,b){return\"#\".concat(hexNumbers[r]).concat(hexNumbers[g]).concat(hexNumbers[b]);}},{key:\"transform\",value:function transform(m1,m2){return[m1[0]*m2[0]+m1[2]*m2[1],m1[1]*m2[0]+m1[3]*m2[1],m1[0]*m2[2]+m1[2]*m2[3],m1[1]*m2[2]+m1[3]*m2[3],m1[0]*m2[4]+m1[2]*m2[5]+m1[4],m1[1]*m2[4]+m1[3]*m2[5]+m1[5]];}},{key:\"applyTransform\",value:function applyTransform(p,m){var xt=p[0]*m[0]+p[1]*m[2]+m[4];var yt=p[0]*m[1]+p[1]*m[3]+m[5];return[xt,yt];}},{key:\"applyInverseTransform\",value:function applyInverseTransform(p,m){var d=m[0]*m[3]-m[1]*m[2];var xt=(p[0]*m[3]-p[1]*m[2]+m[2]*m[5]-m[4]*m[3])/d;var yt=(-p[0]*m[1]+p[1]*m[0]+m[4]*m[1]-m[5]*m[0])/d;return[xt,yt];}},{key:\"getAxialAlignedBoundingBox\",value:function getAxialAlignedBoundingBox(r,m){var p1=Util.applyTransform(r,m);var p2=Util.applyTransform(r.slice(2,4),m);var p3=Util.applyTransform([r[0],r[3]],m);var p4=Util.applyTransform([r[2],r[1]],m);return[Math.min(p1[0],p2[0],p3[0],p4[0]),Math.min(p1[1],p2[1],p3[1],p4[1]),Math.max(p1[0],p2[0],p3[0],p4[0]),Math.max(p1[1],p2[1],p3[1],p4[1])];}},{key:\"inverseTransform\",value:function inverseTransform(m){var d=m[0]*m[3]-m[1]*m[2];return[m[3]/d,-m[1]/d,-m[2]/d,m[0]/d,(m[2]*m[5]-m[4]*m[3])/d,(m[4]*m[1]-m[5]*m[0])/d];}},{key:\"apply3dTransform\",value:function apply3dTransform(m,v){return[m[0]*v[0]+m[1]*v[1]+m[2]*v[2],m[3]*v[0]+m[4]*v[1]+m[5]*v[2],m[6]*v[0]+m[7]*v[1]+m[8]*v[2]];}},{key:\"singularValueDecompose2dScale\",value:function singularValueDecompose2dScale(m){var transpose=[m[0],m[2],m[1],m[3]];var a=m[0]*transpose[0]+m[1]*transpose[2];var b=m[0]*transpose[1]+m[1]*transpose[3];var c=m[2]*transpose[0]+m[3]*transpose[2];var d=m[2]*transpose[1]+m[3]*transpose[3];var first=(a+d)/2;var second=Math.sqrt(Math.pow(a+d,2)-4*(a*d-c*b))/2;var sx=first+second||1;var sy=first-second||1;return[Math.sqrt(sx),Math.sqrt(sy)];}},{key:\"normalizeRect\",value:function normalizeRect(rect){var r=rect.slice(0);if(rect[0]>rect[2]){r[0]=rect[2];r[2]=rect[0];}if(rect[1]>rect[3]){r[1]=rect[3];r[3]=rect[1];}return r;}},{key:\"intersect\",value:function intersect(rect1,rect2){function compare(a,b){return a-b;}var orderedX=[rect1[0],rect1[2],rect2[0],rect2[2]].sort(compare);var orderedY=[rect1[1],rect1[3],rect2[1],rect2[3]].sort(compare);var result=[];rect1=Util.normalizeRect(rect1);rect2=Util.normalizeRect(rect2);if(orderedX[0]===rect1[0]&&orderedX[1]===rect2[0]||orderedX[0]===rect2[0]&&orderedX[1]===rect1[0]){result[0]=orderedX[1];result[2]=orderedX[2];}else{return null;}if(orderedY[0]===rect1[1]&&orderedY[1]===rect2[1]||orderedY[0]===rect2[1]&&orderedY[1]===rect1[1]){result[1]=orderedY[1];result[3]=orderedY[2];}else{return null;}return result;}},{key:\"bezierBoundingBox\",value:function bezierBoundingBox(x0,y0,x1,y1,x2,y2,x3,y3){var tvalues=[],bounds=[[],[]];var a,b,c,t,t1,t2,b2ac,sqrtb2ac;for(var i=0;i<2;++i){if(i===0){b=6*x0-12*x1+6*x2;a=-3*x0+9*x1-9*x2+3*x3;c=3*x1-3*x0;}else{b=6*y0-12*y1+6*y2;a=-3*y0+9*y1-9*y2+3*y3;c=3*y1-3*y0;}if(Math.abs(a)<1e-12){if(Math.abs(b)<1e-12){continue;}t=-c/b;if(0<t&&t<1){tvalues.push(t);}continue;}b2ac=b*b-4*c*a;sqrtb2ac=Math.sqrt(b2ac);if(b2ac<0){continue;}t1=(-b+sqrtb2ac)/(2*a);if(0<t1&&t1<1){tvalues.push(t1);}t2=(-b-sqrtb2ac)/(2*a);if(0<t2&&t2<1){tvalues.push(t2);}}var j=tvalues.length,mt;var jlen=j;while(j--){t=tvalues[j];mt=1-t;bounds[0][j]=mt*mt*mt*x0+3*mt*mt*t*x1+3*mt*t*t*x2+t*t*t*x3;bounds[1][j]=mt*mt*mt*y0+3*mt*mt*t*y1+3*mt*t*t*y2+t*t*t*y3;}bounds[0][jlen]=x0;bounds[1][jlen]=y0;bounds[0][jlen+1]=x3;bounds[1][jlen+1]=y3;bounds[0].length=bounds[1].length=jlen+2;return[Math.min.apply(Math,_toConsumableArray(bounds[0])),Math.min.apply(Math,_toConsumableArray(bounds[1])),Math.max.apply(Math,_toConsumableArray(bounds[0])),Math.max.apply(Math,_toConsumableArray(bounds[1]))];}}]);return Util;}();exports.Util=Util;var PDFStringTranslateTable=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0x2d8,0x2c7,0x2c6,0x2d9,0x2dd,0x2db,0x2da,0x2dc,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0x2022,0x2020,0x2021,0x2026,0x2014,0x2013,0x192,0x2044,0x2039,0x203a,0x2212,0x2030,0x201e,0x201c,0x201d,0x2018,0x2019,0x201a,0x2122,0xfb01,0xfb02,0x141,0x152,0x160,0x178,0x17d,0x131,0x142,0x153,0x161,0x17e,0,0x20ac];function stringToPDFString(str){if(str[0]>=\"\\xEF\"){var encoding;if(str[0]===\"\\xFE\"&&str[1]===\"\\xFF\"){encoding=\"utf-16be\";}else if(str[0]===\"\\xFF\"&&str[1]===\"\\xFE\"){encoding=\"utf-16le\";}else if(str[0]===\"\\xEF\"&&str[1]===\"\\xBB\"&&str[2]===\"\\xBF\"){encoding=\"utf-8\";}if(encoding){try{var decoder=new TextDecoder(encoding,{fatal:true});var buffer=stringToBytes(str);return decoder.decode(buffer);}catch(ex){warn(\"stringToPDFString: \\\"\".concat(ex,\"\\\".\"));}}}var strBuf=[];for(var i=0,ii=str.length;i<ii;i++){var code=PDFStringTranslateTable[str.charCodeAt(i)];strBuf.push(code?String.fromCharCode(code):str.charAt(i));}return strBuf.join(\"\");}function escapeString(str){return str.replace(/([()\\\\\\n\\r])/g,function(match){if(match===\"\\n\"){return\"\\\\n\";}else if(match===\"\\r\"){return\"\\\\r\";}return\"\\\\\".concat(match);});}function isAscii(str){return /^[\\x00-\\x7F]*$/.test(str);}function stringToUTF16BEString(str){var buf=[\"\\xFE\\xFF\"];for(var i=0,ii=str.length;i<ii;i++){var _char=str.charCodeAt(i);buf.push(String.fromCharCode(_char>>8&0xff),String.fromCharCode(_char&0xff));}return buf.join(\"\");}function stringToUTF8String(str){return decodeURIComponent(escape(str));}function utf8StringToString(str){return unescape(encodeURIComponent(str));}function isArrayBuffer(v){return _typeof(v)===\"object\"&&v!==null&&v.byteLength!==undefined;}function isArrayEqual(arr1,arr2){if(arr1.length!==arr2.length){return false;}for(var i=0,ii=arr1.length;i<ii;i++){if(arr1[i]!==arr2[i]){return false;}}return true;}function getModificationDate(){var date=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new Date();var buffer=[date.getUTCFullYear().toString(),(date.getUTCMonth()+1).toString().padStart(2,\"0\"),date.getUTCDate().toString().padStart(2,\"0\"),date.getUTCHours().toString().padStart(2,\"0\"),date.getUTCMinutes().toString().padStart(2,\"0\"),date.getUTCSeconds().toString().padStart(2,\"0\")];return buffer.join(\"\");}function createPromiseCapability(){var capability=Object.create(null);var isSettled=false;Object.defineProperty(capability,\"settled\",{get:function get(){return isSettled;}});capability.promise=new Promise(function(resolve,reject){capability.resolve=function(data){isSettled=true;resolve(data);};capability.reject=function(reason){isSettled=true;reject(reason);};});return capability;}/***/},/* 2 */ /***/function(__unused_webpack_module,__unused_webpack_exports,__w_pdfjs_require__){var _is_node=__w_pdfjs_require__(3);;/***/},/* 3 */ /***/function(__unused_webpack_module,exports){Object.defineProperty(exports,\"__esModule\",{value:true});exports.isNodeJS=void 0;var isNodeJS=(typeof process===\"undefined\"?\"undefined\":_typeof(process))===\"object\"&&process+\"\"===\"[object process]\"&&!process.versions.nw&&!(process.versions.electron&&process.type&&process.type!==\"browser\");exports.isNodeJS=isNodeJS;/***/},/* 4 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.build=exports.RenderTask=exports.PDFWorkerUtil=exports.PDFWorker=exports.PDFPageProxy=exports.PDFDocumentProxy=exports.PDFDocumentLoadingTask=exports.PDFDataRangeTransport=exports.LoopbackPort=exports.DefaultStandardFontDataFactory=exports.DefaultCanvasFactory=exports.DefaultCMapReaderFactory=void 0;exports.getDocument=getDocument;exports.setPDFNetworkStreamFactory=setPDFNetworkStreamFactory;exports.version=void 0;var _util=__w_pdfjs_require__(1);var _display_utils=__w_pdfjs_require__(5);var _font_loader=__w_pdfjs_require__(7);var _node_utils=__w_pdfjs_require__(8);var _annotation_storage=__w_pdfjs_require__(9);var _canvas=__w_pdfjs_require__(10);var _worker_options=__w_pdfjs_require__(12);var _is_node=__w_pdfjs_require__(3);var _message_handler=__w_pdfjs_require__(13);var _metadata=__w_pdfjs_require__(14);var _optional_content_config=__w_pdfjs_require__(15);var _transport_stream=__w_pdfjs_require__(16);var _xfa_text=__w_pdfjs_require__(17);var DEFAULT_RANGE_CHUNK_SIZE=65536;var RENDERING_CANCELLED_TIMEOUT=100;var DefaultCanvasFactory=_is_node.isNodeJS?_node_utils.NodeCanvasFactory:_display_utils.DOMCanvasFactory;exports.DefaultCanvasFactory=DefaultCanvasFactory;var DefaultCMapReaderFactory=_is_node.isNodeJS?_node_utils.NodeCMapReaderFactory:_display_utils.DOMCMapReaderFactory;exports.DefaultCMapReaderFactory=DefaultCMapReaderFactory;var DefaultStandardFontDataFactory=_is_node.isNodeJS?_node_utils.NodeStandardFontDataFactory:_display_utils.DOMStandardFontDataFactory;exports.DefaultStandardFontDataFactory=DefaultStandardFontDataFactory;var createPDFNetworkStream;function setPDFNetworkStreamFactory(pdfNetworkStreamFactory){createPDFNetworkStream=pdfNetworkStreamFactory;}function getDocument(src){var task=new PDFDocumentLoadingTask();var source;if(typeof src===\"string\"||src instanceof URL){source={url:src};}else if((0,_util.isArrayBuffer)(src)){source={data:src};}else if(src instanceof PDFDataRangeTransport){source={range:src};}else{if(_typeof(src)!==\"object\"){throw new Error(\"Invalid parameter in getDocument, \"+\"need either string, URL, Uint8Array, or parameter object.\");}if(!src.url&&!src.data&&!src.range){throw new Error(\"Invalid parameter object: need either .data, .range or .url\");}source=src;}var params=Object.create(null);var rangeTransport=null,worker=null;for(var key in source){var value=source[key];switch(key){case\"url\":if(typeof window!==\"undefined\"){try{params[key]=new URL(value,window.location).href;continue;}catch(ex){(0,_util.warn)(\"Cannot create valid URL: \\\"\".concat(ex,\"\\\".\"));}}else if(typeof value===\"string\"||value instanceof URL){params[key]=value.toString();continue;}throw new Error(\"Invalid PDF url data: \"+\"either string or URL-object is expected in the url property.\");case\"range\":rangeTransport=value;continue;case\"worker\":worker=value;continue;case\"data\":if(_is_node.isNodeJS&&typeof Buffer!==\"undefined\"&&value instanceof Buffer){params[key]=new Uint8Array(value);}else if(value instanceof Uint8Array){break;}else if(typeof value===\"string\"){params[key]=(0,_util.stringToBytes)(value);}else if(_typeof(value)===\"object\"&&value!==null&&!isNaN(value.length)){params[key]=new Uint8Array(value);}else if((0,_util.isArrayBuffer)(value)){params[key]=new Uint8Array(value);}else{throw new Error(\"Invalid PDF binary data: either typed array, \"+\"string, or array-like object is expected in the data property.\");}continue;}params[key]=value;}params.CMapReaderFactory=params.CMapReaderFactory||DefaultCMapReaderFactory;params.StandardFontDataFactory=params.StandardFontDataFactory||DefaultStandardFontDataFactory;params.ignoreErrors=params.stopAtErrors!==true;params.fontExtraProperties=params.fontExtraProperties===true;params.pdfBug=params.pdfBug===true;params.enableXfa=params.enableXfa===true;if(!Number.isInteger(params.rangeChunkSize)||params.rangeChunkSize<1){params.rangeChunkSize=DEFAULT_RANGE_CHUNK_SIZE;}if(typeof params.docBaseUrl!==\"string\"||(0,_display_utils.isDataScheme)(params.docBaseUrl)){params.docBaseUrl=null;}if(!Number.isInteger(params.maxImageSize)||params.maxImageSize<-1){params.maxImageSize=-1;}if(typeof params.cMapUrl!==\"string\"){params.cMapUrl=null;}if(typeof params.standardFontDataUrl!==\"string\"){params.standardFontDataUrl=null;}if(typeof params.useWorkerFetch!==\"boolean\"){params.useWorkerFetch=params.CMapReaderFactory===_display_utils.DOMCMapReaderFactory&&params.StandardFontDataFactory===_display_utils.DOMStandardFontDataFactory;}if(typeof params.isEvalSupported!==\"boolean\"){params.isEvalSupported=true;}if(typeof params.disableFontFace!==\"boolean\"){params.disableFontFace=_is_node.isNodeJS;}if(typeof params.useSystemFonts!==\"boolean\"){params.useSystemFonts=!_is_node.isNodeJS&&!params.disableFontFace;}if(_typeof(params.ownerDocument)!==\"object\"||params.ownerDocument===null){params.ownerDocument=globalThis.document;}if(typeof params.disableRange!==\"boolean\"){params.disableRange=false;}if(typeof params.disableStream!==\"boolean\"){params.disableStream=false;}if(typeof params.disableAutoFetch!==\"boolean\"){params.disableAutoFetch=false;}(0,_util.setVerbosityLevel)(params.verbosity);if(!worker){var workerParams={verbosity:params.verbosity,port:_worker_options.GlobalWorkerOptions.workerPort};worker=workerParams.port?PDFWorker.fromPort(workerParams):new PDFWorker(workerParams);task._worker=worker;}var docId=task.docId;worker.promise.then(function(){if(task.destroyed){throw new Error(\"Loading aborted\");}var workerIdPromise=_fetchDocument(worker,params,rangeTransport,docId);var networkStreamPromise=new Promise(function(resolve){var networkStream;if(rangeTransport){networkStream=new _transport_stream.PDFDataTransportStream({length:params.length,initialData:params.initialData,progressiveDone:params.progressiveDone,contentDispositionFilename:params.contentDispositionFilename,disableRange:params.disableRange,disableStream:params.disableStream},rangeTransport);}else if(!params.data){networkStream=createPDFNetworkStream({url:params.url,length:params.length,httpHeaders:params.httpHeaders,withCredentials:params.withCredentials,rangeChunkSize:params.rangeChunkSize,disableRange:params.disableRange,disableStream:params.disableStream});}resolve(networkStream);});return Promise.all([workerIdPromise,networkStreamPromise]).then(function(_ref){var _ref2=_slicedToArray(_ref,2),workerId=_ref2[0],networkStream=_ref2[1];if(task.destroyed){throw new Error(\"Loading aborted\");}var messageHandler=new _message_handler.MessageHandler(docId,workerId,worker.port);var transport=new WorkerTransport(messageHandler,task,networkStream,params);task._transport=transport;messageHandler.send(\"Ready\",null);});})[\"catch\"](task._capability.reject);return task;}function _fetchDocument(_x,_x2,_x3,_x4){return _fetchDocument2.apply(this,arguments);}function _fetchDocument2(){_fetchDocument2=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee7(worker,source,pdfDataRangeTransport,docId){var workerId;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:if(!worker.destroyed){_context7.next=2;break;}throw new Error(\"Worker was destroyed\");case 2:if(pdfDataRangeTransport){source.length=pdfDataRangeTransport.length;source.initialData=pdfDataRangeTransport.initialData;source.progressiveDone=pdfDataRangeTransport.progressiveDone;source.contentDispositionFilename=pdfDataRangeTransport.contentDispositionFilename;}_context7.next=5;return worker.messageHandler.sendWithPromise(\"GetDocRequest\",{docId:docId,apiVersion:'2.14.102',source:{data:source.data,url:source.url,password:source.password,disableAutoFetch:source.disableAutoFetch,rangeChunkSize:source.rangeChunkSize,length:source.length},maxImageSize:source.maxImageSize,disableFontFace:source.disableFontFace,docBaseUrl:source.docBaseUrl,ignoreErrors:source.ignoreErrors,isEvalSupported:source.isEvalSupported,fontExtraProperties:source.fontExtraProperties,enableXfa:source.enableXfa,useSystemFonts:source.useSystemFonts,cMapUrl:source.useWorkerFetch?source.cMapUrl:null,standardFontDataUrl:source.useWorkerFetch?source.standardFontDataUrl:null});case 5:workerId=_context7.sent;if(!worker.destroyed){_context7.next=8;break;}throw new Error(\"Worker was destroyed\");case 8:return _context7.abrupt(\"return\",workerId);case 9:case\"end\":return _context7.stop();}}},_callee7);}));return _fetchDocument2.apply(this,arguments);}var PDFDocumentLoadingTask=/*#__PURE__*/function(){function PDFDocumentLoadingTask(){var _PDFDocumentLoadingTa;_classCallCheck(this,PDFDocumentLoadingTask);this._capability=(0,_util.createPromiseCapability)();this._transport=null;this._worker=null;this.docId=\"d\".concat((_classStaticPrivateFieldSpecSet(PDFDocumentLoadingTask,PDFDocumentLoadingTask,_docId,(_PDFDocumentLoadingTa=+_classStaticPrivateFieldSpecGet(PDFDocumentLoadingTask,PDFDocumentLoadingTask,_docId))+1),_PDFDocumentLoadingTa));this.destroyed=false;this.onPassword=null;this.onProgress=null;this.onUnsupportedFeature=null;}_createClass(PDFDocumentLoadingTask,[{key:\"promise\",get:function get(){return this._capability.promise;}},{key:\"destroy\",value:function(){var _destroy=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee(){var _this$_transport;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:this.destroyed=true;_context.next=3;return(_this$_transport=this._transport)===null||_this$_transport===void 0?void 0:_this$_transport.destroy();case 3:this._transport=null;if(this._worker){this._worker.destroy();this._worker=null;}case 5:case\"end\":return _context.stop();}}},_callee,this);}));function destroy(){return _destroy.apply(this,arguments);}return destroy;}()}]);return PDFDocumentLoadingTask;}();var _docId={writable:true,value:0};exports.PDFDocumentLoadingTask=PDFDocumentLoadingTask;var PDFDataRangeTransport=/*#__PURE__*/function(){function PDFDataRangeTransport(length,initialData){var progressiveDone=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var contentDispositionFilename=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;_classCallCheck(this,PDFDataRangeTransport);this.length=length;this.initialData=initialData;this.progressiveDone=progressiveDone;this.contentDispositionFilename=contentDispositionFilename;this._rangeListeners=[];this._progressListeners=[];this._progressiveReadListeners=[];this._progressiveDoneListeners=[];this._readyCapability=(0,_util.createPromiseCapability)();}_createClass(PDFDataRangeTransport,[{key:\"addRangeListener\",value:function addRangeListener(listener){this._rangeListeners.push(listener);}},{key:\"addProgressListener\",value:function addProgressListener(listener){this._progressListeners.push(listener);}},{key:\"addProgressiveReadListener\",value:function addProgressiveReadListener(listener){this._progressiveReadListeners.push(listener);}},{key:\"addProgressiveDoneListener\",value:function addProgressiveDoneListener(listener){this._progressiveDoneListeners.push(listener);}},{key:\"onDataRange\",value:function onDataRange(begin,chunk){var _iterator2=_createForOfIteratorHelper(this._rangeListeners),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var listener=_step2.value;listener(begin,chunk);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}},{key:\"onDataProgress\",value:function onDataProgress(loaded,total){var _this4=this;this._readyCapability.promise.then(function(){var _iterator3=_createForOfIteratorHelper(_this4._progressListeners),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var listener=_step3.value;listener(loaded,total);}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}});}},{key:\"onDataProgressiveRead\",value:function onDataProgressiveRead(chunk){var _this5=this;this._readyCapability.promise.then(function(){var _iterator4=_createForOfIteratorHelper(_this5._progressiveReadListeners),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var listener=_step4.value;listener(chunk);}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}});}},{key:\"onDataProgressiveDone\",value:function onDataProgressiveDone(){var _this6=this;this._readyCapability.promise.then(function(){var _iterator5=_createForOfIteratorHelper(_this6._progressiveDoneListeners),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var listener=_step5.value;listener();}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}});}},{key:\"transportReady\",value:function transportReady(){this._readyCapability.resolve();}},{key:\"requestDataRange\",value:function requestDataRange(begin,end){(0,_util.unreachable)(\"Abstract method PDFDataRangeTransport.requestDataRange\");}},{key:\"abort\",value:function abort(){}}]);return PDFDataRangeTransport;}();exports.PDFDataRangeTransport=PDFDataRangeTransport;var PDFDocumentProxy=/*#__PURE__*/function(){function PDFDocumentProxy(pdfInfo,transport){var _this7=this;_classCallCheck(this,PDFDocumentProxy);this._pdfInfo=pdfInfo;this._transport=transport;Object.defineProperty(this,\"fingerprint\",{get:function get(){(0,_display_utils.deprecated)(\"`PDFDocumentProxy.fingerprint`, \"+\"please use `PDFDocumentProxy.fingerprints` instead.\");return this.fingerprints[0];}});Object.defineProperty(this,\"getStats\",{value:function(){var _value=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee2(){return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:(0,_display_utils.deprecated)(\"`PDFDocumentProxy.getStats`, \"+\"please use the `PDFDocumentProxy.stats`-getter instead.\");return _context2.abrupt(\"return\",_this7.stats||{streamTypes:{},fontTypes:{}});case 2:case\"end\":return _context2.stop();}}},_callee2);}));function value(){return _value.apply(this,arguments);}return value;}()});}_createClass(PDFDocumentProxy,[{key:\"annotationStorage\",get:function get(){return this._transport.annotationStorage;}},{key:\"numPages\",get:function get(){return this._pdfInfo.numPages;}},{key:\"fingerprints\",get:function get(){return this._pdfInfo.fingerprints;}},{key:\"stats\",get:function get(){return this._transport.stats;}},{key:\"isPureXfa\",get:function get(){return!!this._transport._htmlForXfa;}},{key:\"allXfaHtml\",get:function get(){return this._transport._htmlForXfa;}},{key:\"getPage\",value:function getPage(pageNumber){return this._transport.getPage(pageNumber);}},{key:\"getPageIndex\",value:function getPageIndex(ref){return this._transport.getPageIndex(ref);}},{key:\"getDestinations\",value:function getDestinations(){return this._transport.getDestinations();}},{key:\"getDestination\",value:function getDestination(id){return this._transport.getDestination(id);}},{key:\"getPageLabels\",value:function getPageLabels(){return this._transport.getPageLabels();}},{key:\"getPageLayout\",value:function getPageLayout(){return this._transport.getPageLayout();}},{key:\"getPageMode\",value:function getPageMode(){return this._transport.getPageMode();}},{key:\"getViewerPreferences\",value:function getViewerPreferences(){return this._transport.getViewerPreferences();}},{key:\"getOpenAction\",value:function getOpenAction(){return this._transport.getOpenAction();}},{key:\"getAttachments\",value:function getAttachments(){return this._transport.getAttachments();}},{key:\"getJavaScript\",value:function getJavaScript(){return this._transport.getJavaScript();}},{key:\"getJSActions\",value:function getJSActions(){return this._transport.getDocJSActions();}},{key:\"getOutline\",value:function getOutline(){return this._transport.getOutline();}},{key:\"getOptionalContentConfig\",value:function getOptionalContentConfig(){return this._transport.getOptionalContentConfig();}},{key:\"getPermissions\",value:function getPermissions(){return this._transport.getPermissions();}},{key:\"getMetadata\",value:function getMetadata(){return this._transport.getMetadata();}},{key:\"getMarkInfo\",value:function getMarkInfo(){return this._transport.getMarkInfo();}},{key:\"getData\",value:function getData(){return this._transport.getData();}},{key:\"getDownloadInfo\",value:function getDownloadInfo(){return this._transport.downloadInfoCapability.promise;}},{key:\"cleanup\",value:function cleanup(){var keepLoadedFonts=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;return this._transport.startCleanup(keepLoadedFonts||this.isPureXfa);}},{key:\"destroy\",value:function destroy(){return this.loadingTask.destroy();}},{key:\"loadingParams\",get:function get(){return this._transport.loadingParams;}},{key:\"loadingTask\",get:function get(){return this._transport.loadingTask;}},{key:\"saveDocument\",value:function saveDocument(){if(this._transport.annotationStorage.size<=0){(0,_display_utils.deprecated)(\"saveDocument called while `annotationStorage` is empty, \"+\"please use the getData-method instead.\");}return this._transport.saveDocument();}},{key:\"getFieldObjects\",value:function getFieldObjects(){return this._transport.getFieldObjects();}},{key:\"hasJSActions\",value:function hasJSActions(){return this._transport.hasJSActions();}},{key:\"getCalculationOrderIds\",value:function getCalculationOrderIds(){return this._transport.getCalculationOrderIds();}}]);return PDFDocumentProxy;}();exports.PDFDocumentProxy=PDFDocumentProxy;var PDFPageProxy=/*#__PURE__*/function(){function PDFPageProxy(pageIndex,pageInfo,transport,ownerDocument){var pdfBug=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;_classCallCheck(this,PDFPageProxy);this._pageIndex=pageIndex;this._pageInfo=pageInfo;this._ownerDocument=ownerDocument;this._transport=transport;this._stats=pdfBug?new _display_utils.StatTimer():null;this._pdfBug=pdfBug;this.commonObjs=transport.commonObjs;this.objs=new PDFObjects();this.cleanupAfterRender=false;this.pendingCleanup=false;this._intentStates=new Map();this._annotationPromises=new Map();this.destroyed=false;}_createClass(PDFPageProxy,[{key:\"pageNumber\",get:function get(){return this._pageIndex+1;}},{key:\"rotate\",get:function get(){return this._pageInfo.rotate;}},{key:\"ref\",get:function get(){return this._pageInfo.ref;}},{key:\"userUnit\",get:function get(){return this._pageInfo.userUnit;}},{key:\"view\",get:function get(){return this._pageInfo.view;}},{key:\"getViewport\",value:function getViewport(){var _ref3=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},scale=_ref3.scale,_ref3$rotation=_ref3.rotation,rotation=_ref3$rotation===void 0?this.rotate:_ref3$rotation,_ref3$offsetX=_ref3.offsetX,offsetX=_ref3$offsetX===void 0?0:_ref3$offsetX,_ref3$offsetY=_ref3.offsetY,offsetY=_ref3$offsetY===void 0?0:_ref3$offsetY,_ref3$dontFlip=_ref3.dontFlip,dontFlip=_ref3$dontFlip===void 0?false:_ref3$dontFlip;return new _display_utils.PageViewport({viewBox:this.view,scale:scale,rotation:rotation,offsetX:offsetX,offsetY:offsetY,dontFlip:dontFlip});}},{key:\"getAnnotations\",value:function getAnnotations(){var _ref4=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},_ref4$intent=_ref4.intent,intent=_ref4$intent===void 0?\"display\":_ref4$intent;var intentArgs=this._transport.getRenderingIntent(intent);var promise=this._annotationPromises.get(intentArgs.cacheKey);if(!promise){promise=this._transport.getAnnotations(this._pageIndex,intentArgs.renderingIntent);this._annotationPromises.set(intentArgs.cacheKey,promise);promise=promise.then(function(annotations){var _iterator6=_createForOfIteratorHelper(annotations),_step6;try{var _loop=function _loop(){var annotation=_step6.value;if(annotation.titleObj!==undefined){Object.defineProperty(annotation,\"title\",{get:function get(){(0,_display_utils.deprecated)(\"`title`-property on annotation, please use `titleObj` instead.\");return annotation.titleObj.str;}});}if(annotation.contentsObj!==undefined){Object.defineProperty(annotation,\"contents\",{get:function get(){(0,_display_utils.deprecated)(\"`contents`-property on annotation, please use `contentsObj` instead.\");return annotation.contentsObj.str;}});}};for(_iterator6.s();!(_step6=_iterator6.n()).done;){_loop();}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}return annotations;});}return promise;}},{key:\"getJSActions\",value:function getJSActions(){return this._jsActionsPromise||(this._jsActionsPromise=this._transport.getPageJSActions(this._pageIndex));}},{key:\"getXfa\",value:function(){var _getXfa=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee3(){var _this$_transport$_htm;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:return _context3.abrupt(\"return\",((_this$_transport$_htm=this._transport._htmlForXfa)===null||_this$_transport$_htm===void 0?void 0:_this$_transport$_htm.children[this._pageIndex])||null);case 1:case\"end\":return _context3.stop();}}},_callee3,this);}));function getXfa(){return _getXfa.apply(this,arguments);}return getXfa;}()},{key:\"render\",value:function render(_ref5){var _arguments$,_arguments$2,_this8=this,_intentState;var canvasContext=_ref5.canvasContext,viewport=_ref5.viewport,_ref5$intent=_ref5.intent,intent=_ref5$intent===void 0?\"display\":_ref5$intent,_ref5$annotationMode=_ref5.annotationMode,annotationMode=_ref5$annotationMode===void 0?_util.AnnotationMode.ENABLE:_ref5$annotationMode,_ref5$transform=_ref5.transform,transform=_ref5$transform===void 0?null:_ref5$transform,_ref5$imageLayer=_ref5.imageLayer,imageLayer=_ref5$imageLayer===void 0?null:_ref5$imageLayer,_ref5$canvasFactory=_ref5.canvasFactory,canvasFactory=_ref5$canvasFactory===void 0?null:_ref5$canvasFactory,_ref5$background=_ref5.background,background=_ref5$background===void 0?null:_ref5$background,_ref5$optionalContent=_ref5.optionalContentConfigPromise,optionalContentConfigPromise=_ref5$optionalContent===void 0?null:_ref5$optionalContent,_ref5$annotationCanva=_ref5.annotationCanvasMap,annotationCanvasMap=_ref5$annotationCanva===void 0?null:_ref5$annotationCanva;if(((_arguments$=arguments[0])===null||_arguments$===void 0?void 0:_arguments$.renderInteractiveForms)!==undefined){(0,_display_utils.deprecated)(\"render no longer accepts the `renderInteractiveForms`-option, \"+\"please use the `annotationMode`-option instead.\");if(arguments[0].renderInteractiveForms===true&&annotationMode===_util.AnnotationMode.ENABLE){annotationMode=_util.AnnotationMode.ENABLE_FORMS;}}if(((_arguments$2=arguments[0])===null||_arguments$2===void 0?void 0:_arguments$2.includeAnnotationStorage)!==undefined){(0,_display_utils.deprecated)(\"render no longer accepts the `includeAnnotationStorage`-option, \"+\"please use the `annotationMode`-option instead.\");if(arguments[0].includeAnnotationStorage===true&&annotationMode===_util.AnnotationMode.ENABLE){annotationMode=_util.AnnotationMode.ENABLE_STORAGE;}}if(this._stats){this._stats.time(\"Overall\");}var intentArgs=this._transport.getRenderingIntent(intent,annotationMode);this.pendingCleanup=false;if(!optionalContentConfigPromise){optionalContentConfigPromise=this._transport.getOptionalContentConfig();}var intentState=this._intentStates.get(intentArgs.cacheKey);if(!intentState){intentState=Object.create(null);this._intentStates.set(intentArgs.cacheKey,intentState);}if(intentState.streamReaderCancelTimeout){clearTimeout(intentState.streamReaderCancelTimeout);intentState.streamReaderCancelTimeout=null;}var canvasFactoryInstance=canvasFactory||new DefaultCanvasFactory({ownerDocument:this._ownerDocument});var intentPrint=!!(intentArgs.renderingIntent&_util.RenderingIntentFlag.PRINT);if(!intentState.displayReadyCapability){intentState.displayReadyCapability=(0,_util.createPromiseCapability)();intentState.operatorList={fnArray:[],argsArray:[],lastChunk:false};if(this._stats){this._stats.time(\"Page Request\");}this._pumpOperatorList(intentArgs);}var complete=function complete(error){intentState.renderTasks[\"delete\"](internalRenderTask);if(_this8.cleanupAfterRender||intentPrint){_this8.pendingCleanup=true;}_this8._tryCleanup();if(error){internalRenderTask.capability.reject(error);_this8._abortOperatorList({intentState:intentState,reason:error instanceof Error?error:new Error(error)});}else{internalRenderTask.capability.resolve();}if(_this8._stats){_this8._stats.timeEnd(\"Rendering\");_this8._stats.timeEnd(\"Overall\");}};var internalRenderTask=new InternalRenderTask({callback:complete,params:{canvasContext:canvasContext,viewport:viewport,transform:transform,imageLayer:imageLayer,background:background},objs:this.objs,commonObjs:this.commonObjs,annotationCanvasMap:annotationCanvasMap,operatorList:intentState.operatorList,pageIndex:this._pageIndex,canvasFactory:canvasFactoryInstance,useRequestAnimationFrame:!intentPrint,pdfBug:this._pdfBug});((_intentState=intentState).renderTasks||(_intentState.renderTasks=new Set())).add(internalRenderTask);var renderTask=internalRenderTask.task;Promise.all([intentState.displayReadyCapability.promise,optionalContentConfigPromise]).then(function(_ref6){var _ref7=_slicedToArray(_ref6,2),transparency=_ref7[0],optionalContentConfig=_ref7[1];if(_this8.pendingCleanup){complete();return;}if(_this8._stats){_this8._stats.time(\"Rendering\");}internalRenderTask.initializeGraphics({transparency:transparency,optionalContentConfig:optionalContentConfig});internalRenderTask.operatorListChanged();})[\"catch\"](complete);return renderTask;}},{key:\"getOperatorList\",value:function getOperatorList(){var _ref8=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},_ref8$intent=_ref8.intent,intent=_ref8$intent===void 0?\"display\":_ref8$intent,_ref8$annotationMode=_ref8.annotationMode,annotationMode=_ref8$annotationMode===void 0?_util.AnnotationMode.ENABLE:_ref8$annotationMode;function operatorListChanged(){if(intentState.operatorList.lastChunk){intentState.opListReadCapability.resolve(intentState.operatorList);intentState.renderTasks[\"delete\"](opListTask);}}var intentArgs=this._transport.getRenderingIntent(intent,annotationMode,true);var intentState=this._intentStates.get(intentArgs.cacheKey);if(!intentState){intentState=Object.create(null);this._intentStates.set(intentArgs.cacheKey,intentState);}var opListTask;if(!intentState.opListReadCapability){var _intentState2;opListTask=Object.create(null);opListTask.operatorListChanged=operatorListChanged;intentState.opListReadCapability=(0,_util.createPromiseCapability)();((_intentState2=intentState).renderTasks||(_intentState2.renderTasks=new Set())).add(opListTask);intentState.operatorList={fnArray:[],argsArray:[],lastChunk:false};if(this._stats){this._stats.time(\"Page Request\");}this._pumpOperatorList(intentArgs);}return intentState.opListReadCapability.promise;}},{key:\"streamTextContent\",value:function streamTextContent(){var _ref9=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},_ref9$disableCombineT=_ref9.disableCombineTextItems,disableCombineTextItems=_ref9$disableCombineT===void 0?false:_ref9$disableCombineT,_ref9$includeMarkedCo=_ref9.includeMarkedContent,includeMarkedContent=_ref9$includeMarkedCo===void 0?false:_ref9$includeMarkedCo;var TEXT_CONTENT_CHUNK_SIZE=100;return this._transport.messageHandler.sendWithStream(\"GetTextContent\",{pageIndex:this._pageIndex,combineTextItems:disableCombineTextItems!==true,includeMarkedContent:includeMarkedContent===true},{highWaterMark:TEXT_CONTENT_CHUNK_SIZE,size:function size(textContent){return textContent.items.length;}});}},{key:\"getTextContent\",value:function getTextContent(){var params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};if(this._transport._htmlForXfa){return this.getXfa().then(function(xfa){return _xfa_text.XfaText.textContent(xfa);});}var readableStream=this.streamTextContent(params);return new Promise(function(resolve,reject){function pump(){reader.read().then(function(_ref10){var _textContent$items;var value=_ref10.value,done=_ref10.done;if(done){resolve(textContent);return;}Object.assign(textContent.styles,value.styles);(_textContent$items=textContent.items).push.apply(_textContent$items,_toConsumableArray(value.items));pump();},reject);}var reader=readableStream.getReader();var textContent={items:[],styles:Object.create(null)};pump();});}},{key:\"getStructTree\",value:function getStructTree(){return this._structTreePromise||(this._structTreePromise=this._transport.getStructTree(this._pageIndex));}},{key:\"_destroy\",value:function _destroy(){this.destroyed=true;var waitOn=[];var _iterator7=_createForOfIteratorHelper(this._intentStates.values()),_step7;try{for(_iterator7.s();!(_step7=_iterator7.n()).done;){var intentState=_step7.value;this._abortOperatorList({intentState:intentState,reason:new Error(\"Page was destroyed.\"),force:true});if(intentState.opListReadCapability){continue;}var _iterator8=_createForOfIteratorHelper(intentState.renderTasks),_step8;try{for(_iterator8.s();!(_step8=_iterator8.n()).done;){var internalRenderTask=_step8.value;waitOn.push(internalRenderTask.completed);internalRenderTask.cancel();}}catch(err){_iterator8.e(err);}finally{_iterator8.f();}}}catch(err){_iterator7.e(err);}finally{_iterator7.f();}this.objs.clear();this._annotationPromises.clear();this._jsActionsPromise=null;this._structTreePromise=null;this.pendingCleanup=false;return Promise.all(waitOn);}},{key:\"cleanup\",value:function cleanup(){var resetStats=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;this.pendingCleanup=true;return this._tryCleanup(resetStats);}},{key:\"_tryCleanup\",value:function _tryCleanup(){var resetStats=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(!this.pendingCleanup){return false;}var _iterator9=_createForOfIteratorHelper(this._intentStates.values()),_step9;try{for(_iterator9.s();!(_step9=_iterator9.n()).done;){var _step9$value=_step9.value,renderTasks=_step9$value.renderTasks,operatorList=_step9$value.operatorList;if(renderTasks.size>0||!operatorList.lastChunk){return false;}}}catch(err){_iterator9.e(err);}finally{_iterator9.f();}this._intentStates.clear();this.objs.clear();this._annotationPromises.clear();this._jsActionsPromise=null;this._structTreePromise=null;if(resetStats&&this._stats){this._stats=new _display_utils.StatTimer();}this.pendingCleanup=false;return true;}},{key:\"_startRenderPage\",value:function _startRenderPage(transparency,cacheKey){var intentState=this._intentStates.get(cacheKey);if(!intentState){return;}if(this._stats){this._stats.timeEnd(\"Page Request\");}if(intentState.displayReadyCapability){intentState.displayReadyCapability.resolve(transparency);}}},{key:\"_renderPageChunk\",value:function _renderPageChunk(operatorListChunk,intentState){for(var i=0,ii=operatorListChunk.length;i<ii;i++){intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);}intentState.operatorList.lastChunk=operatorListChunk.lastChunk;var _iterator10=_createForOfIteratorHelper(intentState.renderTasks),_step10;try{for(_iterator10.s();!(_step10=_iterator10.n()).done;){var internalRenderTask=_step10.value;internalRenderTask.operatorListChanged();}}catch(err){_iterator10.e(err);}finally{_iterator10.f();}if(operatorListChunk.lastChunk){this._tryCleanup();}}},{key:\"_pumpOperatorList\",value:function _pumpOperatorList(_ref11){var _this9=this;var renderingIntent=_ref11.renderingIntent,cacheKey=_ref11.cacheKey;var readableStream=this._transport.messageHandler.sendWithStream(\"GetOperatorList\",{pageIndex:this._pageIndex,intent:renderingIntent,cacheKey:cacheKey,annotationStorage:renderingIntent&_util.RenderingIntentFlag.ANNOTATIONS_STORAGE?this._transport.annotationStorage.serializable:null});var reader=readableStream.getReader();var intentState=this._intentStates.get(cacheKey);intentState.streamReader=reader;var pump=function pump(){reader.read().then(function(_ref12){var value=_ref12.value,done=_ref12.done;if(done){intentState.streamReader=null;return;}if(_this9._transport.destroyed){return;}_this9._renderPageChunk(value,intentState);pump();},function(reason){intentState.streamReader=null;if(_this9._transport.destroyed){return;}if(intentState.operatorList){intentState.operatorList.lastChunk=true;var _iterator11=_createForOfIteratorHelper(intentState.renderTasks),_step11;try{for(_iterator11.s();!(_step11=_iterator11.n()).done;){var internalRenderTask=_step11.value;internalRenderTask.operatorListChanged();}}catch(err){_iterator11.e(err);}finally{_iterator11.f();}_this9._tryCleanup();}if(intentState.displayReadyCapability){intentState.displayReadyCapability.reject(reason);}else if(intentState.opListReadCapability){intentState.opListReadCapability.reject(reason);}else{throw reason;}});};pump();}},{key:\"_abortOperatorList\",value:function _abortOperatorList(_ref13){var _this10=this;var intentState=_ref13.intentState,reason=_ref13.reason,_ref13$force=_ref13.force,force=_ref13$force===void 0?false:_ref13$force;if(!intentState.streamReader){return;}if(!force){if(intentState.renderTasks.size>0){return;}if(reason instanceof _display_utils.RenderingCancelledException){intentState.streamReaderCancelTimeout=setTimeout(function(){_this10._abortOperatorList({intentState:intentState,reason:reason,force:true});intentState.streamReaderCancelTimeout=null;},RENDERING_CANCELLED_TIMEOUT);return;}}intentState.streamReader.cancel(new _util.AbortException(reason.message))[\"catch\"](function(){});intentState.streamReader=null;if(this._transport.destroyed){return;}var _iterator12=_createForOfIteratorHelper(this._intentStates),_step12;try{for(_iterator12.s();!(_step12=_iterator12.n()).done;){var _step12$value=_slicedToArray(_step12.value,2),curCacheKey=_step12$value[0],curIntentState=_step12$value[1];if(curIntentState===intentState){this._intentStates[\"delete\"](curCacheKey);break;}}}catch(err){_iterator12.e(err);}finally{_iterator12.f();}this.cleanup();}},{key:\"stats\",get:function get(){return this._stats;}}]);return PDFPageProxy;}();exports.PDFPageProxy=PDFPageProxy;var LoopbackPort=/*#__PURE__*/function(){function LoopbackPort(){_classCallCheck(this,LoopbackPort);this._listeners=[];this._deferred=Promise.resolve();}_createClass(LoopbackPort,[{key:\"postMessage\",value:function postMessage(obj,transfers){var _this11=this;var event={data:structuredClone(obj,transfers)};this._deferred.then(function(){var _iterator13=_createForOfIteratorHelper(_this11._listeners),_step13;try{for(_iterator13.s();!(_step13=_iterator13.n()).done;){var listener=_step13.value;listener.call(_this11,event);}}catch(err){_iterator13.e(err);}finally{_iterator13.f();}});}},{key:\"addEventListener\",value:function addEventListener(name,listener){this._listeners.push(listener);}},{key:\"removeEventListener\",value:function removeEventListener(name,listener){var i=this._listeners.indexOf(listener);this._listeners.splice(i,1);}},{key:\"terminate\",value:function terminate(){this._listeners.length=0;}}]);return LoopbackPort;}();exports.LoopbackPort=LoopbackPort;var PDFWorkerUtil={isWorkerDisabled:false,fallbackWorkerSrc:null,fakeWorkerId:0};exports.PDFWorkerUtil=PDFWorkerUtil;{if(_is_node.isNodeJS&&\"function\"===\"function\"){PDFWorkerUtil.isWorkerDisabled=true;PDFWorkerUtil.fallbackWorkerSrc=\"./pdf.worker.js\";}else if((typeof document===\"undefined\"?\"undefined\":_typeof(document))===\"object\"){var _document,_document$currentScri;var pdfjsFilePath=(_document=document)===null||_document===void 0?void 0:(_document$currentScri=_document.currentScript)===null||_document$currentScri===void 0?void 0:_document$currentScri.src;if(pdfjsFilePath){PDFWorkerUtil.fallbackWorkerSrc=pdfjsFilePath.replace(/(\\.(?:min\\.)?js)(\\?.*)?$/i,\".worker$1$2\");}}PDFWorkerUtil.isSameOrigin=function(baseUrl,otherUrl){var base;try{base=new URL(baseUrl);if(!base.origin||base.origin===\"null\"){return false;}}catch(e){return false;}var other=new URL(otherUrl,base);return base.origin===other.origin;};PDFWorkerUtil.createCDNWrapper=function(url){var wrapper=\"importScripts(\\\"\".concat(url,\"\\\");\");return URL.createObjectURL(new Blob([wrapper]));};}var PDFWorker=/*#__PURE__*/function(){function PDFWorker(){var _ref14=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},_ref14$name=_ref14.name,name=_ref14$name===void 0?null:_ref14$name,_ref14$port=_ref14.port,port=_ref14$port===void 0?null:_ref14$port,_ref14$verbosity=_ref14.verbosity,verbosity=_ref14$verbosity===void 0?(0,_util.getVerbosityLevel)():_ref14$verbosity;_classCallCheck(this,PDFWorker);if(port&&_classStaticPrivateFieldSpecGet(PDFWorker,PDFWorker,_workerPorts).has(port)){throw new Error(\"Cannot use more than one PDFWorker per port.\");}this.name=name;this.destroyed=false;this.verbosity=verbosity;this._readyCapability=(0,_util.createPromiseCapability)();this._port=null;this._webWorker=null;this._messageHandler=null;if(port){_classStaticPrivateFieldSpecGet(PDFWorker,PDFWorker,_workerPorts).set(port,this);this._initializeFromPort(port);return;}this._initialize();}_createClass(PDFWorker,[{key:\"promise\",get:function get(){return this._readyCapability.promise;}},{key:\"port\",get:function get(){return this._port;}},{key:\"messageHandler\",get:function get(){return this._messageHandler;}},{key:\"_initializeFromPort\",value:function _initializeFromPort(port){this._port=port;this._messageHandler=new _message_handler.MessageHandler(\"main\",\"worker\",port);this._messageHandler.on(\"ready\",function(){});this._readyCapability.resolve();}},{key:\"_initialize\",value:function _initialize(){var _this12=this;if(typeof Worker!==\"undefined\"&&!PDFWorkerUtil.isWorkerDisabled&&!PDFWorker._mainThreadWorkerMessageHandler){var workerSrc=PDFWorker.workerSrc;try{if(!PDFWorkerUtil.isSameOrigin(window.location.href,workerSrc)){workerSrc=PDFWorkerUtil.createCDNWrapper(new URL(workerSrc,window.location).href);}var worker=new Worker(workerSrc);var messageHandler=new _message_handler.MessageHandler(\"main\",\"worker\",worker);var terminateEarly=function terminateEarly(){worker.removeEventListener(\"error\",onWorkerError);messageHandler.destroy();worker.terminate();if(_this12.destroyed){_this12._readyCapability.reject(new Error(\"Worker was destroyed\"));}else{_this12._setupFakeWorker();}};var onWorkerError=function onWorkerError(){if(!_this12._webWorker){terminateEarly();}};worker.addEventListener(\"error\",onWorkerError);messageHandler.on(\"test\",function(data){worker.removeEventListener(\"error\",onWorkerError);if(_this12.destroyed){terminateEarly();return;}if(data){_this12._messageHandler=messageHandler;_this12._port=worker;_this12._webWorker=worker;_this12._readyCapability.resolve();messageHandler.send(\"configure\",{verbosity:_this12.verbosity});}else{_this12._setupFakeWorker();messageHandler.destroy();worker.terminate();}});messageHandler.on(\"ready\",function(data){worker.removeEventListener(\"error\",onWorkerError);if(_this12.destroyed){terminateEarly();return;}try{sendTest();}catch(e){_this12._setupFakeWorker();}});var sendTest=function sendTest(){var testObj=new Uint8Array();messageHandler.send(\"test\",testObj,[testObj.buffer]);};sendTest();return;}catch(e){(0,_util.info)(\"The worker has been disabled.\");}}this._setupFakeWorker();}},{key:\"_setupFakeWorker\",value:function _setupFakeWorker(){var _this13=this;if(!PDFWorkerUtil.isWorkerDisabled){(0,_util.warn)(\"Setting up fake worker.\");PDFWorkerUtil.isWorkerDisabled=true;}PDFWorker._setupFakeWorkerGlobal.then(function(WorkerMessageHandler){if(_this13.destroyed){_this13._readyCapability.reject(new Error(\"Worker was destroyed\"));return;}var port=new LoopbackPort();_this13._port=port;var id=\"fake\".concat(PDFWorkerUtil.fakeWorkerId++);var workerHandler=new _message_handler.MessageHandler(id+\"_worker\",id,port);WorkerMessageHandler.setup(workerHandler,port);var messageHandler=new _message_handler.MessageHandler(id,id+\"_worker\",port);_this13._messageHandler=messageHandler;_this13._readyCapability.resolve();messageHandler.send(\"configure\",{verbosity:_this13.verbosity});})[\"catch\"](function(reason){_this13._readyCapability.reject(new Error(\"Setting up fake worker failed: \\\"\".concat(reason.message,\"\\\".\")));});}},{key:\"destroy\",value:function destroy(){this.destroyed=true;if(this._webWorker){this._webWorker.terminate();this._webWorker=null;}_classStaticPrivateFieldSpecGet(PDFWorker,PDFWorker,_workerPorts)[\"delete\"](this._port);this._port=null;if(this._messageHandler){this._messageHandler.destroy();this._messageHandler=null;}}}],[{key:\"fromPort\",value:function fromPort(params){if(!(params!==null&&params!==void 0&&params.port)){throw new Error(\"PDFWorker.fromPort - invalid method signature.\");}if(_classStaticPrivateFieldSpecGet(this,PDFWorker,_workerPorts).has(params.port)){return _classStaticPrivateFieldSpecGet(this,PDFWorker,_workerPorts).get(params.port);}return new PDFWorker(params);}},{key:\"workerSrc\",get:function get(){if(_worker_options.GlobalWorkerOptions.workerSrc){return _worker_options.GlobalWorkerOptions.workerSrc;}if(PDFWorkerUtil.fallbackWorkerSrc!==null){if(!_is_node.isNodeJS){(0,_display_utils.deprecated)('No \"GlobalWorkerOptions.workerSrc\" specified.');}return PDFWorkerUtil.fallbackWorkerSrc;}throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');}},{key:\"_mainThreadWorkerMessageHandler\",get:function get(){try{var _globalThis$pdfjsWork;return((_globalThis$pdfjsWork=globalThis.pdfjsWorker)===null||_globalThis$pdfjsWork===void 0?void 0:_globalThis$pdfjsWork.WorkerMessageHandler)||null;}catch(ex){return null;}}},{key:\"_setupFakeWorkerGlobal\",get:function get(){var _this14=this;var loader=/*#__PURE__*/function(){var _ref15=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee4(){var mainWorkerMessageHandler,worker;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:mainWorkerMessageHandler=_this14._mainThreadWorkerMessageHandler;if(!mainWorkerMessageHandler){_context4.next=3;break;}return _context4.abrupt(\"return\",mainWorkerMessageHandler);case 3:if(!(_is_node.isNodeJS&&\"function\"===\"function\")){_context4.next=6;break;}worker=eval(\"require\")(_this14.workerSrc);return _context4.abrupt(\"return\",worker.WorkerMessageHandler);case 6:_context4.next=8;return(0,_display_utils.loadScript)(_this14.workerSrc);case 8:return _context4.abrupt(\"return\",window.pdfjsWorker.WorkerMessageHandler);case 9:case\"end\":return _context4.stop();}}},_callee4);}));return function loader(){return _ref15.apply(this,arguments);};}();return(0,_util.shadow)(this,\"_setupFakeWorkerGlobal\",loader());}}]);return PDFWorker;}();var _workerPorts={writable:true,value:new WeakMap()};exports.PDFWorker=PDFWorker;{PDFWorker.getWorkerSrc=function(){(0,_display_utils.deprecated)(\"`PDFWorker.getWorkerSrc()`, please use `PDFWorker.workerSrc` instead.\");return this.workerSrc;};}var _docStats=/*#__PURE__*/new WeakMap();var _pageCache=/*#__PURE__*/new WeakMap();var _pagePromises=/*#__PURE__*/new WeakMap();var _metadataPromise=/*#__PURE__*/new WeakMap();var WorkerTransport=/*#__PURE__*/function(){function WorkerTransport(messageHandler,loadingTask,networkStream,params){_classCallCheck(this,WorkerTransport);_classPrivateFieldInitSpec(this,_docStats,{writable:true,value:null});_classPrivateFieldInitSpec(this,_pageCache,{writable:true,value:new Map()});_classPrivateFieldInitSpec(this,_pagePromises,{writable:true,value:new Map()});_classPrivateFieldInitSpec(this,_metadataPromise,{writable:true,value:null});this.messageHandler=messageHandler;this.loadingTask=loadingTask;this.commonObjs=new PDFObjects();this.fontLoader=new _font_loader.FontLoader({docId:loadingTask.docId,onUnsupportedFeature:this._onUnsupportedFeature.bind(this),ownerDocument:params.ownerDocument,styleElement:params.styleElement});this._params=params;if(!params.useWorkerFetch){this.CMapReaderFactory=new params.CMapReaderFactory({baseUrl:params.cMapUrl,isCompressed:params.cMapPacked});this.StandardFontDataFactory=new params.StandardFontDataFactory({baseUrl:params.standardFontDataUrl});}this.destroyed=false;this.destroyCapability=null;this._passwordCapability=null;this._networkStream=networkStream;this._fullReader=null;this._lastProgress=null;this.downloadInfoCapability=(0,_util.createPromiseCapability)();this.setupMessageHandler();}_createClass(WorkerTransport,[{key:\"annotationStorage\",get:function get(){return(0,_util.shadow)(this,\"annotationStorage\",new _annotation_storage.AnnotationStorage());}},{key:\"stats\",get:function get(){return _classPrivateFieldGet(this,_docStats);}},{key:\"getRenderingIntent\",value:function getRenderingIntent(intent){var annotationMode=arguments.length>1&&arguments[1]!==undefined?arguments[1]:_util.AnnotationMode.ENABLE;var isOpList=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var renderingIntent=_util.RenderingIntentFlag.DISPLAY;var lastModified=\"\";switch(intent){case\"any\":renderingIntent=_util.RenderingIntentFlag.ANY;break;case\"display\":break;case\"print\":renderingIntent=_util.RenderingIntentFlag.PRINT;break;default:(0,_util.warn)(\"getRenderingIntent - invalid intent: \".concat(intent));}switch(annotationMode){case _util.AnnotationMode.DISABLE:renderingIntent+=_util.RenderingIntentFlag.ANNOTATIONS_DISABLE;break;case _util.AnnotationMode.ENABLE:break;case _util.AnnotationMode.ENABLE_FORMS:renderingIntent+=_util.RenderingIntentFlag.ANNOTATIONS_FORMS;break;case _util.AnnotationMode.ENABLE_STORAGE:renderingIntent+=_util.RenderingIntentFlag.ANNOTATIONS_STORAGE;lastModified=this.annotationStorage.lastModified;break;default:(0,_util.warn)(\"getRenderingIntent - invalid annotationMode: \".concat(annotationMode));}if(isOpList){renderingIntent+=_util.RenderingIntentFlag.OPLIST;}return{renderingIntent:renderingIntent,cacheKey:\"\".concat(renderingIntent,\"_\").concat(lastModified)};}},{key:\"destroy\",value:function destroy(){var _this15=this;if(this.destroyCapability){return this.destroyCapability.promise;}this.destroyed=true;this.destroyCapability=(0,_util.createPromiseCapability)();if(this._passwordCapability){this._passwordCapability.reject(new Error(\"Worker was destroyed during onPassword callback\"));}var waitOn=[];var _iterator14=_createForOfIteratorHelper(_classPrivateFieldGet(this,_pageCache).values()),_step14;try{for(_iterator14.s();!(_step14=_iterator14.n()).done;){var page=_step14.value;waitOn.push(page._destroy());}}catch(err){_iterator14.e(err);}finally{_iterator14.f();}_classPrivateFieldGet(this,_pageCache).clear();_classPrivateFieldGet(this,_pagePromises).clear();if(this.hasOwnProperty(\"annotationStorage\")){this.annotationStorage.resetModified();}var terminated=this.messageHandler.sendWithPromise(\"Terminate\",null);waitOn.push(terminated);Promise.all(waitOn).then(function(){_this15.commonObjs.clear();_this15.fontLoader.clear();_classPrivateFieldSet(_this15,_metadataPromise,null);_this15._getFieldObjectsPromise=null;_this15._hasJSActionsPromise=null;if(_this15._networkStream){_this15._networkStream.cancelAllRequests(new _util.AbortException(\"Worker was terminated.\"));}if(_this15.messageHandler){_this15.messageHandler.destroy();_this15.messageHandler=null;}_this15.destroyCapability.resolve();},this.destroyCapability.reject);return this.destroyCapability.promise;}},{key:\"setupMessageHandler\",value:function setupMessageHandler(){var _this16=this;var messageHandler=this.messageHandler,loadingTask=this.loadingTask;messageHandler.on(\"GetReader\",function(data,sink){(0,_util.assert)(_this16._networkStream,\"GetReader - no `IPDFStream` instance available.\");_this16._fullReader=_this16._networkStream.getFullReader();_this16._fullReader.onProgress=function(evt){_this16._lastProgress={loaded:evt.loaded,total:evt.total};};sink.onPull=function(){_this16._fullReader.read().then(function(_ref16){var value=_ref16.value,done=_ref16.done;if(done){sink.close();return;}(0,_util.assert)((0,_util.isArrayBuffer)(value),\"GetReader - expected an ArrayBuffer.\");sink.enqueue(new Uint8Array(value),1,[value]);})[\"catch\"](function(reason){sink.error(reason);});};sink.onCancel=function(reason){_this16._fullReader.cancel(reason);sink.ready[\"catch\"](function(readyReason){if(_this16.destroyed){return;}throw readyReason;});};});messageHandler.on(\"ReaderHeadersReady\",function(data){var headersCapability=(0,_util.createPromiseCapability)();var fullReader=_this16._fullReader;fullReader.headersReady.then(function(){if(!fullReader.isStreamingSupported||!fullReader.isRangeSupported){if(_this16._lastProgress){var _loadingTask$onProgre;(_loadingTask$onProgre=loadingTask.onProgress)===null||_loadingTask$onProgre===void 0?void 0:_loadingTask$onProgre.call(loadingTask,_this16._lastProgress);}fullReader.onProgress=function(evt){var _loadingTask$onProgre2;(_loadingTask$onProgre2=loadingTask.onProgress)===null||_loadingTask$onProgre2===void 0?void 0:_loadingTask$onProgre2.call(loadingTask,{loaded:evt.loaded,total:evt.total});};}headersCapability.resolve({isStreamingSupported:fullReader.isStreamingSupported,isRangeSupported:fullReader.isRangeSupported,contentLength:fullReader.contentLength});},headersCapability.reject);return headersCapability.promise;});messageHandler.on(\"GetRangeReader\",function(data,sink){(0,_util.assert)(_this16._networkStream,\"GetRangeReader - no `IPDFStream` instance available.\");var rangeReader=_this16._networkStream.getRangeReader(data.begin,data.end);if(!rangeReader){sink.close();return;}sink.onPull=function(){rangeReader.read().then(function(_ref17){var value=_ref17.value,done=_ref17.done;if(done){sink.close();return;}(0,_util.assert)((0,_util.isArrayBuffer)(value),\"GetRangeReader - expected an ArrayBuffer.\");sink.enqueue(new Uint8Array(value),1,[value]);})[\"catch\"](function(reason){sink.error(reason);});};sink.onCancel=function(reason){rangeReader.cancel(reason);sink.ready[\"catch\"](function(readyReason){if(_this16.destroyed){return;}throw readyReason;});};});messageHandler.on(\"GetDoc\",function(_ref18){var pdfInfo=_ref18.pdfInfo;_this16._numPages=pdfInfo.numPages;_this16._htmlForXfa=pdfInfo.htmlForXfa;delete pdfInfo.htmlForXfa;loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo,_this16));});messageHandler.on(\"DocException\",function(ex){var reason;switch(ex.name){case\"PasswordException\":reason=new _util.PasswordException(ex.message,ex.code);break;case\"InvalidPDFException\":reason=new _util.InvalidPDFException(ex.message);break;case\"MissingPDFException\":reason=new _util.MissingPDFException(ex.message);break;case\"UnexpectedResponseException\":reason=new _util.UnexpectedResponseException(ex.message,ex.status);break;case\"UnknownErrorException\":reason=new _util.UnknownErrorException(ex.message,ex.details);break;default:(0,_util.unreachable)(\"DocException - expected a valid Error.\");}loadingTask._capability.reject(reason);});messageHandler.on(\"PasswordRequest\",function(exception){_this16._passwordCapability=(0,_util.createPromiseCapability)();if(loadingTask.onPassword){var updatePassword=function updatePassword(password){if(password instanceof Error){_this16._passwordCapability.reject(password);}else{_this16._passwordCapability.resolve({password:password});}};try{loadingTask.onPassword(updatePassword,exception.code);}catch(ex){_this16._passwordCapability.reject(ex);}}else{_this16._passwordCapability.reject(new _util.PasswordException(exception.message,exception.code));}return _this16._passwordCapability.promise;});messageHandler.on(\"DataLoaded\",function(data){var _loadingTask$onProgre3;(_loadingTask$onProgre3=loadingTask.onProgress)===null||_loadingTask$onProgre3===void 0?void 0:_loadingTask$onProgre3.call(loadingTask,{loaded:data.length,total:data.length});_this16.downloadInfoCapability.resolve(data);});messageHandler.on(\"StartRenderPage\",function(data){if(_this16.destroyed){return;}var page=_classPrivateFieldGet(_this16,_pageCache).get(data.pageIndex);page._startRenderPage(data.transparency,data.cacheKey);});messageHandler.on(\"commonobj\",function(_ref19){var _globalThis$FontInspe;var _ref20=_slicedToArray(_ref19,3),id=_ref20[0],type=_ref20[1],exportedData=_ref20[2];if(_this16.destroyed){return;}if(_this16.commonObjs.has(id)){return;}switch(type){case\"Font\":var params=_this16._params;if(\"error\"in exportedData){var exportedError=exportedData.error;(0,_util.warn)(\"Error during font loading: \".concat(exportedError));_this16.commonObjs.resolve(id,exportedError);break;}var fontRegistry=null;if(params.pdfBug&&(_globalThis$FontInspe=globalThis.FontInspector)!==null&&_globalThis$FontInspe!==void 0&&_globalThis$FontInspe.enabled){fontRegistry={registerFont:function registerFont(font,url){globalThis.FontInspector.fontAdded(font,url);}};}var font=new _font_loader.FontFaceObject(exportedData,{isEvalSupported:params.isEvalSupported,disableFontFace:params.disableFontFace,ignoreErrors:params.ignoreErrors,onUnsupportedFeature:_this16._onUnsupportedFeature.bind(_this16),fontRegistry:fontRegistry});_this16.fontLoader.bind(font)[\"catch\"](function(reason){return messageHandler.sendWithPromise(\"FontFallback\",{id:id});})[\"finally\"](function(){if(!params.fontExtraProperties&&font.data){font.data=null;}_this16.commonObjs.resolve(id,font);});break;case\"FontPath\":case\"Image\":_this16.commonObjs.resolve(id,exportedData);break;default:throw new Error(\"Got unknown common object type \".concat(type));}});messageHandler.on(\"obj\",function(_ref21){var _imageData$data;var _ref22=_slicedToArray(_ref21,4),id=_ref22[0],pageIndex=_ref22[1],type=_ref22[2],imageData=_ref22[3];if(_this16.destroyed){return;}var pageProxy=_classPrivateFieldGet(_this16,_pageCache).get(pageIndex);if(pageProxy.objs.has(id)){return;}switch(type){case\"Image\":pageProxy.objs.resolve(id,imageData);var MAX_IMAGE_SIZE_TO_STORE=8000000;if((imageData===null||imageData===void 0?void 0:(_imageData$data=imageData.data)===null||_imageData$data===void 0?void 0:_imageData$data.length)>MAX_IMAGE_SIZE_TO_STORE){pageProxy.cleanupAfterRender=true;}break;case\"Pattern\":pageProxy.objs.resolve(id,imageData);break;default:throw new Error(\"Got unknown object type \".concat(type));}});messageHandler.on(\"DocProgress\",function(data){var _loadingTask$onProgre4;if(_this16.destroyed){return;}(_loadingTask$onProgre4=loadingTask.onProgress)===null||_loadingTask$onProgre4===void 0?void 0:_loadingTask$onProgre4.call(loadingTask,{loaded:data.loaded,total:data.total});});messageHandler.on(\"DocStats\",function(data){if(_this16.destroyed){return;}_classPrivateFieldSet(_this16,_docStats,Object.freeze({streamTypes:Object.freeze(data.streamTypes),fontTypes:Object.freeze(data.fontTypes)}));});messageHandler.on(\"UnsupportedFeature\",this._onUnsupportedFeature.bind(this));messageHandler.on(\"FetchBuiltInCMap\",function(data){if(_this16.destroyed){return Promise.reject(new Error(\"Worker was destroyed.\"));}if(!_this16.CMapReaderFactory){return Promise.reject(new Error(\"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\"));}return _this16.CMapReaderFactory.fetch(data);});messageHandler.on(\"FetchStandardFontData\",function(data){if(_this16.destroyed){return Promise.reject(new Error(\"Worker was destroyed.\"));}if(!_this16.StandardFontDataFactory){return Promise.reject(new Error(\"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\"));}return _this16.StandardFontDataFactory.fetch(data);});}},{key:\"_onUnsupportedFeature\",value:function _onUnsupportedFeature(_ref23){var _this$loadingTask$onU,_this$loadingTask;var featureId=_ref23.featureId;if(this.destroyed){return;}(_this$loadingTask$onU=(_this$loadingTask=this.loadingTask).onUnsupportedFeature)===null||_this$loadingTask$onU===void 0?void 0:_this$loadingTask$onU.call(_this$loadingTask,featureId);}},{key:\"getData\",value:function getData(){return this.messageHandler.sendWithPromise(\"GetData\",null);}},{key:\"getPage\",value:function getPage(pageNumber){var _this17=this;if(!Number.isInteger(pageNumber)||pageNumber<=0||pageNumber>this._numPages){return Promise.reject(new Error(\"Invalid page request.\"));}var pageIndex=pageNumber-1,cachedPromise=_classPrivateFieldGet(this,_pagePromises).get(pageIndex);if(cachedPromise){return cachedPromise;}var promise=this.messageHandler.sendWithPromise(\"GetPage\",{pageIndex:pageIndex}).then(function(pageInfo){if(_this17.destroyed){throw new Error(\"Transport destroyed\");}var page=new PDFPageProxy(pageIndex,pageInfo,_this17,_this17._params.ownerDocument,_this17._params.pdfBug);_classPrivateFieldGet(_this17,_pageCache).set(pageIndex,page);return page;});_classPrivateFieldGet(this,_pagePromises).set(pageIndex,promise);return promise;}},{key:\"getPageIndex\",value:function getPageIndex(ref){if(_typeof(ref)!==\"object\"||ref===null||!Number.isInteger(ref.num)||ref.num<0||!Number.isInteger(ref.gen)||ref.gen<0){return Promise.reject(new Error(\"Invalid pageIndex request.\"));}return this.messageHandler.sendWithPromise(\"GetPageIndex\",{num:ref.num,gen:ref.gen});}},{key:\"getAnnotations\",value:function getAnnotations(pageIndex,intent){return this.messageHandler.sendWithPromise(\"GetAnnotations\",{pageIndex:pageIndex,intent:intent});}},{key:\"saveDocument\",value:function saveDocument(){var _this$_fullReader$fil,_this$_fullReader,_this18=this;return this.messageHandler.sendWithPromise(\"SaveDocument\",{isPureXfa:!!this._htmlForXfa,numPages:this._numPages,annotationStorage:this.annotationStorage.serializable,filename:(_this$_fullReader$fil=(_this$_fullReader=this._fullReader)===null||_this$_fullReader===void 0?void 0:_this$_fullReader.filename)!==null&&_this$_fullReader$fil!==void 0?_this$_fullReader$fil:null})[\"finally\"](function(){_this18.annotationStorage.resetModified();});}},{key:\"getFieldObjects\",value:function getFieldObjects(){return this._getFieldObjectsPromise||(this._getFieldObjectsPromise=this.messageHandler.sendWithPromise(\"GetFieldObjects\",null));}},{key:\"hasJSActions\",value:function hasJSActions(){return this._hasJSActionsPromise||(this._hasJSActionsPromise=this.messageHandler.sendWithPromise(\"HasJSActions\",null));}},{key:\"getCalculationOrderIds\",value:function getCalculationOrderIds(){return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\",null);}},{key:\"getDestinations\",value:function getDestinations(){return this.messageHandler.sendWithPromise(\"GetDestinations\",null);}},{key:\"getDestination\",value:function getDestination(id){if(typeof id!==\"string\"){return Promise.reject(new Error(\"Invalid destination request.\"));}return this.messageHandler.sendWithPromise(\"GetDestination\",{id:id});}},{key:\"getPageLabels\",value:function getPageLabels(){return this.messageHandler.sendWithPromise(\"GetPageLabels\",null);}},{key:\"getPageLayout\",value:function getPageLayout(){return this.messageHandler.sendWithPromise(\"GetPageLayout\",null);}},{key:\"getPageMode\",value:function getPageMode(){return this.messageHandler.sendWithPromise(\"GetPageMode\",null);}},{key:\"getViewerPreferences\",value:function getViewerPreferences(){return this.messageHandler.sendWithPromise(\"GetViewerPreferences\",null);}},{key:\"getOpenAction\",value:function getOpenAction(){return this.messageHandler.sendWithPromise(\"GetOpenAction\",null);}},{key:\"getAttachments\",value:function getAttachments(){return this.messageHandler.sendWithPromise(\"GetAttachments\",null);}},{key:\"getJavaScript\",value:function getJavaScript(){return this.messageHandler.sendWithPromise(\"GetJavaScript\",null);}},{key:\"getDocJSActions\",value:function getDocJSActions(){return this.messageHandler.sendWithPromise(\"GetDocJSActions\",null);}},{key:\"getPageJSActions\",value:function getPageJSActions(pageIndex){return this.messageHandler.sendWithPromise(\"GetPageJSActions\",{pageIndex:pageIndex});}},{key:\"getStructTree\",value:function getStructTree(pageIndex){return this.messageHandler.sendWithPromise(\"GetStructTree\",{pageIndex:pageIndex});}},{key:\"getOutline\",value:function getOutline(){return this.messageHandler.sendWithPromise(\"GetOutline\",null);}},{key:\"getOptionalContentConfig\",value:function getOptionalContentConfig(){return this.messageHandler.sendWithPromise(\"GetOptionalContentConfig\",null).then(function(results){return new _optional_content_config.OptionalContentConfig(results);});}},{key:\"getPermissions\",value:function getPermissions(){return this.messageHandler.sendWithPromise(\"GetPermissions\",null);}},{key:\"getMetadata\",value:function getMetadata(){var _this19=this;return _classPrivateFieldGet(this,_metadataPromise)||_classPrivateFieldSet(this,_metadataPromise,this.messageHandler.sendWithPromise(\"GetMetadata\",null).then(function(results){var _this19$_fullReader$f,_this19$_fullReader,_this19$_fullReader$c,_this19$_fullReader2;return{info:results[0],metadata:results[1]?new _metadata.Metadata(results[1]):null,contentDispositionFilename:(_this19$_fullReader$f=(_this19$_fullReader=_this19._fullReader)===null||_this19$_fullReader===void 0?void 0:_this19$_fullReader.filename)!==null&&_this19$_fullReader$f!==void 0?_this19$_fullReader$f:null,contentLength:(_this19$_fullReader$c=(_this19$_fullReader2=_this19._fullReader)===null||_this19$_fullReader2===void 0?void 0:_this19$_fullReader2.contentLength)!==null&&_this19$_fullReader$c!==void 0?_this19$_fullReader$c:null};}));}},{key:\"getMarkInfo\",value:function getMarkInfo(){return this.messageHandler.sendWithPromise(\"GetMarkInfo\",null);}},{key:\"startCleanup\",value:function(){var _startCleanup=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee5(){var keepLoadedFonts,_iterator15,_step15,page,cleanupSuccessful,_args5=arguments;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:keepLoadedFonts=_args5.length>0&&_args5[0]!==undefined?_args5[0]:false;_context5.next=3;return this.messageHandler.sendWithPromise(\"Cleanup\",null);case 3:if(!this.destroyed){_context5.next=5;break;}return _context5.abrupt(\"return\");case 5:_iterator15=_createForOfIteratorHelper(_classPrivateFieldGet(this,_pageCache).values());_context5.prev=6;_iterator15.s();case 8:if((_step15=_iterator15.n()).done){_context5.next=15;break;}page=_step15.value;cleanupSuccessful=page.cleanup();if(cleanupSuccessful){_context5.next=13;break;}throw new Error(\"startCleanup: Page \".concat(page.pageNumber,\" is currently rendering.\"));case 13:_context5.next=8;break;case 15:_context5.next=20;break;case 17:_context5.prev=17;_context5.t0=_context5[\"catch\"](6);_iterator15.e(_context5.t0);case 20:_context5.prev=20;_iterator15.f();return _context5.finish(20);case 23:this.commonObjs.clear();if(!keepLoadedFonts){this.fontLoader.clear();}_classPrivateFieldSet(this,_metadataPromise,null);this._getFieldObjectsPromise=null;this._hasJSActionsPromise=null;case 28:case\"end\":return _context5.stop();}}},_callee5,this,[[6,17,20,23]]);}));function startCleanup(){return _startCleanup.apply(this,arguments);}return startCleanup;}()},{key:\"loadingParams\",get:function get(){var params=this._params;return(0,_util.shadow)(this,\"loadingParams\",{disableAutoFetch:params.disableAutoFetch,enableXfa:params.enableXfa});}}]);return WorkerTransport;}();var _objs=/*#__PURE__*/new WeakMap();var _ensureObj=/*#__PURE__*/new WeakSet();var PDFObjects=/*#__PURE__*/function(){function PDFObjects(){_classCallCheck(this,PDFObjects);_classPrivateMethodInitSpec(this,_ensureObj);_classPrivateFieldInitSpec(this,_objs,{writable:true,value:Object.create(null)});}_createClass(PDFObjects,[{key:\"get\",value:function get(objId){var callback=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(callback){var _obj=_classPrivateMethodGet(this,_ensureObj,_ensureObj2).call(this,objId);_obj.capability.promise.then(function(){return callback(_obj.data);});return null;}var obj=_classPrivateFieldGet(this,_objs)[objId];if(!(obj!==null&&obj!==void 0&&obj.capability.settled)){throw new Error(\"Requesting object that isn't resolved yet \".concat(objId,\".\"));}return obj.data;}},{key:\"has\",value:function has(objId){var obj=_classPrivateFieldGet(this,_objs)[objId];return(obj===null||obj===void 0?void 0:obj.capability.settled)||false;}},{key:\"resolve\",value:function resolve(objId){var data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var obj=_classPrivateMethodGet(this,_ensureObj,_ensureObj2).call(this,objId);obj.data=data;obj.capability.resolve();}},{key:\"clear\",value:function clear(){_classPrivateFieldSet(this,_objs,Object.create(null));}}]);return PDFObjects;}();function _ensureObj2(objId){var obj=_classPrivateFieldGet(this,_objs)[objId];if(obj){return obj;}return _classPrivateFieldGet(this,_objs)[objId]={capability:(0,_util.createPromiseCapability)(),data:null};}var RenderTask=/*#__PURE__*/function(){function RenderTask(internalRenderTask){_classCallCheck(this,RenderTask);this._internalRenderTask=internalRenderTask;this.onContinue=null;}_createClass(RenderTask,[{key:\"promise\",get:function get(){return this._internalRenderTask.capability.promise;}},{key:\"cancel\",value:function cancel(){this._internalRenderTask.cancel();}}]);return RenderTask;}();exports.RenderTask=RenderTask;var InternalRenderTask=/*#__PURE__*/function(){function InternalRenderTask(_ref24){var callback=_ref24.callback,params=_ref24.params,objs=_ref24.objs,commonObjs=_ref24.commonObjs,annotationCanvasMap=_ref24.annotationCanvasMap,operatorList=_ref24.operatorList,pageIndex=_ref24.pageIndex,canvasFactory=_ref24.canvasFactory,_ref24$useRequestAnim=_ref24.useRequestAnimationFrame,useRequestAnimationFrame=_ref24$useRequestAnim===void 0?false:_ref24$useRequestAnim,_ref24$pdfBug=_ref24.pdfBug,pdfBug=_ref24$pdfBug===void 0?false:_ref24$pdfBug;_classCallCheck(this,InternalRenderTask);this.callback=callback;this.params=params;this.objs=objs;this.commonObjs=commonObjs;this.annotationCanvasMap=annotationCanvasMap;this.operatorListIdx=null;this.operatorList=operatorList;this._pageIndex=pageIndex;this.canvasFactory=canvasFactory;this._pdfBug=pdfBug;this.running=false;this.graphicsReadyCallback=null;this.graphicsReady=false;this._useRequestAnimationFrame=useRequestAnimationFrame===true&&typeof window!==\"undefined\";this.cancelled=false;this.capability=(0,_util.createPromiseCapability)();this.task=new RenderTask(this);this._cancelBound=this.cancel.bind(this);this._continueBound=this._continue.bind(this);this._scheduleNextBound=this._scheduleNext.bind(this);this._nextBound=this._next.bind(this);this._canvas=params.canvasContext.canvas;}_createClass(InternalRenderTask,[{key:\"completed\",get:function get(){return this.capability.promise[\"catch\"](function(){});}},{key:\"initializeGraphics\",value:function initializeGraphics(_ref25){var _globalThis$StepperMa;var _ref25$transparency=_ref25.transparency,transparency=_ref25$transparency===void 0?false:_ref25$transparency,optionalContentConfig=_ref25.optionalContentConfig;if(this.cancelled){return;}if(this._canvas){if(_classStaticPrivateFieldSpecGet(InternalRenderTask,InternalRenderTask,_canvasInUse).has(this._canvas)){throw new Error(\"Cannot use the same canvas during multiple render() operations. \"+\"Use different canvas or ensure previous operations were \"+\"cancelled or completed.\");}_classStaticPrivateFieldSpecGet(InternalRenderTask,InternalRenderTask,_canvasInUse).add(this._canvas);}if(this._pdfBug&&(_globalThis$StepperMa=globalThis.StepperManager)!==null&&_globalThis$StepperMa!==void 0&&_globalThis$StepperMa.enabled){this.stepper=globalThis.StepperManager.create(this._pageIndex);this.stepper.init(this.operatorList);this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint();}var _this$params=this.params,canvasContext=_this$params.canvasContext,viewport=_this$params.viewport,transform=_this$params.transform,imageLayer=_this$params.imageLayer,background=_this$params.background;this.gfx=new _canvas.CanvasGraphics(canvasContext,this.commonObjs,this.objs,this.canvasFactory,imageLayer,optionalContentConfig,this.annotationCanvasMap);this.gfx.beginDrawing({transform:transform,viewport:viewport,transparency:transparency,background:background});this.operatorListIdx=0;this.graphicsReady=true;if(this.graphicsReadyCallback){this.graphicsReadyCallback();}}},{key:\"cancel\",value:function cancel(){var error=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;this.running=false;this.cancelled=true;if(this.gfx){this.gfx.endDrawing();}if(this._canvas){_classStaticPrivateFieldSpecGet(InternalRenderTask,InternalRenderTask,_canvasInUse)[\"delete\"](this._canvas);}this.callback(error||new _display_utils.RenderingCancelledException(\"Rendering cancelled, page \".concat(this._pageIndex+1),\"canvas\"));}},{key:\"operatorListChanged\",value:function operatorListChanged(){if(!this.graphicsReady){if(!this.graphicsReadyCallback){this.graphicsReadyCallback=this._continueBound;}return;}if(this.stepper){this.stepper.updateOperatorList(this.operatorList);}if(this.running){return;}this._continue();}},{key:\"_continue\",value:function _continue(){this.running=true;if(this.cancelled){return;}if(this.task.onContinue){this.task.onContinue(this._scheduleNextBound);}else{this._scheduleNext();}}},{key:\"_scheduleNext\",value:function _scheduleNext(){var _this20=this;if(this._useRequestAnimationFrame){window.requestAnimationFrame(function(){_this20._nextBound()[\"catch\"](_this20._cancelBound);});}else{Promise.resolve().then(this._nextBound)[\"catch\"](this._cancelBound);}}},{key:\"_next\",value:function(){var _next2=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee6(){return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:if(!this.cancelled){_context6.next=2;break;}return _context6.abrupt(\"return\");case 2:this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper);if(this.operatorListIdx===this.operatorList.argsArray.length){this.running=false;if(this.operatorList.lastChunk){this.gfx.endDrawing();if(this._canvas){_classStaticPrivateFieldSpecGet(InternalRenderTask,InternalRenderTask,_canvasInUse)[\"delete\"](this._canvas);}this.callback();}}case 4:case\"end\":return _context6.stop();}}},_callee6,this);}));function _next(){return _next2.apply(this,arguments);}return _next;}()}]);return InternalRenderTask;}();var _canvasInUse={writable:true,value:new WeakSet()};var version='2.14.102';exports.version=version;var build='db4f3adc5';exports.build=build;/***/},/* 5 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.StatTimer=exports.RenderingCancelledException=exports.PixelsPerInch=exports.PageViewport=exports.PDFDateString=exports.DOMStandardFontDataFactory=exports.DOMSVGFactory=exports.DOMCanvasFactory=exports.DOMCMapReaderFactory=void 0;exports.deprecated=deprecated;exports.getFilenameFromUrl=getFilenameFromUrl;exports.getPdfFilenameFromUrl=getPdfFilenameFromUrl;exports.getXfaPageViewport=getXfaPageViewport;exports.isDataScheme=isDataScheme;exports.isPdfFile=isPdfFile;exports.isValidFetchUrl=isValidFetchUrl;exports.loadScript=loadScript;var _base_factory=__w_pdfjs_require__(6);var _util=__w_pdfjs_require__(1);var SVG_NS=\"http://www.w3.org/2000/svg\";var PixelsPerInch=function PixelsPerInch(){_classCallCheck(this,PixelsPerInch);};_defineProperty(PixelsPerInch,\"CSS\",96.0);_defineProperty(PixelsPerInch,\"PDF\",72.0);_defineProperty(PixelsPerInch,\"PDF_TO_CSS_UNITS\",PixelsPerInch.CSS/PixelsPerInch.PDF);exports.PixelsPerInch=PixelsPerInch;var DOMCanvasFactory=/*#__PURE__*/function(_base_factory$BaseCan){_inherits(DOMCanvasFactory,_base_factory$BaseCan);var _super8=_createSuper(DOMCanvasFactory);function DOMCanvasFactory(){var _this21;var _ref26=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},_ref26$ownerDocument=_ref26.ownerDocument,ownerDocument=_ref26$ownerDocument===void 0?globalThis.document:_ref26$ownerDocument;_classCallCheck(this,DOMCanvasFactory);_this21=_super8.call(this);_this21._document=ownerDocument;return _this21;}_createClass(DOMCanvasFactory,[{key:\"_createCanvas\",value:function _createCanvas(width,height){var canvas=this._document.createElement(\"canvas\");canvas.width=width;canvas.height=height;return canvas;}}]);return DOMCanvasFactory;}(_base_factory.BaseCanvasFactory);exports.DOMCanvasFactory=DOMCanvasFactory;function fetchData(_x5){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee8(url){var asTypedArray,response,_args8=arguments;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:asTypedArray=_args8.length>1&&_args8[1]!==undefined?_args8[1]:false;if(!isValidFetchUrl(url,document.baseURI)){_context8.next=21;break;}_context8.next=4;return fetch(url);case 4:response=_context8.sent;if(response.ok){_context8.next=7;break;}throw new Error(response.statusText);case 7:if(!asTypedArray){_context8.next=15;break;}_context8.t1=Uint8Array;_context8.next=11;return response.arrayBuffer();case 11:_context8.t2=_context8.sent;_context8.t0=new _context8.t1(_context8.t2);_context8.next=20;break;case 15:_context8.t3=(0,_util.stringToBytes);_context8.next=18;return response.text();case 18:_context8.t4=_context8.sent;_context8.t0=(0,_context8.t3)(_context8.t4);case 20:return _context8.abrupt(\"return\",_context8.t0);case 21:return _context8.abrupt(\"return\",new Promise(function(resolve,reject){var request=new XMLHttpRequest();request.open(\"GET\",url,true);if(asTypedArray){request.responseType=\"arraybuffer\";}request.onreadystatechange=function(){if(request.readyState!==XMLHttpRequest.DONE){return;}if(request.status===200||request.status===0){var data;if(asTypedArray&&request.response){data=new Uint8Array(request.response);}else if(!asTypedArray&&request.responseText){data=(0,_util.stringToBytes)(request.responseText);}if(data){resolve(data);return;}}reject(new Error(request.statusText));};request.send(null);}));case 22:case\"end\":return _context8.stop();}}},_callee8);}));return _fetchData.apply(this,arguments);}var DOMCMapReaderFactory=/*#__PURE__*/function(_base_factory$BaseCMa){_inherits(DOMCMapReaderFactory,_base_factory$BaseCMa);var _super9=_createSuper(DOMCMapReaderFactory);function DOMCMapReaderFactory(){_classCallCheck(this,DOMCMapReaderFactory);return _super9.apply(this,arguments);}_createClass(DOMCMapReaderFactory,[{key:\"_fetchData\",value:function _fetchData(url,compressionType){return fetchData(url,this.isCompressed).then(function(data){return{cMapData:data,compressionType:compressionType};});}}]);return DOMCMapReaderFactory;}(_base_factory.BaseCMapReaderFactory);exports.DOMCMapReaderFactory=DOMCMapReaderFactory;var DOMStandardFontDataFactory=/*#__PURE__*/function(_base_factory$BaseSta){_inherits(DOMStandardFontDataFactory,_base_factory$BaseSta);var _super10=_createSuper(DOMStandardFontDataFactory);function DOMStandardFontDataFactory(){_classCallCheck(this,DOMStandardFontDataFactory);return _super10.apply(this,arguments);}_createClass(DOMStandardFontDataFactory,[{key:\"_fetchData\",value:function _fetchData(url){return fetchData(url,true);}}]);return DOMStandardFontDataFactory;}(_base_factory.BaseStandardFontDataFactory);exports.DOMStandardFontDataFactory=DOMStandardFontDataFactory;var DOMSVGFactory=/*#__PURE__*/function(_base_factory$BaseSVG){_inherits(DOMSVGFactory,_base_factory$BaseSVG);var _super11=_createSuper(DOMSVGFactory);function DOMSVGFactory(){_classCallCheck(this,DOMSVGFactory);return _super11.apply(this,arguments);}_createClass(DOMSVGFactory,[{key:\"_createSVG\",value:function _createSVG(type){return document.createElementNS(SVG_NS,type);}}]);return DOMSVGFactory;}(_base_factory.BaseSVGFactory);exports.DOMSVGFactory=DOMSVGFactory;var PageViewport=/*#__PURE__*/function(){function PageViewport(_ref27){var viewBox=_ref27.viewBox,scale=_ref27.scale,rotation=_ref27.rotation,_ref27$offsetX=_ref27.offsetX,offsetX=_ref27$offsetX===void 0?0:_ref27$offsetX,_ref27$offsetY=_ref27.offsetY,offsetY=_ref27$offsetY===void 0?0:_ref27$offsetY,_ref27$dontFlip=_ref27.dontFlip,dontFlip=_ref27$dontFlip===void 0?false:_ref27$dontFlip;_classCallCheck(this,PageViewport);this.viewBox=viewBox;this.scale=scale;this.rotation=rotation;this.offsetX=offsetX;this.offsetY=offsetY;var centerX=(viewBox[2]+viewBox[0])/2;var centerY=(viewBox[3]+viewBox[1])/2;var rotateA,rotateB,rotateC,rotateD;rotation%=360;if(rotation<0){rotation+=360;}switch(rotation){case 180:rotateA=-1;rotateB=0;rotateC=0;rotateD=1;break;case 90:rotateA=0;rotateB=1;rotateC=1;rotateD=0;break;case 270:rotateA=0;rotateB=-1;rotateC=-1;rotateD=0;break;case 0:rotateA=1;rotateB=0;rotateC=0;rotateD=-1;break;default:throw new Error(\"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\");}if(dontFlip){rotateC=-rotateC;rotateD=-rotateD;}var offsetCanvasX,offsetCanvasY;var width,height;if(rotateA===0){offsetCanvasX=Math.abs(centerY-viewBox[1])*scale+offsetX;offsetCanvasY=Math.abs(centerX-viewBox[0])*scale+offsetY;width=Math.abs(viewBox[3]-viewBox[1])*scale;height=Math.abs(viewBox[2]-viewBox[0])*scale;}else{offsetCanvasX=Math.abs(centerX-viewBox[0])*scale+offsetX;offsetCanvasY=Math.abs(centerY-viewBox[1])*scale+offsetY;width=Math.abs(viewBox[2]-viewBox[0])*scale;height=Math.abs(viewBox[3]-viewBox[1])*scale;}this.transform=[rotateA*scale,rotateB*scale,rotateC*scale,rotateD*scale,offsetCanvasX-rotateA*scale*centerX-rotateC*scale*centerY,offsetCanvasY-rotateB*scale*centerX-rotateD*scale*centerY];this.width=width;this.height=height;}_createClass(PageViewport,[{key:\"clone\",value:function clone(){var _ref28=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},_ref28$scale=_ref28.scale,scale=_ref28$scale===void 0?this.scale:_ref28$scale,_ref28$rotation=_ref28.rotation,rotation=_ref28$rotation===void 0?this.rotation:_ref28$rotation,_ref28$offsetX=_ref28.offsetX,offsetX=_ref28$offsetX===void 0?this.offsetX:_ref28$offsetX,_ref28$offsetY=_ref28.offsetY,offsetY=_ref28$offsetY===void 0?this.offsetY:_ref28$offsetY,_ref28$dontFlip=_ref28.dontFlip,dontFlip=_ref28$dontFlip===void 0?false:_ref28$dontFlip;return new PageViewport({viewBox:this.viewBox.slice(),scale:scale,rotation:rotation,offsetX:offsetX,offsetY:offsetY,dontFlip:dontFlip});}},{key:\"convertToViewportPoint\",value:function convertToViewportPoint(x,y){return _util.Util.applyTransform([x,y],this.transform);}},{key:\"convertToViewportRectangle\",value:function convertToViewportRectangle(rect){var topLeft=_util.Util.applyTransform([rect[0],rect[1]],this.transform);var bottomRight=_util.Util.applyTransform([rect[2],rect[3]],this.transform);return[topLeft[0],topLeft[1],bottomRight[0],bottomRight[1]];}},{key:\"convertToPdfPoint\",value:function convertToPdfPoint(x,y){return _util.Util.applyInverseTransform([x,y],this.transform);}}]);return PageViewport;}();exports.PageViewport=PageViewport;var RenderingCancelledException=/*#__PURE__*/function(_util$BaseException){_inherits(RenderingCancelledException,_util$BaseException);var _super12=_createSuper(RenderingCancelledException);function RenderingCancelledException(msg,type){var _this22;_classCallCheck(this,RenderingCancelledException);_this22=_super12.call(this,msg,\"RenderingCancelledException\");_this22.type=type;return _this22;}return RenderingCancelledException;}(_util.BaseException);exports.RenderingCancelledException=RenderingCancelledException;function isDataScheme(url){var ii=url.length;var i=0;while(i<ii&&url[i].trim()===\"\"){i++;}return url.substring(i,i+5).toLowerCase()===\"data:\";}function isPdfFile(filename){return typeof filename===\"string\"&&/\\.pdf$/i.test(filename);}function getFilenameFromUrl(url){var anchor=url.indexOf(\"#\");var query=url.indexOf(\"?\");var end=Math.min(anchor>0?anchor:url.length,query>0?query:url.length);return url.substring(url.lastIndexOf(\"/\",end)+1,end);}function getPdfFilenameFromUrl(url){var defaultFilename=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"document.pdf\";if(typeof url!==\"string\"){return defaultFilename;}if(isDataScheme(url)){(0,_util.warn)('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');return defaultFilename;}var reURI=/^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;var reFilename=/[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;var splitURI=reURI.exec(url);var suggestedFilename=reFilename.exec(splitURI[1])||reFilename.exec(splitURI[2])||reFilename.exec(splitURI[3]);if(suggestedFilename){suggestedFilename=suggestedFilename[0];if(suggestedFilename.includes(\"%\")){try{suggestedFilename=reFilename.exec(decodeURIComponent(suggestedFilename))[0];}catch(ex){}}}return suggestedFilename||defaultFilename;}var StatTimer=/*#__PURE__*/function(){function StatTimer(){_classCallCheck(this,StatTimer);this.started=Object.create(null);this.times=[];}_createClass(StatTimer,[{key:\"time\",value:function time(name){if(name in this.started){(0,_util.warn)(\"Timer is already running for \".concat(name));}this.started[name]=Date.now();}},{key:\"timeEnd\",value:function timeEnd(name){if(!(name in this.started)){(0,_util.warn)(\"Timer has not been started for \".concat(name));}this.times.push({name:name,start:this.started[name],end:Date.now()});delete this.started[name];}},{key:\"toString\",value:function toString(){var outBuf=[];var longest=0;var _iterator16=_createForOfIteratorHelper(this.times),_step16;try{for(_iterator16.s();!(_step16=_iterator16.n()).done;){var time=_step16.value;var name=time.name;if(name.length>longest){longest=name.length;}}}catch(err){_iterator16.e(err);}finally{_iterator16.f();}var _iterator17=_createForOfIteratorHelper(this.times),_step17;try{for(_iterator17.s();!(_step17=_iterator17.n()).done;){var _time=_step17.value;var duration=_time.end-_time.start;outBuf.push(\"\".concat(_time.name.padEnd(longest),\" \").concat(duration,\"ms\\n\"));}}catch(err){_iterator17.e(err);}finally{_iterator17.f();}return outBuf.join(\"\");}}]);return StatTimer;}();exports.StatTimer=StatTimer;function isValidFetchUrl(url,baseUrl){try{var _ref29=baseUrl?new URL(url,baseUrl):new URL(url),protocol=_ref29.protocol;return protocol===\"http:\"||protocol===\"https:\";}catch(ex){return false;}}function loadScript(src){var removeScriptElement=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;return new Promise(function(resolve,reject){var script=document.createElement(\"script\");script.src=src;script.onload=function(evt){if(removeScriptElement){script.remove();}resolve(evt);};script.onerror=function(){reject(new Error(\"Cannot load script at: \".concat(script.src)));};(document.head||document.documentElement).appendChild(script);});}function deprecated(details){console.log(\"Deprecated API usage: \"+details);}var pdfDateStringRegex;var PDFDateString=/*#__PURE__*/function(){function PDFDateString(){_classCallCheck(this,PDFDateString);}_createClass(PDFDateString,null,[{key:\"toDateObject\",value:function toDateObject(input){if(!input||typeof input!==\"string\"){return null;}if(!pdfDateStringRegex){pdfDateStringRegex=new RegExp(\"^D:\"+\"(\\\\d{4})\"+\"(\\\\d{2})?\"+\"(\\\\d{2})?\"+\"(\\\\d{2})?\"+\"(\\\\d{2})?\"+\"(\\\\d{2})?\"+\"([Z|+|-])?\"+\"(\\\\d{2})?\"+\"'?\"+\"(\\\\d{2})?\"+\"'?\");}var matches=pdfDateStringRegex.exec(input);if(!matches){return null;}var year=parseInt(matches[1],10);var month=parseInt(matches[2],10);month=month>=1&&month<=12?month-1:0;var day=parseInt(matches[3],10);day=day>=1&&day<=31?day:1;var hour=parseInt(matches[4],10);hour=hour>=0&&hour<=23?hour:0;var minute=parseInt(matches[5],10);minute=minute>=0&&minute<=59?minute:0;var second=parseInt(matches[6],10);second=second>=0&&second<=59?second:0;var universalTimeRelation=matches[7]||\"Z\";var offsetHour=parseInt(matches[8],10);offsetHour=offsetHour>=0&&offsetHour<=23?offsetHour:0;var offsetMinute=parseInt(matches[9],10)||0;offsetMinute=offsetMinute>=0&&offsetMinute<=59?offsetMinute:0;if(universalTimeRelation===\"-\"){hour+=offsetHour;minute+=offsetMinute;}else if(universalTimeRelation===\"+\"){hour-=offsetHour;minute-=offsetMinute;}return new Date(Date.UTC(year,month,day,hour,minute,second));}}]);return PDFDateString;}();exports.PDFDateString=PDFDateString;function getXfaPageViewport(xfaPage,_ref30){var _ref30$scale=_ref30.scale,scale=_ref30$scale===void 0?1:_ref30$scale,_ref30$rotation=_ref30.rotation,rotation=_ref30$rotation===void 0?0:_ref30$rotation;var _xfaPage$attributes$s=xfaPage.attributes.style,width=_xfaPage$attributes$s.width,height=_xfaPage$attributes$s.height;var viewBox=[0,0,parseInt(width),parseInt(height)];return new PageViewport({viewBox:viewBox,scale:scale,rotation:rotation});}/***/},/* 6 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.BaseStandardFontDataFactory=exports.BaseSVGFactory=exports.BaseCanvasFactory=exports.BaseCMapReaderFactory=void 0;var _util=__w_pdfjs_require__(1);var BaseCanvasFactory=/*#__PURE__*/function(){function BaseCanvasFactory(){_classCallCheck(this,BaseCanvasFactory);if(this.constructor===BaseCanvasFactory){(0,_util.unreachable)(\"Cannot initialize BaseCanvasFactory.\");}}_createClass(BaseCanvasFactory,[{key:\"create\",value:function create(width,height){if(width<=0||height<=0){throw new Error(\"Invalid canvas size\");}var canvas=this._createCanvas(width,height);return{canvas:canvas,context:canvas.getContext(\"2d\")};}},{key:\"reset\",value:function reset(canvasAndContext,width,height){if(!canvasAndContext.canvas){throw new Error(\"Canvas is not specified\");}if(width<=0||height<=0){throw new Error(\"Invalid canvas size\");}canvasAndContext.canvas.width=width;canvasAndContext.canvas.height=height;}},{key:\"destroy\",value:function destroy(canvasAndContext){if(!canvasAndContext.canvas){throw new Error(\"Canvas is not specified\");}canvasAndContext.canvas.width=0;canvasAndContext.canvas.height=0;canvasAndContext.canvas=null;canvasAndContext.context=null;}},{key:\"_createCanvas\",value:function _createCanvas(width,height){(0,_util.unreachable)(\"Abstract method `_createCanvas` called.\");}}]);return BaseCanvasFactory;}();exports.BaseCanvasFactory=BaseCanvasFactory;var BaseCMapReaderFactory=/*#__PURE__*/function(){function BaseCMapReaderFactory(_ref31){var _ref31$baseUrl=_ref31.baseUrl,baseUrl=_ref31$baseUrl===void 0?null:_ref31$baseUrl,_ref31$isCompressed=_ref31.isCompressed,isCompressed=_ref31$isCompressed===void 0?false:_ref31$isCompressed;_classCallCheck(this,BaseCMapReaderFactory);if(this.constructor===BaseCMapReaderFactory){(0,_util.unreachable)(\"Cannot initialize BaseCMapReaderFactory.\");}this.baseUrl=baseUrl;this.isCompressed=isCompressed;}_createClass(BaseCMapReaderFactory,[{key:\"fetch\",value:function(){var _fetch=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee9(_ref32){var _this23=this;var name,url,compressionType;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:name=_ref32.name;if(this.baseUrl){_context9.next=3;break;}throw new Error('The CMap \"baseUrl\" parameter must be specified, ensure that '+'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.');case 3:if(name){_context9.next=5;break;}throw new Error(\"CMap name must be specified.\");case 5:url=this.baseUrl+name+(this.isCompressed?\".bcmap\":\"\");compressionType=this.isCompressed?_util.CMapCompressionType.BINARY:_util.CMapCompressionType.NONE;return _context9.abrupt(\"return\",this._fetchData(url,compressionType)[\"catch\"](function(reason){throw new Error(\"Unable to load \".concat(_this23.isCompressed?\"binary \":\"\",\"CMap at: \").concat(url));}));case 8:case\"end\":return _context9.stop();}}},_callee9,this);}));function fetch(_x6){return _fetch.apply(this,arguments);}return fetch;}()},{key:\"_fetchData\",value:function _fetchData(url,compressionType){(0,_util.unreachable)(\"Abstract method `_fetchData` called.\");}}]);return BaseCMapReaderFactory;}();exports.BaseCMapReaderFactory=BaseCMapReaderFactory;var BaseStandardFontDataFactory=/*#__PURE__*/function(){function BaseStandardFontDataFactory(_ref33){var _ref33$baseUrl=_ref33.baseUrl,baseUrl=_ref33$baseUrl===void 0?null:_ref33$baseUrl;_classCallCheck(this,BaseStandardFontDataFactory);if(this.constructor===BaseStandardFontDataFactory){(0,_util.unreachable)(\"Cannot initialize BaseStandardFontDataFactory.\");}this.baseUrl=baseUrl;}_createClass(BaseStandardFontDataFactory,[{key:\"fetch\",value:function(){var _fetch2=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee10(_ref34){var filename,url;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:filename=_ref34.filename;if(this.baseUrl){_context10.next=3;break;}throw new Error('The standard font \"baseUrl\" parameter must be specified, ensure that '+'the \"standardFontDataUrl\" API parameter is provided.');case 3:if(filename){_context10.next=5;break;}throw new Error(\"Font filename must be specified.\");case 5:url=\"\".concat(this.baseUrl).concat(filename);return _context10.abrupt(\"return\",this._fetchData(url)[\"catch\"](function(reason){throw new Error(\"Unable to load font data at: \".concat(url));}));case 7:case\"end\":return _context10.stop();}}},_callee10,this);}));function fetch(_x7){return _fetch2.apply(this,arguments);}return fetch;}()},{key:\"_fetchData\",value:function _fetchData(url){(0,_util.unreachable)(\"Abstract method `_fetchData` called.\");}}]);return BaseStandardFontDataFactory;}();exports.BaseStandardFontDataFactory=BaseStandardFontDataFactory;var BaseSVGFactory=/*#__PURE__*/function(){function BaseSVGFactory(){_classCallCheck(this,BaseSVGFactory);if(this.constructor===BaseSVGFactory){(0,_util.unreachable)(\"Cannot initialize BaseSVGFactory.\");}}_createClass(BaseSVGFactory,[{key:\"create\",value:function create(width,height){if(width<=0||height<=0){throw new Error(\"Invalid SVG dimensions\");}var svg=this._createSVG(\"svg:svg\");svg.setAttribute(\"version\",\"1.1\");svg.setAttribute(\"width\",\"\".concat(width,\"px\"));svg.setAttribute(\"height\",\"\".concat(height,\"px\"));svg.setAttribute(\"preserveAspectRatio\",\"none\");svg.setAttribute(\"viewBox\",\"0 0 \".concat(width,\" \").concat(height));return svg;}},{key:\"createElement\",value:function createElement(type){if(typeof type!==\"string\"){throw new Error(\"Invalid SVG element type\");}return this._createSVG(type);}},{key:\"_createSVG\",value:function _createSVG(type){(0,_util.unreachable)(\"Abstract method `_createSVG` called.\");}}]);return BaseSVGFactory;}();exports.BaseSVGFactory=BaseSVGFactory;/***/},/* 7 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.FontLoader=exports.FontFaceObject=void 0;var _util=__w_pdfjs_require__(1);var BaseFontLoader=/*#__PURE__*/function(){function BaseFontLoader(_ref35){var docId=_ref35.docId,onUnsupportedFeature=_ref35.onUnsupportedFeature,_ref35$ownerDocument=_ref35.ownerDocument,ownerDocument=_ref35$ownerDocument===void 0?globalThis.document:_ref35$ownerDocument,_ref35$styleElement=_ref35.styleElement,styleElement=_ref35$styleElement===void 0?null:_ref35$styleElement;_classCallCheck(this,BaseFontLoader);if(this.constructor===BaseFontLoader){(0,_util.unreachable)(\"Cannot initialize BaseFontLoader.\");}this.docId=docId;this._onUnsupportedFeature=onUnsupportedFeature;this._document=ownerDocument;this.nativeFontFaces=[];this.styleElement=null;}_createClass(BaseFontLoader,[{key:\"addNativeFontFace\",value:function addNativeFontFace(nativeFontFace){this.nativeFontFaces.push(nativeFontFace);this._document.fonts.add(nativeFontFace);}},{key:\"insertRule\",value:function insertRule(rule){var styleElement=this.styleElement;if(!styleElement){styleElement=this.styleElement=this._document.createElement(\"style\");styleElement.id=\"PDFJS_FONT_STYLE_TAG_\".concat(this.docId);this._document.documentElement.getElementsByTagName(\"head\")[0].appendChild(styleElement);}var styleSheet=styleElement.sheet;styleSheet.insertRule(rule,styleSheet.cssRules.length);}},{key:\"clear\",value:function clear(){var _iterator18=_createForOfIteratorHelper(this.nativeFontFaces),_step18;try{for(_iterator18.s();!(_step18=_iterator18.n()).done;){var nativeFontFace=_step18.value;this._document.fonts[\"delete\"](nativeFontFace);}}catch(err){_iterator18.e(err);}finally{_iterator18.f();}this.nativeFontFaces.length=0;if(this.styleElement){this.styleElement.remove();this.styleElement=null;}}},{key:\"bind\",value:function(){var _bind=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee11(font){var _this24=this;var nativeFontFace,rule;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee11$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:if(!(font.attached||font.missingFile)){_context11.next=2;break;}return _context11.abrupt(\"return\");case 2:font.attached=true;if(!this.isFontLoadingAPISupported){_context11.next=19;break;}nativeFontFace=font.createNativeFontFace();if(!nativeFontFace){_context11.next=18;break;}this.addNativeFontFace(nativeFontFace);_context11.prev=7;_context11.next=10;return nativeFontFace.loaded;case 10:_context11.next=18;break;case 12:_context11.prev=12;_context11.t0=_context11[\"catch\"](7);this._onUnsupportedFeature({featureId:_util.UNSUPPORTED_FEATURES.errorFontLoadNative});(0,_util.warn)(\"Failed to load font '\".concat(nativeFontFace.family,\"': '\").concat(_context11.t0,\"'.\"));font.disableFontFace=true;throw _context11.t0;case 18:return _context11.abrupt(\"return\");case 19:rule=font.createFontFaceRule();if(!rule){_context11.next=26;break;}this.insertRule(rule);if(!this.isSyncFontLoadingSupported){_context11.next=24;break;}return _context11.abrupt(\"return\");case 24:_context11.next=26;return new Promise(function(resolve){var request=_this24._queueLoadingCallback(resolve);_this24._prepareFontLoadEvent([rule],[font],request);});case 26:case\"end\":return _context11.stop();}}},_callee11,this,[[7,12]]);}));function bind(_x8){return _bind.apply(this,arguments);}return bind;}()},{key:\"_queueLoadingCallback\",value:function _queueLoadingCallback(callback){(0,_util.unreachable)(\"Abstract method `_queueLoadingCallback`.\");}},{key:\"isFontLoadingAPISupported\",get:function get(){var _this$_document;var hasFonts=!!((_this$_document=this._document)!==null&&_this$_document!==void 0&&_this$_document.fonts);return(0,_util.shadow)(this,\"isFontLoadingAPISupported\",hasFonts);}},{key:\"isSyncFontLoadingSupported\",get:function get(){(0,_util.unreachable)(\"Abstract method `isSyncFontLoadingSupported`.\");}},{key:\"_loadTestFont\",get:function get(){(0,_util.unreachable)(\"Abstract method `_loadTestFont`.\");}},{key:\"_prepareFontLoadEvent\",value:function _prepareFontLoadEvent(rules,fontsToLoad,request){(0,_util.unreachable)(\"Abstract method `_prepareFontLoadEvent`.\");}}]);return BaseFontLoader;}();var FontLoader;exports.FontLoader=FontLoader;{exports.FontLoader=FontLoader=/*#__PURE__*/function(_BaseFontLoader){_inherits(GenericFontLoader,_BaseFontLoader);var _super13=_createSuper(GenericFontLoader);function GenericFontLoader(params){var _this25;_classCallCheck(this,GenericFontLoader);_this25=_super13.call(this,params);_this25.loadingContext={requests:[],nextRequestId:0};_this25.loadTestFontId=0;return _this25;}_createClass(GenericFontLoader,[{key:\"isSyncFontLoadingSupported\",get:function get(){var supported=false;if(typeof navigator===\"undefined\"){supported=true;}else{var m=/Mozilla\\/5.0.*?rv:(\\d+).*? Gecko/.exec(navigator.userAgent);if((m===null||m===void 0?void 0:m[1])>=14){supported=true;}}return(0,_util.shadow)(this,\"isSyncFontLoadingSupported\",supported);}},{key:\"_queueLoadingCallback\",value:function _queueLoadingCallback(callback){function completeRequest(){(0,_util.assert)(!request.done,\"completeRequest() cannot be called twice.\");request.done=true;while(context.requests.length>0&&context.requests[0].done){var otherRequest=context.requests.shift();setTimeout(otherRequest.callback,0);}}var context=this.loadingContext;var request={id:\"pdfjs-font-loading-\".concat(context.nextRequestId++),done:false,complete:completeRequest,callback:callback};context.requests.push(request);return request;}},{key:\"_loadTestFont\",get:function get(){var getLoadTestFont=function getLoadTestFont(){return atob(\"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\"+\"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\"+\"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\"+\"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\"+\"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\"+\"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\"+\"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\"+\"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\"+\"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\"+\"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\"+\"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\"+\"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\"+\"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"+\"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"+\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"+\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"+\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"+\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\"+\"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\"+\"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\"+\"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\"+\"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\");};return(0,_util.shadow)(this,\"_loadTestFont\",getLoadTestFont());}},{key:\"_prepareFontLoadEvent\",value:function _prepareFontLoadEvent(rules,fonts,request){function int32(data,offset){return data.charCodeAt(offset)<<24|data.charCodeAt(offset+1)<<16|data.charCodeAt(offset+2)<<8|data.charCodeAt(offset+3)&0xff;}function spliceString(s,offset,remove,insert){var chunk1=s.substring(0,offset);var chunk2=s.substring(offset+remove);return chunk1+insert+chunk2;}var i,ii;var canvas=this._document.createElement(\"canvas\");canvas.width=1;canvas.height=1;var ctx=canvas.getContext(\"2d\");var called=0;function isFontReady(name,callback){called++;if(called>30){(0,_util.warn)(\"Load test font never loaded.\");callback();return;}ctx.font=\"30px \"+name;ctx.fillText(\".\",0,20);var imageData=ctx.getImageData(0,0,1,1);if(imageData.data[3]>0){callback();return;}setTimeout(isFontReady.bind(null,name,callback));}var loadTestFontId=\"lt\".concat(Date.now()).concat(this.loadTestFontId++);var data=this._loadTestFont;var COMMENT_OFFSET=976;data=spliceString(data,COMMENT_OFFSET,loadTestFontId.length,loadTestFontId);var CFF_CHECKSUM_OFFSET=16;var XXXX_VALUE=0x58585858;var checksum=int32(data,CFF_CHECKSUM_OFFSET);for(i=0,ii=loadTestFontId.length-3;i<ii;i+=4){checksum=checksum-XXXX_VALUE+int32(loadTestFontId,i)|0;}if(i<loadTestFontId.length){checksum=checksum-XXXX_VALUE+int32(loadTestFontId+\"XXX\",i)|0;}data=spliceString(data,CFF_CHECKSUM_OFFSET,4,(0,_util.string32)(checksum));var url=\"url(data:font/opentype;base64,\".concat(btoa(data),\");\");var rule=\"@font-face {font-family:\\\"\".concat(loadTestFontId,\"\\\";src:\").concat(url,\"}\");this.insertRule(rule);var names=[];var _iterator19=_createForOfIteratorHelper(fonts),_step19;try{for(_iterator19.s();!(_step19=_iterator19.n()).done;){var font=_step19.value;names.push(font.loadedName);}}catch(err){_iterator19.e(err);}finally{_iterator19.f();}names.push(loadTestFontId);var div=this._document.createElement(\"div\");div.style.visibility=\"hidden\";div.style.width=div.style.height=\"10px\";div.style.position=\"absolute\";div.style.top=div.style.left=\"0px\";for(var _i2=0,_names=names;_i2<_names.length;_i2++){var name=_names[_i2];var span=this._document.createElement(\"span\");span.textContent=\"Hi\";span.style.fontFamily=name;div.appendChild(span);}this._document.body.appendChild(div);isFontReady(loadTestFontId,function(){div.remove();request.complete();});}}]);return GenericFontLoader;}(BaseFontLoader);}var FontFaceObject=/*#__PURE__*/function(){function FontFaceObject(translatedData,_ref36){var _ref36$isEvalSupporte=_ref36.isEvalSupported,isEvalSupported=_ref36$isEvalSupporte===void 0?true:_ref36$isEvalSupporte,_ref36$disableFontFac=_ref36.disableFontFace,disableFontFace=_ref36$disableFontFac===void 0?false:_ref36$disableFontFac,_ref36$ignoreErrors=_ref36.ignoreErrors,ignoreErrors=_ref36$ignoreErrors===void 0?false:_ref36$ignoreErrors,onUnsupportedFeature=_ref36.onUnsupportedFeature,_ref36$fontRegistry=_ref36.fontRegistry,fontRegistry=_ref36$fontRegistry===void 0?null:_ref36$fontRegistry;_classCallCheck(this,FontFaceObject);this.compiledGlyphs=Object.create(null);for(var i in translatedData){this[i]=translatedData[i];}this.isEvalSupported=isEvalSupported!==false;this.disableFontFace=disableFontFace===true;this.ignoreErrors=ignoreErrors===true;this._onUnsupportedFeature=onUnsupportedFeature;this.fontRegistry=fontRegistry;}_createClass(FontFaceObject,[{key:\"createNativeFontFace\",value:function createNativeFontFace(){if(!this.data||this.disableFontFace){return null;}var nativeFontFace;if(!this.cssFontInfo){nativeFontFace=new FontFace(this.loadedName,this.data,{});}else{var css={weight:this.cssFontInfo.fontWeight};if(this.cssFontInfo.italicAngle){css.style=\"oblique \".concat(this.cssFontInfo.italicAngle,\"deg\");}nativeFontFace=new FontFace(this.cssFontInfo.fontFamily,this.data,css);}if(this.fontRegistry){this.fontRegistry.registerFont(this);}return nativeFontFace;}},{key:\"createFontFaceRule\",value:function createFontFaceRule(){if(!this.data||this.disableFontFace){return null;}var data=(0,_util.bytesToString)(this.data);var url=\"url(data:\".concat(this.mimetype,\";base64,\").concat(btoa(data),\");\");var rule;if(!this.cssFontInfo){rule=\"@font-face {font-family:\\\"\".concat(this.loadedName,\"\\\";src:\").concat(url,\"}\");}else{var css=\"font-weight: \".concat(this.cssFontInfo.fontWeight,\";\");if(this.cssFontInfo.italicAngle){css+=\"font-style: oblique \".concat(this.cssFontInfo.italicAngle,\"deg;\");}rule=\"@font-face {font-family:\\\"\".concat(this.cssFontInfo.fontFamily,\"\\\";\").concat(css,\"src:\").concat(url,\"}\");}if(this.fontRegistry){this.fontRegistry.registerFont(this,url);}return rule;}},{key:\"getPathGenerator\",value:function getPathGenerator(objs,character){if(this.compiledGlyphs[character]!==undefined){return this.compiledGlyphs[character];}var cmds;try{cmds=objs.get(this.loadedName+\"_path_\"+character);}catch(ex){if(!this.ignoreErrors){throw ex;}this._onUnsupportedFeature({featureId:_util.UNSUPPORTED_FEATURES.errorFontGetPath});(0,_util.warn)(\"getPathGenerator - ignoring character: \\\"\".concat(ex,\"\\\".\"));return this.compiledGlyphs[character]=function(c,size){};}if(this.isEvalSupported&&_util.IsEvalSupportedCached.value){var jsBuf=[];var _iterator20=_createForOfIteratorHelper(cmds),_step20;try{for(_iterator20.s();!(_step20=_iterator20.n()).done;){var current=_step20.value;var args=current.args!==undefined?current.args.join(\",\"):\"\";jsBuf.push(\"c.\",current.cmd,\"(\",args,\");\\n\");}}catch(err){_iterator20.e(err);}finally{_iterator20.f();}return this.compiledGlyphs[character]=new Function(\"c\",\"size\",jsBuf.join(\"\"));}return this.compiledGlyphs[character]=function(c,size){var _iterator21=_createForOfIteratorHelper(cmds),_step21;try{for(_iterator21.s();!(_step21=_iterator21.n()).done;){var _current=_step21.value;if(_current.cmd===\"scale\"){_current.args=[size,-size];}c[_current.cmd].apply(c,_current.args);}}catch(err){_iterator21.e(err);}finally{_iterator21.f();}};}}]);return FontFaceObject;}();exports.FontFaceObject=FontFaceObject;/***/},/* 8 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.NodeStandardFontDataFactory=exports.NodeCanvasFactory=exports.NodeCMapReaderFactory=void 0;var _base_factory=__w_pdfjs_require__(6);var _is_node=__w_pdfjs_require__(3);var _util=__w_pdfjs_require__(1);var NodeCanvasFactory=function NodeCanvasFactory(){_classCallCheck(this,NodeCanvasFactory);(0,_util.unreachable)(\"Not implemented: NodeCanvasFactory\");};exports.NodeCanvasFactory=NodeCanvasFactory;var NodeCMapReaderFactory=function NodeCMapReaderFactory(){_classCallCheck(this,NodeCMapReaderFactory);(0,_util.unreachable)(\"Not implemented: NodeCMapReaderFactory\");};exports.NodeCMapReaderFactory=NodeCMapReaderFactory;var NodeStandardFontDataFactory=function NodeStandardFontDataFactory(){_classCallCheck(this,NodeStandardFontDataFactory);(0,_util.unreachable)(\"Not implemented: NodeStandardFontDataFactory\");};exports.NodeStandardFontDataFactory=NodeStandardFontDataFactory;if(_is_node.isNodeJS){var fetchData=function fetchData(url){return new Promise(function(resolve,reject){var fs=__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'fs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));fs.readFile(url,function(error,data){if(error||!data){reject(new Error(error));return;}resolve(new Uint8Array(data));});});};exports.NodeCanvasFactory=NodeCanvasFactory=/*#__PURE__*/function(_base_factory$BaseCan2){_inherits(NodeCanvasFactory,_base_factory$BaseCan2);var _super14=_createSuper(NodeCanvasFactory);function NodeCanvasFactory(){_classCallCheck(this,NodeCanvasFactory);return _super14.apply(this,arguments);}_createClass(NodeCanvasFactory,[{key:\"_createCanvas\",value:function _createCanvas(width,height){var Canvas=__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'canvas'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));return Canvas.createCanvas(width,height);}}]);return NodeCanvasFactory;}(_base_factory.BaseCanvasFactory);exports.NodeCMapReaderFactory=NodeCMapReaderFactory=/*#__PURE__*/function(_base_factory$BaseCMa2){_inherits(NodeCMapReaderFactory,_base_factory$BaseCMa2);var _super15=_createSuper(NodeCMapReaderFactory);function NodeCMapReaderFactory(){_classCallCheck(this,NodeCMapReaderFactory);return _super15.apply(this,arguments);}_createClass(NodeCMapReaderFactory,[{key:\"_fetchData\",value:function _fetchData(url,compressionType){return fetchData(url).then(function(data){return{cMapData:data,compressionType:compressionType};});}}]);return NodeCMapReaderFactory;}(_base_factory.BaseCMapReaderFactory);exports.NodeStandardFontDataFactory=NodeStandardFontDataFactory=/*#__PURE__*/function(_base_factory$BaseSta2){_inherits(NodeStandardFontDataFactory,_base_factory$BaseSta2);var _super16=_createSuper(NodeStandardFontDataFactory);function NodeStandardFontDataFactory(){_classCallCheck(this,NodeStandardFontDataFactory);return _super16.apply(this,arguments);}_createClass(NodeStandardFontDataFactory,[{key:\"_fetchData\",value:function _fetchData(url){return fetchData(url);}}]);return NodeStandardFontDataFactory;}(_base_factory.BaseStandardFontDataFactory);}/***/},/* 9 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.AnnotationStorage=void 0;var _util=__w_pdfjs_require__(1);var AnnotationStorage=/*#__PURE__*/function(){function AnnotationStorage(){_classCallCheck(this,AnnotationStorage);this._storage=new Map();this._timeStamp=Date.now();this._modified=false;this.onSetModified=null;this.onResetModified=null;}_createClass(AnnotationStorage,[{key:\"getValue\",value:function getValue(key,defaultValue){var value=this._storage.get(key);if(value===undefined){return defaultValue;}return Object.assign(defaultValue,value);}},{key:\"setValue\",value:function setValue(key,value){var obj=this._storage.get(key);var modified=false;if(obj!==undefined){for(var _i3=0,_Object$entries=Object.entries(value);_i3<_Object$entries.length;_i3++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i3],2),entry=_Object$entries$_i[0],val=_Object$entries$_i[1];if(obj[entry]!==val){modified=true;obj[entry]=val;}}}else{modified=true;this._storage.set(key,value);}if(modified){this._timeStamp=Date.now();this._setModified();}}},{key:\"getAll\",value:function getAll(){return this._storage.size>0?(0,_util.objectFromMap)(this._storage):null;}},{key:\"size\",get:function get(){return this._storage.size;}},{key:\"_setModified\",value:function _setModified(){if(!this._modified){this._modified=true;if(typeof this.onSetModified===\"function\"){this.onSetModified();}}}},{key:\"resetModified\",value:function resetModified(){if(this._modified){this._modified=false;if(typeof this.onResetModified===\"function\"){this.onResetModified();}}}},{key:\"serializable\",get:function get(){return this._storage.size>0?this._storage:null;}},{key:\"lastModified\",get:function get(){return this._timeStamp.toString();}}]);return AnnotationStorage;}();exports.AnnotationStorage=AnnotationStorage;/***/},/* 10 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.CanvasGraphics=void 0;var _util=__w_pdfjs_require__(1);var _pattern_helper=__w_pdfjs_require__(11);var _display_utils=__w_pdfjs_require__(5);var MIN_FONT_SIZE=16;var MAX_FONT_SIZE=100;var MAX_GROUP_SIZE=4096;var EXECUTION_TIME=15;var EXECUTION_STEPS=10;var COMPILE_TYPE3_GLYPHS=true;var MAX_SIZE_TO_COMPILE=1000;var FULL_CHUNK_HEIGHT=16;var LINEWIDTH_SCALE_FACTOR=1.000001;function mirrorContextOperations(ctx,destCtx){if(ctx._removeMirroring){throw new Error(\"Context is already forwarding operations.\");}ctx.__originalSave=ctx.save;ctx.__originalRestore=ctx.restore;ctx.__originalRotate=ctx.rotate;ctx.__originalScale=ctx.scale;ctx.__originalTranslate=ctx.translate;ctx.__originalTransform=ctx.transform;ctx.__originalSetTransform=ctx.setTransform;ctx.__originalResetTransform=ctx.resetTransform;ctx.__originalClip=ctx.clip;ctx.__originalMoveTo=ctx.moveTo;ctx.__originalLineTo=ctx.lineTo;ctx.__originalBezierCurveTo=ctx.bezierCurveTo;ctx.__originalRect=ctx.rect;ctx.__originalClosePath=ctx.closePath;ctx.__originalBeginPath=ctx.beginPath;ctx._removeMirroring=function(){ctx.save=ctx.__originalSave;ctx.restore=ctx.__originalRestore;ctx.rotate=ctx.__originalRotate;ctx.scale=ctx.__originalScale;ctx.translate=ctx.__originalTranslate;ctx.transform=ctx.__originalTransform;ctx.setTransform=ctx.__originalSetTransform;ctx.resetTransform=ctx.__originalResetTransform;ctx.clip=ctx.__originalClip;ctx.moveTo=ctx.__originalMoveTo;ctx.lineTo=ctx.__originalLineTo;ctx.bezierCurveTo=ctx.__originalBezierCurveTo;ctx.rect=ctx.__originalRect;ctx.closePath=ctx.__originalClosePath;ctx.beginPath=ctx.__originalBeginPath;delete ctx._removeMirroring;};ctx.save=function ctxSave(){destCtx.save();this.__originalSave();};ctx.restore=function ctxRestore(){destCtx.restore();this.__originalRestore();};ctx.translate=function ctxTranslate(x,y){destCtx.translate(x,y);this.__originalTranslate(x,y);};ctx.scale=function ctxScale(x,y){destCtx.scale(x,y);this.__originalScale(x,y);};ctx.transform=function ctxTransform(a,b,c,d,e,f){destCtx.transform(a,b,c,d,e,f);this.__originalTransform(a,b,c,d,e,f);};ctx.setTransform=function ctxSetTransform(a,b,c,d,e,f){destCtx.setTransform(a,b,c,d,e,f);this.__originalSetTransform(a,b,c,d,e,f);};ctx.resetTransform=function ctxResetTransform(){destCtx.resetTransform();this.__originalResetTransform();};ctx.rotate=function ctxRotate(angle){destCtx.rotate(angle);this.__originalRotate(angle);};ctx.clip=function ctxRotate(rule){destCtx.clip(rule);this.__originalClip(rule);};ctx.moveTo=function(x,y){destCtx.moveTo(x,y);this.__originalMoveTo(x,y);};ctx.lineTo=function(x,y){destCtx.lineTo(x,y);this.__originalLineTo(x,y);};ctx.bezierCurveTo=function(cp1x,cp1y,cp2x,cp2y,x,y){destCtx.bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y);this.__originalBezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y);};ctx.rect=function(x,y,width,height){destCtx.rect(x,y,width,height);this.__originalRect(x,y,width,height);};ctx.closePath=function(){destCtx.closePath();this.__originalClosePath();};ctx.beginPath=function(){destCtx.beginPath();this.__originalBeginPath();};}function addContextCurrentTransform(ctx){if(ctx._transformStack){ctx._transformStack=[];}if(ctx.mozCurrentTransform){return;}ctx._originalSave=ctx.save;ctx._originalRestore=ctx.restore;ctx._originalRotate=ctx.rotate;ctx._originalScale=ctx.scale;ctx._originalTranslate=ctx.translate;ctx._originalTransform=ctx.transform;ctx._originalSetTransform=ctx.setTransform;ctx._originalResetTransform=ctx.resetTransform;ctx._transformMatrix=ctx._transformMatrix||[1,0,0,1,0,0];ctx._transformStack=[];try{var desc=Object.getOwnPropertyDescriptor(Object.getPrototypeOf(ctx),\"lineWidth\");ctx._setLineWidth=desc.set;ctx._getLineWidth=desc.get;Object.defineProperty(ctx,\"lineWidth\",{set:function setLineWidth(width){this._setLineWidth(width*LINEWIDTH_SCALE_FACTOR);},get:function getLineWidth(){return this._getLineWidth();}});}catch(_){}Object.defineProperty(ctx,\"mozCurrentTransform\",{get:function getCurrentTransform(){return this._transformMatrix;}});Object.defineProperty(ctx,\"mozCurrentTransformInverse\",{get:function getCurrentTransformInverse(){var _this$_transformMatri=_slicedToArray(this._transformMatrix,6),a=_this$_transformMatri[0],b=_this$_transformMatri[1],c=_this$_transformMatri[2],d=_this$_transformMatri[3],e=_this$_transformMatri[4],f=_this$_transformMatri[5];var ad_bc=a*d-b*c;var bc_ad=b*c-a*d;return[d/ad_bc,b/bc_ad,c/bc_ad,a/ad_bc,(d*e-c*f)/bc_ad,(b*e-a*f)/ad_bc];}});ctx.save=function ctxSave(){var old=this._transformMatrix;this._transformStack.push(old);this._transformMatrix=old.slice(0,6);this._originalSave();};ctx.restore=function ctxRestore(){if(this._transformStack.length===0){(0,_util.warn)(\"Tried to restore a ctx when the stack was already empty.\");}var prev=this._transformStack.pop();if(prev){this._transformMatrix=prev;this._originalRestore();}};ctx.translate=function ctxTranslate(x,y){var m=this._transformMatrix;m[4]=m[0]*x+m[2]*y+m[4];m[5]=m[1]*x+m[3]*y+m[5];this._originalTranslate(x,y);};ctx.scale=function ctxScale(x,y){var m=this._transformMatrix;m[0]*=x;m[1]*=x;m[2]*=y;m[3]*=y;this._originalScale(x,y);};ctx.transform=function ctxTransform(a,b,c,d,e,f){var m=this._transformMatrix;this._transformMatrix=[m[0]*a+m[2]*b,m[1]*a+m[3]*b,m[0]*c+m[2]*d,m[1]*c+m[3]*d,m[0]*e+m[2]*f+m[4],m[1]*e+m[3]*f+m[5]];ctx._originalTransform(a,b,c,d,e,f);};ctx.setTransform=function ctxSetTransform(a,b,c,d,e,f){this._transformMatrix=[a,b,c,d,e,f];ctx._originalSetTransform(a,b,c,d,e,f);};ctx.resetTransform=function ctxResetTransform(){this._transformMatrix=[1,0,0,1,0,0];ctx._originalResetTransform();};ctx.rotate=function ctxRotate(angle){var cosValue=Math.cos(angle);var sinValue=Math.sin(angle);var m=this._transformMatrix;this._transformMatrix=[m[0]*cosValue+m[2]*sinValue,m[1]*cosValue+m[3]*sinValue,m[0]*-sinValue+m[2]*cosValue,m[1]*-sinValue+m[3]*cosValue,m[4],m[5]];this._originalRotate(angle);};}var CachedCanvases=/*#__PURE__*/function(){function CachedCanvases(canvasFactory){_classCallCheck(this,CachedCanvases);this.canvasFactory=canvasFactory;this.cache=Object.create(null);}_createClass(CachedCanvases,[{key:\"getCanvas\",value:function getCanvas(id,width,height,trackTransform){var canvasEntry;if(this.cache[id]!==undefined){canvasEntry=this.cache[id];this.canvasFactory.reset(canvasEntry,width,height);canvasEntry.context.setTransform(1,0,0,1,0,0);}else{canvasEntry=this.canvasFactory.create(width,height);this.cache[id]=canvasEntry;}if(trackTransform){addContextCurrentTransform(canvasEntry.context);}return canvasEntry;}},{key:\"clear\",value:function clear(){for(var id in this.cache){var canvasEntry=this.cache[id];this.canvasFactory.destroy(canvasEntry);delete this.cache[id];}}}]);return CachedCanvases;}();function compileType3Glyph(imgData){var POINT_TO_PROCESS_LIMIT=1000;var POINT_TYPES=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]);var width=imgData.width,height=imgData.height,width1=width+1;var i,ii,j,j0;var points=new Uint8Array(width1*(height+1));var lineSize=width+7&~7,data0=imgData.data;var data=new Uint8Array(lineSize*height);var pos=0;for(i=0,ii=data0.length;i<ii;i++){var elem=data0[i];var mask=128;while(mask>0){data[pos++]=elem&mask?0:255;mask>>=1;}}var count=0;pos=0;if(data[pos]!==0){points[0]=1;++count;}for(j=1;j<width;j++){if(data[pos]!==data[pos+1]){points[j]=data[pos]?2:1;++count;}pos++;}if(data[pos]!==0){points[j]=2;++count;}for(i=1;i<height;i++){pos=i*lineSize;j0=i*width1;if(data[pos-lineSize]!==data[pos]){points[j0]=data[pos]?1:8;++count;}var sum=(data[pos]?4:0)+(data[pos-lineSize]?8:0);for(j=1;j<width;j++){sum=(sum>>2)+(data[pos+1]?4:0)+(data[pos-lineSize+1]?8:0);if(POINT_TYPES[sum]){points[j0+j]=POINT_TYPES[sum];++count;}pos++;}if(data[pos-lineSize]!==data[pos]){points[j0+j]=data[pos]?2:4;++count;}if(count>POINT_TO_PROCESS_LIMIT){return null;}}pos=lineSize*(height-1);j0=i*width1;if(data[pos]!==0){points[j0]=8;++count;}for(j=1;j<width;j++){if(data[pos]!==data[pos+1]){points[j0+j]=data[pos]?4:8;++count;}pos++;}if(data[pos]!==0){points[j0+j]=4;++count;}if(count>POINT_TO_PROCESS_LIMIT){return null;}var steps=new Int32Array([0,width1,-1,0,-width1,0,0,0,1]);var outlines=[];for(i=0;count&&i<=height;i++){var p=i*width1;var end=p+width;while(p<end&&!points[p]){p++;}if(p===end){continue;}var coords=[p%width1,i];var p0=p;var type=points[p];do{var step=steps[type];do{p+=step;}while(!points[p]);var pp=points[p];if(pp!==5&&pp!==10){type=pp;points[p]=0;}else{type=pp&0x33*type>>4;points[p]&=type>>2|type<<2;}coords.push(p%width1,p/width1|0);if(!points[p]){--count;}}while(p0!==p);outlines.push(coords);--i;}var drawOutline=function drawOutline(c){c.save();c.scale(1/width,-1/height);c.translate(0,-height);c.beginPath();for(var k=0,kk=outlines.length;k<kk;k++){var o=outlines[k];c.moveTo(o[0],o[1]);for(var l=2,ll=o.length;l<ll;l+=2){c.lineTo(o[l],o[l+1]);}}c.fill();c.beginPath();c.restore();};return drawOutline;}var CanvasExtraState=/*#__PURE__*/function(){function CanvasExtraState(width,height){_classCallCheck(this,CanvasExtraState);this.alphaIsShape=false;this.fontSize=0;this.fontSizeScale=1;this.textMatrix=_util.IDENTITY_MATRIX;this.textMatrixScale=1;this.fontMatrix=_util.FONT_IDENTITY_MATRIX;this.leading=0;this.x=0;this.y=0;this.lineX=0;this.lineY=0;this.charSpacing=0;this.wordSpacing=0;this.textHScale=1;this.textRenderingMode=_util.TextRenderingMode.FILL;this.textRise=0;this.fillColor=\"#000000\";this.strokeColor=\"#000000\";this.patternFill=false;this.fillAlpha=1;this.strokeAlpha=1;this.lineWidth=1;this.activeSMask=null;this.transferMaps=null;this.startNewPathAndClipBox([0,0,width,height]);}_createClass(CanvasExtraState,[{key:\"clone\",value:function clone(){var clone=Object.create(this);clone.clipBox=this.clipBox.slice();return clone;}},{key:\"setCurrentPoint\",value:function setCurrentPoint(x,y){this.x=x;this.y=y;}},{key:\"updatePathMinMax\",value:function updatePathMinMax(transform,x,y){var _util$Util$applyTrans=_util.Util.applyTransform([x,y],transform);var _util$Util$applyTrans2=_slicedToArray(_util$Util$applyTrans,2);x=_util$Util$applyTrans2[0];y=_util$Util$applyTrans2[1];this.minX=Math.min(this.minX,x);this.minY=Math.min(this.minY,y);this.maxX=Math.max(this.maxX,x);this.maxY=Math.max(this.maxY,y);}},{key:\"updateCurvePathMinMax\",value:function updateCurvePathMinMax(transform,x0,y0,x1,y1,x2,y2,x3,y3){var box=_util.Util.bezierBoundingBox(x0,y0,x1,y1,x2,y2,x3,y3);this.updatePathMinMax(transform,box[0],box[1]);this.updatePathMinMax(transform,box[2],box[3]);}},{key:\"getPathBoundingBox\",value:function getPathBoundingBox(){var pathType=arguments.length>0&&arguments[0]!==undefined?arguments[0]:_pattern_helper.PathType.FILL;var transform=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var box=[this.minX,this.minY,this.maxX,this.maxY];if(pathType===_pattern_helper.PathType.STROKE){if(!transform){(0,_util.unreachable)(\"Stroke bounding box must include transform.\");}var scale=_util.Util.singularValueDecompose2dScale(transform);var xStrokePad=scale[0]*this.lineWidth/2;var yStrokePad=scale[1]*this.lineWidth/2;box[0]-=xStrokePad;box[1]-=yStrokePad;box[2]+=xStrokePad;box[3]+=yStrokePad;}return box;}},{key:\"updateClipFromPath\",value:function updateClipFromPath(){var intersect=_util.Util.intersect(this.clipBox,this.getPathBoundingBox());this.startNewPathAndClipBox(intersect||[0,0,0,0]);}},{key:\"startNewPathAndClipBox\",value:function startNewPathAndClipBox(box){this.clipBox=box;this.minX=Infinity;this.minY=Infinity;this.maxX=0;this.maxY=0;}},{key:\"getClippedPathBoundingBox\",value:function getClippedPathBoundingBox(){var pathType=arguments.length>0&&arguments[0]!==undefined?arguments[0]:_pattern_helper.PathType.FILL;var transform=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return _util.Util.intersect(this.clipBox,this.getPathBoundingBox(pathType,transform));}}]);return CanvasExtraState;}();function putBinaryImageData(ctx,imgData){var transferMaps=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;if(typeof ImageData!==\"undefined\"&&imgData instanceof ImageData){ctx.putImageData(imgData,0,0);return;}var height=imgData.height,width=imgData.width;var partialChunkHeight=height%FULL_CHUNK_HEIGHT;var fullChunks=(height-partialChunkHeight)/FULL_CHUNK_HEIGHT;var totalChunks=partialChunkHeight===0?fullChunks:fullChunks+1;var chunkImgData=ctx.createImageData(width,FULL_CHUNK_HEIGHT);var srcPos=0,destPos;var src=imgData.data;var dest=chunkImgData.data;var i,j,thisChunkHeight,elemsInThisChunk;var transferMapRed,transferMapGreen,transferMapBlue,transferMapGray;if(transferMaps){switch(transferMaps.length){case 1:transferMapRed=transferMaps[0];transferMapGreen=transferMaps[0];transferMapBlue=transferMaps[0];transferMapGray=transferMaps[0];break;case 4:transferMapRed=transferMaps[0];transferMapGreen=transferMaps[1];transferMapBlue=transferMaps[2];transferMapGray=transferMaps[3];break;}}if(imgData.kind===_util.ImageKind.GRAYSCALE_1BPP){var srcLength=src.byteLength;var dest32=new Uint32Array(dest.buffer,0,dest.byteLength>>2);var dest32DataLength=dest32.length;var fullSrcDiff=width+7>>3;var white=0xffffffff;var black=_util.IsLittleEndianCached.value?0xff000000:0x000000ff;if(transferMapGray){if(transferMapGray[0]===0xff&&transferMapGray[0xff]===0){var _ref37=[black,white];white=_ref37[0];black=_ref37[1];}}for(i=0;i<totalChunks;i++){thisChunkHeight=i<fullChunks?FULL_CHUNK_HEIGHT:partialChunkHeight;destPos=0;for(j=0;j<thisChunkHeight;j++){var srcDiff=srcLength-srcPos;var k=0;var kEnd=srcDiff>fullSrcDiff?width:srcDiff*8-7;var kEndUnrolled=kEnd&~7;var mask=0;var srcByte=0;for(;k<kEndUnrolled;k+=8){srcByte=src[srcPos++];dest32[destPos++]=srcByte&128?white:black;dest32[destPos++]=srcByte&64?white:black;dest32[destPos++]=srcByte&32?white:black;dest32[destPos++]=srcByte&16?white:black;dest32[destPos++]=srcByte&8?white:black;dest32[destPos++]=srcByte&4?white:black;dest32[destPos++]=srcByte&2?white:black;dest32[destPos++]=srcByte&1?white:black;}for(;k<kEnd;k++){if(mask===0){srcByte=src[srcPos++];mask=128;}dest32[destPos++]=srcByte&mask?white:black;mask>>=1;}}while(destPos<dest32DataLength){dest32[destPos++]=0;}ctx.putImageData(chunkImgData,0,i*FULL_CHUNK_HEIGHT);}}else if(imgData.kind===_util.ImageKind.RGBA_32BPP){var hasTransferMaps=!!(transferMapRed||transferMapGreen||transferMapBlue);j=0;elemsInThisChunk=width*FULL_CHUNK_HEIGHT*4;for(i=0;i<fullChunks;i++){dest.set(src.subarray(srcPos,srcPos+elemsInThisChunk));srcPos+=elemsInThisChunk;if(hasTransferMaps){for(var _k=0;_k<elemsInThisChunk;_k+=4){if(transferMapRed){dest[_k+0]=transferMapRed[dest[_k+0]];}if(transferMapGreen){dest[_k+1]=transferMapGreen[dest[_k+1]];}if(transferMapBlue){dest[_k+2]=transferMapBlue[dest[_k+2]];}}}ctx.putImageData(chunkImgData,0,j);j+=FULL_CHUNK_HEIGHT;}if(i<totalChunks){elemsInThisChunk=width*partialChunkHeight*4;dest.set(src.subarray(srcPos,srcPos+elemsInThisChunk));if(hasTransferMaps){for(var _k2=0;_k2<elemsInThisChunk;_k2+=4){if(transferMapRed){dest[_k2+0]=transferMapRed[dest[_k2+0]];}if(transferMapGreen){dest[_k2+1]=transferMapGreen[dest[_k2+1]];}if(transferMapBlue){dest[_k2+2]=transferMapBlue[dest[_k2+2]];}}}ctx.putImageData(chunkImgData,0,j);}}else if(imgData.kind===_util.ImageKind.RGB_24BPP){var _hasTransferMaps=!!(transferMapRed||transferMapGreen||transferMapBlue);thisChunkHeight=FULL_CHUNK_HEIGHT;elemsInThisChunk=width*thisChunkHeight;for(i=0;i<totalChunks;i++){if(i>=fullChunks){thisChunkHeight=partialChunkHeight;elemsInThisChunk=width*thisChunkHeight;}destPos=0;for(j=elemsInThisChunk;j--;){dest[destPos++]=src[srcPos++];dest[destPos++]=src[srcPos++];dest[destPos++]=src[srcPos++];dest[destPos++]=255;}if(_hasTransferMaps){for(var _k3=0;_k3<destPos;_k3+=4){if(transferMapRed){dest[_k3+0]=transferMapRed[dest[_k3+0]];}if(transferMapGreen){dest[_k3+1]=transferMapGreen[dest[_k3+1]];}if(transferMapBlue){dest[_k3+2]=transferMapBlue[dest[_k3+2]];}}}ctx.putImageData(chunkImgData,0,i*FULL_CHUNK_HEIGHT);}}else{throw new Error(\"bad image kind: \".concat(imgData.kind));}}function putBinaryImageMask(ctx,imgData){var height=imgData.height,width=imgData.width;var partialChunkHeight=height%FULL_CHUNK_HEIGHT;var fullChunks=(height-partialChunkHeight)/FULL_CHUNK_HEIGHT;var totalChunks=partialChunkHeight===0?fullChunks:fullChunks+1;var chunkImgData=ctx.createImageData(width,FULL_CHUNK_HEIGHT);var srcPos=0;var src=imgData.data;var dest=chunkImgData.data;for(var i=0;i<totalChunks;i++){var thisChunkHeight=i<fullChunks?FULL_CHUNK_HEIGHT:partialChunkHeight;var destPos=3;for(var j=0;j<thisChunkHeight;j++){var elem=void 0,mask=0;for(var k=0;k<width;k++){if(!mask){elem=src[srcPos++];mask=128;}dest[destPos]=elem&mask?0:255;destPos+=4;mask>>=1;}}ctx.putImageData(chunkImgData,0,i*FULL_CHUNK_HEIGHT);}}function copyCtxState(sourceCtx,destCtx){var properties=[\"strokeStyle\",\"fillStyle\",\"fillRule\",\"globalAlpha\",\"lineWidth\",\"lineCap\",\"lineJoin\",\"miterLimit\",\"globalCompositeOperation\",\"font\"];for(var i=0,ii=properties.length;i<ii;i++){var property=properties[i];if(sourceCtx[property]!==undefined){destCtx[property]=sourceCtx[property];}}if(sourceCtx.setLineDash!==undefined){destCtx.setLineDash(sourceCtx.getLineDash());destCtx.lineDashOffset=sourceCtx.lineDashOffset;}}function resetCtxToDefault(ctx){ctx.strokeStyle=\"#000000\";ctx.fillStyle=\"#000000\";ctx.fillRule=\"nonzero\";ctx.globalAlpha=1;ctx.lineWidth=1;ctx.lineCap=\"butt\";ctx.lineJoin=\"miter\";ctx.miterLimit=10;ctx.globalCompositeOperation=\"source-over\";ctx.font=\"10px sans-serif\";if(ctx.setLineDash!==undefined){ctx.setLineDash([]);ctx.lineDashOffset=0;}}function composeSMaskBackdrop(bytes,r0,g0,b0){var length=bytes.length;for(var i=3;i<length;i+=4){var alpha=bytes[i];if(alpha===0){bytes[i-3]=r0;bytes[i-2]=g0;bytes[i-1]=b0;}else if(alpha<255){var alpha_=255-alpha;bytes[i-3]=bytes[i-3]*alpha+r0*alpha_>>8;bytes[i-2]=bytes[i-2]*alpha+g0*alpha_>>8;bytes[i-1]=bytes[i-1]*alpha+b0*alpha_>>8;}}}function composeSMaskAlpha(maskData,layerData,transferMap){var length=maskData.length;var scale=1/255;for(var i=3;i<length;i+=4){var alpha=transferMap?transferMap[maskData[i]]:maskData[i];layerData[i]=layerData[i]*alpha*scale|0;}}function composeSMaskLuminosity(maskData,layerData,transferMap){var length=maskData.length;for(var i=3;i<length;i+=4){var y=maskData[i-3]*77+maskData[i-2]*152+maskData[i-1]*28;layerData[i]=transferMap?layerData[i]*transferMap[y>>8]>>8:layerData[i]*y>>16;}}function genericComposeSMask(maskCtx,layerCtx,width,height,subtype,backdrop,transferMap,layerOffsetX,layerOffsetY,maskOffsetX,maskOffsetY){var hasBackdrop=!!backdrop;var r0=hasBackdrop?backdrop[0]:0;var g0=hasBackdrop?backdrop[1]:0;var b0=hasBackdrop?backdrop[2]:0;var composeFn;if(subtype===\"Luminosity\"){composeFn=composeSMaskLuminosity;}else{composeFn=composeSMaskAlpha;}var PIXELS_TO_PROCESS=1048576;var chunkSize=Math.min(height,Math.ceil(PIXELS_TO_PROCESS/width));for(var row=0;row<height;row+=chunkSize){var chunkHeight=Math.min(chunkSize,height-row);var maskData=maskCtx.getImageData(layerOffsetX-maskOffsetX,row+(layerOffsetY-maskOffsetY),width,chunkHeight);var layerData=layerCtx.getImageData(layerOffsetX,row+layerOffsetY,width,chunkHeight);if(hasBackdrop){composeSMaskBackdrop(maskData.data,r0,g0,b0);}composeFn(maskData.data,layerData.data,transferMap);layerCtx.putImageData(layerData,layerOffsetX,row+layerOffsetY);}}function composeSMask(ctx,smask,layerCtx,layerBox){var layerOffsetX=layerBox[0];var layerOffsetY=layerBox[1];var layerWidth=layerBox[2]-layerOffsetX;var layerHeight=layerBox[3]-layerOffsetY;if(layerWidth===0||layerHeight===0){return;}genericComposeSMask(smask.context,layerCtx,layerWidth,layerHeight,smask.subtype,smask.backdrop,smask.transferMap,layerOffsetX,layerOffsetY,smask.offsetX,smask.offsetY);ctx.save();ctx.globalAlpha=1;ctx.globalCompositeOperation=\"source-over\";ctx.setTransform(1,0,0,1,0,0);ctx.drawImage(layerCtx.canvas,0,0);ctx.restore();}function getImageSmoothingEnabled(transform,interpolate){var scale=_util.Util.singularValueDecompose2dScale(transform);scale[0]=Math.fround(scale[0]);scale[1]=Math.fround(scale[1]);var actualScale=Math.fround((globalThis.devicePixelRatio||1)*_display_utils.PixelsPerInch.PDF_TO_CSS_UNITS);if(interpolate!==undefined){return interpolate;}else if(scale[0]<=actualScale||scale[1]<=actualScale){return true;}return false;}var LINE_CAP_STYLES=[\"butt\",\"round\",\"square\"];var LINE_JOIN_STYLES=[\"miter\",\"round\",\"bevel\"];var NORMAL_CLIP={};var EO_CLIP={};var CanvasGraphics=/*#__PURE__*/function(){function CanvasGraphics(canvasCtx,commonObjs,objs,canvasFactory,imageLayer,optionalContentConfig,annotationCanvasMap){_classCallCheck(this,CanvasGraphics);this.ctx=canvasCtx;this.current=new CanvasExtraState(this.ctx.canvas.width,this.ctx.canvas.height);this.stateStack=[];this.pendingClip=null;this.pendingEOFill=false;this.res=null;this.xobjs=null;this.commonObjs=commonObjs;this.objs=objs;this.canvasFactory=canvasFactory;this.imageLayer=imageLayer;this.groupStack=[];this.processingType3=null;this.baseTransform=null;this.baseTransformStack=[];this.groupLevel=0;this.smaskStack=[];this.smaskCounter=0;this.tempSMask=null;this.suspendedCtx=null;this.contentVisible=true;this.markedContentStack=[];this.optionalContentConfig=optionalContentConfig;this.cachedCanvases=new CachedCanvases(this.canvasFactory);this.cachedPatterns=new Map();this.annotationCanvasMap=annotationCanvasMap;this.viewportScale=1;this.outputScaleX=1;this.outputScaleY=1;if(canvasCtx){addContextCurrentTransform(canvasCtx);}this._cachedScaleForStroking=null;this._cachedGetSinglePixelWidth=null;}_createClass(CanvasGraphics,[{key:\"beginDrawing\",value:function beginDrawing(_ref38){var transform=_ref38.transform,viewport=_ref38.viewport,_ref38$transparency=_ref38.transparency,transparency=_ref38$transparency===void 0?false:_ref38$transparency,_ref38$background=_ref38.background,background=_ref38$background===void 0?null:_ref38$background;var width=this.ctx.canvas.width;var height=this.ctx.canvas.height;this.ctx.save();this.ctx.fillStyle=background||\"rgb(255, 255, 255)\";this.ctx.fillRect(0,0,width,height);this.ctx.restore();if(transparency){var transparentCanvas=this.cachedCanvases.getCanvas(\"transparent\",width,height,true);this.compositeCtx=this.ctx;this.transparentCanvas=transparentCanvas.canvas;this.ctx=transparentCanvas.context;this.ctx.save();this.ctx.transform.apply(this.ctx,this.compositeCtx.mozCurrentTransform);}this.ctx.save();resetCtxToDefault(this.ctx);if(transform){this.ctx.transform.apply(this.ctx,transform);this.outputScaleX=transform[0];this.outputScaleY=transform[0];}this.ctx.transform.apply(this.ctx,viewport.transform);this.viewportScale=viewport.scale;this.baseTransform=this.ctx.mozCurrentTransform.slice();if(this.imageLayer){this.imageLayer.beginLayout();}}},{key:\"executeOperatorList\",value:function executeOperatorList(operatorList,executionStartIdx,continueCallback,stepper){var argsArray=operatorList.argsArray;var fnArray=operatorList.fnArray;var i=executionStartIdx||0;var argsArrayLen=argsArray.length;if(argsArrayLen===i){return i;}var chunkOperations=argsArrayLen-i>EXECUTION_STEPS&&typeof continueCallback===\"function\";var endTime=chunkOperations?Date.now()+EXECUTION_TIME:0;var steps=0;var commonObjs=this.commonObjs;var objs=this.objs;var fnId;while(true){if(stepper!==undefined&&i===stepper.nextBreakPoint){stepper.breakIt(i,continueCallback);return i;}fnId=fnArray[i];if(fnId!==_util.OPS.dependency){this[fnId].apply(this,argsArray[i]);}else{var _iterator22=_createForOfIteratorHelper(argsArray[i]),_step22;try{for(_iterator22.s();!(_step22=_iterator22.n()).done;){var depObjId=_step22.value;var objsPool=depObjId.startsWith(\"g_\")?commonObjs:objs;if(!objsPool.has(depObjId)){objsPool.get(depObjId,continueCallback);return i;}}}catch(err){_iterator22.e(err);}finally{_iterator22.f();}}i++;if(i===argsArrayLen){return i;}if(chunkOperations&&++steps>EXECUTION_STEPS){if(Date.now()>endTime){continueCallback();return i;}steps=0;}}}},{key:\"endDrawing\",value:function endDrawing(){while(this.stateStack.length||this.inSMaskMode){this.restore();}this.ctx.restore();if(this.transparentCanvas){this.ctx=this.compositeCtx;this.ctx.save();this.ctx.setTransform(1,0,0,1,0,0);this.ctx.drawImage(this.transparentCanvas,0,0);this.ctx.restore();this.transparentCanvas=null;}this.cachedCanvases.clear();this.cachedPatterns.clear();if(this.imageLayer){this.imageLayer.endLayout();}}},{key:\"_scaleImage\",value:function _scaleImage(img,inverseTransform){var width=img.width;var height=img.height;var widthScale=Math.max(Math.hypot(inverseTransform[0],inverseTransform[1]),1);var heightScale=Math.max(Math.hypot(inverseTransform[2],inverseTransform[3]),1);var paintWidth=width,paintHeight=height;var tmpCanvasId=\"prescale1\";var tmpCanvas,tmpCtx;while(widthScale>2&&paintWidth>1||heightScale>2&&paintHeight>1){var newWidth=paintWidth,newHeight=paintHeight;if(widthScale>2&&paintWidth>1){newWidth=Math.ceil(paintWidth/2);widthScale/=paintWidth/newWidth;}if(heightScale>2&&paintHeight>1){newHeight=Math.ceil(paintHeight/2);heightScale/=paintHeight/newHeight;}tmpCanvas=this.cachedCanvases.getCanvas(tmpCanvasId,newWidth,newHeight);tmpCtx=tmpCanvas.context;tmpCtx.clearRect(0,0,newWidth,newHeight);tmpCtx.drawImage(img,0,0,paintWidth,paintHeight,0,0,newWidth,newHeight);img=tmpCanvas.canvas;paintWidth=newWidth;paintHeight=newHeight;tmpCanvasId=tmpCanvasId===\"prescale1\"?\"prescale2\":\"prescale1\";}return{img:img,paintWidth:paintWidth,paintHeight:paintHeight};}},{key:\"_createMaskCanvas\",value:function _createMaskCanvas(img){var ctx=this.ctx;var width=img.width,height=img.height;var fillColor=this.current.fillColor;var isPatternFill=this.current.patternFill;var maskCanvas=this.cachedCanvases.getCanvas(\"maskCanvas\",width,height);var maskCtx=maskCanvas.context;putBinaryImageMask(maskCtx,img);var objToCanvas=ctx.mozCurrentTransform;var maskToCanvas=_util.Util.transform(objToCanvas,[1/width,0,0,-1/height,0,0]);maskToCanvas=_util.Util.transform(maskToCanvas,[1,0,0,1,0,-height]);var cord1=_util.Util.applyTransform([0,0],maskToCanvas);var cord2=_util.Util.applyTransform([width,height],maskToCanvas);var rect=_util.Util.normalizeRect([cord1[0],cord1[1],cord2[0],cord2[1]]);var drawnWidth=Math.ceil(rect[2]-rect[0]);var drawnHeight=Math.ceil(rect[3]-rect[1]);var fillCanvas=this.cachedCanvases.getCanvas(\"fillCanvas\",drawnWidth,drawnHeight,true);var fillCtx=fillCanvas.context;var offsetX=Math.min(cord1[0],cord2[0]);var offsetY=Math.min(cord1[1],cord2[1]);fillCtx.translate(-offsetX,-offsetY);fillCtx.transform.apply(fillCtx,maskToCanvas);var scaled=this._scaleImage(maskCanvas.canvas,fillCtx.mozCurrentTransformInverse);fillCtx.imageSmoothingEnabled=getImageSmoothingEnabled(fillCtx.mozCurrentTransform,img.interpolate);fillCtx.drawImage(scaled.img,0,0,scaled.img.width,scaled.img.height,0,0,width,height);fillCtx.globalCompositeOperation=\"source-in\";var inverse=_util.Util.transform(fillCtx.mozCurrentTransformInverse,[1,0,0,1,-offsetX,-offsetY]);fillCtx.fillStyle=isPatternFill?fillColor.getPattern(ctx,this,inverse,_pattern_helper.PathType.FILL):fillColor;fillCtx.fillRect(0,0,width,height);return{canvas:fillCanvas.canvas,offsetX:Math.round(offsetX),offsetY:Math.round(offsetY)};}},{key:\"setLineWidth\",value:function setLineWidth(width){if(width!==this.current.lineWidth){this._cachedScaleForStroking=null;}this.current.lineWidth=width;this.ctx.lineWidth=width;}},{key:\"setLineCap\",value:function setLineCap(style){this.ctx.lineCap=LINE_CAP_STYLES[style];}},{key:\"setLineJoin\",value:function setLineJoin(style){this.ctx.lineJoin=LINE_JOIN_STYLES[style];}},{key:\"setMiterLimit\",value:function setMiterLimit(limit){this.ctx.miterLimit=limit;}},{key:\"setDash\",value:function setDash(dashArray,dashPhase){var ctx=this.ctx;if(ctx.setLineDash!==undefined){ctx.setLineDash(dashArray);ctx.lineDashOffset=dashPhase;}}},{key:\"setRenderingIntent\",value:function setRenderingIntent(intent){}},{key:\"setFlatness\",value:function setFlatness(flatness){}},{key:\"setGState\",value:function setGState(states){for(var i=0,ii=states.length;i<ii;i++){var state=states[i];var key=state[0];var value=state[1];switch(key){case\"LW\":this.setLineWidth(value);break;case\"LC\":this.setLineCap(value);break;case\"LJ\":this.setLineJoin(value);break;case\"ML\":this.setMiterLimit(value);break;case\"D\":this.setDash(value[0],value[1]);break;case\"RI\":this.setRenderingIntent(value);break;case\"FL\":this.setFlatness(value);break;case\"Font\":this.setFont(value[0],value[1]);break;case\"CA\":this.current.strokeAlpha=state[1];break;case\"ca\":this.current.fillAlpha=state[1];this.ctx.globalAlpha=state[1];break;case\"BM\":this.ctx.globalCompositeOperation=value;break;case\"SMask\":this.current.activeSMask=value?this.tempSMask:null;this.tempSMask=null;this.checkSMaskState();break;case\"TR\":this.current.transferMaps=value;}}}},{key:\"inSMaskMode\",get:function get(){return!!this.suspendedCtx;}},{key:\"checkSMaskState\",value:function checkSMaskState(){var inSMaskMode=this.inSMaskMode;if(this.current.activeSMask&&!inSMaskMode){this.beginSMaskMode();}else if(!this.current.activeSMask&&inSMaskMode){this.endSMaskMode();}}},{key:\"beginSMaskMode\",value:function beginSMaskMode(){if(this.inSMaskMode){throw new Error(\"beginSMaskMode called while already in smask mode\");}var drawnWidth=this.ctx.canvas.width;var drawnHeight=this.ctx.canvas.height;var cacheId=\"smaskGroupAt\"+this.groupLevel;var scratchCanvas=this.cachedCanvases.getCanvas(cacheId,drawnWidth,drawnHeight,true);this.suspendedCtx=this.ctx;this.ctx=scratchCanvas.context;var ctx=this.ctx;ctx.setTransform.apply(ctx,this.suspendedCtx.mozCurrentTransform);copyCtxState(this.suspendedCtx,ctx);mirrorContextOperations(ctx,this.suspendedCtx);this.setGState([[\"BM\",\"source-over\"],[\"ca\",1],[\"CA\",1]]);}},{key:\"endSMaskMode\",value:function endSMaskMode(){if(!this.inSMaskMode){throw new Error(\"endSMaskMode called while not in smask mode\");}this.ctx._removeMirroring();copyCtxState(this.ctx,this.suspendedCtx);this.ctx=this.suspendedCtx;this.suspendedCtx=null;}},{key:\"compose\",value:function compose(dirtyBox){if(!this.current.activeSMask){return;}if(!dirtyBox){dirtyBox=[0,0,this.ctx.canvas.width,this.ctx.canvas.height];}else{dirtyBox[0]=Math.floor(dirtyBox[0]);dirtyBox[1]=Math.floor(dirtyBox[1]);dirtyBox[2]=Math.ceil(dirtyBox[2]);dirtyBox[3]=Math.ceil(dirtyBox[3]);}var smask=this.current.activeSMask;var suspendedCtx=this.suspendedCtx;composeSMask(suspendedCtx,smask,this.ctx,dirtyBox);this.ctx.save();this.ctx.setTransform(1,0,0,1,0,0);this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);this.ctx.restore();}},{key:\"save\",value:function save(){if(this.inSMaskMode){copyCtxState(this.ctx,this.suspendedCtx);this.suspendedCtx.save();}else{this.ctx.save();}var old=this.current;this.stateStack.push(old);this.current=old.clone();}},{key:\"restore\",value:function restore(){if(this.stateStack.length===0&&this.inSMaskMode){this.endSMaskMode();}if(this.stateStack.length!==0){this.current=this.stateStack.pop();if(this.inSMaskMode){this.suspendedCtx.restore();copyCtxState(this.suspendedCtx,this.ctx);}else{this.ctx.restore();}this.checkSMaskState();this.pendingClip=null;this._cachedScaleForStroking=null;this._cachedGetSinglePixelWidth=null;}}},{key:\"transform\",value:function transform(a,b,c,d,e,f){this.ctx.transform(a,b,c,d,e,f);this._cachedScaleForStroking=null;this._cachedGetSinglePixelWidth=null;}},{key:\"constructPath\",value:function constructPath(ops,args){var ctx=this.ctx;var current=this.current;var x=current.x,y=current.y;var startX,startY;for(var i=0,j=0,ii=ops.length;i<ii;i++){switch(ops[i]|0){case _util.OPS.rectangle:x=args[j++];y=args[j++];var width=args[j++];var height=args[j++];var xw=x+width;var yh=y+height;ctx.moveTo(x,y);if(width===0||height===0){ctx.lineTo(xw,yh);}else{ctx.lineTo(xw,y);ctx.lineTo(xw,yh);ctx.lineTo(x,yh);}current.updatePathMinMax(ctx.mozCurrentTransform,x,y);current.updatePathMinMax(ctx.mozCurrentTransform,xw,yh);ctx.closePath();break;case _util.OPS.moveTo:x=args[j++];y=args[j++];ctx.moveTo(x,y);current.updatePathMinMax(ctx.mozCurrentTransform,x,y);break;case _util.OPS.lineTo:x=args[j++];y=args[j++];ctx.lineTo(x,y);current.updatePathMinMax(ctx.mozCurrentTransform,x,y);break;case _util.OPS.curveTo:startX=x;startY=y;x=args[j+4];y=args[j+5];ctx.bezierCurveTo(args[j],args[j+1],args[j+2],args[j+3],x,y);current.updateCurvePathMinMax(ctx.mozCurrentTransform,startX,startY,args[j],args[j+1],args[j+2],args[j+3],x,y);j+=6;break;case _util.OPS.curveTo2:startX=x;startY=y;ctx.bezierCurveTo(x,y,args[j],args[j+1],args[j+2],args[j+3]);current.updateCurvePathMinMax(ctx.mozCurrentTransform,startX,startY,x,y,args[j],args[j+1],args[j+2],args[j+3]);x=args[j+2];y=args[j+3];j+=4;break;case _util.OPS.curveTo3:startX=x;startY=y;x=args[j+2];y=args[j+3];ctx.bezierCurveTo(args[j],args[j+1],x,y,x,y);current.updateCurvePathMinMax(ctx.mozCurrentTransform,startX,startY,args[j],args[j+1],x,y,x,y);j+=4;break;case _util.OPS.closePath:ctx.closePath();break;}}current.setCurrentPoint(x,y);}},{key:\"closePath\",value:function closePath(){this.ctx.closePath();}},{key:\"stroke\",value:function stroke(consumePath){consumePath=typeof consumePath!==\"undefined\"?consumePath:true;var ctx=this.ctx;var strokeColor=this.current.strokeColor;ctx.globalAlpha=this.current.strokeAlpha;if(this.contentVisible){if(_typeof(strokeColor)===\"object\"&&strokeColor!==null&&strokeColor!==void 0&&strokeColor.getPattern){ctx.save();ctx.strokeStyle=strokeColor.getPattern(ctx,this,ctx.mozCurrentTransformInverse,_pattern_helper.PathType.STROKE);this.rescaleAndStroke(false);ctx.restore();}else{this.rescaleAndStroke(true);}}if(consumePath){this.consumePath(this.current.getClippedPathBoundingBox());}ctx.globalAlpha=this.current.fillAlpha;}},{key:\"closeStroke\",value:function closeStroke(){this.closePath();this.stroke();}},{key:\"fill\",value:function fill(consumePath){consumePath=typeof consumePath!==\"undefined\"?consumePath:true;var ctx=this.ctx;var fillColor=this.current.fillColor;var isPatternFill=this.current.patternFill;var needRestore=false;if(isPatternFill){ctx.save();ctx.fillStyle=fillColor.getPattern(ctx,this,ctx.mozCurrentTransformInverse,_pattern_helper.PathType.FILL);needRestore=true;}var intersect=this.current.getClippedPathBoundingBox();if(this.contentVisible&&intersect!==null){if(this.pendingEOFill){ctx.fill(\"evenodd\");this.pendingEOFill=false;}else{ctx.fill();}}if(needRestore){ctx.restore();}if(consumePath){this.consumePath(intersect);}}},{key:\"eoFill\",value:function eoFill(){this.pendingEOFill=true;this.fill();}},{key:\"fillStroke\",value:function fillStroke(){this.fill(false);this.stroke(false);this.consumePath();}},{key:\"eoFillStroke\",value:function eoFillStroke(){this.pendingEOFill=true;this.fillStroke();}},{key:\"closeFillStroke\",value:function closeFillStroke(){this.closePath();this.fillStroke();}},{key:\"closeEOFillStroke\",value:function closeEOFillStroke(){this.pendingEOFill=true;this.closePath();this.fillStroke();}},{key:\"endPath\",value:function endPath(){this.consumePath();}},{key:\"clip\",value:function clip(){this.pendingClip=NORMAL_CLIP;}},{key:\"eoClip\",value:function eoClip(){this.pendingClip=EO_CLIP;}},{key:\"beginText\",value:function beginText(){this.current.textMatrix=_util.IDENTITY_MATRIX;this.current.textMatrixScale=1;this.current.x=this.current.lineX=0;this.current.y=this.current.lineY=0;}},{key:\"endText\",value:function endText(){var paths=this.pendingTextPaths;var ctx=this.ctx;if(paths===undefined){ctx.beginPath();return;}ctx.save();ctx.beginPath();for(var i=0;i<paths.length;i++){var path=paths[i];ctx.setTransform.apply(ctx,path.transform);ctx.translate(path.x,path.y);path.addToPath(ctx,path.fontSize);}ctx.restore();ctx.clip();ctx.beginPath();delete this.pendingTextPaths;}},{key:\"setCharSpacing\",value:function setCharSpacing(spacing){this.current.charSpacing=spacing;}},{key:\"setWordSpacing\",value:function setWordSpacing(spacing){this.current.wordSpacing=spacing;}},{key:\"setHScale\",value:function setHScale(scale){this.current.textHScale=scale/100;}},{key:\"setLeading\",value:function setLeading(leading){this.current.leading=-leading;}},{key:\"setFont\",value:function setFont(fontRefName,size){var fontObj=this.commonObjs.get(fontRefName);var current=this.current;if(!fontObj){throw new Error(\"Can't find font for \".concat(fontRefName));}current.fontMatrix=fontObj.fontMatrix||_util.FONT_IDENTITY_MATRIX;if(current.fontMatrix[0]===0||current.fontMatrix[3]===0){(0,_util.warn)(\"Invalid font matrix for font \"+fontRefName);}if(size<0){size=-size;current.fontDirection=-1;}else{current.fontDirection=1;}this.current.font=fontObj;this.current.fontSize=size;if(fontObj.isType3Font){return;}var name=fontObj.loadedName||\"sans-serif\";var bold=\"normal\";if(fontObj.black){bold=\"900\";}else if(fontObj.bold){bold=\"bold\";}var italic=fontObj.italic?\"italic\":\"normal\";var typeface=\"\\\"\".concat(name,\"\\\", \").concat(fontObj.fallbackName);var browserFontSize=size;if(size<MIN_FONT_SIZE){browserFontSize=MIN_FONT_SIZE;}else if(size>MAX_FONT_SIZE){browserFontSize=MAX_FONT_SIZE;}this.current.fontSizeScale=size/browserFontSize;this.ctx.font=\"\".concat(italic,\" \").concat(bold,\" \").concat(browserFontSize,\"px \").concat(typeface);}},{key:\"setTextRenderingMode\",value:function setTextRenderingMode(mode){this.current.textRenderingMode=mode;}},{key:\"setTextRise\",value:function setTextRise(rise){this.current.textRise=rise;}},{key:\"moveText\",value:function moveText(x,y){this.current.x=this.current.lineX+=x;this.current.y=this.current.lineY+=y;}},{key:\"setLeadingMoveText\",value:function setLeadingMoveText(x,y){this.setLeading(-y);this.moveText(x,y);}},{key:\"setTextMatrix\",value:function setTextMatrix(a,b,c,d,e,f){this.current.textMatrix=[a,b,c,d,e,f];this.current.textMatrixScale=Math.hypot(a,b);this.current.x=this.current.lineX=0;this.current.y=this.current.lineY=0;}},{key:\"nextLine\",value:function nextLine(){this.moveText(0,this.current.leading);}},{key:\"paintChar\",value:function paintChar(character,x,y,patternTransform){var ctx=this.ctx;var current=this.current;var font=current.font;var textRenderingMode=current.textRenderingMode;var fontSize=current.fontSize/current.fontSizeScale;var fillStrokeMode=textRenderingMode&_util.TextRenderingMode.FILL_STROKE_MASK;var isAddToPathSet=!!(textRenderingMode&_util.TextRenderingMode.ADD_TO_PATH_FLAG);var patternFill=current.patternFill&&!font.missingFile;var addToPath;if(font.disableFontFace||isAddToPathSet||patternFill){addToPath=font.getPathGenerator(this.commonObjs,character);}if(font.disableFontFace||patternFill){ctx.save();ctx.translate(x,y);ctx.beginPath();addToPath(ctx,fontSize);if(patternTransform){ctx.setTransform.apply(ctx,patternTransform);}if(fillStrokeMode===_util.TextRenderingMode.FILL||fillStrokeMode===_util.TextRenderingMode.FILL_STROKE){ctx.fill();}if(fillStrokeMode===_util.TextRenderingMode.STROKE||fillStrokeMode===_util.TextRenderingMode.FILL_STROKE){ctx.stroke();}ctx.restore();}else{if(fillStrokeMode===_util.TextRenderingMode.FILL||fillStrokeMode===_util.TextRenderingMode.FILL_STROKE){ctx.fillText(character,x,y);}if(fillStrokeMode===_util.TextRenderingMode.STROKE||fillStrokeMode===_util.TextRenderingMode.FILL_STROKE){ctx.strokeText(character,x,y);}}if(isAddToPathSet){var paths=this.pendingTextPaths||(this.pendingTextPaths=[]);paths.push({transform:ctx.mozCurrentTransform,x:x,y:y,fontSize:fontSize,addToPath:addToPath});}}},{key:\"isFontSubpixelAAEnabled\",get:function get(){var _this$cachedCanvases$=this.cachedCanvases.getCanvas(\"isFontSubpixelAAEnabled\",10,10),ctx=_this$cachedCanvases$.context;ctx.scale(1.5,1);ctx.fillText(\"I\",0,10);var data=ctx.getImageData(0,0,10,10).data;var enabled=false;for(var i=3;i<data.length;i+=4){if(data[i]>0&&data[i]<255){enabled=true;break;}}return(0,_util.shadow)(this,\"isFontSubpixelAAEnabled\",enabled);}},{key:\"showText\",value:function showText(glyphs){var current=this.current;var font=current.font;if(font.isType3Font){return this.showType3Text(glyphs);}var fontSize=current.fontSize;if(fontSize===0){return undefined;}var ctx=this.ctx;var fontSizeScale=current.fontSizeScale;var charSpacing=current.charSpacing;var wordSpacing=current.wordSpacing;var fontDirection=current.fontDirection;var textHScale=current.textHScale*fontDirection;var glyphsLength=glyphs.length;var vertical=font.vertical;var spacingDir=vertical?1:-1;var defaultVMetrics=font.defaultVMetrics;var widthAdvanceScale=fontSize*current.fontMatrix[0];var simpleFillText=current.textRenderingMode===_util.TextRenderingMode.FILL&&!font.disableFontFace&&!current.patternFill;ctx.save();ctx.transform.apply(ctx,current.textMatrix);ctx.translate(current.x,current.y+current.textRise);if(fontDirection>0){ctx.scale(textHScale,-1);}else{ctx.scale(textHScale,1);}var patternTransform;if(current.patternFill){ctx.save();var pattern=current.fillColor.getPattern(ctx,this,ctx.mozCurrentTransformInverse,_pattern_helper.PathType.FILL);patternTransform=ctx.mozCurrentTransform;ctx.restore();ctx.fillStyle=pattern;}var lineWidth=current.lineWidth;var scale=current.textMatrixScale;if(scale===0||lineWidth===0){var fillStrokeMode=current.textRenderingMode&_util.TextRenderingMode.FILL_STROKE_MASK;if(fillStrokeMode===_util.TextRenderingMode.STROKE||fillStrokeMode===_util.TextRenderingMode.FILL_STROKE){lineWidth=this.getSinglePixelWidth();}}else{lineWidth/=scale;}if(fontSizeScale!==1.0){ctx.scale(fontSizeScale,fontSizeScale);lineWidth/=fontSizeScale;}ctx.lineWidth=lineWidth;var x=0,i;for(i=0;i<glyphsLength;++i){var glyph=glyphs[i];if(typeof glyph===\"number\"){x+=spacingDir*glyph*fontSize/1000;continue;}var restoreNeeded=false;var spacing=(glyph.isSpace?wordSpacing:0)+charSpacing;var character=glyph.fontChar;var accent=glyph.accent;var scaledX=void 0,scaledY=void 0;var width=glyph.width;if(vertical){var vmetric=glyph.vmetric||defaultVMetrics;var vx=-(glyph.vmetric?vmetric[1]:width*0.5)*widthAdvanceScale;var vy=vmetric[2]*widthAdvanceScale;width=vmetric?-vmetric[0]:width;scaledX=vx/fontSizeScale;scaledY=(x+vy)/fontSizeScale;}else{scaledX=x/fontSizeScale;scaledY=0;}if(font.remeasure&&width>0){var measuredWidth=ctx.measureText(character).width*1000/fontSize*fontSizeScale;if(width<measuredWidth&&this.isFontSubpixelAAEnabled){var characterScaleX=width/measuredWidth;restoreNeeded=true;ctx.save();ctx.scale(characterScaleX,1);scaledX/=characterScaleX;}else if(width!==measuredWidth){scaledX+=(width-measuredWidth)/2000*fontSize/fontSizeScale;}}if(this.contentVisible&&(glyph.isInFont||font.missingFile)){if(simpleFillText&&!accent){ctx.fillText(character,scaledX,scaledY);}else{this.paintChar(character,scaledX,scaledY,patternTransform);if(accent){var scaledAccentX=scaledX+fontSize*accent.offset.x/fontSizeScale;var scaledAccentY=scaledY-fontSize*accent.offset.y/fontSizeScale;this.paintChar(accent.fontChar,scaledAccentX,scaledAccentY,patternTransform);}}}var charWidth=void 0;if(vertical){charWidth=width*widthAdvanceScale-spacing*fontDirection;}else{charWidth=width*widthAdvanceScale+spacing*fontDirection;}x+=charWidth;if(restoreNeeded){ctx.restore();}}if(vertical){current.y-=x;}else{current.x+=x*textHScale;}ctx.restore();this.compose();return undefined;}},{key:\"showType3Text\",value:function showType3Text(glyphs){var ctx=this.ctx;var current=this.current;var font=current.font;var fontSize=current.fontSize;var fontDirection=current.fontDirection;var spacingDir=font.vertical?1:-1;var charSpacing=current.charSpacing;var wordSpacing=current.wordSpacing;var textHScale=current.textHScale*fontDirection;var fontMatrix=current.fontMatrix||_util.FONT_IDENTITY_MATRIX;var glyphsLength=glyphs.length;var isTextInvisible=current.textRenderingMode===_util.TextRenderingMode.INVISIBLE;var i,glyph,width,spacingLength;if(isTextInvisible||fontSize===0){return;}this._cachedScaleForStroking=null;this._cachedGetSinglePixelWidth=null;ctx.save();ctx.transform.apply(ctx,current.textMatrix);ctx.translate(current.x,current.y);ctx.scale(textHScale,fontDirection);for(i=0;i<glyphsLength;++i){glyph=glyphs[i];if(typeof glyph===\"number\"){spacingLength=spacingDir*glyph*fontSize/1000;this.ctx.translate(spacingLength,0);current.x+=spacingLength*textHScale;continue;}var spacing=(glyph.isSpace?wordSpacing:0)+charSpacing;var operatorList=font.charProcOperatorList[glyph.operatorListId];if(!operatorList){(0,_util.warn)(\"Type3 character \\\"\".concat(glyph.operatorListId,\"\\\" is not available.\"));continue;}if(this.contentVisible){this.processingType3=glyph;this.save();ctx.scale(fontSize,fontSize);ctx.transform.apply(ctx,fontMatrix);this.executeOperatorList(operatorList);this.restore();}var transformed=_util.Util.applyTransform([glyph.width,0],fontMatrix);width=transformed[0]*fontSize+spacing;ctx.translate(width,0);current.x+=width*textHScale;}ctx.restore();this.processingType3=null;}},{key:\"setCharWidth\",value:function setCharWidth(xWidth,yWidth){}},{key:\"setCharWidthAndBounds\",value:function setCharWidthAndBounds(xWidth,yWidth,llx,lly,urx,ury){this.ctx.rect(llx,lly,urx-llx,ury-lly);this.clip();this.endPath();}},{key:\"getColorN_Pattern\",value:function getColorN_Pattern(IR){var _this26=this;var pattern;if(IR[0]===\"TilingPattern\"){var color=IR[1];var baseTransform=this.baseTransform||this.ctx.mozCurrentTransform.slice();var canvasGraphicsFactory={createCanvasGraphics:function createCanvasGraphics(ctx){return new CanvasGraphics(ctx,_this26.commonObjs,_this26.objs,_this26.canvasFactory);}};pattern=new _pattern_helper.TilingPattern(IR,color,this.ctx,canvasGraphicsFactory,baseTransform);}else{pattern=this._getPattern(IR[1],IR[2]);}return pattern;}},{key:\"setStrokeColorN\",value:function setStrokeColorN(){this.current.strokeColor=this.getColorN_Pattern(arguments);}},{key:\"setFillColorN\",value:function setFillColorN(){this.current.fillColor=this.getColorN_Pattern(arguments);this.current.patternFill=true;}},{key:\"setStrokeRGBColor\",value:function setStrokeRGBColor(r,g,b){var color=_util.Util.makeHexColor(r,g,b);this.ctx.strokeStyle=color;this.current.strokeColor=color;}},{key:\"setFillRGBColor\",value:function setFillRGBColor(r,g,b){var color=_util.Util.makeHexColor(r,g,b);this.ctx.fillStyle=color;this.current.fillColor=color;this.current.patternFill=false;}},{key:\"_getPattern\",value:function _getPattern(objId){var matrix=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var pattern;if(this.cachedPatterns.has(objId)){pattern=this.cachedPatterns.get(objId);}else{pattern=(0,_pattern_helper.getShadingPattern)(this.objs.get(objId));this.cachedPatterns.set(objId,pattern);}if(matrix){pattern.matrix=matrix;}return pattern;}},{key:\"shadingFill\",value:function shadingFill(objId){if(!this.contentVisible){return;}var ctx=this.ctx;this.save();var pattern=this._getPattern(objId);ctx.fillStyle=pattern.getPattern(ctx,this,ctx.mozCurrentTransformInverse,_pattern_helper.PathType.SHADING);var inv=ctx.mozCurrentTransformInverse;if(inv){var canvas=ctx.canvas;var width=canvas.width;var height=canvas.height;var bl=_util.Util.applyTransform([0,0],inv);var br=_util.Util.applyTransform([0,height],inv);var ul=_util.Util.applyTransform([width,0],inv);var ur=_util.Util.applyTransform([width,height],inv);var x0=Math.min(bl[0],br[0],ul[0],ur[0]);var y0=Math.min(bl[1],br[1],ul[1],ur[1]);var x1=Math.max(bl[0],br[0],ul[0],ur[0]);var y1=Math.max(bl[1],br[1],ul[1],ur[1]);this.ctx.fillRect(x0,y0,x1-x0,y1-y0);}else{this.ctx.fillRect(-1e10,-1e10,2e10,2e10);}this.compose(this.current.getClippedPathBoundingBox());this.restore();}},{key:\"beginInlineImage\",value:function beginInlineImage(){(0,_util.unreachable)(\"Should not call beginInlineImage\");}},{key:\"beginImageData\",value:function beginImageData(){(0,_util.unreachable)(\"Should not call beginImageData\");}},{key:\"paintFormXObjectBegin\",value:function paintFormXObjectBegin(matrix,bbox){if(!this.contentVisible){return;}this.save();this.baseTransformStack.push(this.baseTransform);if(Array.isArray(matrix)&&matrix.length===6){this.transform.apply(this,matrix);}this.baseTransform=this.ctx.mozCurrentTransform;if(bbox){var width=bbox[2]-bbox[0];var height=bbox[3]-bbox[1];this.ctx.rect(bbox[0],bbox[1],width,height);this.current.updatePathMinMax(this.ctx.mozCurrentTransform,bbox[0],bbox[1]);this.current.updatePathMinMax(this.ctx.mozCurrentTransform,bbox[2],bbox[3]);this.clip();this.endPath();}}},{key:\"paintFormXObjectEnd\",value:function paintFormXObjectEnd(){if(!this.contentVisible){return;}this.restore();this.baseTransform=this.baseTransformStack.pop();}},{key:\"beginGroup\",value:function beginGroup(group){if(!this.contentVisible){return;}this.save();if(this.inSMaskMode){this.endSMaskMode();this.current.activeSMask=null;}var currentCtx=this.ctx;if(!group.isolated){(0,_util.info)(\"TODO: Support non-isolated groups.\");}if(group.knockout){(0,_util.warn)(\"Knockout groups not supported.\");}var currentTransform=currentCtx.mozCurrentTransform;if(group.matrix){currentCtx.transform.apply(currentCtx,group.matrix);}if(!group.bbox){throw new Error(\"Bounding box is required.\");}var bounds=_util.Util.getAxialAlignedBoundingBox(group.bbox,currentCtx.mozCurrentTransform);var canvasBounds=[0,0,currentCtx.canvas.width,currentCtx.canvas.height];bounds=_util.Util.intersect(bounds,canvasBounds)||[0,0,0,0];var offsetX=Math.floor(bounds[0]);var offsetY=Math.floor(bounds[1]);var drawnWidth=Math.max(Math.ceil(bounds[2])-offsetX,1);var drawnHeight=Math.max(Math.ceil(bounds[3])-offsetY,1);var scaleX=1,scaleY=1;if(drawnWidth>MAX_GROUP_SIZE){scaleX=drawnWidth/MAX_GROUP_SIZE;drawnWidth=MAX_GROUP_SIZE;}if(drawnHeight>MAX_GROUP_SIZE){scaleY=drawnHeight/MAX_GROUP_SIZE;drawnHeight=MAX_GROUP_SIZE;}this.current.startNewPathAndClipBox([0,0,drawnWidth,drawnHeight]);var cacheId=\"groupAt\"+this.groupLevel;if(group.smask){cacheId+=\"_smask_\"+this.smaskCounter++%2;}var scratchCanvas=this.cachedCanvases.getCanvas(cacheId,drawnWidth,drawnHeight,true);var groupCtx=scratchCanvas.context;groupCtx.scale(1/scaleX,1/scaleY);groupCtx.translate(-offsetX,-offsetY);groupCtx.transform.apply(groupCtx,currentTransform);if(group.smask){this.smaskStack.push({canvas:scratchCanvas.canvas,context:groupCtx,offsetX:offsetX,offsetY:offsetY,scaleX:scaleX,scaleY:scaleY,subtype:group.smask.subtype,backdrop:group.smask.backdrop,transferMap:group.smask.transferMap||null,startTransformInverse:null});}else{currentCtx.setTransform(1,0,0,1,0,0);currentCtx.translate(offsetX,offsetY);currentCtx.scale(scaleX,scaleY);currentCtx.save();}copyCtxState(currentCtx,groupCtx);this.ctx=groupCtx;this.setGState([[\"BM\",\"source-over\"],[\"ca\",1],[\"CA\",1]]);this.groupStack.push(currentCtx);this.groupLevel++;}},{key:\"endGroup\",value:function endGroup(group){if(!this.contentVisible){return;}this.groupLevel--;var groupCtx=this.ctx;var ctx=this.groupStack.pop();this.ctx=ctx;this.ctx.imageSmoothingEnabled=false;if(group.smask){this.tempSMask=this.smaskStack.pop();this.restore();}else{this.ctx.restore();var currentMtx=this.ctx.mozCurrentTransform;this.restore();this.ctx.save();this.ctx.setTransform.apply(this.ctx,currentMtx);var dirtyBox=_util.Util.getAxialAlignedBoundingBox([0,0,groupCtx.canvas.width,groupCtx.canvas.height],currentMtx);this.ctx.drawImage(groupCtx.canvas,0,0);this.ctx.restore();this.compose(dirtyBox);}}},{key:\"beginAnnotations\",value:function beginAnnotations(){this.save();if(this.baseTransform){this.ctx.setTransform.apply(this.ctx,this.baseTransform);}}},{key:\"endAnnotations\",value:function endAnnotations(){this.restore();}},{key:\"beginAnnotation\",value:function beginAnnotation(id,rect,transform,matrix,hasOwnCanvas){this.save();if(Array.isArray(rect)&&rect.length===4){var width=rect[2]-rect[0];var height=rect[3]-rect[1];if(hasOwnCanvas&&this.annotationCanvasMap){transform=transform.slice();transform[4]-=rect[0];transform[5]-=rect[1];rect=rect.slice();rect[0]=rect[1]=0;rect[2]=width;rect[3]=height;var _util$Util$singularVa=_util.Util.singularValueDecompose2dScale(this.ctx.mozCurrentTransform),_util$Util$singularVa2=_slicedToArray(_util$Util$singularVa,2),scaleX=_util$Util$singularVa2[0],scaleY=_util$Util$singularVa2[1];var viewportScale=this.viewportScale;var canvasWidth=Math.ceil(width*this.outputScaleX*viewportScale);var canvasHeight=Math.ceil(height*this.outputScaleY*viewportScale);this.annotationCanvas=this.canvasFactory.create(canvasWidth,canvasHeight);var _this$annotationCanva=this.annotationCanvas,canvas=_this$annotationCanva.canvas,context=_this$annotationCanva.context;canvas.style.width=\"calc(\".concat(width,\"px * var(--viewport-scale-factor))\");canvas.style.height=\"calc(\".concat(height,\"px * var(--viewport-scale-factor))\");this.annotationCanvasMap.set(id,canvas);this.annotationCanvas.savedCtx=this.ctx;this.ctx=context;this.ctx.setTransform(scaleX,0,0,-scaleY,0,height*scaleY);addContextCurrentTransform(this.ctx);resetCtxToDefault(this.ctx);}else{resetCtxToDefault(this.ctx);this.ctx.rect(rect[0],rect[1],width,height);this.clip();this.endPath();}}this.current=new CanvasExtraState(this.ctx.canvas.width,this.ctx.canvas.height);this.transform.apply(this,transform);this.transform.apply(this,matrix);}},{key:\"endAnnotation\",value:function endAnnotation(){if(this.annotationCanvas){this.ctx=this.annotationCanvas.savedCtx;delete this.annotationCanvas.savedCtx;delete this.annotationCanvas;}this.restore();}},{key:\"paintImageMaskXObject\",value:function paintImageMaskXObject(img){if(!this.contentVisible){return;}var ctx=this.ctx;var width=img.width,height=img.height;var glyph=this.processingType3;if(COMPILE_TYPE3_GLYPHS&&glyph&&glyph.compiled===undefined){if(width<=MAX_SIZE_TO_COMPILE&&height<=MAX_SIZE_TO_COMPILE){glyph.compiled=compileType3Glyph({data:img.data,width:width,height:height});}else{glyph.compiled=null;}}if(glyph!==null&&glyph!==void 0&&glyph.compiled){glyph.compiled(ctx);return;}var mask=this._createMaskCanvas(img);var maskCanvas=mask.canvas;ctx.save();ctx.setTransform(1,0,0,1,0,0);ctx.drawImage(maskCanvas,mask.offsetX,mask.offsetY);ctx.restore();this.compose();}},{key:\"paintImageMaskXObjectRepeat\",value:function paintImageMaskXObjectRepeat(imgData,scaleX){var skewX=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var skewY=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;var scaleY=arguments.length>4?arguments[4]:undefined;var positions=arguments.length>5?arguments[5]:undefined;if(!this.contentVisible){return;}var ctx=this.ctx;ctx.save();var currentTransform=ctx.mozCurrentTransform;ctx.transform(scaleX,skewX,skewY,scaleY,0,0);var mask=this._createMaskCanvas(imgData);ctx.setTransform(1,0,0,1,0,0);for(var i=0,ii=positions.length;i<ii;i+=2){var trans=_util.Util.transform(currentTransform,[scaleX,skewX,skewY,scaleY,positions[i],positions[i+1]]);var _util$Util$applyTrans3=_util.Util.applyTransform([0,0],trans),_util$Util$applyTrans4=_slicedToArray(_util$Util$applyTrans3,2),x=_util$Util$applyTrans4[0],y=_util$Util$applyTrans4[1];ctx.drawImage(mask.canvas,x,y);}ctx.restore();this.compose();}},{key:\"paintImageMaskXObjectGroup\",value:function paintImageMaskXObjectGroup(images){if(!this.contentVisible){return;}var ctx=this.ctx;var fillColor=this.current.fillColor;var isPatternFill=this.current.patternFill;for(var i=0,ii=images.length;i<ii;i++){var image=images[i];var width=image.width,height=image.height;var maskCanvas=this.cachedCanvases.getCanvas(\"maskCanvas\",width,height);var maskCtx=maskCanvas.context;maskCtx.save();putBinaryImageMask(maskCtx,image);maskCtx.globalCompositeOperation=\"source-in\";maskCtx.fillStyle=isPatternFill?fillColor.getPattern(maskCtx,this,ctx.mozCurrentTransformInverse,_pattern_helper.PathType.FILL):fillColor;maskCtx.fillRect(0,0,width,height);maskCtx.restore();ctx.save();ctx.transform.apply(ctx,image.transform);ctx.scale(1,-1);ctx.drawImage(maskCanvas.canvas,0,0,width,height,0,-1,1,1);ctx.restore();}this.compose();}},{key:\"paintImageXObject\",value:function paintImageXObject(objId){if(!this.contentVisible){return;}var imgData=objId.startsWith(\"g_\")?this.commonObjs.get(objId):this.objs.get(objId);if(!imgData){(0,_util.warn)(\"Dependent image isn't ready yet\");return;}this.paintInlineImageXObject(imgData);}},{key:\"paintImageXObjectRepeat\",value:function paintImageXObjectRepeat(objId,scaleX,scaleY,positions){if(!this.contentVisible){return;}var imgData=objId.startsWith(\"g_\")?this.commonObjs.get(objId):this.objs.get(objId);if(!imgData){(0,_util.warn)(\"Dependent image isn't ready yet\");return;}var width=imgData.width;var height=imgData.height;var map=[];for(var i=0,ii=positions.length;i<ii;i+=2){map.push({transform:[scaleX,0,0,scaleY,positions[i],positions[i+1]],x:0,y:0,w:width,h:height});}this.paintInlineImageXObjectGroup(imgData,map);}},{key:\"paintInlineImageXObject\",value:function paintInlineImageXObject(imgData){if(!this.contentVisible){return;}var width=imgData.width;var height=imgData.height;var ctx=this.ctx;this.save();ctx.scale(1/width,-1/height);var imgToPaint;if(typeof HTMLElement===\"function\"&&imgData instanceof HTMLElement||!imgData.data){imgToPaint=imgData;}else{var tmpCanvas=this.cachedCanvases.getCanvas(\"inlineImage\",width,height);var tmpCtx=tmpCanvas.context;putBinaryImageData(tmpCtx,imgData,this.current.transferMaps);imgToPaint=tmpCanvas.canvas;}var scaled=this._scaleImage(imgToPaint,ctx.mozCurrentTransformInverse);ctx.imageSmoothingEnabled=getImageSmoothingEnabled(ctx.mozCurrentTransform,imgData.interpolate);ctx.drawImage(scaled.img,0,0,scaled.paintWidth,scaled.paintHeight,0,-height,width,height);if(this.imageLayer){var position=this.getCanvasPosition(0,-height);this.imageLayer.appendImage({imgData:imgData,left:position[0],top:position[1],width:width/ctx.mozCurrentTransformInverse[0],height:height/ctx.mozCurrentTransformInverse[3]});}this.compose();this.restore();}},{key:\"paintInlineImageXObjectGroup\",value:function paintInlineImageXObjectGroup(imgData,map){if(!this.contentVisible){return;}var ctx=this.ctx;var w=imgData.width;var h=imgData.height;var tmpCanvas=this.cachedCanvases.getCanvas(\"inlineImage\",w,h);var tmpCtx=tmpCanvas.context;putBinaryImageData(tmpCtx,imgData,this.current.transferMaps);for(var i=0,ii=map.length;i<ii;i++){var entry=map[i];ctx.save();ctx.transform.apply(ctx,entry.transform);ctx.scale(1,-1);ctx.drawImage(tmpCanvas.canvas,entry.x,entry.y,entry.w,entry.h,0,-1,1,1);if(this.imageLayer){var position=this.getCanvasPosition(entry.x,entry.y);this.imageLayer.appendImage({imgData:imgData,left:position[0],top:position[1],width:w,height:h});}ctx.restore();}this.compose();}},{key:\"paintSolidColorImageMask\",value:function paintSolidColorImageMask(){if(!this.contentVisible){return;}this.ctx.fillRect(0,0,1,1);this.compose();}},{key:\"markPoint\",value:function markPoint(tag){}},{key:\"markPointProps\",value:function markPointProps(tag,properties){}},{key:\"beginMarkedContent\",value:function beginMarkedContent(tag){this.markedContentStack.push({visible:true});}},{key:\"beginMarkedContentProps\",value:function beginMarkedContentProps(tag,properties){if(tag===\"OC\"){this.markedContentStack.push({visible:this.optionalContentConfig.isVisible(properties)});}else{this.markedContentStack.push({visible:true});}this.contentVisible=this.isContentVisible();}},{key:\"endMarkedContent\",value:function endMarkedContent(){this.markedContentStack.pop();this.contentVisible=this.isContentVisible();}},{key:\"beginCompat\",value:function beginCompat(){}},{key:\"endCompat\",value:function endCompat(){}},{key:\"consumePath\",value:function consumePath(clipBox){if(this.pendingClip){this.current.updateClipFromPath();}if(!this.pendingClip){this.compose(clipBox);}var ctx=this.ctx;if(this.pendingClip){if(this.pendingClip===EO_CLIP){ctx.clip(\"evenodd\");}else{ctx.clip();}this.pendingClip=null;}this.current.startNewPathAndClipBox(this.current.clipBox);ctx.beginPath();}},{key:\"getSinglePixelWidth\",value:function getSinglePixelWidth(){if(!this._cachedGetSinglePixelWidth){var m=this.ctx.mozCurrentTransform;if(m[1]===0&&m[2]===0){this._cachedGetSinglePixelWidth=1/Math.min(Math.abs(m[0]),Math.abs(m[3]));}else{var absDet=Math.abs(m[0]*m[3]-m[2]*m[1]);var normX=Math.hypot(m[0],m[2]);var normY=Math.hypot(m[1],m[3]);this._cachedGetSinglePixelWidth=Math.max(normX,normY)/absDet;}}return this._cachedGetSinglePixelWidth;}},{key:\"getScaleForStroking\",value:function getScaleForStroking(){if(!this._cachedScaleForStroking){var lineWidth=this.current.lineWidth;var m=this.ctx.mozCurrentTransform;var scaleX,scaleY;if(m[1]===0&&m[2]===0){var normX=Math.abs(m[0]);var normY=Math.abs(m[3]);if(lineWidth===0){scaleX=1/normX;scaleY=1/normY;}else{var scaledXLineWidth=normX*lineWidth;var scaledYLineWidth=normY*lineWidth;scaleX=scaledXLineWidth<1?1/scaledXLineWidth:1;scaleY=scaledYLineWidth<1?1/scaledYLineWidth:1;}}else{var absDet=Math.abs(m[0]*m[3]-m[2]*m[1]);var _normX=Math.hypot(m[0],m[1]);var _normY=Math.hypot(m[2],m[3]);if(lineWidth===0){scaleX=_normY/absDet;scaleY=_normX/absDet;}else{var baseArea=lineWidth*absDet;scaleX=_normY>baseArea?_normY/baseArea:1;scaleY=_normX>baseArea?_normX/baseArea:1;}}this._cachedScaleForStroking=[scaleX,scaleY];}return this._cachedScaleForStroking;}},{key:\"rescaleAndStroke\",value:function rescaleAndStroke(saveRestore){var ctx=this.ctx;var lineWidth=this.current.lineWidth;var _this$getScaleForStro=this.getScaleForStroking(),_this$getScaleForStro2=_slicedToArray(_this$getScaleForStro,2),scaleX=_this$getScaleForStro2[0],scaleY=_this$getScaleForStro2[1];ctx.lineWidth=lineWidth||1;if(scaleX===1&&scaleY===1){ctx.stroke();return;}var savedMatrix,savedDashes,savedDashOffset;if(saveRestore){savedMatrix=ctx.mozCurrentTransform.slice();savedDashes=ctx.getLineDash().slice();savedDashOffset=ctx.lineDashOffset;}ctx.scale(scaleX,scaleY);var scale=Math.max(scaleX,scaleY);ctx.setLineDash(ctx.getLineDash().map(function(x){return x/scale;}));ctx.lineDashOffset/=scale;ctx.stroke();if(saveRestore){ctx.setTransform.apply(ctx,_toConsumableArray(savedMatrix));ctx.setLineDash(savedDashes);ctx.lineDashOffset=savedDashOffset;}}},{key:\"getCanvasPosition\",value:function getCanvasPosition(x,y){var transform=this.ctx.mozCurrentTransform;return[transform[0]*x+transform[2]*y+transform[4],transform[1]*x+transform[3]*y+transform[5]];}},{key:\"isContentVisible\",value:function isContentVisible(){for(var i=this.markedContentStack.length-1;i>=0;i--){if(!this.markedContentStack[i].visible){return false;}}return true;}}]);return CanvasGraphics;}();exports.CanvasGraphics=CanvasGraphics;for(var op in _util.OPS){if(CanvasGraphics.prototype[op]!==undefined){CanvasGraphics.prototype[_util.OPS[op]]=CanvasGraphics.prototype[op];}}/***/},/* 11 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.TilingPattern=exports.PathType=void 0;exports.getShadingPattern=getShadingPattern;var _util=__w_pdfjs_require__(1);var PathType={FILL:\"Fill\",STROKE:\"Stroke\",SHADING:\"Shading\"};exports.PathType=PathType;function applyBoundingBox(ctx,bbox){if(!bbox||typeof Path2D===\"undefined\"){return;}var width=bbox[2]-bbox[0];var height=bbox[3]-bbox[1];var region=new Path2D();region.rect(bbox[0],bbox[1],width,height);ctx.clip(region);}var BaseShadingPattern=/*#__PURE__*/function(){function BaseShadingPattern(){_classCallCheck(this,BaseShadingPattern);if(this.constructor===BaseShadingPattern){(0,_util.unreachable)(\"Cannot initialize BaseShadingPattern.\");}}_createClass(BaseShadingPattern,[{key:\"getPattern\",value:function getPattern(){(0,_util.unreachable)(\"Abstract method `getPattern` called.\");}}]);return BaseShadingPattern;}();var RadialAxialShadingPattern=/*#__PURE__*/function(_BaseShadingPattern){_inherits(RadialAxialShadingPattern,_BaseShadingPattern);var _super17=_createSuper(RadialAxialShadingPattern);function RadialAxialShadingPattern(IR){var _this27;_classCallCheck(this,RadialAxialShadingPattern);_this27=_super17.call(this);_this27._type=IR[1];_this27._bbox=IR[2];_this27._colorStops=IR[3];_this27._p0=IR[4];_this27._p1=IR[5];_this27._r0=IR[6];_this27._r1=IR[7];_this27.matrix=null;return _this27;}_createClass(RadialAxialShadingPattern,[{key:\"_createGradient\",value:function _createGradient(ctx){var grad;if(this._type===\"axial\"){grad=ctx.createLinearGradient(this._p0[0],this._p0[1],this._p1[0],this._p1[1]);}else if(this._type===\"radial\"){grad=ctx.createRadialGradient(this._p0[0],this._p0[1],this._r0,this._p1[0],this._p1[1],this._r1);}var _iterator23=_createForOfIteratorHelper(this._colorStops),_step23;try{for(_iterator23.s();!(_step23=_iterator23.n()).done;){var colorStop=_step23.value;grad.addColorStop(colorStop[0],colorStop[1]);}}catch(err){_iterator23.e(err);}finally{_iterator23.f();}return grad;}},{key:\"getPattern\",value:function getPattern(ctx,owner,inverse,pathType){var pattern;if(pathType===PathType.STROKE||pathType===PathType.FILL){var ownerBBox=owner.current.getClippedPathBoundingBox(pathType,ctx.mozCurrentTransform)||[0,0,0,0];var width=Math.ceil(ownerBBox[2]-ownerBBox[0])||1;var height=Math.ceil(ownerBBox[3]-ownerBBox[1])||1;var tmpCanvas=owner.cachedCanvases.getCanvas(\"pattern\",width,height,true);var tmpCtx=tmpCanvas.context;tmpCtx.clearRect(0,0,tmpCtx.canvas.width,tmpCtx.canvas.height);tmpCtx.beginPath();tmpCtx.rect(0,0,tmpCtx.canvas.width,tmpCtx.canvas.height);tmpCtx.translate(-ownerBBox[0],-ownerBBox[1]);inverse=_util.Util.transform(inverse,[1,0,0,1,ownerBBox[0],ownerBBox[1]]);tmpCtx.transform.apply(tmpCtx,owner.baseTransform);if(this.matrix){tmpCtx.transform.apply(tmpCtx,this.matrix);}applyBoundingBox(tmpCtx,this._bbox);tmpCtx.fillStyle=this._createGradient(tmpCtx);tmpCtx.fill();pattern=ctx.createPattern(tmpCanvas.canvas,\"no-repeat\");var domMatrix=new DOMMatrix(inverse);try{pattern.setTransform(domMatrix);}catch(ex){(0,_util.warn)(\"RadialAxialShadingPattern.getPattern: \\\"\".concat(ex===null||ex===void 0?void 0:ex.message,\"\\\".\"));}}else{applyBoundingBox(ctx,this._bbox);pattern=this._createGradient(ctx);}return pattern;}}]);return RadialAxialShadingPattern;}(BaseShadingPattern);function drawTriangle(data,context,p1,p2,p3,c1,c2,c3){var coords=context.coords,colors=context.colors;var bytes=data.data,rowSize=data.width*4;var tmp;if(coords[p1+1]>coords[p2+1]){tmp=p1;p1=p2;p2=tmp;tmp=c1;c1=c2;c2=tmp;}if(coords[p2+1]>coords[p3+1]){tmp=p2;p2=p3;p3=tmp;tmp=c2;c2=c3;c3=tmp;}if(coords[p1+1]>coords[p2+1]){tmp=p1;p1=p2;p2=tmp;tmp=c1;c1=c2;c2=tmp;}var x1=(coords[p1]+context.offsetX)*context.scaleX;var y1=(coords[p1+1]+context.offsetY)*context.scaleY;var x2=(coords[p2]+context.offsetX)*context.scaleX;var y2=(coords[p2+1]+context.offsetY)*context.scaleY;var x3=(coords[p3]+context.offsetX)*context.scaleX;var y3=(coords[p3+1]+context.offsetY)*context.scaleY;if(y1>=y3){return;}var c1r=colors[c1],c1g=colors[c1+1],c1b=colors[c1+2];var c2r=colors[c2],c2g=colors[c2+1],c2b=colors[c2+2];var c3r=colors[c3],c3g=colors[c3+1],c3b=colors[c3+2];var minY=Math.round(y1),maxY=Math.round(y3);var xa,car,cag,cab;var xb,cbr,cbg,cbb;for(var y=minY;y<=maxY;y++){if(y<y2){var _k4=void 0;if(y<y1){_k4=0;}else{_k4=(y1-y)/(y1-y2);}xa=x1-(x1-x2)*_k4;car=c1r-(c1r-c2r)*_k4;cag=c1g-(c1g-c2g)*_k4;cab=c1b-(c1b-c2b)*_k4;}else{var _k5=void 0;if(y>y3){_k5=1;}else if(y2===y3){_k5=0;}else{_k5=(y2-y)/(y2-y3);}xa=x2-(x2-x3)*_k5;car=c2r-(c2r-c3r)*_k5;cag=c2g-(c2g-c3g)*_k5;cab=c2b-(c2b-c3b)*_k5;}var k=void 0;if(y<y1){k=0;}else if(y>y3){k=1;}else{k=(y1-y)/(y1-y3);}xb=x1-(x1-x3)*k;cbr=c1r-(c1r-c3r)*k;cbg=c1g-(c1g-c3g)*k;cbb=c1b-(c1b-c3b)*k;var x1_=Math.round(Math.min(xa,xb));var x2_=Math.round(Math.max(xa,xb));var j=rowSize*y+x1_*4;for(var x=x1_;x<=x2_;x++){k=(xa-x)/(xa-xb);if(k<0){k=0;}else if(k>1){k=1;}bytes[j++]=car-(car-cbr)*k|0;bytes[j++]=cag-(cag-cbg)*k|0;bytes[j++]=cab-(cab-cbb)*k|0;bytes[j++]=255;}}}function drawFigure(data,figure,context){var ps=figure.coords;var cs=figure.colors;var i,ii;switch(figure.type){case\"lattice\":var verticesPerRow=figure.verticesPerRow;var rows=Math.floor(ps.length/verticesPerRow)-1;var cols=verticesPerRow-1;for(i=0;i<rows;i++){var q=i*verticesPerRow;for(var j=0;j<cols;j++,q++){drawTriangle(data,context,ps[q],ps[q+1],ps[q+verticesPerRow],cs[q],cs[q+1],cs[q+verticesPerRow]);drawTriangle(data,context,ps[q+verticesPerRow+1],ps[q+1],ps[q+verticesPerRow],cs[q+verticesPerRow+1],cs[q+1],cs[q+verticesPerRow]);}}break;case\"triangles\":for(i=0,ii=ps.length;i<ii;i+=3){drawTriangle(data,context,ps[i],ps[i+1],ps[i+2],cs[i],cs[i+1],cs[i+2]);}break;default:throw new Error(\"illegal figure\");}}var MeshShadingPattern=/*#__PURE__*/function(_BaseShadingPattern2){_inherits(MeshShadingPattern,_BaseShadingPattern2);var _super18=_createSuper(MeshShadingPattern);function MeshShadingPattern(IR){var _this28;_classCallCheck(this,MeshShadingPattern);_this28=_super18.call(this);_this28._coords=IR[2];_this28._colors=IR[3];_this28._figures=IR[4];_this28._bounds=IR[5];_this28._bbox=IR[7];_this28._background=IR[8];_this28.matrix=null;return _this28;}_createClass(MeshShadingPattern,[{key:\"_createMeshCanvas\",value:function _createMeshCanvas(combinedScale,backgroundColor,cachedCanvases){var EXPECTED_SCALE=1.1;var MAX_PATTERN_SIZE=3000;var BORDER_SIZE=2;var offsetX=Math.floor(this._bounds[0]);var offsetY=Math.floor(this._bounds[1]);var boundsWidth=Math.ceil(this._bounds[2])-offsetX;var boundsHeight=Math.ceil(this._bounds[3])-offsetY;var width=Math.min(Math.ceil(Math.abs(boundsWidth*combinedScale[0]*EXPECTED_SCALE)),MAX_PATTERN_SIZE);var height=Math.min(Math.ceil(Math.abs(boundsHeight*combinedScale[1]*EXPECTED_SCALE)),MAX_PATTERN_SIZE);var scaleX=boundsWidth/width;var scaleY=boundsHeight/height;var context={coords:this._coords,colors:this._colors,offsetX:-offsetX,offsetY:-offsetY,scaleX:1/scaleX,scaleY:1/scaleY};var paddedWidth=width+BORDER_SIZE*2;var paddedHeight=height+BORDER_SIZE*2;var tmpCanvas=cachedCanvases.getCanvas(\"mesh\",paddedWidth,paddedHeight,false);var tmpCtx=tmpCanvas.context;var data=tmpCtx.createImageData(width,height);if(backgroundColor){var bytes=data.data;for(var i=0,ii=bytes.length;i<ii;i+=4){bytes[i]=backgroundColor[0];bytes[i+1]=backgroundColor[1];bytes[i+2]=backgroundColor[2];bytes[i+3]=255;}}var _iterator24=_createForOfIteratorHelper(this._figures),_step24;try{for(_iterator24.s();!(_step24=_iterator24.n()).done;){var figure=_step24.value;drawFigure(data,figure,context);}}catch(err){_iterator24.e(err);}finally{_iterator24.f();}tmpCtx.putImageData(data,BORDER_SIZE,BORDER_SIZE);var canvas=tmpCanvas.canvas;return{canvas:canvas,offsetX:offsetX-BORDER_SIZE*scaleX,offsetY:offsetY-BORDER_SIZE*scaleY,scaleX:scaleX,scaleY:scaleY};}},{key:\"getPattern\",value:function getPattern(ctx,owner,inverse,pathType){applyBoundingBox(ctx,this._bbox);var scale;if(pathType===PathType.SHADING){scale=_util.Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);}else{scale=_util.Util.singularValueDecompose2dScale(owner.baseTransform);if(this.matrix){var matrixScale=_util.Util.singularValueDecompose2dScale(this.matrix);scale=[scale[0]*matrixScale[0],scale[1]*matrixScale[1]];}}var temporaryPatternCanvas=this._createMeshCanvas(scale,pathType===PathType.SHADING?null:this._background,owner.cachedCanvases);if(pathType!==PathType.SHADING){ctx.setTransform.apply(ctx,owner.baseTransform);if(this.matrix){ctx.transform.apply(ctx,this.matrix);}}ctx.translate(temporaryPatternCanvas.offsetX,temporaryPatternCanvas.offsetY);ctx.scale(temporaryPatternCanvas.scaleX,temporaryPatternCanvas.scaleY);return ctx.createPattern(temporaryPatternCanvas.canvas,\"no-repeat\");}}]);return MeshShadingPattern;}(BaseShadingPattern);var DummyShadingPattern=/*#__PURE__*/function(_BaseShadingPattern3){_inherits(DummyShadingPattern,_BaseShadingPattern3);var _super19=_createSuper(DummyShadingPattern);function DummyShadingPattern(){_classCallCheck(this,DummyShadingPattern);return _super19.apply(this,arguments);}_createClass(DummyShadingPattern,[{key:\"getPattern\",value:function getPattern(){return\"hotpink\";}}]);return DummyShadingPattern;}(BaseShadingPattern);function getShadingPattern(IR){switch(IR[0]){case\"RadialAxial\":return new RadialAxialShadingPattern(IR);case\"Mesh\":return new MeshShadingPattern(IR);case\"Dummy\":return new DummyShadingPattern();}throw new Error(\"Unknown IR type: \".concat(IR[0]));}var PaintType={COLORED:1,UNCOLORED:2};var TilingPattern=/*#__PURE__*/function(){function TilingPattern(IR,color,ctx,canvasGraphicsFactory,baseTransform){_classCallCheck(this,TilingPattern);this.operatorList=IR[2];this.matrix=IR[3]||[1,0,0,1,0,0];this.bbox=IR[4];this.xstep=IR[5];this.ystep=IR[6];this.paintType=IR[7];this.tilingType=IR[8];this.color=color;this.ctx=ctx;this.canvasGraphicsFactory=canvasGraphicsFactory;this.baseTransform=baseTransform;}_createClass(TilingPattern,[{key:\"createPatternCanvas\",value:function createPatternCanvas(owner){var operatorList=this.operatorList;var bbox=this.bbox;var xstep=this.xstep;var ystep=this.ystep;var paintType=this.paintType;var tilingType=this.tilingType;var color=this.color;var canvasGraphicsFactory=this.canvasGraphicsFactory;(0,_util.info)(\"TilingType: \"+tilingType);var x0=bbox[0],y0=bbox[1],x1=bbox[2],y1=bbox[3];var matrixScale=_util.Util.singularValueDecompose2dScale(this.matrix);var curMatrixScale=_util.Util.singularValueDecompose2dScale(this.baseTransform);var combinedScale=[matrixScale[0]*curMatrixScale[0],matrixScale[1]*curMatrixScale[1]];var dimx=this.getSizeAndScale(xstep,this.ctx.canvas.width,combinedScale[0]);var dimy=this.getSizeAndScale(ystep,this.ctx.canvas.height,combinedScale[1]);var tmpCanvas=owner.cachedCanvases.getCanvas(\"pattern\",dimx.size,dimy.size,true);var tmpCtx=tmpCanvas.context;var graphics=canvasGraphicsFactory.createCanvasGraphics(tmpCtx);graphics.groupLevel=owner.groupLevel;this.setFillAndStrokeStyleToContext(graphics,paintType,color);var adjustedX0=x0;var adjustedY0=y0;var adjustedX1=x1;var adjustedY1=y1;if(x0<0){adjustedX0=0;adjustedX1+=Math.abs(x0);}if(y0<0){adjustedY0=0;adjustedY1+=Math.abs(y0);}tmpCtx.translate(-(dimx.scale*adjustedX0),-(dimy.scale*adjustedY0));graphics.transform(dimx.scale,0,0,dimy.scale,0,0);tmpCtx.save();this.clipBbox(graphics,adjustedX0,adjustedY0,adjustedX1,adjustedY1);graphics.baseTransform=graphics.ctx.mozCurrentTransform.slice();graphics.executeOperatorList(operatorList);graphics.endDrawing();return{canvas:tmpCanvas.canvas,scaleX:dimx.scale,scaleY:dimy.scale,offsetX:adjustedX0,offsetY:adjustedY0};}},{key:\"getSizeAndScale\",value:function getSizeAndScale(step,realOutputSize,scale){step=Math.abs(step);var maxSize=Math.max(TilingPattern.MAX_PATTERN_SIZE,realOutputSize);var size=Math.ceil(step*scale);if(size>=maxSize){size=maxSize;}else{scale=size/step;}return{scale:scale,size:size};}},{key:\"clipBbox\",value:function clipBbox(graphics,x0,y0,x1,y1){var bboxWidth=x1-x0;var bboxHeight=y1-y0;graphics.ctx.rect(x0,y0,bboxWidth,bboxHeight);graphics.clip();graphics.endPath();}},{key:\"setFillAndStrokeStyleToContext\",value:function setFillAndStrokeStyleToContext(graphics,paintType,color){var context=graphics.ctx,current=graphics.current;switch(paintType){case PaintType.COLORED:var ctx=this.ctx;context.fillStyle=ctx.fillStyle;context.strokeStyle=ctx.strokeStyle;current.fillColor=ctx.fillStyle;current.strokeColor=ctx.strokeStyle;break;case PaintType.UNCOLORED:var cssColor=_util.Util.makeHexColor(color[0],color[1],color[2]);context.fillStyle=cssColor;context.strokeStyle=cssColor;current.fillColor=cssColor;current.strokeColor=cssColor;break;default:throw new _util.FormatError(\"Unsupported paint type: \".concat(paintType));}}},{key:\"getPattern\",value:function getPattern(ctx,owner,inverse,pathType){var matrix=inverse;if(pathType!==PathType.SHADING){matrix=_util.Util.transform(matrix,owner.baseTransform);if(this.matrix){matrix=_util.Util.transform(matrix,this.matrix);}}var temporaryPatternCanvas=this.createPatternCanvas(owner);var domMatrix=new DOMMatrix(matrix);domMatrix=domMatrix.translate(temporaryPatternCanvas.offsetX,temporaryPatternCanvas.offsetY);domMatrix=domMatrix.scale(1/temporaryPatternCanvas.scaleX,1/temporaryPatternCanvas.scaleY);var pattern=ctx.createPattern(temporaryPatternCanvas.canvas,\"repeat\");try{pattern.setTransform(domMatrix);}catch(ex){(0,_util.warn)(\"TilingPattern.getPattern: \\\"\".concat(ex===null||ex===void 0?void 0:ex.message,\"\\\".\"));}return pattern;}}],[{key:\"MAX_PATTERN_SIZE\",get:function get(){return(0,_util.shadow)(this,\"MAX_PATTERN_SIZE\",3000);}}]);return TilingPattern;}();exports.TilingPattern=TilingPattern;/***/},/* 12 */ /***/function(__unused_webpack_module,exports){Object.defineProperty(exports,\"__esModule\",{value:true});exports.GlobalWorkerOptions=void 0;var GlobalWorkerOptions=Object.create(null);exports.GlobalWorkerOptions=GlobalWorkerOptions;GlobalWorkerOptions.workerPort=GlobalWorkerOptions.workerPort===undefined?null:GlobalWorkerOptions.workerPort;GlobalWorkerOptions.workerSrc=GlobalWorkerOptions.workerSrc===undefined?\"\":GlobalWorkerOptions.workerSrc;/***/},/* 13 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.MessageHandler=void 0;var _util=__w_pdfjs_require__(1);var CallbackKind={UNKNOWN:0,DATA:1,ERROR:2};var StreamKind={UNKNOWN:0,CANCEL:1,CANCEL_COMPLETE:2,CLOSE:3,ENQUEUE:4,ERROR:5,PULL:6,PULL_COMPLETE:7,START_COMPLETE:8};function wrapReason(reason){if(!(reason instanceof Error||_typeof(reason)===\"object\"&&reason!==null)){(0,_util.unreachable)('wrapReason: Expected \"reason\" to be a (possibly cloned) Error.');}switch(reason.name){case\"AbortException\":return new _util.AbortException(reason.message);case\"MissingPDFException\":return new _util.MissingPDFException(reason.message);case\"PasswordException\":return new _util.PasswordException(reason.message,reason.code);case\"UnexpectedResponseException\":return new _util.UnexpectedResponseException(reason.message,reason.status);case\"UnknownErrorException\":return new _util.UnknownErrorException(reason.message,reason.details);default:return new _util.UnknownErrorException(reason.message,reason.toString());}}var MessageHandler=/*#__PURE__*/function(){function MessageHandler(sourceName,targetName,comObj){var _this29=this;_classCallCheck(this,MessageHandler);this.sourceName=sourceName;this.targetName=targetName;this.comObj=comObj;this.callbackId=1;this.streamId=1;this.streamSinks=Object.create(null);this.streamControllers=Object.create(null);this.callbackCapabilities=Object.create(null);this.actionHandler=Object.create(null);this._onComObjOnMessage=function(event){var data=event.data;if(data.targetName!==_this29.sourceName){return;}if(data.stream){_this29._processStreamMessage(data);return;}if(data.callback){var callbackId=data.callbackId;var capability=_this29.callbackCapabilities[callbackId];if(!capability){throw new Error(\"Cannot resolve callback \".concat(callbackId));}delete _this29.callbackCapabilities[callbackId];if(data.callback===CallbackKind.DATA){capability.resolve(data.data);}else if(data.callback===CallbackKind.ERROR){capability.reject(wrapReason(data.reason));}else{throw new Error(\"Unexpected callback case\");}return;}var action=_this29.actionHandler[data.action];if(!action){throw new Error(\"Unknown action from worker: \".concat(data.action));}if(data.callbackId){var cbSourceName=_this29.sourceName;var cbTargetName=data.sourceName;new Promise(function(resolve){resolve(action(data.data));}).then(function(result){comObj.postMessage({sourceName:cbSourceName,targetName:cbTargetName,callback:CallbackKind.DATA,callbackId:data.callbackId,data:result});},function(reason){comObj.postMessage({sourceName:cbSourceName,targetName:cbTargetName,callback:CallbackKind.ERROR,callbackId:data.callbackId,reason:wrapReason(reason)});});return;}if(data.streamId){_this29._createStreamSink(data);return;}action(data.data);};comObj.addEventListener(\"message\",this._onComObjOnMessage);}_createClass(MessageHandler,[{key:\"on\",value:function on(actionName,handler){var ah=this.actionHandler;if(ah[actionName]){throw new Error(\"There is already an actionName called \\\"\".concat(actionName,\"\\\"\"));}ah[actionName]=handler;}},{key:\"send\",value:function send(actionName,data,transfers){this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:actionName,data:data},transfers);}},{key:\"sendWithPromise\",value:function sendWithPromise(actionName,data,transfers){var callbackId=this.callbackId++;var capability=(0,_util.createPromiseCapability)();this.callbackCapabilities[callbackId]=capability;try{this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:actionName,callbackId:callbackId,data:data},transfers);}catch(ex){capability.reject(ex);}return capability.promise;}},{key:\"sendWithStream\",value:function sendWithStream(actionName,data,queueingStrategy,transfers){var _this30=this;var streamId=this.streamId++,sourceName=this.sourceName,targetName=this.targetName,comObj=this.comObj;return new ReadableStream({start:function start(controller){var startCapability=(0,_util.createPromiseCapability)();_this30.streamControllers[streamId]={controller:controller,startCall:startCapability,pullCall:null,cancelCall:null,isClosed:false};comObj.postMessage({sourceName:sourceName,targetName:targetName,action:actionName,streamId:streamId,data:data,desiredSize:controller.desiredSize},transfers);return startCapability.promise;},pull:function pull(controller){var pullCapability=(0,_util.createPromiseCapability)();_this30.streamControllers[streamId].pullCall=pullCapability;comObj.postMessage({sourceName:sourceName,targetName:targetName,stream:StreamKind.PULL,streamId:streamId,desiredSize:controller.desiredSize});return pullCapability.promise;},cancel:function cancel(reason){(0,_util.assert)(reason instanceof Error,\"cancel must have a valid reason\");var cancelCapability=(0,_util.createPromiseCapability)();_this30.streamControllers[streamId].cancelCall=cancelCapability;_this30.streamControllers[streamId].isClosed=true;comObj.postMessage({sourceName:sourceName,targetName:targetName,stream:StreamKind.CANCEL,streamId:streamId,reason:wrapReason(reason)});return cancelCapability.promise;}},queueingStrategy);}},{key:\"_createStreamSink\",value:function _createStreamSink(data){var streamId=data.streamId,sourceName=this.sourceName,targetName=data.sourceName,comObj=this.comObj;var self=this,action=this.actionHandler[data.action];var streamSink={enqueue:function enqueue(chunk){var size=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var transfers=arguments.length>2?arguments[2]:undefined;if(this.isCancelled){return;}var lastDesiredSize=this.desiredSize;this.desiredSize-=size;if(lastDesiredSize>0&&this.desiredSize<=0){this.sinkCapability=(0,_util.createPromiseCapability)();this.ready=this.sinkCapability.promise;}comObj.postMessage({sourceName:sourceName,targetName:targetName,stream:StreamKind.ENQUEUE,streamId:streamId,chunk:chunk},transfers);},close:function close(){if(this.isCancelled){return;}this.isCancelled=true;comObj.postMessage({sourceName:sourceName,targetName:targetName,stream:StreamKind.CLOSE,streamId:streamId});delete self.streamSinks[streamId];},error:function error(reason){(0,_util.assert)(reason instanceof Error,\"error must have a valid reason\");if(this.isCancelled){return;}this.isCancelled=true;comObj.postMessage({sourceName:sourceName,targetName:targetName,stream:StreamKind.ERROR,streamId:streamId,reason:wrapReason(reason)});},sinkCapability:(0,_util.createPromiseCapability)(),onPull:null,onCancel:null,isCancelled:false,desiredSize:data.desiredSize,ready:null};streamSink.sinkCapability.resolve();streamSink.ready=streamSink.sinkCapability.promise;this.streamSinks[streamId]=streamSink;new Promise(function(resolve){resolve(action(data.data,streamSink));}).then(function(){comObj.postMessage({sourceName:sourceName,targetName:targetName,stream:StreamKind.START_COMPLETE,streamId:streamId,success:true});},function(reason){comObj.postMessage({sourceName:sourceName,targetName:targetName,stream:StreamKind.START_COMPLETE,streamId:streamId,reason:wrapReason(reason)});});}},{key:\"_processStreamMessage\",value:function _processStreamMessage(data){var streamId=data.streamId,sourceName=this.sourceName,targetName=data.sourceName,comObj=this.comObj;var streamController=this.streamControllers[streamId],streamSink=this.streamSinks[streamId];switch(data.stream){case StreamKind.START_COMPLETE:if(data.success){streamController.startCall.resolve();}else{streamController.startCall.reject(wrapReason(data.reason));}break;case StreamKind.PULL_COMPLETE:if(data.success){streamController.pullCall.resolve();}else{streamController.pullCall.reject(wrapReason(data.reason));}break;case StreamKind.PULL:if(!streamSink){comObj.postMessage({sourceName:sourceName,targetName:targetName,stream:StreamKind.PULL_COMPLETE,streamId:streamId,success:true});break;}if(streamSink.desiredSize<=0&&data.desiredSize>0){streamSink.sinkCapability.resolve();}streamSink.desiredSize=data.desiredSize;new Promise(function(resolve){resolve(streamSink.onPull&&streamSink.onPull());}).then(function(){comObj.postMessage({sourceName:sourceName,targetName:targetName,stream:StreamKind.PULL_COMPLETE,streamId:streamId,success:true});},function(reason){comObj.postMessage({sourceName:sourceName,targetName:targetName,stream:StreamKind.PULL_COMPLETE,streamId:streamId,reason:wrapReason(reason)});});break;case StreamKind.ENQUEUE:(0,_util.assert)(streamController,\"enqueue should have stream controller\");if(streamController.isClosed){break;}streamController.controller.enqueue(data.chunk);break;case StreamKind.CLOSE:(0,_util.assert)(streamController,\"close should have stream controller\");if(streamController.isClosed){break;}streamController.isClosed=true;streamController.controller.close();this._deleteStreamController(streamController,streamId);break;case StreamKind.ERROR:(0,_util.assert)(streamController,\"error should have stream controller\");streamController.controller.error(wrapReason(data.reason));this._deleteStreamController(streamController,streamId);break;case StreamKind.CANCEL_COMPLETE:if(data.success){streamController.cancelCall.resolve();}else{streamController.cancelCall.reject(wrapReason(data.reason));}this._deleteStreamController(streamController,streamId);break;case StreamKind.CANCEL:if(!streamSink){break;}new Promise(function(resolve){resolve(streamSink.onCancel&&streamSink.onCancel(wrapReason(data.reason)));}).then(function(){comObj.postMessage({sourceName:sourceName,targetName:targetName,stream:StreamKind.CANCEL_COMPLETE,streamId:streamId,success:true});},function(reason){comObj.postMessage({sourceName:sourceName,targetName:targetName,stream:StreamKind.CANCEL_COMPLETE,streamId:streamId,reason:wrapReason(reason)});});streamSink.sinkCapability.reject(wrapReason(data.reason));streamSink.isCancelled=true;delete this.streamSinks[streamId];break;default:throw new Error(\"Unexpected stream case\");}}},{key:\"_deleteStreamController\",value:function(){var _deleteStreamController2=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee12(streamController,streamId){return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee12$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:_context12.next=2;return Promise.allSettled([streamController.startCall&&streamController.startCall.promise,streamController.pullCall&&streamController.pullCall.promise,streamController.cancelCall&&streamController.cancelCall.promise]);case 2:delete this.streamControllers[streamId];case 3:case\"end\":return _context12.stop();}}},_callee12,this);}));function _deleteStreamController(_x9,_x10){return _deleteStreamController2.apply(this,arguments);}return _deleteStreamController;}()},{key:\"destroy\",value:function destroy(){this.comObj.removeEventListener(\"message\",this._onComObjOnMessage);}}]);return MessageHandler;}();exports.MessageHandler=MessageHandler;/***/},/* 14 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.Metadata=void 0;var _util=__w_pdfjs_require__(1);var _metadataMap=/*#__PURE__*/new WeakMap();var _data=/*#__PURE__*/new WeakMap();var Metadata=/*#__PURE__*/function(){function Metadata(_ref39){var parsedData=_ref39.parsedData,rawData=_ref39.rawData;_classCallCheck(this,Metadata);_classPrivateFieldInitSpec(this,_metadataMap,{writable:true,value:void 0});_classPrivateFieldInitSpec(this,_data,{writable:true,value:void 0});_classPrivateFieldSet(this,_metadataMap,parsedData);_classPrivateFieldSet(this,_data,rawData);}_createClass(Metadata,[{key:\"getRaw\",value:function getRaw(){return _classPrivateFieldGet(this,_data);}},{key:\"get\",value:function get(name){var _classPrivateFieldGet2;return(_classPrivateFieldGet2=_classPrivateFieldGet(this,_metadataMap).get(name))!==null&&_classPrivateFieldGet2!==void 0?_classPrivateFieldGet2:null;}},{key:\"getAll\",value:function getAll(){return(0,_util.objectFromMap)(_classPrivateFieldGet(this,_metadataMap));}},{key:\"has\",value:function has(name){return _classPrivateFieldGet(this,_metadataMap).has(name);}}]);return Metadata;}();exports.Metadata=Metadata;/***/},/* 15 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.OptionalContentConfig=void 0;var _util=__w_pdfjs_require__(1);var OptionalContentGroup=function OptionalContentGroup(name,intent){_classCallCheck(this,OptionalContentGroup);this.visible=true;this.name=name;this.intent=intent;};var OptionalContentConfig=/*#__PURE__*/function(){function OptionalContentConfig(data){_classCallCheck(this,OptionalContentConfig);this.name=null;this.creator=null;this._order=null;this._groups=new Map();if(data===null){return;}this.name=data.name;this.creator=data.creator;this._order=data.order;var _iterator25=_createForOfIteratorHelper(data.groups),_step25;try{for(_iterator25.s();!(_step25=_iterator25.n()).done;){var _group=_step25.value;this._groups.set(_group.id,new OptionalContentGroup(_group.name,_group.intent));}}catch(err){_iterator25.e(err);}finally{_iterator25.f();}if(data.baseState===\"OFF\"){var _iterator26=_createForOfIteratorHelper(this._groups),_step26;try{for(_iterator26.s();!(_step26=_iterator26.n()).done;){var group=_step26.value;group.visible=false;}}catch(err){_iterator26.e(err);}finally{_iterator26.f();}}var _iterator27=_createForOfIteratorHelper(data.on),_step27;try{for(_iterator27.s();!(_step27=_iterator27.n()).done;){var on=_step27.value;this._groups.get(on).visible=true;}}catch(err){_iterator27.e(err);}finally{_iterator27.f();}var _iterator28=_createForOfIteratorHelper(data.off),_step28;try{for(_iterator28.s();!(_step28=_iterator28.n()).done;){var off=_step28.value;this._groups.get(off).visible=false;}}catch(err){_iterator28.e(err);}finally{_iterator28.f();}}_createClass(OptionalContentConfig,[{key:\"_evaluateVisibilityExpression\",value:function _evaluateVisibilityExpression(array){var length=array.length;if(length<2){return true;}var operator=array[0];for(var i=1;i<length;i++){var element=array[i];var state=void 0;if(Array.isArray(element)){state=this._evaluateVisibilityExpression(element);}else if(this._groups.has(element)){state=this._groups.get(element).visible;}else{(0,_util.warn)(\"Optional content group not found: \".concat(element));return true;}switch(operator){case\"And\":if(!state){return false;}break;case\"Or\":if(state){return true;}break;case\"Not\":return!state;default:return true;}}return operator===\"And\";}},{key:\"isVisible\",value:function isVisible(group){if(this._groups.size===0){return true;}if(!group){(0,_util.warn)(\"Optional content group not defined.\");return true;}if(group.type===\"OCG\"){if(!this._groups.has(group.id)){(0,_util.warn)(\"Optional content group not found: \".concat(group.id));return true;}return this._groups.get(group.id).visible;}else if(group.type===\"OCMD\"){if(group.expression){return this._evaluateVisibilityExpression(group.expression);}if(!group.policy||group.policy===\"AnyOn\"){var _iterator29=_createForOfIteratorHelper(group.ids),_step29;try{for(_iterator29.s();!(_step29=_iterator29.n()).done;){var id=_step29.value;if(!this._groups.has(id)){(0,_util.warn)(\"Optional content group not found: \".concat(id));return true;}if(this._groups.get(id).visible){return true;}}}catch(err){_iterator29.e(err);}finally{_iterator29.f();}return false;}else if(group.policy===\"AllOn\"){var _iterator30=_createForOfIteratorHelper(group.ids),_step30;try{for(_iterator30.s();!(_step30=_iterator30.n()).done;){var _id=_step30.value;if(!this._groups.has(_id)){(0,_util.warn)(\"Optional content group not found: \".concat(_id));return true;}if(!this._groups.get(_id).visible){return false;}}}catch(err){_iterator30.e(err);}finally{_iterator30.f();}return true;}else if(group.policy===\"AnyOff\"){var _iterator31=_createForOfIteratorHelper(group.ids),_step31;try{for(_iterator31.s();!(_step31=_iterator31.n()).done;){var _id2=_step31.value;if(!this._groups.has(_id2)){(0,_util.warn)(\"Optional content group not found: \".concat(_id2));return true;}if(!this._groups.get(_id2).visible){return true;}}}catch(err){_iterator31.e(err);}finally{_iterator31.f();}return false;}else if(group.policy===\"AllOff\"){var _iterator32=_createForOfIteratorHelper(group.ids),_step32;try{for(_iterator32.s();!(_step32=_iterator32.n()).done;){var _id3=_step32.value;if(!this._groups.has(_id3)){(0,_util.warn)(\"Optional content group not found: \".concat(_id3));return true;}if(this._groups.get(_id3).visible){return false;}}}catch(err){_iterator32.e(err);}finally{_iterator32.f();}return true;}(0,_util.warn)(\"Unknown optional content policy \".concat(group.policy,\".\"));return true;}(0,_util.warn)(\"Unknown group type \".concat(group.type,\".\"));return true;}},{key:\"setVisibility\",value:function setVisibility(id){var visible=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;if(!this._groups.has(id)){(0,_util.warn)(\"Optional content group not found: \".concat(id));return;}this._groups.get(id).visible=!!visible;}},{key:\"getOrder\",value:function getOrder(){if(!this._groups.size){return null;}if(this._order){return this._order.slice();}return Array.from(this._groups.keys());}},{key:\"getGroups\",value:function getGroups(){return this._groups.size>0?(0,_util.objectFromMap)(this._groups):null;}},{key:\"getGroup\",value:function getGroup(id){return this._groups.get(id)||null;}}]);return OptionalContentConfig;}();exports.OptionalContentConfig=OptionalContentConfig;/***/},/* 16 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.PDFDataTransportStream=void 0;var _util=__w_pdfjs_require__(1);var _display_utils=__w_pdfjs_require__(5);var PDFDataTransportStream=/*#__PURE__*/function(){function PDFDataTransportStream(params,pdfDataRangeTransport){var _this31=this;_classCallCheck(this,PDFDataTransportStream);(0,_util.assert)(pdfDataRangeTransport,'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.');this._queuedChunks=[];this._progressiveDone=params.progressiveDone||false;this._contentDispositionFilename=params.contentDispositionFilename||null;var initialData=params.initialData;if((initialData===null||initialData===void 0?void 0:initialData.length)>0){var buffer=new Uint8Array(initialData).buffer;this._queuedChunks.push(buffer);}this._pdfDataRangeTransport=pdfDataRangeTransport;this._isStreamingSupported=!params.disableStream;this._isRangeSupported=!params.disableRange;this._contentLength=params.length;this._fullRequestReader=null;this._rangeReaders=[];this._pdfDataRangeTransport.addRangeListener(function(begin,chunk){_this31._onReceiveData({begin:begin,chunk:chunk});});this._pdfDataRangeTransport.addProgressListener(function(loaded,total){_this31._onProgress({loaded:loaded,total:total});});this._pdfDataRangeTransport.addProgressiveReadListener(function(chunk){_this31._onReceiveData({chunk:chunk});});this._pdfDataRangeTransport.addProgressiveDoneListener(function(){_this31._onProgressiveDone();});this._pdfDataRangeTransport.transportReady();}_createClass(PDFDataTransportStream,[{key:\"_onReceiveData\",value:function _onReceiveData(args){var buffer=new Uint8Array(args.chunk).buffer;if(args.begin===undefined){if(this._fullRequestReader){this._fullRequestReader._enqueue(buffer);}else{this._queuedChunks.push(buffer);}}else{var found=this._rangeReaders.some(function(rangeReader){if(rangeReader._begin!==args.begin){return false;}rangeReader._enqueue(buffer);return true;});(0,_util.assert)(found,\"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\");}}},{key:\"_progressiveDataLength\",get:function get(){var _this$_fullRequestRea,_this$_fullRequestRea2;return(_this$_fullRequestRea=(_this$_fullRequestRea2=this._fullRequestReader)===null||_this$_fullRequestRea2===void 0?void 0:_this$_fullRequestRea2._loaded)!==null&&_this$_fullRequestRea!==void 0?_this$_fullRequestRea:0;}},{key:\"_onProgress\",value:function _onProgress(evt){if(evt.total===undefined){var firstReader=this._rangeReaders[0];if(firstReader!==null&&firstReader!==void 0&&firstReader.onProgress){firstReader.onProgress({loaded:evt.loaded});}}else{var fullReader=this._fullRequestReader;if(fullReader!==null&&fullReader!==void 0&&fullReader.onProgress){fullReader.onProgress({loaded:evt.loaded,total:evt.total});}}}},{key:\"_onProgressiveDone\",value:function _onProgressiveDone(){if(this._fullRequestReader){this._fullRequestReader.progressiveDone();}this._progressiveDone=true;}},{key:\"_removeRangeReader\",value:function _removeRangeReader(reader){var i=this._rangeReaders.indexOf(reader);if(i>=0){this._rangeReaders.splice(i,1);}}},{key:\"getFullReader\",value:function getFullReader(){(0,_util.assert)(!this._fullRequestReader,\"PDFDataTransportStream.getFullReader can only be called once.\");var queuedChunks=this._queuedChunks;this._queuedChunks=null;return new PDFDataTransportStreamReader(this,queuedChunks,this._progressiveDone,this._contentDispositionFilename);}},{key:\"getRangeReader\",value:function getRangeReader(begin,end){if(end<=this._progressiveDataLength){return null;}var reader=new PDFDataTransportStreamRangeReader(this,begin,end);this._pdfDataRangeTransport.requestDataRange(begin,end);this._rangeReaders.push(reader);return reader;}},{key:\"cancelAllRequests\",value:function cancelAllRequests(reason){if(this._fullRequestReader){this._fullRequestReader.cancel(reason);}var _iterator33=_createForOfIteratorHelper(this._rangeReaders.slice(0)),_step33;try{for(_iterator33.s();!(_step33=_iterator33.n()).done;){var reader=_step33.value;reader.cancel(reason);}}catch(err){_iterator33.e(err);}finally{_iterator33.f();}this._pdfDataRangeTransport.abort();}}]);return PDFDataTransportStream;}();exports.PDFDataTransportStream=PDFDataTransportStream;var PDFDataTransportStreamReader=/*#__PURE__*/function(){function PDFDataTransportStreamReader(stream,queuedChunks){var progressiveDone=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var contentDispositionFilename=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;_classCallCheck(this,PDFDataTransportStreamReader);this._stream=stream;this._done=progressiveDone||false;this._filename=(0,_display_utils.isPdfFile)(contentDispositionFilename)?contentDispositionFilename:null;this._queuedChunks=queuedChunks||[];this._loaded=0;var _iterator34=_createForOfIteratorHelper(this._queuedChunks),_step34;try{for(_iterator34.s();!(_step34=_iterator34.n()).done;){var chunk=_step34.value;this._loaded+=chunk.byteLength;}}catch(err){_iterator34.e(err);}finally{_iterator34.f();}this._requests=[];this._headersReady=Promise.resolve();stream._fullRequestReader=this;this.onProgress=null;}_createClass(PDFDataTransportStreamReader,[{key:\"_enqueue\",value:function _enqueue(chunk){if(this._done){return;}if(this._requests.length>0){var requestCapability=this._requests.shift();requestCapability.resolve({value:chunk,done:false});}else{this._queuedChunks.push(chunk);}this._loaded+=chunk.byteLength;}},{key:\"headersReady\",get:function get(){return this._headersReady;}},{key:\"filename\",get:function get(){return this._filename;}},{key:\"isRangeSupported\",get:function get(){return this._stream._isRangeSupported;}},{key:\"isStreamingSupported\",get:function get(){return this._stream._isStreamingSupported;}},{key:\"contentLength\",get:function get(){return this._stream._contentLength;}},{key:\"read\",value:function(){var _read=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee13(){var chunk,requestCapability;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee13$(_context13){while(1){switch(_context13.prev=_context13.next){case 0:if(!(this._queuedChunks.length>0)){_context13.next=3;break;}chunk=this._queuedChunks.shift();return _context13.abrupt(\"return\",{value:chunk,done:false});case 3:if(!this._done){_context13.next=5;break;}return _context13.abrupt(\"return\",{value:undefined,done:true});case 5:requestCapability=(0,_util.createPromiseCapability)();this._requests.push(requestCapability);return _context13.abrupt(\"return\",requestCapability.promise);case 8:case\"end\":return _context13.stop();}}},_callee13,this);}));function read(){return _read.apply(this,arguments);}return read;}()},{key:\"cancel\",value:function cancel(reason){this._done=true;var _iterator35=_createForOfIteratorHelper(this._requests),_step35;try{for(_iterator35.s();!(_step35=_iterator35.n()).done;){var requestCapability=_step35.value;requestCapability.resolve({value:undefined,done:true});}}catch(err){_iterator35.e(err);}finally{_iterator35.f();}this._requests.length=0;}},{key:\"progressiveDone\",value:function progressiveDone(){if(this._done){return;}this._done=true;}}]);return PDFDataTransportStreamReader;}();var PDFDataTransportStreamRangeReader=/*#__PURE__*/function(){function PDFDataTransportStreamRangeReader(stream,begin,end){_classCallCheck(this,PDFDataTransportStreamRangeReader);this._stream=stream;this._begin=begin;this._end=end;this._queuedChunk=null;this._requests=[];this._done=false;this.onProgress=null;}_createClass(PDFDataTransportStreamRangeReader,[{key:\"_enqueue\",value:function _enqueue(chunk){if(this._done){return;}if(this._requests.length===0){this._queuedChunk=chunk;}else{var requestsCapability=this._requests.shift();requestsCapability.resolve({value:chunk,done:false});var _iterator36=_createForOfIteratorHelper(this._requests),_step36;try{for(_iterator36.s();!(_step36=_iterator36.n()).done;){var requestCapability=_step36.value;requestCapability.resolve({value:undefined,done:true});}}catch(err){_iterator36.e(err);}finally{_iterator36.f();}this._requests.length=0;}this._done=true;this._stream._removeRangeReader(this);}},{key:\"isStreamingSupported\",get:function get(){return false;}},{key:\"read\",value:function(){var _read2=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee14(){var chunk,requestCapability;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee14$(_context14){while(1){switch(_context14.prev=_context14.next){case 0:if(!this._queuedChunk){_context14.next=4;break;}chunk=this._queuedChunk;this._queuedChunk=null;return _context14.abrupt(\"return\",{value:chunk,done:false});case 4:if(!this._done){_context14.next=6;break;}return _context14.abrupt(\"return\",{value:undefined,done:true});case 6:requestCapability=(0,_util.createPromiseCapability)();this._requests.push(requestCapability);return _context14.abrupt(\"return\",requestCapability.promise);case 9:case\"end\":return _context14.stop();}}},_callee14,this);}));function read(){return _read2.apply(this,arguments);}return read;}()},{key:\"cancel\",value:function cancel(reason){this._done=true;var _iterator37=_createForOfIteratorHelper(this._requests),_step37;try{for(_iterator37.s();!(_step37=_iterator37.n()).done;){var requestCapability=_step37.value;requestCapability.resolve({value:undefined,done:true});}}catch(err){_iterator37.e(err);}finally{_iterator37.f();}this._requests.length=0;this._stream._removeRangeReader(this);}}]);return PDFDataTransportStreamRangeReader;}();/***/},/* 17 */ /***/function(__unused_webpack_module,exports){Object.defineProperty(exports,\"__esModule\",{value:true});exports.XfaText=void 0;var XfaText=/*#__PURE__*/function(){function XfaText(){_classCallCheck(this,XfaText);}_createClass(XfaText,null,[{key:\"textContent\",value:function textContent(xfa){var items=[];var output={items:items,styles:Object.create(null)};function walk(node){var _node$attributes;if(!node){return;}var str=null;var name=node.name;if(name===\"#text\"){str=node.value;}else if(!XfaText.shouldBuildText(name)){return;}else if(node!==null&&node!==void 0&&(_node$attributes=node.attributes)!==null&&_node$attributes!==void 0&&_node$attributes.textContent){str=node.attributes.textContent;}else if(node.value){str=node.value;}if(str!==null){items.push({str:str});}if(!node.children){return;}var _iterator38=_createForOfIteratorHelper(node.children),_step38;try{for(_iterator38.s();!(_step38=_iterator38.n()).done;){var child=_step38.value;walk(child);}}catch(err){_iterator38.e(err);}finally{_iterator38.f();}}walk(xfa);return output;}},{key:\"shouldBuildText\",value:function shouldBuildText(name){return!(name===\"textarea\"||name===\"input\"||name===\"option\"||name===\"select\");}}]);return XfaText;}();exports.XfaText=XfaText;/***/},/* 18 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.AnnotationLayer=void 0;var _util=__w_pdfjs_require__(1);var _display_utils=__w_pdfjs_require__(5);var _annotation_storage=__w_pdfjs_require__(9);var _scripting_utils=__w_pdfjs_require__(19);var _xfa_layer=__w_pdfjs_require__(20);var DEFAULT_TAB_INDEX=1000;var GetElementsByNameSet=new WeakSet();function getRectDims(rect){return{width:rect[2]-rect[0],height:rect[3]-rect[1]};}var AnnotationElementFactory=/*#__PURE__*/function(){function AnnotationElementFactory(){_classCallCheck(this,AnnotationElementFactory);}_createClass(AnnotationElementFactory,null,[{key:\"create\",value:function create(parameters){var subtype=parameters.data.annotationType;switch(subtype){case _util.AnnotationType.LINK:return new LinkAnnotationElement(parameters);case _util.AnnotationType.TEXT:return new TextAnnotationElement(parameters);case _util.AnnotationType.WIDGET:var fieldType=parameters.data.fieldType;switch(fieldType){case\"Tx\":return new TextWidgetAnnotationElement(parameters);case\"Btn\":if(parameters.data.radioButton){return new RadioButtonWidgetAnnotationElement(parameters);}else if(parameters.data.checkBox){return new CheckboxWidgetAnnotationElement(parameters);}return new PushButtonWidgetAnnotationElement(parameters);case\"Ch\":return new ChoiceWidgetAnnotationElement(parameters);}return new WidgetAnnotationElement(parameters);case _util.AnnotationType.POPUP:return new PopupAnnotationElement(parameters);case _util.AnnotationType.FREETEXT:return new FreeTextAnnotationElement(parameters);case _util.AnnotationType.LINE:return new LineAnnotationElement(parameters);case _util.AnnotationType.SQUARE:return new SquareAnnotationElement(parameters);case _util.AnnotationType.CIRCLE:return new CircleAnnotationElement(parameters);case _util.AnnotationType.POLYLINE:return new PolylineAnnotationElement(parameters);case _util.AnnotationType.CARET:return new CaretAnnotationElement(parameters);case _util.AnnotationType.INK:return new InkAnnotationElement(parameters);case _util.AnnotationType.POLYGON:return new PolygonAnnotationElement(parameters);case _util.AnnotationType.HIGHLIGHT:return new HighlightAnnotationElement(parameters);case _util.AnnotationType.UNDERLINE:return new UnderlineAnnotationElement(parameters);case _util.AnnotationType.SQUIGGLY:return new SquigglyAnnotationElement(parameters);case _util.AnnotationType.STRIKEOUT:return new StrikeOutAnnotationElement(parameters);case _util.AnnotationType.STAMP:return new StampAnnotationElement(parameters);case _util.AnnotationType.FILEATTACHMENT:return new FileAttachmentAnnotationElement(parameters);default:return new AnnotationElement(parameters);}}}]);return AnnotationElementFactory;}();var AnnotationElement=/*#__PURE__*/function(){function AnnotationElement(parameters){var _ref40=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},_ref40$isRenderable=_ref40.isRenderable,isRenderable=_ref40$isRenderable===void 0?false:_ref40$isRenderable,_ref40$ignoreBorder=_ref40.ignoreBorder,ignoreBorder=_ref40$ignoreBorder===void 0?false:_ref40$ignoreBorder,_ref40$createQuadrila=_ref40.createQuadrilaterals,createQuadrilaterals=_ref40$createQuadrila===void 0?false:_ref40$createQuadrila;_classCallCheck(this,AnnotationElement);this.isRenderable=isRenderable;this.data=parameters.data;this.layer=parameters.layer;this.page=parameters.page;this.viewport=parameters.viewport;this.linkService=parameters.linkService;this.downloadManager=parameters.downloadManager;this.imageResourcesPath=parameters.imageResourcesPath;this.renderForms=parameters.renderForms;this.svgFactory=parameters.svgFactory;this.annotationStorage=parameters.annotationStorage;this.enableScripting=parameters.enableScripting;this.hasJSActions=parameters.hasJSActions;this._fieldObjects=parameters.fieldObjects;this._mouseState=parameters.mouseState;if(isRenderable){this.container=this._createContainer(ignoreBorder);}if(createQuadrilaterals){this.quadrilaterals=this._createQuadrilaterals(ignoreBorder);}}_createClass(AnnotationElement,[{key:\"_createContainer\",value:function _createContainer(){var ignoreBorder=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var data=this.data,page=this.page,viewport=this.viewport;var container=document.createElement(\"section\");var _getRectDims=getRectDims(data.rect),width=_getRectDims.width,height=_getRectDims.height;container.setAttribute(\"data-annotation-id\",data.id);var rect=_util.Util.normalizeRect([data.rect[0],page.view[3]-data.rect[1]+page.view[1],data.rect[2],page.view[3]-data.rect[3]+page.view[1]]);if(data.hasOwnCanvas){var transform=viewport.transform.slice();var _util$Util$singularVa3=_util.Util.singularValueDecompose2dScale(transform),_util$Util$singularVa4=_slicedToArray(_util$Util$singularVa3,2),scaleX=_util$Util$singularVa4[0],scaleY=_util$Util$singularVa4[1];width=Math.ceil(width*scaleX);height=Math.ceil(height*scaleY);rect[0]*=scaleX;rect[1]*=scaleY;for(var i=0;i<4;i++){transform[i]=Math.sign(transform[i]);}container.style.transform=\"matrix(\".concat(transform.join(\",\"),\")\");}else{container.style.transform=\"matrix(\".concat(viewport.transform.join(\",\"),\")\");}container.style.transformOrigin=\"\".concat(-rect[0],\"px \").concat(-rect[1],\"px\");if(!ignoreBorder&&data.borderStyle.width>0){container.style.borderWidth=\"\".concat(data.borderStyle.width,\"px\");if(data.borderStyle.style!==_util.AnnotationBorderStyleType.UNDERLINE){width-=2*data.borderStyle.width;height-=2*data.borderStyle.width;}var horizontalRadius=data.borderStyle.horizontalCornerRadius;var verticalRadius=data.borderStyle.verticalCornerRadius;if(horizontalRadius>0||verticalRadius>0){var radius=\"\".concat(horizontalRadius,\"px / \").concat(verticalRadius,\"px\");container.style.borderRadius=radius;}switch(data.borderStyle.style){case _util.AnnotationBorderStyleType.SOLID:container.style.borderStyle=\"solid\";break;case _util.AnnotationBorderStyleType.DASHED:container.style.borderStyle=\"dashed\";break;case _util.AnnotationBorderStyleType.BEVELED:(0,_util.warn)(\"Unimplemented border style: beveled\");break;case _util.AnnotationBorderStyleType.INSET:(0,_util.warn)(\"Unimplemented border style: inset\");break;case _util.AnnotationBorderStyleType.UNDERLINE:container.style.borderBottomStyle=\"solid\";break;default:break;}var borderColor=data.borderColor||data.color||null;if(borderColor){container.style.borderColor=_util.Util.makeHexColor(data.color[0]|0,data.color[1]|0,data.color[2]|0);}else{container.style.borderWidth=0;}}container.style.left=\"\".concat(rect[0],\"px\");container.style.top=\"\".concat(rect[1],\"px\");if(data.hasOwnCanvas){container.style.width=container.style.height=\"auto\";}else{container.style.width=\"\".concat(width,\"px\");container.style.height=\"\".concat(height,\"px\");}return container;}},{key:\"_createQuadrilaterals\",value:function _createQuadrilaterals(){var ignoreBorder=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(!this.data.quadPoints){return null;}var quadrilaterals=[];var savedRect=this.data.rect;var _iterator39=_createForOfIteratorHelper(this.data.quadPoints),_step39;try{for(_iterator39.s();!(_step39=_iterator39.n()).done;){var quadPoint=_step39.value;this.data.rect=[quadPoint[2].x,quadPoint[2].y,quadPoint[1].x,quadPoint[1].y];quadrilaterals.push(this._createContainer(ignoreBorder));}}catch(err){_iterator39.e(err);}finally{_iterator39.f();}this.data.rect=savedRect;return quadrilaterals;}},{key:\"_createPopup\",value:function _createPopup(trigger,data){var container=this.container;if(this.quadrilaterals){trigger=trigger||this.quadrilaterals;container=this.quadrilaterals[0];}if(!trigger){trigger=document.createElement(\"div\");trigger.style.height=container.style.height;trigger.style.width=container.style.width;container.appendChild(trigger);}var popupElement=new PopupElement({container:container,trigger:trigger,color:data.color,titleObj:data.titleObj,modificationDate:data.modificationDate,contentsObj:data.contentsObj,richText:data.richText,hideWrapper:true});var popup=popupElement.render();popup.style.left=container.style.width;container.appendChild(popup);}},{key:\"_renderQuadrilaterals\",value:function _renderQuadrilaterals(className){var _iterator40=_createForOfIteratorHelper(this.quadrilaterals),_step40;try{for(_iterator40.s();!(_step40=_iterator40.n()).done;){var quadrilateral=_step40.value;quadrilateral.className=className;}}catch(err){_iterator40.e(err);}finally{_iterator40.f();}return this.quadrilaterals;}},{key:\"render\",value:function render(){(0,_util.unreachable)(\"Abstract method `AnnotationElement.render` called\");}},{key:\"_getElementsByName\",value:function _getElementsByName(name){var skipId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var fields=[];if(this._fieldObjects){var fieldObj=this._fieldObjects[name];if(fieldObj){var _iterator41=_createForOfIteratorHelper(fieldObj),_step41;try{for(_iterator41.s();!(_step41=_iterator41.n()).done;){var _step41$value=_step41.value,page=_step41$value.page,id=_step41$value.id,exportValues=_step41$value.exportValues;if(page===-1){continue;}if(id===skipId){continue;}var exportValue=typeof exportValues===\"string\"?exportValues:null;var domElement=document.getElementById(id);if(domElement&&!GetElementsByNameSet.has(domElement)){(0,_util.warn)(\"_getElementsByName - element not allowed: \".concat(id));continue;}fields.push({id:id,exportValue:exportValue,domElement:domElement});}}catch(err){_iterator41.e(err);}finally{_iterator41.f();}}return fields;}var _iterator42=_createForOfIteratorHelper(document.getElementsByName(name)),_step42;try{for(_iterator42.s();!(_step42=_iterator42.n()).done;){var _domElement=_step42.value;var _id4=_domElement.id,_exportValue=_domElement.exportValue;if(_id4===skipId){continue;}if(!GetElementsByNameSet.has(_domElement)){continue;}fields.push({id:_id4,exportValue:_exportValue,domElement:_domElement});}}catch(err){_iterator42.e(err);}finally{_iterator42.f();}return fields;}}],[{key:\"platform\",get:function get(){var platform=typeof navigator!==\"undefined\"?navigator.platform:\"\";return(0,_util.shadow)(this,\"platform\",{isWin:platform.includes(\"Win\"),isMac:platform.includes(\"Mac\")});}}]);return AnnotationElement;}();var LinkAnnotationElement=/*#__PURE__*/function(_AnnotationElement){_inherits(LinkAnnotationElement,_AnnotationElement);var _super20=_createSuper(LinkAnnotationElement);function LinkAnnotationElement(parameters){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;_classCallCheck(this,LinkAnnotationElement);var isRenderable=!!(parameters.data.url||parameters.data.dest||parameters.data.action||parameters.data.isTooltipOnly||parameters.data.resetForm||parameters.data.actions&&(parameters.data.actions.Action||parameters.data.actions[\"Mouse Up\"]||parameters.data.actions[\"Mouse Down\"]));return _super20.call(this,parameters,{isRenderable:isRenderable,ignoreBorder:!!(options!==null&&options!==void 0&&options.ignoreBorder),createQuadrilaterals:true});}_createClass(LinkAnnotationElement,[{key:\"render\",value:function render(){var data=this.data,linkService=this.linkService;var link=document.createElement(\"a\");if(data.url){linkService.addLinkAttributes(link,data.url,data.newWindow);}else if(data.action){this._bindNamedAction(link,data.action);}else if(data.dest){this._bindLink(link,data.dest);}else{var hasClickAction=false;if(data.actions&&(data.actions.Action||data.actions[\"Mouse Up\"]||data.actions[\"Mouse Down\"])&&this.enableScripting&&this.hasJSActions){hasClickAction=true;this._bindJSAction(link,data);}if(data.resetForm){this._bindResetFormAction(link,data.resetForm);}else if(!hasClickAction){this._bindLink(link,\"\");}}if(this.quadrilaterals){return this._renderQuadrilaterals(\"linkAnnotation\").map(function(quadrilateral,index){var linkElement=index===0?link:link.cloneNode();quadrilateral.appendChild(linkElement);return quadrilateral;});}this.container.className=\"linkAnnotation\";this.container.appendChild(link);return this.container;}},{key:\"_bindLink\",value:function _bindLink(link,destination){var _this32=this;link.href=this.linkService.getDestinationHash(destination);link.onclick=function(){if(destination){_this32.linkService.goToDestination(destination);}return false;};if(destination||destination===\"\"){link.className=\"internalLink\";}}},{key:\"_bindNamedAction\",value:function _bindNamedAction(link,action){var _this33=this;link.href=this.linkService.getAnchorUrl(\"\");link.onclick=function(){_this33.linkService.executeNamedAction(action);return false;};link.className=\"internalLink\";}},{key:\"_bindJSAction\",value:function _bindJSAction(link,data){var _this34=this;link.href=this.linkService.getAnchorUrl(\"\");var map=new Map([[\"Action\",\"onclick\"],[\"Mouse Up\",\"onmouseup\"],[\"Mouse Down\",\"onmousedown\"]]);var _loop2=function _loop2(){var name=_Object$keys[_i4];var jsName=map.get(name);if(!jsName){return\"continue\";}link[jsName]=function(){var _this34$linkService$e;(_this34$linkService$e=_this34.linkService.eventBus)===null||_this34$linkService$e===void 0?void 0:_this34$linkService$e.dispatch(\"dispatcheventinsandbox\",{source:_this34,detail:{id:data.id,name:name}});return false;};};for(var _i4=0,_Object$keys=Object.keys(data.actions);_i4<_Object$keys.length;_i4++){var _ret=_loop2();if(_ret===\"continue\")continue;}if(!link.onclick){link.onclick=function(){return false;};}link.className=\"internalLink\";}},{key:\"_bindResetFormAction\",value:function _bindResetFormAction(link,resetForm){var _this35=this;var otherClickAction=link.onclick;if(!otherClickAction){link.href=this.linkService.getAnchorUrl(\"\");}link.className=\"internalLink\";if(!this._fieldObjects){(0,_util.warn)(\"_bindResetFormAction - \\\"resetForm\\\" action not supported, \"+\"ensure that the `fieldObjects` parameter is provided.\");if(!otherClickAction){link.onclick=function(){return false;};}return;}link.onclick=function(){if(otherClickAction){otherClickAction();}var resetFormFields=resetForm.fields,resetFormRefs=resetForm.refs,include=resetForm.include;var allFields=[];if(resetFormFields.length!==0||resetFormRefs.length!==0){var fieldIds=new Set(resetFormRefs);var _iterator43=_createForOfIteratorHelper(resetFormFields),_step43;try{for(_iterator43.s();!(_step43=_iterator43.n()).done;){var fieldName=_step43.value;var _fields=_this35._fieldObjects[fieldName]||[];var _iterator45=_createForOfIteratorHelper(_fields),_step45;try{for(_iterator45.s();!(_step45=_iterator45.n()).done;){var id=_step45.value.id;fieldIds.add(id);}}catch(err){_iterator45.e(err);}finally{_iterator45.f();}}}catch(err){_iterator43.e(err);}finally{_iterator43.f();}for(var _i5=0,_Object$values=Object.values(_this35._fieldObjects);_i5<_Object$values.length;_i5++){var fields=_Object$values[_i5];var _iterator44=_createForOfIteratorHelper(fields),_step44;try{for(_iterator44.s();!(_step44=_iterator44.n()).done;){var field=_step44.value;if(fieldIds.has(field.id)===include){allFields.push(field);}}}catch(err){_iterator44.e(err);}finally{_iterator44.f();}}}else{for(var _i6=0,_Object$values2=Object.values(_this35._fieldObjects);_i6<_Object$values2.length;_i6++){var _fields2=_Object$values2[_i6];allFields.push.apply(allFields,_toConsumableArray(_fields2));}}var storage=_this35.annotationStorage;var allIds=[];for(var _i7=0,_allFields=allFields;_i7<_allFields.length;_i7++){var _field=_allFields[_i7];var _id5=_field.id;allIds.push(_id5);switch(_field.type){case\"text\":{var value=_field.defaultValue||\"\";storage.setValue(_id5,{value:value,valueAsString:value});break;}case\"checkbox\":case\"radiobutton\":{var _value2=_field.defaultValue===_field.exportValues;storage.setValue(_id5,{value:_value2});break;}case\"combobox\":case\"listbox\":{var _value3=_field.defaultValue||\"\";storage.setValue(_id5,{value:_value3});break;}default:continue;}var domElement=document.getElementById(_id5);if(!domElement||!GetElementsByNameSet.has(domElement)){continue;}domElement.dispatchEvent(new Event(\"resetform\"));}if(_this35.enableScripting){var _this35$linkService$e;(_this35$linkService$e=_this35.linkService.eventBus)===null||_this35$linkService$e===void 0?void 0:_this35$linkService$e.dispatch(\"dispatcheventinsandbox\",{source:_this35,detail:{id:\"app\",ids:allIds,name:\"ResetForm\"}});}return false;};}}]);return LinkAnnotationElement;}(AnnotationElement);var TextAnnotationElement=/*#__PURE__*/function(_AnnotationElement2){_inherits(TextAnnotationElement,_AnnotationElement2);var _super21=_createSuper(TextAnnotationElement);function TextAnnotationElement(parameters){var _parameters$data$titl,_parameters$data$cont,_parameters$data$rich;_classCallCheck(this,TextAnnotationElement);var isRenderable=!!(parameters.data.hasPopup||(_parameters$data$titl=parameters.data.titleObj)!==null&&_parameters$data$titl!==void 0&&_parameters$data$titl.str||(_parameters$data$cont=parameters.data.contentsObj)!==null&&_parameters$data$cont!==void 0&&_parameters$data$cont.str||(_parameters$data$rich=parameters.data.richText)!==null&&_parameters$data$rich!==void 0&&_parameters$data$rich.str);return _super21.call(this,parameters,{isRenderable:isRenderable});}_createClass(TextAnnotationElement,[{key:\"render\",value:function render(){this.container.className=\"textAnnotation\";var image=document.createElement(\"img\");image.style.height=this.container.style.height;image.style.width=this.container.style.width;image.src=this.imageResourcesPath+\"annotation-\"+this.data.name.toLowerCase()+\".svg\";image.alt=\"[{{type}} Annotation]\";image.dataset.l10nId=\"text_annotation_type\";image.dataset.l10nArgs=JSON.stringify({type:this.data.name});if(!this.data.hasPopup){this._createPopup(image,this.data);}this.container.appendChild(image);return this.container;}}]);return TextAnnotationElement;}(AnnotationElement);var WidgetAnnotationElement=/*#__PURE__*/function(_AnnotationElement3){_inherits(WidgetAnnotationElement,_AnnotationElement3);var _super22=_createSuper(WidgetAnnotationElement);function WidgetAnnotationElement(){_classCallCheck(this,WidgetAnnotationElement);return _super22.apply(this,arguments);}_createClass(WidgetAnnotationElement,[{key:\"render\",value:function render(){if(this.data.alternativeText){this.container.title=this.data.alternativeText;}return this.container;}},{key:\"_getKeyModifier\",value:function _getKeyModifier(event){var _AnnotationElement$pl=AnnotationElement.platform,isWin=_AnnotationElement$pl.isWin,isMac=_AnnotationElement$pl.isMac;return isWin&&event.ctrlKey||isMac&&event.metaKey;}},{key:\"_setEventListener\",value:function _setEventListener(element,baseName,eventName,valueGetter){var _this36=this;if(baseName.includes(\"mouse\")){element.addEventListener(baseName,function(event){var _this36$linkService$e;(_this36$linkService$e=_this36.linkService.eventBus)===null||_this36$linkService$e===void 0?void 0:_this36$linkService$e.dispatch(\"dispatcheventinsandbox\",{source:_this36,detail:{id:_this36.data.id,name:eventName,value:valueGetter(event),shift:event.shiftKey,modifier:_this36._getKeyModifier(event)}});});}else{element.addEventListener(baseName,function(event){var _this36$linkService$e2;(_this36$linkService$e2=_this36.linkService.eventBus)===null||_this36$linkService$e2===void 0?void 0:_this36$linkService$e2.dispatch(\"dispatcheventinsandbox\",{source:_this36,detail:{id:_this36.data.id,name:eventName,value:valueGetter(event)}});});}}},{key:\"_setEventListeners\",value:function _setEventListeners(element,names,getter){var _iterator46=_createForOfIteratorHelper(names),_step46;try{for(_iterator46.s();!(_step46=_iterator46.n()).done;){var _this$data$actions;var _step46$value=_slicedToArray(_step46.value,2),baseName=_step46$value[0],eventName=_step46$value[1];if(eventName===\"Action\"||(_this$data$actions=this.data.actions)!==null&&_this$data$actions!==void 0&&_this$data$actions[eventName]){this._setEventListener(element,baseName,eventName,getter);}}}catch(err){_iterator46.e(err);}finally{_iterator46.f();}}},{key:\"_setBackgroundColor\",value:function _setBackgroundColor(element){var color=this.data.backgroundColor||null;element.style.backgroundColor=color===null?\"transparent\":_util.Util.makeHexColor(color[0],color[1],color[2]);}},{key:\"_dispatchEventFromSandbox\",value:function _dispatchEventFromSandbox(actions,jsEvent){var _this37=this;var setColor=function setColor(jsName,styleName,event){var color=event.detail[jsName];event.target.style[styleName]=_scripting_utils.ColorConverters[\"\".concat(color[0],\"_HTML\")](color.slice(1));};var commonActions={display:function display(event){var hidden=event.detail.display%2===1;event.target.style.visibility=hidden?\"hidden\":\"visible\";_this37.annotationStorage.setValue(_this37.data.id,{hidden:hidden,print:event.detail.display===0||event.detail.display===3});},print:function print(event){_this37.annotationStorage.setValue(_this37.data.id,{print:event.detail.print});},hidden:function hidden(event){event.target.style.visibility=event.detail.hidden?\"hidden\":\"visible\";_this37.annotationStorage.setValue(_this37.data.id,{hidden:event.detail.hidden});},focus:function focus(event){setTimeout(function(){return event.target.focus({preventScroll:false});},0);},userName:function userName(event){event.target.title=event.detail.userName;},readonly:function readonly(event){if(event.detail.readonly){event.target.setAttribute(\"readonly\",\"\");}else{event.target.removeAttribute(\"readonly\");}},required:function required(event){if(event.detail.required){event.target.setAttribute(\"required\",\"\");}else{event.target.removeAttribute(\"required\");}},bgColor:function bgColor(event){setColor(\"bgColor\",\"backgroundColor\",event);},fillColor:function fillColor(event){setColor(\"fillColor\",\"backgroundColor\",event);},fgColor:function fgColor(event){setColor(\"fgColor\",\"color\",event);},textColor:function textColor(event){setColor(\"textColor\",\"color\",event);},borderColor:function borderColor(event){setColor(\"borderColor\",\"borderColor\",event);},strokeColor:function strokeColor(event){setColor(\"strokeColor\",\"borderColor\",event);}};for(var _i8=0,_Object$keys2=Object.keys(jsEvent.detail);_i8<_Object$keys2.length;_i8++){var name=_Object$keys2[_i8];var action=actions[name]||commonActions[name];if(action){action(jsEvent);}}}}]);return WidgetAnnotationElement;}(AnnotationElement);var TextWidgetAnnotationElement=/*#__PURE__*/function(_WidgetAnnotationElem){_inherits(TextWidgetAnnotationElement,_WidgetAnnotationElem);var _super23=_createSuper(TextWidgetAnnotationElement);function TextWidgetAnnotationElement(parameters){_classCallCheck(this,TextWidgetAnnotationElement);var isRenderable=parameters.renderForms||!parameters.data.hasAppearance&&!!parameters.data.fieldValue;return _super23.call(this,parameters,{isRenderable:isRenderable});}_createClass(TextWidgetAnnotationElement,[{key:\"setPropertyOnSiblings\",value:function setPropertyOnSiblings(base,key,value,keyInStorage){var storage=this.annotationStorage;var _iterator47=_createForOfIteratorHelper(this._getElementsByName(base.name,base.id)),_step47;try{for(_iterator47.s();!(_step47=_iterator47.n()).done;){var element=_step47.value;if(element.domElement){element.domElement[key]=value;}storage.setValue(element.id,_defineProperty({},keyInStorage,value));}}catch(err){_iterator47.e(err);}finally{_iterator47.f();}}},{key:\"render\",value:function render(){var _this38=this;var storage=this.annotationStorage;var id=this.data.id;this.container.className=\"textWidgetAnnotation\";var element=null;if(this.renderForms){var storedData=storage.getValue(id,{value:this.data.fieldValue,valueAsString:this.data.fieldValue});var textContent=storedData.valueAsString||storedData.value||\"\";var elementData={userValue:null,formattedValue:null};if(this.data.multiLine){element=document.createElement(\"textarea\");element.textContent=textContent;}else{element=document.createElement(\"input\");element.type=\"text\";element.setAttribute(\"value\",textContent);}GetElementsByNameSet.add(element);element.disabled=this.data.readOnly;element.name=this.data.fieldName;element.tabIndex=DEFAULT_TAB_INDEX;elementData.userValue=textContent;element.setAttribute(\"id\",id);element.addEventListener(\"input\",function(event){storage.setValue(id,{value:event.target.value});_this38.setPropertyOnSiblings(element,\"value\",event.target.value,\"value\");});element.addEventListener(\"resetform\",function(event){var defaultValue=_this38.data.defaultFieldValue||\"\";element.value=elementData.userValue=defaultValue;delete elementData.formattedValue;});var blurListener=function blurListener(event){if(elementData.formattedValue){event.target.value=elementData.formattedValue;}event.target.scrollLeft=0;};if(this.enableScripting&&this.hasJSActions){var _this$data$actions2;element.addEventListener(\"focus\",function(event){if(elementData.userValue){event.target.value=elementData.userValue;}});element.addEventListener(\"updatefromsandbox\",function(jsEvent){var actions={value:function value(event){elementData.userValue=event.detail.value||\"\";storage.setValue(id,{value:elementData.userValue.toString()});if(!elementData.formattedValue){event.target.value=elementData.userValue;}},valueAsString:function valueAsString(event){elementData.formattedValue=event.detail.valueAsString||\"\";if(event.target!==document.activeElement){event.target.value=elementData.formattedValue;}storage.setValue(id,{formattedValue:elementData.formattedValue});},selRange:function selRange(event){var _event$detail$selRang=_slicedToArray(event.detail.selRange,2),selStart=_event$detail$selRang[0],selEnd=_event$detail$selRang[1];if(selStart>=0&&selEnd<event.target.value.length){event.target.setSelectionRange(selStart,selEnd);}}};_this38._dispatchEventFromSandbox(actions,jsEvent);});element.addEventListener(\"keydown\",function(event){var _this38$linkService$e;var commitKey=-1;if(event.key===\"Escape\"){commitKey=0;}else if(event.key===\"Enter\"){commitKey=2;}else if(event.key===\"Tab\"){commitKey=3;}if(commitKey===-1){return;}elementData.userValue=event.target.value;(_this38$linkService$e=_this38.linkService.eventBus)===null||_this38$linkService$e===void 0?void 0:_this38$linkService$e.dispatch(\"dispatcheventinsandbox\",{source:_this38,detail:{id:id,name:\"Keystroke\",value:event.target.value,willCommit:true,commitKey:commitKey,selStart:event.target.selectionStart,selEnd:event.target.selectionEnd}});});var _blurListener=blurListener;blurListener=null;element.addEventListener(\"blur\",function(event){elementData.userValue=event.target.value;if(_this38._mouseState.isDown){var _this38$linkService$e2;(_this38$linkService$e2=_this38.linkService.eventBus)===null||_this38$linkService$e2===void 0?void 0:_this38$linkService$e2.dispatch(\"dispatcheventinsandbox\",{source:_this38,detail:{id:id,name:\"Keystroke\",value:event.target.value,willCommit:true,commitKey:1,selStart:event.target.selectionStart,selEnd:event.target.selectionEnd}});}_blurListener(event);});if((_this$data$actions2=this.data.actions)!==null&&_this$data$actions2!==void 0&&_this$data$actions2.Keystroke){element.addEventListener(\"beforeinput\",function(event){var _this38$linkService$e3;elementData.formattedValue=\"\";var data=event.data,target=event.target;var value=target.value,selectionStart=target.selectionStart,selectionEnd=target.selectionEnd;(_this38$linkService$e3=_this38.linkService.eventBus)===null||_this38$linkService$e3===void 0?void 0:_this38$linkService$e3.dispatch(\"dispatcheventinsandbox\",{source:_this38,detail:{id:id,name:\"Keystroke\",value:value,change:data,willCommit:false,selStart:selectionStart,selEnd:selectionEnd}});});}this._setEventListeners(element,[[\"focus\",\"Focus\"],[\"blur\",\"Blur\"],[\"mousedown\",\"Mouse Down\"],[\"mouseenter\",\"Mouse Enter\"],[\"mouseleave\",\"Mouse Exit\"],[\"mouseup\",\"Mouse Up\"]],function(event){return event.target.value;});}if(blurListener){element.addEventListener(\"blur\",blurListener);}if(this.data.maxLen!==null){element.maxLength=this.data.maxLen;}if(this.data.comb){var fieldWidth=this.data.rect[2]-this.data.rect[0];var combWidth=fieldWidth/this.data.maxLen;element.classList.add(\"comb\");element.style.letterSpacing=\"calc(\".concat(combWidth,\"px - 1ch)\");}}else{element=document.createElement(\"div\");element.textContent=this.data.fieldValue;element.style.verticalAlign=\"middle\";element.style.display=\"table-cell\";}this._setTextStyle(element);this._setBackgroundColor(element);this.container.appendChild(element);return this.container;}},{key:\"_setTextStyle\",value:function _setTextStyle(element){var TEXT_ALIGNMENT=[\"left\",\"center\",\"right\"];var _this$data$defaultApp=this.data.defaultAppearanceData,fontSize=_this$data$defaultApp.fontSize,fontColor=_this$data$defaultApp.fontColor;var style=element.style;if(fontSize){style.fontSize=\"\".concat(fontSize,\"px\");}style.color=_util.Util.makeHexColor(fontColor[0],fontColor[1],fontColor[2]);if(this.data.textAlignment!==null){style.textAlign=TEXT_ALIGNMENT[this.data.textAlignment];}}}]);return TextWidgetAnnotationElement;}(WidgetAnnotationElement);var CheckboxWidgetAnnotationElement=/*#__PURE__*/function(_WidgetAnnotationElem2){_inherits(CheckboxWidgetAnnotationElement,_WidgetAnnotationElem2);var _super24=_createSuper(CheckboxWidgetAnnotationElement);function CheckboxWidgetAnnotationElement(parameters){_classCallCheck(this,CheckboxWidgetAnnotationElement);return _super24.call(this,parameters,{isRenderable:parameters.renderForms});}_createClass(CheckboxWidgetAnnotationElement,[{key:\"render\",value:function render(){var _this39=this;var storage=this.annotationStorage;var data=this.data;var id=data.id;var value=storage.getValue(id,{value:data.exportValue===data.fieldValue}).value;if(typeof value===\"string\"){value=value!==\"Off\";storage.setValue(id,{value:value});}this.container.className=\"buttonWidgetAnnotation checkBox\";var element=document.createElement(\"input\");GetElementsByNameSet.add(element);element.disabled=data.readOnly;element.type=\"checkbox\";element.name=data.fieldName;if(value){element.setAttribute(\"checked\",true);}element.setAttribute(\"id\",id);element.setAttribute(\"exportValue\",data.exportValue);element.tabIndex=DEFAULT_TAB_INDEX;element.addEventListener(\"change\",function(event){var _event$target=event.target,name=_event$target.name,checked=_event$target.checked;var _iterator48=_createForOfIteratorHelper(_this39._getElementsByName(name,id)),_step48;try{for(_iterator48.s();!(_step48=_iterator48.n()).done;){var checkbox=_step48.value;var curChecked=checked&&checkbox.exportValue===data.exportValue;if(checkbox.domElement){checkbox.domElement.checked=curChecked;}storage.setValue(checkbox.id,{value:curChecked});}}catch(err){_iterator48.e(err);}finally{_iterator48.f();}storage.setValue(id,{value:checked});});element.addEventListener(\"resetform\",function(event){var defaultValue=data.defaultFieldValue||\"Off\";event.target.checked=defaultValue===data.exportValue;});if(this.enableScripting&&this.hasJSActions){element.addEventListener(\"updatefromsandbox\",function(jsEvent){var actions={value:function value(event){event.target.checked=event.detail.value!==\"Off\";storage.setValue(id,{value:event.target.checked});}};_this39._dispatchEventFromSandbox(actions,jsEvent);});this._setEventListeners(element,[[\"change\",\"Validate\"],[\"change\",\"Action\"],[\"focus\",\"Focus\"],[\"blur\",\"Blur\"],[\"mousedown\",\"Mouse Down\"],[\"mouseenter\",\"Mouse Enter\"],[\"mouseleave\",\"Mouse Exit\"],[\"mouseup\",\"Mouse Up\"]],function(event){return event.target.checked;});}this._setBackgroundColor(element);this.container.appendChild(element);return this.container;}}]);return CheckboxWidgetAnnotationElement;}(WidgetAnnotationElement);var RadioButtonWidgetAnnotationElement=/*#__PURE__*/function(_WidgetAnnotationElem3){_inherits(RadioButtonWidgetAnnotationElement,_WidgetAnnotationElem3);var _super25=_createSuper(RadioButtonWidgetAnnotationElement);function RadioButtonWidgetAnnotationElement(parameters){_classCallCheck(this,RadioButtonWidgetAnnotationElement);return _super25.call(this,parameters,{isRenderable:parameters.renderForms});}_createClass(RadioButtonWidgetAnnotationElement,[{key:\"render\",value:function render(){var _this40=this;this.container.className=\"buttonWidgetAnnotation radioButton\";var storage=this.annotationStorage;var data=this.data;var id=data.id;var value=storage.getValue(id,{value:data.fieldValue===data.buttonValue}).value;if(typeof value===\"string\"){value=value!==data.buttonValue;storage.setValue(id,{value:value});}var element=document.createElement(\"input\");GetElementsByNameSet.add(element);element.disabled=data.readOnly;element.type=\"radio\";element.name=data.fieldName;if(value){element.setAttribute(\"checked\",true);}element.setAttribute(\"id\",id);element.tabIndex=DEFAULT_TAB_INDEX;element.addEventListener(\"change\",function(event){var _event$target2=event.target,name=_event$target2.name,checked=_event$target2.checked;var _iterator49=_createForOfIteratorHelper(_this40._getElementsByName(name,id)),_step49;try{for(_iterator49.s();!(_step49=_iterator49.n()).done;){var radio=_step49.value;storage.setValue(radio.id,{value:false});}}catch(err){_iterator49.e(err);}finally{_iterator49.f();}storage.setValue(id,{value:checked});});element.addEventListener(\"resetform\",function(event){var defaultValue=data.defaultFieldValue;event.target.checked=defaultValue!==null&&defaultValue!==undefined&&defaultValue===data.buttonValue;});if(this.enableScripting&&this.hasJSActions){var pdfButtonValue=data.buttonValue;element.addEventListener(\"updatefromsandbox\",function(jsEvent){var actions={value:function value(event){var checked=pdfButtonValue===event.detail.value;var _iterator50=_createForOfIteratorHelper(_this40._getElementsByName(event.target.name)),_step50;try{for(_iterator50.s();!(_step50=_iterator50.n()).done;){var radio=_step50.value;var curChecked=checked&&radio.id===id;if(radio.domElement){radio.domElement.checked=curChecked;}storage.setValue(radio.id,{value:curChecked});}}catch(err){_iterator50.e(err);}finally{_iterator50.f();}}};_this40._dispatchEventFromSandbox(actions,jsEvent);});this._setEventListeners(element,[[\"change\",\"Validate\"],[\"change\",\"Action\"],[\"focus\",\"Focus\"],[\"blur\",\"Blur\"],[\"mousedown\",\"Mouse Down\"],[\"mouseenter\",\"Mouse Enter\"],[\"mouseleave\",\"Mouse Exit\"],[\"mouseup\",\"Mouse Up\"]],function(event){return event.target.checked;});}this._setBackgroundColor(element);this.container.appendChild(element);return this.container;}}]);return RadioButtonWidgetAnnotationElement;}(WidgetAnnotationElement);var PushButtonWidgetAnnotationElement=/*#__PURE__*/function(_LinkAnnotationElemen){_inherits(PushButtonWidgetAnnotationElement,_LinkAnnotationElemen);var _super26=_createSuper(PushButtonWidgetAnnotationElement);function PushButtonWidgetAnnotationElement(parameters){_classCallCheck(this,PushButtonWidgetAnnotationElement);return _super26.call(this,parameters,{ignoreBorder:parameters.data.hasAppearance});}_createClass(PushButtonWidgetAnnotationElement,[{key:\"render\",value:function render(){var container=_get(_getPrototypeOf(PushButtonWidgetAnnotationElement.prototype),\"render\",this).call(this);container.className=\"buttonWidgetAnnotation pushButton\";if(this.data.alternativeText){container.title=this.data.alternativeText;}return container;}}]);return PushButtonWidgetAnnotationElement;}(LinkAnnotationElement);var ChoiceWidgetAnnotationElement=/*#__PURE__*/function(_WidgetAnnotationElem4){_inherits(ChoiceWidgetAnnotationElement,_WidgetAnnotationElem4);var _super27=_createSuper(ChoiceWidgetAnnotationElement);function ChoiceWidgetAnnotationElement(parameters){_classCallCheck(this,ChoiceWidgetAnnotationElement);return _super27.call(this,parameters,{isRenderable:parameters.renderForms});}_createClass(ChoiceWidgetAnnotationElement,[{key:\"render\",value:function render(){var _this41=this;this.container.className=\"choiceWidgetAnnotation\";var storage=this.annotationStorage;var id=this.data.id;storage.getValue(id,{value:this.data.fieldValue.length>0?this.data.fieldValue[0]:undefined});var fontSize=this.data.defaultAppearanceData.fontSize;if(!fontSize){fontSize=9;}var fontSizeStyle=\"calc(\".concat(fontSize,\"px * var(--zoom-factor))\");var selectElement=document.createElement(\"select\");GetElementsByNameSet.add(selectElement);selectElement.disabled=this.data.readOnly;selectElement.name=this.data.fieldName;selectElement.setAttribute(\"id\",id);selectElement.tabIndex=DEFAULT_TAB_INDEX;selectElement.style.fontSize=\"\".concat(fontSize,\"px\");if(!this.data.combo){selectElement.size=this.data.options.length;if(this.data.multiSelect){selectElement.multiple=true;}}selectElement.addEventListener(\"resetform\",function(event){var defaultValue=_this41.data.defaultFieldValue;var _iterator51=_createForOfIteratorHelper(selectElement.options),_step51;try{for(_iterator51.s();!(_step51=_iterator51.n()).done;){var option=_step51.value;option.selected=option.value===defaultValue;}}catch(err){_iterator51.e(err);}finally{_iterator51.f();}});var _iterator52=_createForOfIteratorHelper(this.data.options),_step52;try{for(_iterator52.s();!(_step52=_iterator52.n()).done;){var option=_step52.value;var optionElement=document.createElement(\"option\");optionElement.textContent=option.displayValue;optionElement.value=option.exportValue;if(this.data.combo){optionElement.style.fontSize=fontSizeStyle;}if(this.data.fieldValue.includes(option.exportValue)){optionElement.setAttribute(\"selected\",true);}selectElement.appendChild(optionElement);}}catch(err){_iterator52.e(err);}finally{_iterator52.f();}var getValue=function getValue(event,isExport){var name=isExport?\"value\":\"textContent\";var options=event.target.options;if(!event.target.multiple){return options.selectedIndex===-1?null:options[options.selectedIndex][name];}return Array.prototype.filter.call(options,function(option){return option.selected;}).map(function(option){return option[name];});};var getItems=function getItems(event){var options=event.target.options;return Array.prototype.map.call(options,function(option){return{displayValue:option.textContent,exportValue:option.value};});};if(this.enableScripting&&this.hasJSActions){selectElement.addEventListener(\"updatefromsandbox\",function(jsEvent){var actions={value:function value(event){var value=event.detail.value;var values=new Set(Array.isArray(value)?value:[value]);var _iterator53=_createForOfIteratorHelper(selectElement.options),_step53;try{for(_iterator53.s();!(_step53=_iterator53.n()).done;){var option=_step53.value;option.selected=values.has(option.value);}}catch(err){_iterator53.e(err);}finally{_iterator53.f();}storage.setValue(id,{value:getValue(event,true)});},multipleSelection:function multipleSelection(event){selectElement.multiple=true;},remove:function remove(event){var options=selectElement.options;var index=event.detail.remove;options[index].selected=false;selectElement.remove(index);if(options.length>0){var i=Array.prototype.findIndex.call(options,function(option){return option.selected;});if(i===-1){options[0].selected=true;}}storage.setValue(id,{value:getValue(event,true),items:getItems(event)});},clear:function clear(event){while(selectElement.length!==0){selectElement.remove(0);}storage.setValue(id,{value:null,items:[]});},insert:function insert(event){var _event$detail$insert=event.detail.insert,index=_event$detail$insert.index,displayValue=_event$detail$insert.displayValue,exportValue=_event$detail$insert.exportValue;var optionElement=document.createElement(\"option\");optionElement.textContent=displayValue;optionElement.value=exportValue;selectElement.insertBefore(optionElement,selectElement.children[index]);storage.setValue(id,{value:getValue(event,true),items:getItems(event)});},items:function items(event){var items=event.detail.items;while(selectElement.length!==0){selectElement.remove(0);}var _iterator54=_createForOfIteratorHelper(items),_step54;try{for(_iterator54.s();!(_step54=_iterator54.n()).done;){var item=_step54.value;var displayValue=item.displayValue,exportValue=item.exportValue;var optionElement=document.createElement(\"option\");optionElement.textContent=displayValue;optionElement.value=exportValue;selectElement.appendChild(optionElement);}}catch(err){_iterator54.e(err);}finally{_iterator54.f();}if(selectElement.options.length>0){selectElement.options[0].selected=true;}storage.setValue(id,{value:getValue(event,true),items:getItems(event)});},indices:function indices(event){var indices=new Set(event.detail.indices);var _iterator55=_createForOfIteratorHelper(event.target.options),_step55;try{for(_iterator55.s();!(_step55=_iterator55.n()).done;){var option=_step55.value;option.selected=indices.has(option.index);}}catch(err){_iterator55.e(err);}finally{_iterator55.f();}storage.setValue(id,{value:getValue(event,true)});},editable:function editable(event){event.target.disabled=!event.detail.editable;}};_this41._dispatchEventFromSandbox(actions,jsEvent);});selectElement.addEventListener(\"input\",function(event){var _this41$linkService$e;var exportValue=getValue(event,true);var value=getValue(event,false);storage.setValue(id,{value:exportValue});(_this41$linkService$e=_this41.linkService.eventBus)===null||_this41$linkService$e===void 0?void 0:_this41$linkService$e.dispatch(\"dispatcheventinsandbox\",{source:_this41,detail:{id:id,name:\"Keystroke\",value:value,changeEx:exportValue,willCommit:true,commitKey:1,keyDown:false}});});this._setEventListeners(selectElement,[[\"focus\",\"Focus\"],[\"blur\",\"Blur\"],[\"mousedown\",\"Mouse Down\"],[\"mouseenter\",\"Mouse Enter\"],[\"mouseleave\",\"Mouse Exit\"],[\"mouseup\",\"Mouse Up\"],[\"input\",\"Action\"]],function(event){return event.target.checked;});}else{selectElement.addEventListener(\"input\",function(event){storage.setValue(id,{value:getValue(event)});});}this._setBackgroundColor(selectElement);this.container.appendChild(selectElement);return this.container;}}]);return ChoiceWidgetAnnotationElement;}(WidgetAnnotationElement);var PopupAnnotationElement=/*#__PURE__*/function(_AnnotationElement4){_inherits(PopupAnnotationElement,_AnnotationElement4);var _super28=_createSuper(PopupAnnotationElement);function PopupAnnotationElement(parameters){var _parameters$data$titl2,_parameters$data$cont2,_parameters$data$rich2;_classCallCheck(this,PopupAnnotationElement);var isRenderable=!!((_parameters$data$titl2=parameters.data.titleObj)!==null&&_parameters$data$titl2!==void 0&&_parameters$data$titl2.str||(_parameters$data$cont2=parameters.data.contentsObj)!==null&&_parameters$data$cont2!==void 0&&_parameters$data$cont2.str||(_parameters$data$rich2=parameters.data.richText)!==null&&_parameters$data$rich2!==void 0&&_parameters$data$rich2.str);return _super28.call(this,parameters,{isRenderable:isRenderable});}_createClass(PopupAnnotationElement,[{key:\"render\",value:function render(){var IGNORE_TYPES=[\"Line\",\"Square\",\"Circle\",\"PolyLine\",\"Polygon\",\"Ink\"];this.container.className=\"popupAnnotation\";if(IGNORE_TYPES.includes(this.data.parentType)){return this.container;}var selector=\"[data-annotation-id=\\\"\".concat(this.data.parentId,\"\\\"]\");var parentElements=this.layer.querySelectorAll(selector);if(parentElements.length===0){return this.container;}var popup=new PopupElement({container:this.container,trigger:Array.from(parentElements),color:this.data.color,titleObj:this.data.titleObj,modificationDate:this.data.modificationDate,contentsObj:this.data.contentsObj,richText:this.data.richText});var page=this.page;var rect=_util.Util.normalizeRect([this.data.parentRect[0],page.view[3]-this.data.parentRect[1]+page.view[1],this.data.parentRect[2],page.view[3]-this.data.parentRect[3]+page.view[1]]);var popupLeft=rect[0]+this.data.parentRect[2]-this.data.parentRect[0];var popupTop=rect[1];this.container.style.transformOrigin=\"\".concat(-popupLeft,\"px \").concat(-popupTop,\"px\");this.container.style.left=\"\".concat(popupLeft,\"px\");this.container.style.top=\"\".concat(popupTop,\"px\");this.container.appendChild(popup.render());return this.container;}}]);return PopupAnnotationElement;}(AnnotationElement);var PopupElement=/*#__PURE__*/function(){function PopupElement(parameters){_classCallCheck(this,PopupElement);this.container=parameters.container;this.trigger=parameters.trigger;this.color=parameters.color;this.titleObj=parameters.titleObj;this.modificationDate=parameters.modificationDate;this.contentsObj=parameters.contentsObj;this.richText=parameters.richText;this.hideWrapper=parameters.hideWrapper||false;this.pinned=false;}_createClass(PopupElement,[{key:\"render\",value:function render(){var _this$richText,_this$contentsObj;var BACKGROUND_ENLIGHT=0.7;var wrapper=document.createElement(\"div\");wrapper.className=\"popupWrapper\";this.hideElement=this.hideWrapper?wrapper:this.container;this.hideElement.hidden=true;var popup=document.createElement(\"div\");popup.className=\"popup\";var color=this.color;if(color){var r=BACKGROUND_ENLIGHT*(255-color[0])+color[0];var g=BACKGROUND_ENLIGHT*(255-color[1])+color[1];var b=BACKGROUND_ENLIGHT*(255-color[2])+color[2];popup.style.backgroundColor=_util.Util.makeHexColor(r|0,g|0,b|0);}var title=document.createElement(\"h1\");title.dir=this.titleObj.dir;title.textContent=this.titleObj.str;popup.appendChild(title);var dateObject=_display_utils.PDFDateString.toDateObject(this.modificationDate);if(dateObject){var modificationDate=document.createElement(\"span\");modificationDate.className=\"popupDate\";modificationDate.textContent=\"{{date}}, {{time}}\";modificationDate.dataset.l10nId=\"annotation_date_string\";modificationDate.dataset.l10nArgs=JSON.stringify({date:dateObject.toLocaleDateString(),time:dateObject.toLocaleTimeString()});popup.appendChild(modificationDate);}if((_this$richText=this.richText)!==null&&_this$richText!==void 0&&_this$richText.str&&(!((_this$contentsObj=this.contentsObj)!==null&&_this$contentsObj!==void 0&&_this$contentsObj.str)||this.contentsObj.str===this.richText.str)){_xfa_layer.XfaLayer.render({xfaHtml:this.richText.html,intent:\"richText\",div:popup});popup.lastChild.className=\"richText popupContent\";}else{var contents=this._formatContents(this.contentsObj);popup.appendChild(contents);}if(!Array.isArray(this.trigger)){this.trigger=[this.trigger];}var _iterator56=_createForOfIteratorHelper(this.trigger),_step56;try{for(_iterator56.s();!(_step56=_iterator56.n()).done;){var element=_step56.value;element.addEventListener(\"click\",this._toggle.bind(this));element.addEventListener(\"mouseover\",this._show.bind(this,false));element.addEventListener(\"mouseout\",this._hide.bind(this,false));}}catch(err){_iterator56.e(err);}finally{_iterator56.f();}popup.addEventListener(\"click\",this._hide.bind(this,true));wrapper.appendChild(popup);return wrapper;}},{key:\"_formatContents\",value:function _formatContents(_ref41){var str=_ref41.str,dir=_ref41.dir;var p=document.createElement(\"p\");p.className=\"popupContent\";p.dir=dir;var lines=str.split(/(?:\\r\\n?|\\n)/);for(var i=0,ii=lines.length;i<ii;++i){var line=lines[i];p.appendChild(document.createTextNode(line));if(i<ii-1){p.appendChild(document.createElement(\"br\"));}}return p;}},{key:\"_toggle\",value:function _toggle(){if(this.pinned){this._hide(true);}else{this._show(true);}}},{key:\"_show\",value:function _show(){var pin=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(pin){this.pinned=true;}if(this.hideElement.hidden){this.hideElement.hidden=false;this.container.style.zIndex+=1;}}},{key:\"_hide\",value:function _hide(){var unpin=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;if(unpin){this.pinned=false;}if(!this.hideElement.hidden&&!this.pinned){this.hideElement.hidden=true;this.container.style.zIndex-=1;}}}]);return PopupElement;}();var FreeTextAnnotationElement=/*#__PURE__*/function(_AnnotationElement5){_inherits(FreeTextAnnotationElement,_AnnotationElement5);var _super29=_createSuper(FreeTextAnnotationElement);function FreeTextAnnotationElement(parameters){var _parameters$data$titl3,_parameters$data$cont3,_parameters$data$rich3;_classCallCheck(this,FreeTextAnnotationElement);var isRenderable=!!(parameters.data.hasPopup||(_parameters$data$titl3=parameters.data.titleObj)!==null&&_parameters$data$titl3!==void 0&&_parameters$data$titl3.str||(_parameters$data$cont3=parameters.data.contentsObj)!==null&&_parameters$data$cont3!==void 0&&_parameters$data$cont3.str||(_parameters$data$rich3=parameters.data.richText)!==null&&_parameters$data$rich3!==void 0&&_parameters$data$rich3.str);return _super29.call(this,parameters,{isRenderable:isRenderable,ignoreBorder:true});}_createClass(FreeTextAnnotationElement,[{key:\"render\",value:function render(){this.container.className=\"freeTextAnnotation\";if(!this.data.hasPopup){this._createPopup(null,this.data);}return this.container;}}]);return FreeTextAnnotationElement;}(AnnotationElement);var LineAnnotationElement=/*#__PURE__*/function(_AnnotationElement6){_inherits(LineAnnotationElement,_AnnotationElement6);var _super30=_createSuper(LineAnnotationElement);function LineAnnotationElement(parameters){var _parameters$data$titl4,_parameters$data$cont4,_parameters$data$rich4;_classCallCheck(this,LineAnnotationElement);var isRenderable=!!(parameters.data.hasPopup||(_parameters$data$titl4=parameters.data.titleObj)!==null&&_parameters$data$titl4!==void 0&&_parameters$data$titl4.str||(_parameters$data$cont4=parameters.data.contentsObj)!==null&&_parameters$data$cont4!==void 0&&_parameters$data$cont4.str||(_parameters$data$rich4=parameters.data.richText)!==null&&_parameters$data$rich4!==void 0&&_parameters$data$rich4.str);return _super30.call(this,parameters,{isRenderable:isRenderable,ignoreBorder:true});}_createClass(LineAnnotationElement,[{key:\"render\",value:function render(){this.container.className=\"lineAnnotation\";var data=this.data;var _getRectDims2=getRectDims(data.rect),width=_getRectDims2.width,height=_getRectDims2.height;var svg=this.svgFactory.create(width,height);var line=this.svgFactory.createElement(\"svg:line\");line.setAttribute(\"x1\",data.rect[2]-data.lineCoordinates[0]);line.setAttribute(\"y1\",data.rect[3]-data.lineCoordinates[1]);line.setAttribute(\"x2\",data.rect[2]-data.lineCoordinates[2]);line.setAttribute(\"y2\",data.rect[3]-data.lineCoordinates[3]);line.setAttribute(\"stroke-width\",data.borderStyle.width||1);line.setAttribute(\"stroke\",\"transparent\");line.setAttribute(\"fill\",\"transparent\");svg.appendChild(line);this.container.append(svg);this._createPopup(line,data);return this.container;}}]);return LineAnnotationElement;}(AnnotationElement);var SquareAnnotationElement=/*#__PURE__*/function(_AnnotationElement7){_inherits(SquareAnnotationElement,_AnnotationElement7);var _super31=_createSuper(SquareAnnotationElement);function SquareAnnotationElement(parameters){var _parameters$data$titl5,_parameters$data$cont5,_parameters$data$rich5;_classCallCheck(this,SquareAnnotationElement);var isRenderable=!!(parameters.data.hasPopup||(_parameters$data$titl5=parameters.data.titleObj)!==null&&_parameters$data$titl5!==void 0&&_parameters$data$titl5.str||(_parameters$data$cont5=parameters.data.contentsObj)!==null&&_parameters$data$cont5!==void 0&&_parameters$data$cont5.str||(_parameters$data$rich5=parameters.data.richText)!==null&&_parameters$data$rich5!==void 0&&_parameters$data$rich5.str);return _super31.call(this,parameters,{isRenderable:isRenderable,ignoreBorder:true});}_createClass(SquareAnnotationElement,[{key:\"render\",value:function render(){this.container.className=\"squareAnnotation\";var data=this.data;var _getRectDims3=getRectDims(data.rect),width=_getRectDims3.width,height=_getRectDims3.height;var svg=this.svgFactory.create(width,height);var borderWidth=data.borderStyle.width;var square=this.svgFactory.createElement(\"svg:rect\");square.setAttribute(\"x\",borderWidth/2);square.setAttribute(\"y\",borderWidth/2);square.setAttribute(\"width\",width-borderWidth);square.setAttribute(\"height\",height-borderWidth);square.setAttribute(\"stroke-width\",borderWidth||1);square.setAttribute(\"stroke\",\"transparent\");square.setAttribute(\"fill\",\"transparent\");svg.appendChild(square);this.container.append(svg);this._createPopup(square,data);return this.container;}}]);return SquareAnnotationElement;}(AnnotationElement);var CircleAnnotationElement=/*#__PURE__*/function(_AnnotationElement8){_inherits(CircleAnnotationElement,_AnnotationElement8);var _super32=_createSuper(CircleAnnotationElement);function CircleAnnotationElement(parameters){var _parameters$data$titl6,_parameters$data$cont6,_parameters$data$rich6;_classCallCheck(this,CircleAnnotationElement);var isRenderable=!!(parameters.data.hasPopup||(_parameters$data$titl6=parameters.data.titleObj)!==null&&_parameters$data$titl6!==void 0&&_parameters$data$titl6.str||(_parameters$data$cont6=parameters.data.contentsObj)!==null&&_parameters$data$cont6!==void 0&&_parameters$data$cont6.str||(_parameters$data$rich6=parameters.data.richText)!==null&&_parameters$data$rich6!==void 0&&_parameters$data$rich6.str);return _super32.call(this,parameters,{isRenderable:isRenderable,ignoreBorder:true});}_createClass(CircleAnnotationElement,[{key:\"render\",value:function render(){this.container.className=\"circleAnnotation\";var data=this.data;var _getRectDims4=getRectDims(data.rect),width=_getRectDims4.width,height=_getRectDims4.height;var svg=this.svgFactory.create(width,height);var borderWidth=data.borderStyle.width;var circle=this.svgFactory.createElement(\"svg:ellipse\");circle.setAttribute(\"cx\",width/2);circle.setAttribute(\"cy\",height/2);circle.setAttribute(\"rx\",width/2-borderWidth/2);circle.setAttribute(\"ry\",height/2-borderWidth/2);circle.setAttribute(\"stroke-width\",borderWidth||1);circle.setAttribute(\"stroke\",\"transparent\");circle.setAttribute(\"fill\",\"transparent\");svg.appendChild(circle);this.container.append(svg);this._createPopup(circle,data);return this.container;}}]);return CircleAnnotationElement;}(AnnotationElement);var PolylineAnnotationElement=/*#__PURE__*/function(_AnnotationElement9){_inherits(PolylineAnnotationElement,_AnnotationElement9);var _super33=_createSuper(PolylineAnnotationElement);function PolylineAnnotationElement(parameters){var _parameters$data$titl7,_parameters$data$cont7,_parameters$data$rich7;var _this42;_classCallCheck(this,PolylineAnnotationElement);var isRenderable=!!(parameters.data.hasPopup||(_parameters$data$titl7=parameters.data.titleObj)!==null&&_parameters$data$titl7!==void 0&&_parameters$data$titl7.str||(_parameters$data$cont7=parameters.data.contentsObj)!==null&&_parameters$data$cont7!==void 0&&_parameters$data$cont7.str||(_parameters$data$rich7=parameters.data.richText)!==null&&_parameters$data$rich7!==void 0&&_parameters$data$rich7.str);_this42=_super33.call(this,parameters,{isRenderable:isRenderable,ignoreBorder:true});_this42.containerClassName=\"polylineAnnotation\";_this42.svgElementName=\"svg:polyline\";return _this42;}_createClass(PolylineAnnotationElement,[{key:\"render\",value:function render(){this.container.className=this.containerClassName;var data=this.data;var _getRectDims5=getRectDims(data.rect),width=_getRectDims5.width,height=_getRectDims5.height;var svg=this.svgFactory.create(width,height);var points=[];var _iterator57=_createForOfIteratorHelper(data.vertices),_step57;try{for(_iterator57.s();!(_step57=_iterator57.n()).done;){var coordinate=_step57.value;var x=coordinate.x-data.rect[0];var y=data.rect[3]-coordinate.y;points.push(x+\",\"+y);}}catch(err){_iterator57.e(err);}finally{_iterator57.f();}points=points.join(\" \");var polyline=this.svgFactory.createElement(this.svgElementName);polyline.setAttribute(\"points\",points);polyline.setAttribute(\"stroke-width\",data.borderStyle.width||1);polyline.setAttribute(\"stroke\",\"transparent\");polyline.setAttribute(\"fill\",\"transparent\");svg.appendChild(polyline);this.container.append(svg);this._createPopup(polyline,data);return this.container;}}]);return PolylineAnnotationElement;}(AnnotationElement);var PolygonAnnotationElement=/*#__PURE__*/function(_PolylineAnnotationEl){_inherits(PolygonAnnotationElement,_PolylineAnnotationEl);var _super34=_createSuper(PolygonAnnotationElement);function PolygonAnnotationElement(parameters){var _this43;_classCallCheck(this,PolygonAnnotationElement);_this43=_super34.call(this,parameters);_this43.containerClassName=\"polygonAnnotation\";_this43.svgElementName=\"svg:polygon\";return _this43;}return PolygonAnnotationElement;}(PolylineAnnotationElement);var CaretAnnotationElement=/*#__PURE__*/function(_AnnotationElement10){_inherits(CaretAnnotationElement,_AnnotationElement10);var _super35=_createSuper(CaretAnnotationElement);function CaretAnnotationElement(parameters){var _parameters$data$titl8,_parameters$data$cont8,_parameters$data$rich8;_classCallCheck(this,CaretAnnotationElement);var isRenderable=!!(parameters.data.hasPopup||(_parameters$data$titl8=parameters.data.titleObj)!==null&&_parameters$data$titl8!==void 0&&_parameters$data$titl8.str||(_parameters$data$cont8=parameters.data.contentsObj)!==null&&_parameters$data$cont8!==void 0&&_parameters$data$cont8.str||(_parameters$data$rich8=parameters.data.richText)!==null&&_parameters$data$rich8!==void 0&&_parameters$data$rich8.str);return _super35.call(this,parameters,{isRenderable:isRenderable,ignoreBorder:true});}_createClass(CaretAnnotationElement,[{key:\"render\",value:function render(){this.container.className=\"caretAnnotation\";if(!this.data.hasPopup){this._createPopup(null,this.data);}return this.container;}}]);return CaretAnnotationElement;}(AnnotationElement);var InkAnnotationElement=/*#__PURE__*/function(_AnnotationElement11){_inherits(InkAnnotationElement,_AnnotationElement11);var _super36=_createSuper(InkAnnotationElement);function InkAnnotationElement(parameters){var _parameters$data$titl9,_parameters$data$cont9,_parameters$data$rich9;var _this44;_classCallCheck(this,InkAnnotationElement);var isRenderable=!!(parameters.data.hasPopup||(_parameters$data$titl9=parameters.data.titleObj)!==null&&_parameters$data$titl9!==void 0&&_parameters$data$titl9.str||(_parameters$data$cont9=parameters.data.contentsObj)!==null&&_parameters$data$cont9!==void 0&&_parameters$data$cont9.str||(_parameters$data$rich9=parameters.data.richText)!==null&&_parameters$data$rich9!==void 0&&_parameters$data$rich9.str);_this44=_super36.call(this,parameters,{isRenderable:isRenderable,ignoreBorder:true});_this44.containerClassName=\"inkAnnotation\";_this44.svgElementName=\"svg:polyline\";return _this44;}_createClass(InkAnnotationElement,[{key:\"render\",value:function render(){this.container.className=this.containerClassName;var data=this.data;var _getRectDims6=getRectDims(data.rect),width=_getRectDims6.width,height=_getRectDims6.height;var svg=this.svgFactory.create(width,height);var _iterator58=_createForOfIteratorHelper(data.inkLists),_step58;try{for(_iterator58.s();!(_step58=_iterator58.n()).done;){var inkList=_step58.value;var points=[];var _iterator59=_createForOfIteratorHelper(inkList),_step59;try{for(_iterator59.s();!(_step59=_iterator59.n()).done;){var coordinate=_step59.value;var x=coordinate.x-data.rect[0];var y=data.rect[3]-coordinate.y;points.push(\"\".concat(x,\",\").concat(y));}}catch(err){_iterator59.e(err);}finally{_iterator59.f();}points=points.join(\" \");var polyline=this.svgFactory.createElement(this.svgElementName);polyline.setAttribute(\"points\",points);polyline.setAttribute(\"stroke-width\",data.borderStyle.width||1);polyline.setAttribute(\"stroke\",\"transparent\");polyline.setAttribute(\"fill\",\"transparent\");this._createPopup(polyline,data);svg.appendChild(polyline);}}catch(err){_iterator58.e(err);}finally{_iterator58.f();}this.container.append(svg);return this.container;}}]);return InkAnnotationElement;}(AnnotationElement);var HighlightAnnotationElement=/*#__PURE__*/function(_AnnotationElement12){_inherits(HighlightAnnotationElement,_AnnotationElement12);var _super37=_createSuper(HighlightAnnotationElement);function HighlightAnnotationElement(parameters){var _parameters$data$titl10,_parameters$data$cont10,_parameters$data$rich10;_classCallCheck(this,HighlightAnnotationElement);var isRenderable=!!(parameters.data.hasPopup||(_parameters$data$titl10=parameters.data.titleObj)!==null&&_parameters$data$titl10!==void 0&&_parameters$data$titl10.str||(_parameters$data$cont10=parameters.data.contentsObj)!==null&&_parameters$data$cont10!==void 0&&_parameters$data$cont10.str||(_parameters$data$rich10=parameters.data.richText)!==null&&_parameters$data$rich10!==void 0&&_parameters$data$rich10.str);return _super37.call(this,parameters,{isRenderable:isRenderable,ignoreBorder:true,createQuadrilaterals:true});}_createClass(HighlightAnnotationElement,[{key:\"render\",value:function render(){if(!this.data.hasPopup){this._createPopup(null,this.data);}if(this.quadrilaterals){return this._renderQuadrilaterals(\"highlightAnnotation\");}this.container.className=\"highlightAnnotation\";return this.container;}}]);return HighlightAnnotationElement;}(AnnotationElement);var UnderlineAnnotationElement=/*#__PURE__*/function(_AnnotationElement13){_inherits(UnderlineAnnotationElement,_AnnotationElement13);var _super38=_createSuper(UnderlineAnnotationElement);function UnderlineAnnotationElement(parameters){var _parameters$data$titl11,_parameters$data$cont11,_parameters$data$rich11;_classCallCheck(this,UnderlineAnnotationElement);var isRenderable=!!(parameters.data.hasPopup||(_parameters$data$titl11=parameters.data.titleObj)!==null&&_parameters$data$titl11!==void 0&&_parameters$data$titl11.str||(_parameters$data$cont11=parameters.data.contentsObj)!==null&&_parameters$data$cont11!==void 0&&_parameters$data$cont11.str||(_parameters$data$rich11=parameters.data.richText)!==null&&_parameters$data$rich11!==void 0&&_parameters$data$rich11.str);return _super38.call(this,parameters,{isRenderable:isRenderable,ignoreBorder:true,createQuadrilaterals:true});}_createClass(UnderlineAnnotationElement,[{key:\"render\",value:function render(){if(!this.data.hasPopup){this._createPopup(null,this.data);}if(this.quadrilaterals){return this._renderQuadrilaterals(\"underlineAnnotation\");}this.container.className=\"underlineAnnotation\";return this.container;}}]);return UnderlineAnnotationElement;}(AnnotationElement);var SquigglyAnnotationElement=/*#__PURE__*/function(_AnnotationElement14){_inherits(SquigglyAnnotationElement,_AnnotationElement14);var _super39=_createSuper(SquigglyAnnotationElement);function SquigglyAnnotationElement(parameters){var _parameters$data$titl12,_parameters$data$cont12,_parameters$data$rich12;_classCallCheck(this,SquigglyAnnotationElement);var isRenderable=!!(parameters.data.hasPopup||(_parameters$data$titl12=parameters.data.titleObj)!==null&&_parameters$data$titl12!==void 0&&_parameters$data$titl12.str||(_parameters$data$cont12=parameters.data.contentsObj)!==null&&_parameters$data$cont12!==void 0&&_parameters$data$cont12.str||(_parameters$data$rich12=parameters.data.richText)!==null&&_parameters$data$rich12!==void 0&&_parameters$data$rich12.str);return _super39.call(this,parameters,{isRenderable:isRenderable,ignoreBorder:true,createQuadrilaterals:true});}_createClass(SquigglyAnnotationElement,[{key:\"render\",value:function render(){if(!this.data.hasPopup){this._createPopup(null,this.data);}if(this.quadrilaterals){return this._renderQuadrilaterals(\"squigglyAnnotation\");}this.container.className=\"squigglyAnnotation\";return this.container;}}]);return SquigglyAnnotationElement;}(AnnotationElement);var StrikeOutAnnotationElement=/*#__PURE__*/function(_AnnotationElement15){_inherits(StrikeOutAnnotationElement,_AnnotationElement15);var _super40=_createSuper(StrikeOutAnnotationElement);function StrikeOutAnnotationElement(parameters){var _parameters$data$titl13,_parameters$data$cont13,_parameters$data$rich13;_classCallCheck(this,StrikeOutAnnotationElement);var isRenderable=!!(parameters.data.hasPopup||(_parameters$data$titl13=parameters.data.titleObj)!==null&&_parameters$data$titl13!==void 0&&_parameters$data$titl13.str||(_parameters$data$cont13=parameters.data.contentsObj)!==null&&_parameters$data$cont13!==void 0&&_parameters$data$cont13.str||(_parameters$data$rich13=parameters.data.richText)!==null&&_parameters$data$rich13!==void 0&&_parameters$data$rich13.str);return _super40.call(this,parameters,{isRenderable:isRenderable,ignoreBorder:true,createQuadrilaterals:true});}_createClass(StrikeOutAnnotationElement,[{key:\"render\",value:function render(){if(!this.data.hasPopup){this._createPopup(null,this.data);}if(this.quadrilaterals){return this._renderQuadrilaterals(\"strikeoutAnnotation\");}this.container.className=\"strikeoutAnnotation\";return this.container;}}]);return StrikeOutAnnotationElement;}(AnnotationElement);var StampAnnotationElement=/*#__PURE__*/function(_AnnotationElement16){_inherits(StampAnnotationElement,_AnnotationElement16);var _super41=_createSuper(StampAnnotationElement);function StampAnnotationElement(parameters){var _parameters$data$titl14,_parameters$data$cont14,_parameters$data$rich14;_classCallCheck(this,StampAnnotationElement);var isRenderable=!!(parameters.data.hasPopup||(_parameters$data$titl14=parameters.data.titleObj)!==null&&_parameters$data$titl14!==void 0&&_parameters$data$titl14.str||(_parameters$data$cont14=parameters.data.contentsObj)!==null&&_parameters$data$cont14!==void 0&&_parameters$data$cont14.str||(_parameters$data$rich14=parameters.data.richText)!==null&&_parameters$data$rich14!==void 0&&_parameters$data$rich14.str);return _super41.call(this,parameters,{isRenderable:isRenderable,ignoreBorder:true});}_createClass(StampAnnotationElement,[{key:\"render\",value:function render(){this.container.className=\"stampAnnotation\";if(!this.data.hasPopup){this._createPopup(null,this.data);}return this.container;}}]);return StampAnnotationElement;}(AnnotationElement);var FileAttachmentAnnotationElement=/*#__PURE__*/function(_AnnotationElement17){_inherits(FileAttachmentAnnotationElement,_AnnotationElement17);var _super42=_createSuper(FileAttachmentAnnotationElement);function FileAttachmentAnnotationElement(parameters){var _this45$linkService$e;var _this45;_classCallCheck(this,FileAttachmentAnnotationElement);_this45=_super42.call(this,parameters,{isRenderable:true});var _this45$data$file=_this45.data.file,filename=_this45$data$file.filename,content=_this45$data$file.content;_this45.filename=(0,_display_utils.getFilenameFromUrl)(filename);_this45.content=content;(_this45$linkService$e=_this45.linkService.eventBus)===null||_this45$linkService$e===void 0?void 0:_this45$linkService$e.dispatch(\"fileattachmentannotation\",{source:_assertThisInitialized(_this45),id:(0,_util.stringToPDFString)(filename),filename:filename,content:content});return _this45;}_createClass(FileAttachmentAnnotationElement,[{key:\"render\",value:function render(){var _this$data$titleObj,_this$data$contentsOb;this.container.className=\"fileAttachmentAnnotation\";var trigger=document.createElement(\"div\");trigger.style.height=this.container.style.height;trigger.style.width=this.container.style.width;trigger.addEventListener(\"dblclick\",this._download.bind(this));if(!this.data.hasPopup&&((_this$data$titleObj=this.data.titleObj)!==null&&_this$data$titleObj!==void 0&&_this$data$titleObj.str||(_this$data$contentsOb=this.data.contentsObj)!==null&&_this$data$contentsOb!==void 0&&_this$data$contentsOb.str||this.data.richText)){this._createPopup(trigger,this.data);}this.container.appendChild(trigger);return this.container;}},{key:\"_download\",value:function _download(){var _this$downloadManager;(_this$downloadManager=this.downloadManager)===null||_this$downloadManager===void 0?void 0:_this$downloadManager.openOrDownloadData(this.container,this.content,this.filename);}}]);return FileAttachmentAnnotationElement;}(AnnotationElement);var AnnotationLayer=/*#__PURE__*/function(){function AnnotationLayer(){_classCallCheck(this,AnnotationLayer);}_createClass(AnnotationLayer,null,[{key:\"render\",value:function render(parameters){var sortedAnnotations=[],popupAnnotations=[];var _iterator60=_createForOfIteratorHelper(parameters.annotations),_step60;try{for(_iterator60.s();!(_step60=_iterator60.n()).done;){var _data2=_step60.value;if(!_data2){continue;}var _getRectDims7=getRectDims(_data2.rect),width=_getRectDims7.width,height=_getRectDims7.height;if(width<=0||height<=0){continue;}if(_data2.annotationType===_util.AnnotationType.POPUP){popupAnnotations.push(_data2);continue;}sortedAnnotations.push(_data2);}}catch(err){_iterator60.e(err);}finally{_iterator60.f();}if(popupAnnotations.length){sortedAnnotations.push.apply(sortedAnnotations,popupAnnotations);}var div=parameters.div;for(var _i9=0,_sortedAnnotations=sortedAnnotations;_i9<_sortedAnnotations.length;_i9++){var data=_sortedAnnotations[_i9];var element=AnnotationElementFactory.create({data:data,layer:div,page:parameters.page,viewport:parameters.viewport,linkService:parameters.linkService,downloadManager:parameters.downloadManager,imageResourcesPath:parameters.imageResourcesPath||\"\",renderForms:parameters.renderForms!==false,svgFactory:new _display_utils.DOMSVGFactory(),annotationStorage:parameters.annotationStorage||new _annotation_storage.AnnotationStorage(),enableScripting:parameters.enableScripting,hasJSActions:parameters.hasJSActions,fieldObjects:parameters.fieldObjects,mouseState:parameters.mouseState||{isDown:false}});if(element.isRenderable){var rendered=element.render();if(data.hidden){rendered.style.visibility=\"hidden\";}if(Array.isArray(rendered)){var _iterator61=_createForOfIteratorHelper(rendered),_step61;try{for(_iterator61.s();!(_step61=_iterator61.n()).done;){var renderedElement=_step61.value;div.appendChild(renderedElement);}}catch(err){_iterator61.e(err);}finally{_iterator61.f();}}else{if(element instanceof PopupAnnotationElement){div.prepend(rendered);}else{div.appendChild(rendered);}}}}_classStaticPrivateMethodGet(this,AnnotationLayer,_setAnnotationCanvasMap).call(this,div,parameters.annotationCanvasMap);}},{key:\"update\",value:function update(parameters){var page=parameters.page,viewport=parameters.viewport,annotations=parameters.annotations,annotationCanvasMap=parameters.annotationCanvasMap,div=parameters.div;var transform=viewport.transform;var matrix=\"matrix(\".concat(transform.join(\",\"),\")\");var scale,ownMatrix;var _iterator62=_createForOfIteratorHelper(annotations),_step62;try{for(_iterator62.s();!(_step62=_iterator62.n()).done;){var data=_step62.value;var elements=div.querySelectorAll(\"[data-annotation-id=\\\"\".concat(data.id,\"\\\"]\"));if(elements){var _iterator63=_createForOfIteratorHelper(elements),_step63;try{for(_iterator63.s();!(_step63=_iterator63.n()).done;){var element=_step63.value;if(data.hasOwnCanvas){var rect=_util.Util.normalizeRect([data.rect[0],page.view[3]-data.rect[1]+page.view[1],data.rect[2],page.view[3]-data.rect[3]+page.view[1]]);if(!ownMatrix){scale=Math.abs(transform[0]||transform[1]);var ownTransform=transform.slice();for(var i=0;i<4;i++){ownTransform[i]=Math.sign(ownTransform[i]);}ownMatrix=\"matrix(\".concat(ownTransform.join(\",\"),\")\");}var left=rect[0]*scale;var top=rect[1]*scale;element.style.left=\"\".concat(left,\"px\");element.style.top=\"\".concat(top,\"px\");element.style.transformOrigin=\"\".concat(-left,\"px \").concat(-top,\"px\");element.style.transform=ownMatrix;}else{element.style.transform=matrix;}}}catch(err){_iterator63.e(err);}finally{_iterator63.f();}}}}catch(err){_iterator62.e(err);}finally{_iterator62.f();}_classStaticPrivateMethodGet(this,AnnotationLayer,_setAnnotationCanvasMap).call(this,div,annotationCanvasMap);div.hidden=false;}}]);return AnnotationLayer;}();function _setAnnotationCanvasMap(div,annotationCanvasMap){if(!annotationCanvasMap){return;}var _iterator64=_createForOfIteratorHelper(annotationCanvasMap),_step64;try{for(_iterator64.s();!(_step64=_iterator64.n()).done;){var _step64$value=_slicedToArray(_step64.value,2),id=_step64$value[0],canvas=_step64$value[1];var element=div.querySelector(\"[data-annotation-id=\\\"\".concat(id,\"\\\"]\"));if(!element){continue;}var firstChild=element.firstChild;if(firstChild.nodeName===\"CANVAS\"){element.replaceChild(canvas,firstChild);}else{element.insertBefore(canvas,firstChild);}}}catch(err){_iterator64.e(err);}finally{_iterator64.f();}annotationCanvasMap.clear();}exports.AnnotationLayer=AnnotationLayer;/***/},/* 19 */ /***/function(__unused_webpack_module,exports){Object.defineProperty(exports,\"__esModule\",{value:true});exports.ColorConverters=void 0;function makeColorComp(n){return Math.floor(Math.max(0,Math.min(1,n))*255).toString(16).padStart(2,\"0\");}var ColorConverters=/*#__PURE__*/function(){function ColorConverters(){_classCallCheck(this,ColorConverters);}_createClass(ColorConverters,null,[{key:\"CMYK_G\",value:function CMYK_G(_ref42){var _ref43=_slicedToArray(_ref42,4),c=_ref43[0],y=_ref43[1],m=_ref43[2],k=_ref43[3];return[\"G\",1-Math.min(1,0.3*c+0.59*m+0.11*y+k)];}},{key:\"G_CMYK\",value:function G_CMYK(_ref44){var _ref45=_slicedToArray(_ref44,1),g=_ref45[0];return[\"CMYK\",0,0,0,1-g];}},{key:\"G_RGB\",value:function G_RGB(_ref46){var _ref47=_slicedToArray(_ref46,1),g=_ref47[0];return[\"RGB\",g,g,g];}},{key:\"G_HTML\",value:function G_HTML(_ref48){var _ref49=_slicedToArray(_ref48,1),g=_ref49[0];var G=makeColorComp(g);return\"#\".concat(G).concat(G).concat(G);}},{key:\"RGB_G\",value:function RGB_G(_ref50){var _ref51=_slicedToArray(_ref50,3),r=_ref51[0],g=_ref51[1],b=_ref51[2];return[\"G\",0.3*r+0.59*g+0.11*b];}},{key:\"RGB_HTML\",value:function RGB_HTML(_ref52){var _ref53=_slicedToArray(_ref52,3),r=_ref53[0],g=_ref53[1],b=_ref53[2];var R=makeColorComp(r);var G=makeColorComp(g);var B=makeColorComp(b);return\"#\".concat(R).concat(G).concat(B);}},{key:\"T_HTML\",value:function T_HTML(){return\"#00000000\";}},{key:\"CMYK_RGB\",value:function CMYK_RGB(_ref54){var _ref55=_slicedToArray(_ref54,4),c=_ref55[0],y=_ref55[1],m=_ref55[2],k=_ref55[3];return[\"RGB\",1-Math.min(1,c+k),1-Math.min(1,m+k),1-Math.min(1,y+k)];}},{key:\"CMYK_HTML\",value:function CMYK_HTML(components){return this.RGB_HTML(this.CMYK_RGB(components));}},{key:\"RGB_CMYK\",value:function RGB_CMYK(_ref56){var _ref57=_slicedToArray(_ref56,3),r=_ref57[0],g=_ref57[1],b=_ref57[2];var c=1-r;var m=1-g;var y=1-b;var k=Math.min(c,m,y);return[\"CMYK\",c,m,y,k];}}]);return ColorConverters;}();exports.ColorConverters=ColorConverters;/***/},/* 20 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.XfaLayer=void 0;var _xfa_text=__w_pdfjs_require__(17);var XfaLayer=/*#__PURE__*/function(){function XfaLayer(){_classCallCheck(this,XfaLayer);}_createClass(XfaLayer,null,[{key:\"setupStorage\",value:function setupStorage(html,id,element,storage,intent){var storedData=storage.getValue(id,{value:null});switch(element.name){case\"textarea\":if(storedData.value!==null){html.textContent=storedData.value;}if(intent===\"print\"){break;}html.addEventListener(\"input\",function(event){storage.setValue(id,{value:event.target.value});});break;case\"input\":if(element.attributes.type===\"radio\"||element.attributes.type===\"checkbox\"){if(storedData.value===element.attributes.xfaOn){html.setAttribute(\"checked\",true);}else if(storedData.value===element.attributes.xfaOff){html.removeAttribute(\"checked\");}if(intent===\"print\"){break;}html.addEventListener(\"change\",function(event){storage.setValue(id,{value:event.target.checked?event.target.getAttribute(\"xfaOn\"):event.target.getAttribute(\"xfaOff\")});});}else{if(storedData.value!==null){html.setAttribute(\"value\",storedData.value);}if(intent===\"print\"){break;}html.addEventListener(\"input\",function(event){storage.setValue(id,{value:event.target.value});});}break;case\"select\":if(storedData.value!==null){var _iterator65=_createForOfIteratorHelper(element.children),_step65;try{for(_iterator65.s();!(_step65=_iterator65.n()).done;){var option=_step65.value;if(option.attributes.value===storedData.value){option.attributes.selected=true;}}}catch(err){_iterator65.e(err);}finally{_iterator65.f();}}html.addEventListener(\"input\",function(event){var options=event.target.options;var value=options.selectedIndex===-1?\"\":options[options.selectedIndex].value;storage.setValue(id,{value:value});});break;}}},{key:\"setAttributes\",value:function setAttributes(_ref58){var html=_ref58.html,element=_ref58.element,_ref58$storage=_ref58.storage,storage=_ref58$storage===void 0?null:_ref58$storage,intent=_ref58.intent,linkService=_ref58.linkService;var attributes=element.attributes;var isHTMLAnchorElement=html instanceof HTMLAnchorElement;if(attributes.type===\"radio\"){attributes.name=\"\".concat(attributes.name,\"-\").concat(intent);}for(var _i10=0,_Object$entries2=Object.entries(attributes);_i10<_Object$entries2.length;_i10++){var _Object$entries2$_i=_slicedToArray(_Object$entries2[_i10],2),key=_Object$entries2$_i[0],value=_Object$entries2$_i[1];if(value===null||value===undefined||key===\"dataId\"){continue;}if(key!==\"style\"){if(key===\"textContent\"){html.textContent=value;}else if(key===\"class\"){if(value.length){html.setAttribute(key,value.join(\" \"));}}else{if(isHTMLAnchorElement&&(key===\"href\"||key===\"newWindow\")){continue;}html.setAttribute(key,value);}}else{Object.assign(html.style,value);}}if(isHTMLAnchorElement){linkService.addLinkAttributes(html,attributes.href,attributes.newWindow);}if(storage&&attributes.dataId){this.setupStorage(html,attributes.dataId,element,storage);}}},{key:\"render\",value:function render(parameters){var storage=parameters.annotationStorage;var linkService=parameters.linkService;var root=parameters.xfaHtml;var intent=parameters.intent||\"display\";var rootHtml=document.createElement(root.name);if(root.attributes){this.setAttributes({html:rootHtml,element:root,intent:intent,linkService:linkService});}var stack=[[root,-1,rootHtml]];var rootDiv=parameters.div;rootDiv.appendChild(rootHtml);if(parameters.viewport){var transform=\"matrix(\".concat(parameters.viewport.transform.join(\",\"),\")\");rootDiv.style.transform=transform;}if(intent!==\"richText\"){rootDiv.setAttribute(\"class\",\"xfaLayer xfaFont\");}var textDivs=[];while(stack.length>0){var _child$attributes;var _stack=_slicedToArray(stack[stack.length-1],3),parent=_stack[0],i=_stack[1],html=_stack[2];if(i+1===parent.children.length){stack.pop();continue;}var child=parent.children[++stack[stack.length-1][1]];if(child===null){continue;}var name=child.name;if(name===\"#text\"){var node=document.createTextNode(child.value);textDivs.push(node);html.appendChild(node);continue;}var childHtml=void 0;if(child!==null&&child!==void 0&&(_child$attributes=child.attributes)!==null&&_child$attributes!==void 0&&_child$attributes.xmlns){childHtml=document.createElementNS(child.attributes.xmlns,name);}else{childHtml=document.createElement(name);}html.appendChild(childHtml);if(child.attributes){this.setAttributes({html:childHtml,element:child,storage:storage,intent:intent,linkService:linkService});}if(child.children&&child.children.length>0){stack.push([child,-1,childHtml]);}else if(child.value){var _node=document.createTextNode(child.value);if(_xfa_text.XfaText.shouldBuildText(name)){textDivs.push(_node);}childHtml.appendChild(_node);}}var _iterator66=_createForOfIteratorHelper(rootDiv.querySelectorAll(\".xfaNonInteractive input, .xfaNonInteractive textarea\")),_step66;try{for(_iterator66.s();!(_step66=_iterator66.n()).done;){var el=_step66.value;el.setAttribute(\"readOnly\",true);}}catch(err){_iterator66.e(err);}finally{_iterator66.f();}return{textDivs:textDivs};}},{key:\"update\",value:function update(parameters){var transform=\"matrix(\".concat(parameters.viewport.transform.join(\",\"),\")\");parameters.div.style.transform=transform;parameters.div.hidden=false;}}]);return XfaLayer;}();exports.XfaLayer=XfaLayer;/***/},/* 21 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.renderTextLayer=renderTextLayer;var _util=__w_pdfjs_require__(1);var MAX_TEXT_DIVS_TO_RENDER=100000;var DEFAULT_FONT_SIZE=30;var DEFAULT_FONT_ASCENT=0.8;var ascentCache=new Map();var AllWhitespaceRegexp=/^\\s+$/g;function getAscent(fontFamily,ctx){var cachedAscent=ascentCache.get(fontFamily);if(cachedAscent){return cachedAscent;}ctx.save();ctx.font=\"\".concat(DEFAULT_FONT_SIZE,\"px \").concat(fontFamily);var metrics=ctx.measureText(\"\");var ascent=metrics.fontBoundingBoxAscent;var descent=Math.abs(metrics.fontBoundingBoxDescent);if(ascent){ctx.restore();var ratio=ascent/(ascent+descent);ascentCache.set(fontFamily,ratio);return ratio;}ctx.strokeStyle=\"red\";ctx.clearRect(0,0,DEFAULT_FONT_SIZE,DEFAULT_FONT_SIZE);ctx.strokeText(\"g\",0,0);var pixels=ctx.getImageData(0,0,DEFAULT_FONT_SIZE,DEFAULT_FONT_SIZE).data;descent=0;for(var i=pixels.length-1-3;i>=0;i-=4){if(pixels[i]>0){descent=Math.ceil(i/4/DEFAULT_FONT_SIZE);break;}}ctx.clearRect(0,0,DEFAULT_FONT_SIZE,DEFAULT_FONT_SIZE);ctx.strokeText(\"A\",0,DEFAULT_FONT_SIZE);pixels=ctx.getImageData(0,0,DEFAULT_FONT_SIZE,DEFAULT_FONT_SIZE).data;ascent=0;for(var _i11=0,ii=pixels.length;_i11<ii;_i11+=4){if(pixels[_i11]>0){ascent=DEFAULT_FONT_SIZE-Math.floor(_i11/4/DEFAULT_FONT_SIZE);break;}}ctx.restore();if(ascent){var _ratio=ascent/(ascent+descent);ascentCache.set(fontFamily,_ratio);return _ratio;}ascentCache.set(fontFamily,DEFAULT_FONT_ASCENT);return DEFAULT_FONT_ASCENT;}function appendText(task,geom,styles,ctx){var textDiv=document.createElement(\"span\");var textDivProperties=task._enhanceTextSelection?{angle:0,canvasWidth:0,hasText:geom.str!==\"\",hasEOL:geom.hasEOL,originalTransform:null,paddingBottom:0,paddingLeft:0,paddingRight:0,paddingTop:0,scale:1}:{angle:0,canvasWidth:0,hasText:geom.str!==\"\",hasEOL:geom.hasEOL};task._textDivs.push(textDiv);var tx=_util.Util.transform(task._viewport.transform,geom.transform);var angle=Math.atan2(tx[1],tx[0]);var style=styles[geom.fontName];if(style.vertical){angle+=Math.PI/2;}var fontHeight=Math.hypot(tx[2],tx[3]);var fontAscent=fontHeight*getAscent(style.fontFamily,ctx);var left,top;if(angle===0){left=tx[4];top=tx[5]-fontAscent;}else{left=tx[4]+fontAscent*Math.sin(angle);top=tx[5]-fontAscent*Math.cos(angle);}textDiv.style.left=\"\".concat(left,\"px\");textDiv.style.top=\"\".concat(top,\"px\");textDiv.style.fontSize=\"\".concat(fontHeight,\"px\");textDiv.style.fontFamily=style.fontFamily;textDiv.setAttribute(\"role\",\"presentation\");textDiv.textContent=geom.str;textDiv.dir=geom.dir;if(task._fontInspectorEnabled){textDiv.dataset.fontName=geom.fontName;}if(angle!==0){textDivProperties.angle=angle*(180/Math.PI);}var shouldScaleText=false;if(geom.str.length>1||task._enhanceTextSelection&&AllWhitespaceRegexp.test(geom.str)){shouldScaleText=true;}else if(geom.str!==\" \"&&geom.transform[0]!==geom.transform[3]){var absScaleX=Math.abs(geom.transform[0]),absScaleY=Math.abs(geom.transform[3]);if(absScaleX!==absScaleY&&Math.max(absScaleX,absScaleY)/Math.min(absScaleX,absScaleY)>1.5){shouldScaleText=true;}}if(shouldScaleText){if(style.vertical){textDivProperties.canvasWidth=geom.height*task._viewport.scale;}else{textDivProperties.canvasWidth=geom.width*task._viewport.scale;}}task._textDivProperties.set(textDiv,textDivProperties);if(task._textContentStream){task._layoutText(textDiv);}if(task._enhanceTextSelection&&textDivProperties.hasText){var angleCos=1,angleSin=0;if(angle!==0){angleCos=Math.cos(angle);angleSin=Math.sin(angle);}var divWidth=(style.vertical?geom.height:geom.width)*task._viewport.scale;var divHeight=fontHeight;var m,b;if(angle!==0){m=[angleCos,angleSin,-angleSin,angleCos,left,top];b=_util.Util.getAxialAlignedBoundingBox([0,0,divWidth,divHeight],m);}else{b=[left,top,left+divWidth,top+divHeight];}task._bounds.push({left:b[0],top:b[1],right:b[2],bottom:b[3],div:textDiv,size:[divWidth,divHeight],m:m});}}function render(task){if(task._canceled){return;}var textDivs=task._textDivs;var capability=task._capability;var textDivsLength=textDivs.length;if(textDivsLength>MAX_TEXT_DIVS_TO_RENDER){task._renderingDone=true;capability.resolve();return;}if(!task._textContentStream){for(var i=0;i<textDivsLength;i++){task._layoutText(textDivs[i]);}}task._renderingDone=true;capability.resolve();}function findPositiveMin(ts,offset,count){var result=0;for(var i=0;i<count;i++){var t=ts[offset++];if(t>0){result=result?Math.min(t,result):t;}}return result;}function expand(task){var bounds=task._bounds;var viewport=task._viewport;var expanded=expandBounds(viewport.width,viewport.height,bounds);for(var i=0;i<expanded.length;i++){var div=bounds[i].div;var divProperties=task._textDivProperties.get(div);if(divProperties.angle===0){divProperties.paddingLeft=bounds[i].left-expanded[i].left;divProperties.paddingTop=bounds[i].top-expanded[i].top;divProperties.paddingRight=expanded[i].right-bounds[i].right;divProperties.paddingBottom=expanded[i].bottom-bounds[i].bottom;task._textDivProperties.set(div,divProperties);continue;}var e=expanded[i],b=bounds[i];var m=b.m,c=m[0],s=m[1];var points=[[0,0],[0,b.size[1]],[b.size[0],0],b.size];var ts=new Float64Array(64);for(var j=0,jj=points.length;j<jj;j++){var t=_util.Util.applyTransform(points[j],m);ts[j+0]=c&&(e.left-t[0])/c;ts[j+4]=s&&(e.top-t[1])/s;ts[j+8]=c&&(e.right-t[0])/c;ts[j+12]=s&&(e.bottom-t[1])/s;ts[j+16]=s&&(e.left-t[0])/-s;ts[j+20]=c&&(e.top-t[1])/c;ts[j+24]=s&&(e.right-t[0])/-s;ts[j+28]=c&&(e.bottom-t[1])/c;ts[j+32]=c&&(e.left-t[0])/-c;ts[j+36]=s&&(e.top-t[1])/-s;ts[j+40]=c&&(e.right-t[0])/-c;ts[j+44]=s&&(e.bottom-t[1])/-s;ts[j+48]=s&&(e.left-t[0])/s;ts[j+52]=c&&(e.top-t[1])/-c;ts[j+56]=s&&(e.right-t[0])/s;ts[j+60]=c&&(e.bottom-t[1])/-c;}var boxScale=1+Math.min(Math.abs(c),Math.abs(s));divProperties.paddingLeft=findPositiveMin(ts,32,16)/boxScale;divProperties.paddingTop=findPositiveMin(ts,48,16)/boxScale;divProperties.paddingRight=findPositiveMin(ts,0,16)/boxScale;divProperties.paddingBottom=findPositiveMin(ts,16,16)/boxScale;task._textDivProperties.set(div,divProperties);}}function expandBounds(width,height,boxes){var bounds=boxes.map(function(box,i){return{x1:box.left,y1:box.top,x2:box.right,y2:box.bottom,index:i,x1New:undefined,x2New:undefined};});expandBoundsLTR(width,bounds);var expanded=new Array(boxes.length);var _iterator67=_createForOfIteratorHelper(bounds),_step67;try{for(_iterator67.s();!(_step67=_iterator67.n()).done;){var b=_step67.value;var i=b.index;expanded[i]={left:b.x1New,top:0,right:b.x2New,bottom:0};}}catch(err){_iterator67.e(err);}finally{_iterator67.f();}boxes.map(function(box,i){var e=expanded[i],b=bounds[i];b.x1=box.top;b.y1=width-e.right;b.x2=box.bottom;b.y2=width-e.left;b.index=i;b.x1New=undefined;b.x2New=undefined;});expandBoundsLTR(height,bounds);var _iterator68=_createForOfIteratorHelper(bounds),_step68;try{for(_iterator68.s();!(_step68=_iterator68.n()).done;){var _b=_step68.value;var _i12=_b.index;expanded[_i12].top=_b.x1New;expanded[_i12].bottom=_b.x2New;}}catch(err){_iterator68.e(err);}finally{_iterator68.f();}return expanded;}function expandBoundsLTR(width,bounds){bounds.sort(function(a,b){return a.x1-b.x1||a.index-b.index;});var fakeBoundary={x1:-Infinity,y1:-Infinity,x2:0,y2:Infinity,index:-1,x1New:0,x2New:0};var horizon=[{start:-Infinity,end:Infinity,boundary:fakeBoundary}];var _iterator69=_createForOfIteratorHelper(bounds),_step69;try{for(_iterator69.s();!(_step69=_iterator69.n()).done;){var boundary=_step69.value;var i=0;while(i<horizon.length&&horizon[i].end<=boundary.y1){i++;}var j=horizon.length-1;while(j>=0&&horizon[j].start>=boundary.y2){j--;}var _horizonPart=void 0,_affectedBoundary=void 0;var q=void 0,k=void 0,maxXNew=-Infinity;for(q=i;q<=j;q++){_horizonPart=horizon[q];_affectedBoundary=_horizonPart.boundary;var xNew=void 0;if(_affectedBoundary.x2>boundary.x1){xNew=_affectedBoundary.index>boundary.index?_affectedBoundary.x1New:boundary.x1;}else if(_affectedBoundary.x2New===undefined){xNew=(_affectedBoundary.x2+boundary.x1)/2;}else{xNew=_affectedBoundary.x2New;}if(xNew>maxXNew){maxXNew=xNew;}}boundary.x1New=maxXNew;for(q=i;q<=j;q++){_horizonPart=horizon[q];_affectedBoundary=_horizonPart.boundary;if(_affectedBoundary.x2New===undefined){if(_affectedBoundary.x2>boundary.x1){if(_affectedBoundary.index>boundary.index){_affectedBoundary.x2New=_affectedBoundary.x2;}}else{_affectedBoundary.x2New=maxXNew;}}else if(_affectedBoundary.x2New>maxXNew){_affectedBoundary.x2New=Math.max(maxXNew,_affectedBoundary.x2);}}var changedHorizon=[];var lastBoundary=null;for(q=i;q<=j;q++){_horizonPart=horizon[q];_affectedBoundary=_horizonPart.boundary;var useBoundary=_affectedBoundary.x2>boundary.x2?_affectedBoundary:boundary;if(lastBoundary===useBoundary){changedHorizon[changedHorizon.length-1].end=_horizonPart.end;}else{changedHorizon.push({start:_horizonPart.start,end:_horizonPart.end,boundary:useBoundary});lastBoundary=useBoundary;}}if(horizon[i].start<boundary.y1){changedHorizon[0].start=boundary.y1;changedHorizon.unshift({start:horizon[i].start,end:boundary.y1,boundary:horizon[i].boundary});}if(boundary.y2<horizon[j].end){changedHorizon[changedHorizon.length-1].end=boundary.y2;changedHorizon.push({start:boundary.y2,end:horizon[j].end,boundary:horizon[j].boundary});}for(q=i;q<=j;q++){_horizonPart=horizon[q];_affectedBoundary=_horizonPart.boundary;if(_affectedBoundary.x2New!==undefined){continue;}var used=false;for(k=i-1;!used&&k>=0&&horizon[k].start>=_affectedBoundary.y1;k--){used=horizon[k].boundary===_affectedBoundary;}for(k=j+1;!used&&k<horizon.length&&horizon[k].end<=_affectedBoundary.y2;k++){used=horizon[k].boundary===_affectedBoundary;}for(k=0;!used&&k<changedHorizon.length;k++){used=changedHorizon[k].boundary===_affectedBoundary;}if(!used){_affectedBoundary.x2New=maxXNew;}}Array.prototype.splice.apply(horizon,[i,j-i+1].concat(changedHorizon));}}catch(err){_iterator69.e(err);}finally{_iterator69.f();}for(var _i13=0,_horizon=horizon;_i13<_horizon.length;_i13++){var horizonPart=_horizon[_i13];var affectedBoundary=horizonPart.boundary;if(affectedBoundary.x2New===undefined){affectedBoundary.x2New=Math.max(width,affectedBoundary.x2);}}}var TextLayerRenderTask=/*#__PURE__*/function(){function TextLayerRenderTask(_ref59){var _globalThis$FontInspe2,_this46=this;var textContent=_ref59.textContent,textContentStream=_ref59.textContentStream,container=_ref59.container,viewport=_ref59.viewport,textDivs=_ref59.textDivs,textContentItemsStr=_ref59.textContentItemsStr,enhanceTextSelection=_ref59.enhanceTextSelection;_classCallCheck(this,TextLayerRenderTask);this._textContent=textContent;this._textContentStream=textContentStream;this._container=container;this._document=container.ownerDocument;this._viewport=viewport;this._textDivs=textDivs||[];this._textContentItemsStr=textContentItemsStr||[];this._enhanceTextSelection=!!enhanceTextSelection;this._fontInspectorEnabled=!!((_globalThis$FontInspe2=globalThis.FontInspector)!==null&&_globalThis$FontInspe2!==void 0&&_globalThis$FontInspe2.enabled);this._reader=null;this._layoutTextLastFontSize=null;this._layoutTextLastFontFamily=null;this._layoutTextCtx=null;this._textDivProperties=new WeakMap();this._renderingDone=false;this._canceled=false;this._capability=(0,_util.createPromiseCapability)();this._renderTimer=null;this._bounds=[];this._capability.promise[\"finally\"](function(){if(!_this46._enhanceTextSelection){_this46._textDivProperties=null;}if(_this46._layoutTextCtx){_this46._layoutTextCtx.canvas.width=0;_this46._layoutTextCtx.canvas.height=0;_this46._layoutTextCtx=null;}})[\"catch\"](function(){});}_createClass(TextLayerRenderTask,[{key:\"promise\",get:function get(){return this._capability.promise;}},{key:\"cancel\",value:function cancel(){this._canceled=true;if(this._reader){this._reader.cancel(new _util.AbortException(\"TextLayer task cancelled.\"))[\"catch\"](function(){});this._reader=null;}if(this._renderTimer!==null){clearTimeout(this._renderTimer);this._renderTimer=null;}this._capability.reject(new Error(\"TextLayer task cancelled.\"));}},{key:\"_processItems\",value:function _processItems(items,styleCache){for(var i=0,len=items.length;i<len;i++){if(items[i].str===undefined){if(items[i].type===\"beginMarkedContentProps\"||items[i].type===\"beginMarkedContent\"){var parent=this._container;this._container=document.createElement(\"span\");this._container.classList.add(\"markedContent\");if(items[i].id!==null){this._container.setAttribute(\"id\",\"\".concat(items[i].id));}parent.appendChild(this._container);}else if(items[i].type===\"endMarkedContent\"){this._container=this._container.parentNode;}continue;}this._textContentItemsStr.push(items[i].str);appendText(this,items[i],styleCache,this._layoutTextCtx);}}},{key:\"_layoutText\",value:function _layoutText(textDiv){var textDivProperties=this._textDivProperties.get(textDiv);var transform=\"\";if(textDivProperties.canvasWidth!==0&&textDivProperties.hasText){var _textDiv$style=textDiv.style,fontSize=_textDiv$style.fontSize,fontFamily=_textDiv$style.fontFamily;if(fontSize!==this._layoutTextLastFontSize||fontFamily!==this._layoutTextLastFontFamily){this._layoutTextCtx.font=\"\".concat(fontSize,\" \").concat(fontFamily);this._layoutTextLastFontSize=fontSize;this._layoutTextLastFontFamily=fontFamily;}var _this$_layoutTextCtx$=this._layoutTextCtx.measureText(textDiv.textContent),width=_this$_layoutTextCtx$.width;if(width>0){var scale=textDivProperties.canvasWidth/width;if(this._enhanceTextSelection){textDivProperties.scale=scale;}transform=\"scaleX(\".concat(scale,\")\");}}if(textDivProperties.angle!==0){transform=\"rotate(\".concat(textDivProperties.angle,\"deg) \").concat(transform);}if(transform.length>0){if(this._enhanceTextSelection){textDivProperties.originalTransform=transform;}textDiv.style.transform=transform;}if(textDivProperties.hasText){this._container.appendChild(textDiv);}if(textDivProperties.hasEOL){var br=document.createElement(\"br\");br.setAttribute(\"role\",\"presentation\");this._container.appendChild(br);}}},{key:\"_render\",value:function _render(){var _this47=this;var timeout=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var capability=(0,_util.createPromiseCapability)();var styleCache=Object.create(null);var canvas=this._document.createElement(\"canvas\");canvas.height=canvas.width=DEFAULT_FONT_SIZE;canvas.mozOpaque=true;this._layoutTextCtx=canvas.getContext(\"2d\",{alpha:false});if(this._textContent){var textItems=this._textContent.items;var textStyles=this._textContent.styles;this._processItems(textItems,textStyles);capability.resolve();}else if(this._textContentStream){var pump=function pump(){_this47._reader.read().then(function(_ref60){var value=_ref60.value,done=_ref60.done;if(done){capability.resolve();return;}Object.assign(styleCache,value.styles);_this47._processItems(value.items,styleCache);pump();},capability.reject);};this._reader=this._textContentStream.getReader();pump();}else{throw new Error('Neither \"textContent\" nor \"textContentStream\" parameters specified.');}capability.promise.then(function(){styleCache=null;if(!timeout){render(_this47);}else{_this47._renderTimer=setTimeout(function(){render(_this47);_this47._renderTimer=null;},timeout);}},this._capability.reject);}},{key:\"expandTextDivs\",value:function expandTextDivs(){var expandDivs=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(!this._enhanceTextSelection||!this._renderingDone){return;}if(this._bounds!==null){expand(this);this._bounds=null;}var transformBuf=[],paddingBuf=[];for(var i=0,ii=this._textDivs.length;i<ii;i++){var div=this._textDivs[i];var divProps=this._textDivProperties.get(div);if(!divProps.hasText){continue;}if(expandDivs){transformBuf.length=0;paddingBuf.length=0;if(divProps.originalTransform){transformBuf.push(divProps.originalTransform);}if(divProps.paddingTop>0){paddingBuf.push(\"\".concat(divProps.paddingTop,\"px\"));transformBuf.push(\"translateY(\".concat(-divProps.paddingTop,\"px)\"));}else{paddingBuf.push(0);}if(divProps.paddingRight>0){paddingBuf.push(\"\".concat(divProps.paddingRight/divProps.scale,\"px\"));}else{paddingBuf.push(0);}if(divProps.paddingBottom>0){paddingBuf.push(\"\".concat(divProps.paddingBottom,\"px\"));}else{paddingBuf.push(0);}if(divProps.paddingLeft>0){paddingBuf.push(\"\".concat(divProps.paddingLeft/divProps.scale,\"px\"));transformBuf.push(\"translateX(\".concat(-divProps.paddingLeft/divProps.scale,\"px)\"));}else{paddingBuf.push(0);}div.style.padding=paddingBuf.join(\" \");if(transformBuf.length){div.style.transform=transformBuf.join(\" \");}}else{div.style.padding=null;div.style.transform=divProps.originalTransform;}}}}]);return TextLayerRenderTask;}();function renderTextLayer(renderParameters){var task=new TextLayerRenderTask({textContent:renderParameters.textContent,textContentStream:renderParameters.textContentStream,container:renderParameters.container,viewport:renderParameters.viewport,textDivs:renderParameters.textDivs,textContentItemsStr:renderParameters.textContentItemsStr,enhanceTextSelection:renderParameters.enhanceTextSelection});task._render(renderParameters.timeout);return task;}/***/},/* 22 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.SVGGraphics=void 0;var _util=__w_pdfjs_require__(1);var _display_utils=__w_pdfjs_require__(5);var _is_node=__w_pdfjs_require__(3);var SVGGraphics=function SVGGraphics(){_classCallCheck(this,SVGGraphics);(0,_util.unreachable)(\"Not implemented: SVGGraphics\");};exports.SVGGraphics=SVGGraphics;{var opListToTree=function opListToTree(opList){var opTree=[];var tmp=[];var _iterator70=_createForOfIteratorHelper(opList),_step70;try{for(_iterator70.s();!(_step70=_iterator70.n()).done;){var opListElement=_step70.value;if(opListElement.fn===\"save\"){opTree.push({fnId:92,fn:\"group\",items:[]});tmp.push(opTree);opTree=opTree[opTree.length-1].items;continue;}if(opListElement.fn===\"restore\"){opTree=tmp.pop();}else{opTree.push(opListElement);}}}catch(err){_iterator70.e(err);}finally{_iterator70.f();}return opTree;};var pf=function pf(value){if(Number.isInteger(value)){return value.toString();}var s=value.toFixed(10);var i=s.length-1;if(s[i]!==\"0\"){return s;}do{i--;}while(s[i]===\"0\");return s.substring(0,s[i]===\".\"?i:i+1);};var pm=function pm(m){if(m[4]===0&&m[5]===0){if(m[1]===0&&m[2]===0){if(m[0]===1&&m[3]===1){return\"\";}return\"scale(\".concat(pf(m[0]),\" \").concat(pf(m[3]),\")\");}if(m[0]===m[3]&&m[1]===-m[2]){var a=Math.acos(m[0])*180/Math.PI;return\"rotate(\".concat(pf(a),\")\");}}else{if(m[0]===1&&m[1]===0&&m[2]===0&&m[3]===1){return\"translate(\".concat(pf(m[4]),\" \").concat(pf(m[5]),\")\");}}return\"matrix(\".concat(pf(m[0]),\" \").concat(pf(m[1]),\" \").concat(pf(m[2]),\" \").concat(pf(m[3]),\" \").concat(pf(m[4]),\" \")+\"\".concat(pf(m[5]),\")\");};var SVG_DEFAULTS={fontStyle:\"normal\",fontWeight:\"normal\",fillColor:\"#000000\"};var XML_NS=\"http://www.w3.org/XML/1998/namespace\";var XLINK_NS=\"http://www.w3.org/1999/xlink\";var LINE_CAP_STYLES=[\"butt\",\"round\",\"square\"];var LINE_JOIN_STYLES=[\"miter\",\"round\",\"bevel\"];var createObjectURL=function createObjectURL(data){var contentType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"\";var forceDataSchema=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(URL.createObjectURL&&typeof Blob!==\"undefined\"&&!forceDataSchema){return URL.createObjectURL(new Blob([data],{type:contentType}));}var digits=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";var buffer=\"data:\".concat(contentType,\";base64,\");for(var i=0,ii=data.length;i<ii;i+=3){var b1=data[i]&0xff;var b2=data[i+1]&0xff;var b3=data[i+2]&0xff;var d1=b1>>2,d2=(b1&3)<<4|b2>>4;var d3=i+1<ii?(b2&0xf)<<2|b3>>6:64;var d4=i+2<ii?b3&0x3f:64;buffer+=digits[d1]+digits[d2]+digits[d3]+digits[d4];}return buffer;};var convertImgDataToPng=function(){var PNG_HEADER=new Uint8Array([0x89,0x50,0x4e,0x47,0x0d,0x0a,0x1a,0x0a]);var CHUNK_WRAPPER_SIZE=12;var crcTable=new Int32Array(256);for(var i=0;i<256;i++){var c=i;for(var h=0;h<8;h++){if(c&1){c=0xedb88320^c>>1&0x7fffffff;}else{c=c>>1&0x7fffffff;}}crcTable[i]=c;}function crc32(data,start,end){var crc=-1;for(var _i14=start;_i14<end;_i14++){var a=(crc^data[_i14])&0xff;var b=crcTable[a];crc=crc>>>8^b;}return crc^-1;}function writePngChunk(type,body,data,offset){var p=offset;var len=body.length;data[p]=len>>24&0xff;data[p+1]=len>>16&0xff;data[p+2]=len>>8&0xff;data[p+3]=len&0xff;p+=4;data[p]=type.charCodeAt(0)&0xff;data[p+1]=type.charCodeAt(1)&0xff;data[p+2]=type.charCodeAt(2)&0xff;data[p+3]=type.charCodeAt(3)&0xff;p+=4;data.set(body,p);p+=body.length;var crc=crc32(data,offset+4,p);data[p]=crc>>24&0xff;data[p+1]=crc>>16&0xff;data[p+2]=crc>>8&0xff;data[p+3]=crc&0xff;}function adler32(data,start,end){var a=1;var b=0;for(var _i15=start;_i15<end;++_i15){a=(a+(data[_i15]&0xff))%65521;b=(b+a)%65521;}return b<<16|a;}function deflateSync(literals){if(!_is_node.isNodeJS){return deflateSyncUncompressed(literals);}try{var input;if(parseInt(process.versions.node)>=8){input=literals;}else{input=Buffer.from(literals);}var output=Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'zlib'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())(input,{level:9});return output instanceof Uint8Array?output:new Uint8Array(output);}catch(e){(0,_util.warn)(\"Not compressing PNG because zlib.deflateSync is unavailable: \"+e);}return deflateSyncUncompressed(literals);}function deflateSyncUncompressed(literals){var len=literals.length;var maxBlockLength=0xffff;var deflateBlocks=Math.ceil(len/maxBlockLength);var idat=new Uint8Array(2+len+deflateBlocks*5+4);var pi=0;idat[pi++]=0x78;idat[pi++]=0x9c;var pos=0;while(len>maxBlockLength){idat[pi++]=0x00;idat[pi++]=0xff;idat[pi++]=0xff;idat[pi++]=0x00;idat[pi++]=0x00;idat.set(literals.subarray(pos,pos+maxBlockLength),pi);pi+=maxBlockLength;pos+=maxBlockLength;len-=maxBlockLength;}idat[pi++]=0x01;idat[pi++]=len&0xff;idat[pi++]=len>>8&0xff;idat[pi++]=~len&0xffff&0xff;idat[pi++]=(~len&0xffff)>>8&0xff;idat.set(literals.subarray(pos),pi);pi+=literals.length-pos;var adler=adler32(literals,0,literals.length);idat[pi++]=adler>>24&0xff;idat[pi++]=adler>>16&0xff;idat[pi++]=adler>>8&0xff;idat[pi++]=adler&0xff;return idat;}function encode(imgData,kind,forceDataSchema,isMask){var width=imgData.width;var height=imgData.height;var bitDepth,colorType,lineSize;var bytes=imgData.data;switch(kind){case _util.ImageKind.GRAYSCALE_1BPP:colorType=0;bitDepth=1;lineSize=width+7>>3;break;case _util.ImageKind.RGB_24BPP:colorType=2;bitDepth=8;lineSize=width*3;break;case _util.ImageKind.RGBA_32BPP:colorType=6;bitDepth=8;lineSize=width*4;break;default:throw new Error(\"invalid format\");}var literals=new Uint8Array((1+lineSize)*height);var offsetLiterals=0,offsetBytes=0;for(var y=0;y<height;++y){literals[offsetLiterals++]=0;literals.set(bytes.subarray(offsetBytes,offsetBytes+lineSize),offsetLiterals);offsetBytes+=lineSize;offsetLiterals+=lineSize;}if(kind===_util.ImageKind.GRAYSCALE_1BPP&&isMask){offsetLiterals=0;for(var _y=0;_y<height;_y++){offsetLiterals++;for(var _i16=0;_i16<lineSize;_i16++){literals[offsetLiterals++]^=0xff;}}}var ihdr=new Uint8Array([width>>24&0xff,width>>16&0xff,width>>8&0xff,width&0xff,height>>24&0xff,height>>16&0xff,height>>8&0xff,height&0xff,bitDepth,colorType,0x00,0x00,0x00]);var idat=deflateSync(literals);var pngLength=PNG_HEADER.length+CHUNK_WRAPPER_SIZE*3+ihdr.length+idat.length;var data=new Uint8Array(pngLength);var offset=0;data.set(PNG_HEADER,offset);offset+=PNG_HEADER.length;writePngChunk(\"IHDR\",ihdr,data,offset);offset+=CHUNK_WRAPPER_SIZE+ihdr.length;writePngChunk(\"IDATA\",idat,data,offset);offset+=CHUNK_WRAPPER_SIZE+idat.length;writePngChunk(\"IEND\",new Uint8Array(0),data,offset);return createObjectURL(data,\"image/png\",forceDataSchema);}return function convertImgDataToPng(imgData,forceDataSchema,isMask){var kind=imgData.kind===undefined?_util.ImageKind.GRAYSCALE_1BPP:imgData.kind;return encode(imgData,kind,forceDataSchema,isMask);};}();var SVGExtraState=/*#__PURE__*/function(){function SVGExtraState(){_classCallCheck(this,SVGExtraState);this.fontSizeScale=1;this.fontWeight=SVG_DEFAULTS.fontWeight;this.fontSize=0;this.textMatrix=_util.IDENTITY_MATRIX;this.fontMatrix=_util.FONT_IDENTITY_MATRIX;this.leading=0;this.textRenderingMode=_util.TextRenderingMode.FILL;this.textMatrixScale=1;this.x=0;this.y=0;this.lineX=0;this.lineY=0;this.charSpacing=0;this.wordSpacing=0;this.textHScale=1;this.textRise=0;this.fillColor=SVG_DEFAULTS.fillColor;this.strokeColor=\"#000000\";this.fillAlpha=1;this.strokeAlpha=1;this.lineWidth=1;this.lineJoin=\"\";this.lineCap=\"\";this.miterLimit=0;this.dashArray=[];this.dashPhase=0;this.dependencies=[];this.activeClipUrl=null;this.clipGroup=null;this.maskId=\"\";}_createClass(SVGExtraState,[{key:\"clone\",value:function clone(){return Object.create(this);}},{key:\"setCurrentPoint\",value:function setCurrentPoint(x,y){this.x=x;this.y=y;}}]);return SVGExtraState;}();var clipCount=0;var maskCount=0;var shadingCount=0;exports.SVGGraphics=SVGGraphics=/*#__PURE__*/function(){function SVGGraphics(commonObjs,objs){var forceDataSchema=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;_classCallCheck(this,SVGGraphics);this.svgFactory=new _display_utils.DOMSVGFactory();this.current=new SVGExtraState();this.transformMatrix=_util.IDENTITY_MATRIX;this.transformStack=[];this.extraStack=[];this.commonObjs=commonObjs;this.objs=objs;this.pendingClip=null;this.pendingEOFill=false;this.embedFonts=false;this.embeddedFonts=Object.create(null);this.cssStyle=null;this.forceDataSchema=!!forceDataSchema;this._operatorIdMapping=[];for(var op in _util.OPS){this._operatorIdMapping[_util.OPS[op]]=op;}}_createClass(SVGGraphics,[{key:\"save\",value:function save(){this.transformStack.push(this.transformMatrix);var old=this.current;this.extraStack.push(old);this.current=old.clone();}},{key:\"restore\",value:function restore(){this.transformMatrix=this.transformStack.pop();this.current=this.extraStack.pop();this.pendingClip=null;this.tgrp=null;}},{key:\"group\",value:function group(items){this.save();this.executeOpTree(items);this.restore();}},{key:\"loadDependencies\",value:function loadDependencies(operatorList){var _this48=this;var fnArray=operatorList.fnArray;var argsArray=operatorList.argsArray;for(var i=0,ii=fnArray.length;i<ii;i++){if(fnArray[i]!==_util.OPS.dependency){continue;}var _iterator71=_createForOfIteratorHelper(argsArray[i]),_step71;try{var _loop3=function _loop3(){var obj=_step71.value;var objsPool=obj.startsWith(\"g_\")?_this48.commonObjs:_this48.objs;var promise=new Promise(function(resolve){objsPool.get(obj,resolve);});_this48.current.dependencies.push(promise);};for(_iterator71.s();!(_step71=_iterator71.n()).done;){_loop3();}}catch(err){_iterator71.e(err);}finally{_iterator71.f();}}return Promise.all(this.current.dependencies);}},{key:\"transform\",value:function transform(a,b,c,d,e,f){var transformMatrix=[a,b,c,d,e,f];this.transformMatrix=_util.Util.transform(this.transformMatrix,transformMatrix);this.tgrp=null;}},{key:\"getSVG\",value:function getSVG(operatorList,viewport){var _this49=this;this.viewport=viewport;var svgElement=this._initialize(viewport);return this.loadDependencies(operatorList).then(function(){_this49.transformMatrix=_util.IDENTITY_MATRIX;_this49.executeOpTree(_this49.convertOpList(operatorList));return svgElement;});}},{key:\"convertOpList\",value:function convertOpList(operatorList){var operatorIdMapping=this._operatorIdMapping;var argsArray=operatorList.argsArray;var fnArray=operatorList.fnArray;var opList=[];for(var i=0,ii=fnArray.length;i<ii;i++){var fnId=fnArray[i];opList.push({fnId:fnId,fn:operatorIdMapping[fnId],args:argsArray[i]});}return opListToTree(opList);}},{key:\"executeOpTree\",value:function executeOpTree(opTree){var _iterator72=_createForOfIteratorHelper(opTree),_step72;try{for(_iterator72.s();!(_step72=_iterator72.n()).done;){var opTreeElement=_step72.value;var fn=opTreeElement.fn;var fnId=opTreeElement.fnId;var args=opTreeElement.args;switch(fnId|0){case _util.OPS.beginText:this.beginText();break;case _util.OPS.dependency:break;case _util.OPS.setLeading:this.setLeading(args);break;case _util.OPS.setLeadingMoveText:this.setLeadingMoveText(args[0],args[1]);break;case _util.OPS.setFont:this.setFont(args);break;case _util.OPS.showText:this.showText(args[0]);break;case _util.OPS.showSpacedText:this.showText(args[0]);break;case _util.OPS.endText:this.endText();break;case _util.OPS.moveText:this.moveText(args[0],args[1]);break;case _util.OPS.setCharSpacing:this.setCharSpacing(args[0]);break;case _util.OPS.setWordSpacing:this.setWordSpacing(args[0]);break;case _util.OPS.setHScale:this.setHScale(args[0]);break;case _util.OPS.setTextMatrix:this.setTextMatrix(args[0],args[1],args[2],args[3],args[4],args[5]);break;case _util.OPS.setTextRise:this.setTextRise(args[0]);break;case _util.OPS.setTextRenderingMode:this.setTextRenderingMode(args[0]);break;case _util.OPS.setLineWidth:this.setLineWidth(args[0]);break;case _util.OPS.setLineJoin:this.setLineJoin(args[0]);break;case _util.OPS.setLineCap:this.setLineCap(args[0]);break;case _util.OPS.setMiterLimit:this.setMiterLimit(args[0]);break;case _util.OPS.setFillRGBColor:this.setFillRGBColor(args[0],args[1],args[2]);break;case _util.OPS.setStrokeRGBColor:this.setStrokeRGBColor(args[0],args[1],args[2]);break;case _util.OPS.setStrokeColorN:this.setStrokeColorN(args);break;case _util.OPS.setFillColorN:this.setFillColorN(args);break;case _util.OPS.shadingFill:this.shadingFill(args[0]);break;case _util.OPS.setDash:this.setDash(args[0],args[1]);break;case _util.OPS.setRenderingIntent:this.setRenderingIntent(args[0]);break;case _util.OPS.setFlatness:this.setFlatness(args[0]);break;case _util.OPS.setGState:this.setGState(args[0]);break;case _util.OPS.fill:this.fill();break;case _util.OPS.eoFill:this.eoFill();break;case _util.OPS.stroke:this.stroke();break;case _util.OPS.fillStroke:this.fillStroke();break;case _util.OPS.eoFillStroke:this.eoFillStroke();break;case _util.OPS.clip:this.clip(\"nonzero\");break;case _util.OPS.eoClip:this.clip(\"evenodd\");break;case _util.OPS.paintSolidColorImageMask:this.paintSolidColorImageMask();break;case _util.OPS.paintImageXObject:this.paintImageXObject(args[0]);break;case _util.OPS.paintInlineImageXObject:this.paintInlineImageXObject(args[0]);break;case _util.OPS.paintImageMaskXObject:this.paintImageMaskXObject(args[0]);break;case _util.OPS.paintFormXObjectBegin:this.paintFormXObjectBegin(args[0],args[1]);break;case _util.OPS.paintFormXObjectEnd:this.paintFormXObjectEnd();break;case _util.OPS.closePath:this.closePath();break;case _util.OPS.closeStroke:this.closeStroke();break;case _util.OPS.closeFillStroke:this.closeFillStroke();break;case _util.OPS.closeEOFillStroke:this.closeEOFillStroke();break;case _util.OPS.nextLine:this.nextLine();break;case _util.OPS.transform:this.transform(args[0],args[1],args[2],args[3],args[4],args[5]);break;case _util.OPS.constructPath:this.constructPath(args[0],args[1]);break;case _util.OPS.endPath:this.endPath();break;case 92:this.group(opTreeElement.items);break;default:(0,_util.warn)(\"Unimplemented operator \".concat(fn));break;}}}catch(err){_iterator72.e(err);}finally{_iterator72.f();}}},{key:\"setWordSpacing\",value:function setWordSpacing(wordSpacing){this.current.wordSpacing=wordSpacing;}},{key:\"setCharSpacing\",value:function setCharSpacing(charSpacing){this.current.charSpacing=charSpacing;}},{key:\"nextLine\",value:function nextLine(){this.moveText(0,this.current.leading);}},{key:\"setTextMatrix\",value:function setTextMatrix(a,b,c,d,e,f){var current=this.current;current.textMatrix=current.lineMatrix=[a,b,c,d,e,f];current.textMatrixScale=Math.hypot(a,b);current.x=current.lineX=0;current.y=current.lineY=0;current.xcoords=[];current.ycoords=[];current.tspan=this.svgFactory.createElement(\"svg:tspan\");current.tspan.setAttributeNS(null,\"font-family\",current.fontFamily);current.tspan.setAttributeNS(null,\"font-size\",\"\".concat(pf(current.fontSize),\"px\"));current.tspan.setAttributeNS(null,\"y\",pf(-current.y));current.txtElement=this.svgFactory.createElement(\"svg:text\");current.txtElement.appendChild(current.tspan);}},{key:\"beginText\",value:function beginText(){var current=this.current;current.x=current.lineX=0;current.y=current.lineY=0;current.textMatrix=_util.IDENTITY_MATRIX;current.lineMatrix=_util.IDENTITY_MATRIX;current.textMatrixScale=1;current.tspan=this.svgFactory.createElement(\"svg:tspan\");current.txtElement=this.svgFactory.createElement(\"svg:text\");current.txtgrp=this.svgFactory.createElement(\"svg:g\");current.xcoords=[];current.ycoords=[];}},{key:\"moveText\",value:function moveText(x,y){var current=this.current;current.x=current.lineX+=x;current.y=current.lineY+=y;current.xcoords=[];current.ycoords=[];current.tspan=this.svgFactory.createElement(\"svg:tspan\");current.tspan.setAttributeNS(null,\"font-family\",current.fontFamily);current.tspan.setAttributeNS(null,\"font-size\",\"\".concat(pf(current.fontSize),\"px\"));current.tspan.setAttributeNS(null,\"y\",pf(-current.y));}},{key:\"showText\",value:function showText(glyphs){var current=this.current;var font=current.font;var fontSize=current.fontSize;if(fontSize===0){return;}var fontSizeScale=current.fontSizeScale;var charSpacing=current.charSpacing;var wordSpacing=current.wordSpacing;var fontDirection=current.fontDirection;var textHScale=current.textHScale*fontDirection;var vertical=font.vertical;var spacingDir=vertical?1:-1;var defaultVMetrics=font.defaultVMetrics;var widthAdvanceScale=fontSize*current.fontMatrix[0];var x=0;var _iterator73=_createForOfIteratorHelper(glyphs),_step73;try{for(_iterator73.s();!(_step73=_iterator73.n()).done;){var glyph=_step73.value;if(glyph===null){x+=fontDirection*wordSpacing;continue;}else if(typeof glyph===\"number\"){x+=spacingDir*glyph*fontSize/1000;continue;}var spacing=(glyph.isSpace?wordSpacing:0)+charSpacing;var character=glyph.fontChar;var scaledX=void 0,scaledY=void 0;var width=glyph.width;if(vertical){var vx=void 0;var vmetric=glyph.vmetric||defaultVMetrics;vx=glyph.vmetric?vmetric[1]:width*0.5;vx=-vx*widthAdvanceScale;var vy=vmetric[2]*widthAdvanceScale;width=vmetric?-vmetric[0]:width;scaledX=vx/fontSizeScale;scaledY=(x+vy)/fontSizeScale;}else{scaledX=x/fontSizeScale;scaledY=0;}if(glyph.isInFont||font.missingFile){current.xcoords.push(current.x+scaledX);if(vertical){current.ycoords.push(-current.y+scaledY);}current.tspan.textContent+=character;}else{}var charWidth=void 0;if(vertical){charWidth=width*widthAdvanceScale-spacing*fontDirection;}else{charWidth=width*widthAdvanceScale+spacing*fontDirection;}x+=charWidth;}}catch(err){_iterator73.e(err);}finally{_iterator73.f();}current.tspan.setAttributeNS(null,\"x\",current.xcoords.map(pf).join(\" \"));if(vertical){current.tspan.setAttributeNS(null,\"y\",current.ycoords.map(pf).join(\" \"));}else{current.tspan.setAttributeNS(null,\"y\",pf(-current.y));}if(vertical){current.y-=x;}else{current.x+=x*textHScale;}current.tspan.setAttributeNS(null,\"font-family\",current.fontFamily);current.tspan.setAttributeNS(null,\"font-size\",\"\".concat(pf(current.fontSize),\"px\"));if(current.fontStyle!==SVG_DEFAULTS.fontStyle){current.tspan.setAttributeNS(null,\"font-style\",current.fontStyle);}if(current.fontWeight!==SVG_DEFAULTS.fontWeight){current.tspan.setAttributeNS(null,\"font-weight\",current.fontWeight);}var fillStrokeMode=current.textRenderingMode&_util.TextRenderingMode.FILL_STROKE_MASK;if(fillStrokeMode===_util.TextRenderingMode.FILL||fillStrokeMode===_util.TextRenderingMode.FILL_STROKE){if(current.fillColor!==SVG_DEFAULTS.fillColor){current.tspan.setAttributeNS(null,\"fill\",current.fillColor);}if(current.fillAlpha<1){current.tspan.setAttributeNS(null,\"fill-opacity\",current.fillAlpha);}}else if(current.textRenderingMode===_util.TextRenderingMode.ADD_TO_PATH){current.tspan.setAttributeNS(null,\"fill\",\"transparent\");}else{current.tspan.setAttributeNS(null,\"fill\",\"none\");}if(fillStrokeMode===_util.TextRenderingMode.STROKE||fillStrokeMode===_util.TextRenderingMode.FILL_STROKE){var lineWidthScale=1/(current.textMatrixScale||1);this._setStrokeAttributes(current.tspan,lineWidthScale);}var textMatrix=current.textMatrix;if(current.textRise!==0){textMatrix=textMatrix.slice();textMatrix[5]+=current.textRise;}current.txtElement.setAttributeNS(null,\"transform\",\"\".concat(pm(textMatrix),\" scale(\").concat(pf(textHScale),\", -1)\"));current.txtElement.setAttributeNS(XML_NS,\"xml:space\",\"preserve\");current.txtElement.appendChild(current.tspan);current.txtgrp.appendChild(current.txtElement);this._ensureTransformGroup().appendChild(current.txtElement);}},{key:\"setLeadingMoveText\",value:function setLeadingMoveText(x,y){this.setLeading(-y);this.moveText(x,y);}},{key:\"addFontStyle\",value:function addFontStyle(fontObj){if(!fontObj.data){throw new Error(\"addFontStyle: No font data available, \"+'ensure that the \"fontExtraProperties\" API parameter is set.');}if(!this.cssStyle){this.cssStyle=this.svgFactory.createElement(\"svg:style\");this.cssStyle.setAttributeNS(null,\"type\",\"text/css\");this.defs.appendChild(this.cssStyle);}var url=createObjectURL(fontObj.data,fontObj.mimetype,this.forceDataSchema);this.cssStyle.textContent+=\"@font-face { font-family: \\\"\".concat(fontObj.loadedName,\"\\\";\")+\" src: url(\".concat(url,\"); }\\n\");}},{key:\"setFont\",value:function setFont(details){var current=this.current;var fontObj=this.commonObjs.get(details[0]);var size=details[1];current.font=fontObj;if(this.embedFonts&&!fontObj.missingFile&&!this.embeddedFonts[fontObj.loadedName]){this.addFontStyle(fontObj);this.embeddedFonts[fontObj.loadedName]=fontObj;}current.fontMatrix=fontObj.fontMatrix||_util.FONT_IDENTITY_MATRIX;var bold=\"normal\";if(fontObj.black){bold=\"900\";}else if(fontObj.bold){bold=\"bold\";}var italic=fontObj.italic?\"italic\":\"normal\";if(size<0){size=-size;current.fontDirection=-1;}else{current.fontDirection=1;}current.fontSize=size;current.fontFamily=fontObj.loadedName;current.fontWeight=bold;current.fontStyle=italic;current.tspan=this.svgFactory.createElement(\"svg:tspan\");current.tspan.setAttributeNS(null,\"y\",pf(-current.y));current.xcoords=[];current.ycoords=[];}},{key:\"endText\",value:function endText(){var _current$txtElement;var current=this.current;if(current.textRenderingMode&_util.TextRenderingMode.ADD_TO_PATH_FLAG&&(_current$txtElement=current.txtElement)!==null&&_current$txtElement!==void 0&&_current$txtElement.hasChildNodes()){current.element=current.txtElement;this.clip(\"nonzero\");this.endPath();}}},{key:\"setLineWidth\",value:function setLineWidth(width){if(width>0){this.current.lineWidth=width;}}},{key:\"setLineCap\",value:function setLineCap(style){this.current.lineCap=LINE_CAP_STYLES[style];}},{key:\"setLineJoin\",value:function setLineJoin(style){this.current.lineJoin=LINE_JOIN_STYLES[style];}},{key:\"setMiterLimit\",value:function setMiterLimit(limit){this.current.miterLimit=limit;}},{key:\"setStrokeAlpha\",value:function setStrokeAlpha(strokeAlpha){this.current.strokeAlpha=strokeAlpha;}},{key:\"setStrokeRGBColor\",value:function setStrokeRGBColor(r,g,b){this.current.strokeColor=_util.Util.makeHexColor(r,g,b);}},{key:\"setFillAlpha\",value:function setFillAlpha(fillAlpha){this.current.fillAlpha=fillAlpha;}},{key:\"setFillRGBColor\",value:function setFillRGBColor(r,g,b){this.current.fillColor=_util.Util.makeHexColor(r,g,b);this.current.tspan=this.svgFactory.createElement(\"svg:tspan\");this.current.xcoords=[];this.current.ycoords=[];}},{key:\"setStrokeColorN\",value:function setStrokeColorN(args){this.current.strokeColor=this._makeColorN_Pattern(args);}},{key:\"setFillColorN\",value:function setFillColorN(args){this.current.fillColor=this._makeColorN_Pattern(args);}},{key:\"shadingFill\",value:function shadingFill(args){var width=this.viewport.width;var height=this.viewport.height;var inv=_util.Util.inverseTransform(this.transformMatrix);var bl=_util.Util.applyTransform([0,0],inv);var br=_util.Util.applyTransform([0,height],inv);var ul=_util.Util.applyTransform([width,0],inv);var ur=_util.Util.applyTransform([width,height],inv);var x0=Math.min(bl[0],br[0],ul[0],ur[0]);var y0=Math.min(bl[1],br[1],ul[1],ur[1]);var x1=Math.max(bl[0],br[0],ul[0],ur[0]);var y1=Math.max(bl[1],br[1],ul[1],ur[1]);var rect=this.svgFactory.createElement(\"svg:rect\");rect.setAttributeNS(null,\"x\",x0);rect.setAttributeNS(null,\"y\",y0);rect.setAttributeNS(null,\"width\",x1-x0);rect.setAttributeNS(null,\"height\",y1-y0);rect.setAttributeNS(null,\"fill\",this._makeShadingPattern(args));if(this.current.fillAlpha<1){rect.setAttributeNS(null,\"fill-opacity\",this.current.fillAlpha);}this._ensureTransformGroup().appendChild(rect);}},{key:\"_makeColorN_Pattern\",value:function _makeColorN_Pattern(args){if(args[0]===\"TilingPattern\"){return this._makeTilingPattern(args);}return this._makeShadingPattern(args);}},{key:\"_makeTilingPattern\",value:function _makeTilingPattern(args){var color=args[1];var operatorList=args[2];var matrix=args[3]||_util.IDENTITY_MATRIX;var _args$=_slicedToArray(args[4],4),x0=_args$[0],y0=_args$[1],x1=_args$[2],y1=_args$[3];var xstep=args[5];var ystep=args[6];var paintType=args[7];var tilingId=\"shading\".concat(shadingCount++);var _util$Util$normalizeR=_util.Util.normalizeRect([].concat(_toConsumableArray(_util.Util.applyTransform([x0,y0],matrix)),_toConsumableArray(_util.Util.applyTransform([x1,y1],matrix)))),_util$Util$normalizeR2=_slicedToArray(_util$Util$normalizeR,4),tx0=_util$Util$normalizeR2[0],ty0=_util$Util$normalizeR2[1],tx1=_util$Util$normalizeR2[2],ty1=_util$Util$normalizeR2[3];var _util$Util$singularVa5=_util.Util.singularValueDecompose2dScale(matrix),_util$Util$singularVa6=_slicedToArray(_util$Util$singularVa5,2),xscale=_util$Util$singularVa6[0],yscale=_util$Util$singularVa6[1];var txstep=xstep*xscale;var tystep=ystep*yscale;var tiling=this.svgFactory.createElement(\"svg:pattern\");tiling.setAttributeNS(null,\"id\",tilingId);tiling.setAttributeNS(null,\"patternUnits\",\"userSpaceOnUse\");tiling.setAttributeNS(null,\"width\",txstep);tiling.setAttributeNS(null,\"height\",tystep);tiling.setAttributeNS(null,\"x\",\"\".concat(tx0));tiling.setAttributeNS(null,\"y\",\"\".concat(ty0));var svg=this.svg;var transformMatrix=this.transformMatrix;var fillColor=this.current.fillColor;var strokeColor=this.current.strokeColor;var bbox=this.svgFactory.create(tx1-tx0,ty1-ty0);this.svg=bbox;this.transformMatrix=matrix;if(paintType===2){var _util$Util;var cssColor=(_util$Util=_util.Util).makeHexColor.apply(_util$Util,_toConsumableArray(color));this.current.fillColor=cssColor;this.current.strokeColor=cssColor;}this.executeOpTree(this.convertOpList(operatorList));this.svg=svg;this.transformMatrix=transformMatrix;this.current.fillColor=fillColor;this.current.strokeColor=strokeColor;tiling.appendChild(bbox.childNodes[0]);this.defs.appendChild(tiling);return\"url(#\".concat(tilingId,\")\");}},{key:\"_makeShadingPattern\",value:function _makeShadingPattern(args){if(typeof args===\"string\"){args=this.objs.get(args);}switch(args[0]){case\"RadialAxial\":var shadingId=\"shading\".concat(shadingCount++);var colorStops=args[3];var gradient;switch(args[1]){case\"axial\":var point0=args[4];var point1=args[5];gradient=this.svgFactory.createElement(\"svg:linearGradient\");gradient.setAttributeNS(null,\"id\",shadingId);gradient.setAttributeNS(null,\"gradientUnits\",\"userSpaceOnUse\");gradient.setAttributeNS(null,\"x1\",point0[0]);gradient.setAttributeNS(null,\"y1\",point0[1]);gradient.setAttributeNS(null,\"x2\",point1[0]);gradient.setAttributeNS(null,\"y2\",point1[1]);break;case\"radial\":var focalPoint=args[4];var circlePoint=args[5];var focalRadius=args[6];var circleRadius=args[7];gradient=this.svgFactory.createElement(\"svg:radialGradient\");gradient.setAttributeNS(null,\"id\",shadingId);gradient.setAttributeNS(null,\"gradientUnits\",\"userSpaceOnUse\");gradient.setAttributeNS(null,\"cx\",circlePoint[0]);gradient.setAttributeNS(null,\"cy\",circlePoint[1]);gradient.setAttributeNS(null,\"r\",circleRadius);gradient.setAttributeNS(null,\"fx\",focalPoint[0]);gradient.setAttributeNS(null,\"fy\",focalPoint[1]);gradient.setAttributeNS(null,\"fr\",focalRadius);break;default:throw new Error(\"Unknown RadialAxial type: \".concat(args[1]));}var _iterator74=_createForOfIteratorHelper(colorStops),_step74;try{for(_iterator74.s();!(_step74=_iterator74.n()).done;){var colorStop=_step74.value;var stop=this.svgFactory.createElement(\"svg:stop\");stop.setAttributeNS(null,\"offset\",colorStop[0]);stop.setAttributeNS(null,\"stop-color\",colorStop[1]);gradient.appendChild(stop);}}catch(err){_iterator74.e(err);}finally{_iterator74.f();}this.defs.appendChild(gradient);return\"url(#\".concat(shadingId,\")\");case\"Mesh\":(0,_util.warn)(\"Unimplemented pattern Mesh\");return null;case\"Dummy\":return\"hotpink\";default:throw new Error(\"Unknown IR type: \".concat(args[0]));}}},{key:\"setDash\",value:function setDash(dashArray,dashPhase){this.current.dashArray=dashArray;this.current.dashPhase=dashPhase;}},{key:\"constructPath\",value:function constructPath(ops,args){var current=this.current;var x=current.x,y=current.y;var d=[];var j=0;var _iterator75=_createForOfIteratorHelper(ops),_step75;try{for(_iterator75.s();!(_step75=_iterator75.n()).done;){var op=_step75.value;switch(op|0){case _util.OPS.rectangle:x=args[j++];y=args[j++];var width=args[j++];var height=args[j++];var xw=x+width;var yh=y+height;d.push(\"M\",pf(x),pf(y),\"L\",pf(xw),pf(y),\"L\",pf(xw),pf(yh),\"L\",pf(x),pf(yh),\"Z\");break;case _util.OPS.moveTo:x=args[j++];y=args[j++];d.push(\"M\",pf(x),pf(y));break;case _util.OPS.lineTo:x=args[j++];y=args[j++];d.push(\"L\",pf(x),pf(y));break;case _util.OPS.curveTo:x=args[j+4];y=args[j+5];d.push(\"C\",pf(args[j]),pf(args[j+1]),pf(args[j+2]),pf(args[j+3]),pf(x),pf(y));j+=6;break;case _util.OPS.curveTo2:d.push(\"C\",pf(x),pf(y),pf(args[j]),pf(args[j+1]),pf(args[j+2]),pf(args[j+3]));x=args[j+2];y=args[j+3];j+=4;break;case _util.OPS.curveTo3:x=args[j+2];y=args[j+3];d.push(\"C\",pf(args[j]),pf(args[j+1]),pf(x),pf(y),pf(x),pf(y));j+=4;break;case _util.OPS.closePath:d.push(\"Z\");break;}}}catch(err){_iterator75.e(err);}finally{_iterator75.f();}d=d.join(\" \");if(current.path&&ops.length>0&&ops[0]!==_util.OPS.rectangle&&ops[0]!==_util.OPS.moveTo){d=current.path.getAttributeNS(null,\"d\")+d;}else{current.path=this.svgFactory.createElement(\"svg:path\");this._ensureTransformGroup().appendChild(current.path);}current.path.setAttributeNS(null,\"d\",d);current.path.setAttributeNS(null,\"fill\",\"none\");current.element=current.path;current.setCurrentPoint(x,y);}},{key:\"endPath\",value:function endPath(){var current=this.current;current.path=null;if(!this.pendingClip){return;}if(!current.element){this.pendingClip=null;return;}var clipId=\"clippath\".concat(clipCount++);var clipPath=this.svgFactory.createElement(\"svg:clipPath\");clipPath.setAttributeNS(null,\"id\",clipId);clipPath.setAttributeNS(null,\"transform\",pm(this.transformMatrix));var clipElement=current.element.cloneNode(true);if(this.pendingClip===\"evenodd\"){clipElement.setAttributeNS(null,\"clip-rule\",\"evenodd\");}else{clipElement.setAttributeNS(null,\"clip-rule\",\"nonzero\");}this.pendingClip=null;clipPath.appendChild(clipElement);this.defs.appendChild(clipPath);if(current.activeClipUrl){current.clipGroup=null;var _iterator76=_createForOfIteratorHelper(this.extraStack),_step76;try{for(_iterator76.s();!(_step76=_iterator76.n()).done;){var prev=_step76.value;prev.clipGroup=null;}}catch(err){_iterator76.e(err);}finally{_iterator76.f();}clipPath.setAttributeNS(null,\"clip-path\",current.activeClipUrl);}current.activeClipUrl=\"url(#\".concat(clipId,\")\");this.tgrp=null;}},{key:\"clip\",value:function clip(type){this.pendingClip=type;}},{key:\"closePath\",value:function closePath(){var current=this.current;if(current.path){var d=\"\".concat(current.path.getAttributeNS(null,\"d\"),\"Z\");current.path.setAttributeNS(null,\"d\",d);}}},{key:\"setLeading\",value:function setLeading(leading){this.current.leading=-leading;}},{key:\"setTextRise\",value:function setTextRise(textRise){this.current.textRise=textRise;}},{key:\"setTextRenderingMode\",value:function setTextRenderingMode(textRenderingMode){this.current.textRenderingMode=textRenderingMode;}},{key:\"setHScale\",value:function setHScale(scale){this.current.textHScale=scale/100;}},{key:\"setRenderingIntent\",value:function setRenderingIntent(intent){}},{key:\"setFlatness\",value:function setFlatness(flatness){}},{key:\"setGState\",value:function setGState(states){var _iterator77=_createForOfIteratorHelper(states),_step77;try{for(_iterator77.s();!(_step77=_iterator77.n()).done;){var _step77$value=_slicedToArray(_step77.value,2),key=_step77$value[0],value=_step77$value[1];switch(key){case\"LW\":this.setLineWidth(value);break;case\"LC\":this.setLineCap(value);break;case\"LJ\":this.setLineJoin(value);break;case\"ML\":this.setMiterLimit(value);break;case\"D\":this.setDash(value[0],value[1]);break;case\"RI\":this.setRenderingIntent(value);break;case\"FL\":this.setFlatness(value);break;case\"Font\":this.setFont(value);break;case\"CA\":this.setStrokeAlpha(value);break;case\"ca\":this.setFillAlpha(value);break;default:(0,_util.warn)(\"Unimplemented graphic state operator \".concat(key));break;}}}catch(err){_iterator77.e(err);}finally{_iterator77.f();}}},{key:\"fill\",value:function fill(){var current=this.current;if(current.element){current.element.setAttributeNS(null,\"fill\",current.fillColor);current.element.setAttributeNS(null,\"fill-opacity\",current.fillAlpha);this.endPath();}}},{key:\"stroke\",value:function stroke(){var current=this.current;if(current.element){this._setStrokeAttributes(current.element);current.element.setAttributeNS(null,\"fill\",\"none\");this.endPath();}}},{key:\"_setStrokeAttributes\",value:function _setStrokeAttributes(element){var lineWidthScale=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var current=this.current;var dashArray=current.dashArray;if(lineWidthScale!==1&&dashArray.length>0){dashArray=dashArray.map(function(value){return lineWidthScale*value;});}element.setAttributeNS(null,\"stroke\",current.strokeColor);element.setAttributeNS(null,\"stroke-opacity\",current.strokeAlpha);element.setAttributeNS(null,\"stroke-miterlimit\",pf(current.miterLimit));element.setAttributeNS(null,\"stroke-linecap\",current.lineCap);element.setAttributeNS(null,\"stroke-linejoin\",current.lineJoin);element.setAttributeNS(null,\"stroke-width\",pf(lineWidthScale*current.lineWidth)+\"px\");element.setAttributeNS(null,\"stroke-dasharray\",dashArray.map(pf).join(\" \"));element.setAttributeNS(null,\"stroke-dashoffset\",pf(lineWidthScale*current.dashPhase)+\"px\");}},{key:\"eoFill\",value:function eoFill(){if(this.current.element){this.current.element.setAttributeNS(null,\"fill-rule\",\"evenodd\");}this.fill();}},{key:\"fillStroke\",value:function fillStroke(){this.stroke();this.fill();}},{key:\"eoFillStroke\",value:function eoFillStroke(){if(this.current.element){this.current.element.setAttributeNS(null,\"fill-rule\",\"evenodd\");}this.fillStroke();}},{key:\"closeStroke\",value:function closeStroke(){this.closePath();this.stroke();}},{key:\"closeFillStroke\",value:function closeFillStroke(){this.closePath();this.fillStroke();}},{key:\"closeEOFillStroke\",value:function closeEOFillStroke(){this.closePath();this.eoFillStroke();}},{key:\"paintSolidColorImageMask\",value:function paintSolidColorImageMask(){var rect=this.svgFactory.createElement(\"svg:rect\");rect.setAttributeNS(null,\"x\",\"0\");rect.setAttributeNS(null,\"y\",\"0\");rect.setAttributeNS(null,\"width\",\"1px\");rect.setAttributeNS(null,\"height\",\"1px\");rect.setAttributeNS(null,\"fill\",this.current.fillColor);this._ensureTransformGroup().appendChild(rect);}},{key:\"paintImageXObject\",value:function paintImageXObject(objId){var imgData=objId.startsWith(\"g_\")?this.commonObjs.get(objId):this.objs.get(objId);if(!imgData){(0,_util.warn)(\"Dependent image with object ID \".concat(objId,\" is not ready yet\"));return;}this.paintInlineImageXObject(imgData);}},{key:\"paintInlineImageXObject\",value:function paintInlineImageXObject(imgData,mask){var width=imgData.width;var height=imgData.height;var imgSrc=convertImgDataToPng(imgData,this.forceDataSchema,!!mask);var cliprect=this.svgFactory.createElement(\"svg:rect\");cliprect.setAttributeNS(null,\"x\",\"0\");cliprect.setAttributeNS(null,\"y\",\"0\");cliprect.setAttributeNS(null,\"width\",pf(width));cliprect.setAttributeNS(null,\"height\",pf(height));this.current.element=cliprect;this.clip(\"nonzero\");var imgEl=this.svgFactory.createElement(\"svg:image\");imgEl.setAttributeNS(XLINK_NS,\"xlink:href\",imgSrc);imgEl.setAttributeNS(null,\"x\",\"0\");imgEl.setAttributeNS(null,\"y\",pf(-height));imgEl.setAttributeNS(null,\"width\",pf(width)+\"px\");imgEl.setAttributeNS(null,\"height\",pf(height)+\"px\");imgEl.setAttributeNS(null,\"transform\",\"scale(\".concat(pf(1/width),\" \").concat(pf(-1/height),\")\"));if(mask){mask.appendChild(imgEl);}else{this._ensureTransformGroup().appendChild(imgEl);}}},{key:\"paintImageMaskXObject\",value:function paintImageMaskXObject(imgData){var current=this.current;var width=imgData.width;var height=imgData.height;var fillColor=current.fillColor;current.maskId=\"mask\".concat(maskCount++);var mask=this.svgFactory.createElement(\"svg:mask\");mask.setAttributeNS(null,\"id\",current.maskId);var rect=this.svgFactory.createElement(\"svg:rect\");rect.setAttributeNS(null,\"x\",\"0\");rect.setAttributeNS(null,\"y\",\"0\");rect.setAttributeNS(null,\"width\",pf(width));rect.setAttributeNS(null,\"height\",pf(height));rect.setAttributeNS(null,\"fill\",fillColor);rect.setAttributeNS(null,\"mask\",\"url(#\".concat(current.maskId,\")\"));this.defs.appendChild(mask);this._ensureTransformGroup().appendChild(rect);this.paintInlineImageXObject(imgData,mask);}},{key:\"paintFormXObjectBegin\",value:function paintFormXObjectBegin(matrix,bbox){if(Array.isArray(matrix)&&matrix.length===6){this.transform(matrix[0],matrix[1],matrix[2],matrix[3],matrix[4],matrix[5]);}if(bbox){var width=bbox[2]-bbox[0];var height=bbox[3]-bbox[1];var cliprect=this.svgFactory.createElement(\"svg:rect\");cliprect.setAttributeNS(null,\"x\",bbox[0]);cliprect.setAttributeNS(null,\"y\",bbox[1]);cliprect.setAttributeNS(null,\"width\",pf(width));cliprect.setAttributeNS(null,\"height\",pf(height));this.current.element=cliprect;this.clip(\"nonzero\");this.endPath();}}},{key:\"paintFormXObjectEnd\",value:function paintFormXObjectEnd(){}},{key:\"_initialize\",value:function _initialize(viewport){var svg=this.svgFactory.create(viewport.width,viewport.height);var definitions=this.svgFactory.createElement(\"svg:defs\");svg.appendChild(definitions);this.defs=definitions;var rootGroup=this.svgFactory.createElement(\"svg:g\");rootGroup.setAttributeNS(null,\"transform\",pm(viewport.transform));svg.appendChild(rootGroup);this.svg=rootGroup;return svg;}},{key:\"_ensureClipGroup\",value:function _ensureClipGroup(){if(!this.current.clipGroup){var clipGroup=this.svgFactory.createElement(\"svg:g\");clipGroup.setAttributeNS(null,\"clip-path\",this.current.activeClipUrl);this.svg.appendChild(clipGroup);this.current.clipGroup=clipGroup;}return this.current.clipGroup;}},{key:\"_ensureTransformGroup\",value:function _ensureTransformGroup(){if(!this.tgrp){this.tgrp=this.svgFactory.createElement(\"svg:g\");this.tgrp.setAttributeNS(null,\"transform\",pm(this.transformMatrix));if(this.current.activeClipUrl){this._ensureClipGroup().appendChild(this.tgrp);}else{this.svg.appendChild(this.tgrp);}}return this.tgrp;}}]);return SVGGraphics;}();}/***/},/* 23 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.PDFNodeStream=void 0;var _util=__w_pdfjs_require__(1);var _network_utils=__w_pdfjs_require__(24);;var fs=__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'fs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));var http=__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'http'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));var https=__webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'https'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));var url=__webpack_require__(/*! url */ \"./node_modules/url/url.js\");var fileUriRegex=/^file:\\/\\/\\/[a-zA-Z]:\\//;function parseUrl(sourceUrl){var parsedUrl=url.parse(sourceUrl);if(parsedUrl.protocol===\"file:\"||parsedUrl.host){return parsedUrl;}if(/^[a-z]:[/\\\\]/i.test(sourceUrl)){return url.parse(\"file:///\".concat(sourceUrl));}if(!parsedUrl.host){parsedUrl.protocol=\"file:\";}return parsedUrl;}var PDFNodeStream=/*#__PURE__*/function(){function PDFNodeStream(source){_classCallCheck(this,PDFNodeStream);this.source=source;this.url=parseUrl(source.url);this.isHttp=this.url.protocol===\"http:\"||this.url.protocol===\"https:\";this.isFsUrl=this.url.protocol===\"file:\";this.httpHeaders=this.isHttp&&source.httpHeaders||{};this._fullRequestReader=null;this._rangeRequestReaders=[];}_createClass(PDFNodeStream,[{key:\"_progressiveDataLength\",get:function get(){var _this$_fullRequestRea3,_this$_fullRequestRea4;return(_this$_fullRequestRea3=(_this$_fullRequestRea4=this._fullRequestReader)===null||_this$_fullRequestRea4===void 0?void 0:_this$_fullRequestRea4._loaded)!==null&&_this$_fullRequestRea3!==void 0?_this$_fullRequestRea3:0;}},{key:\"getFullReader\",value:function getFullReader(){(0,_util.assert)(!this._fullRequestReader,\"PDFNodeStream.getFullReader can only be called once.\");this._fullRequestReader=this.isFsUrl?new PDFNodeStreamFsFullReader(this):new PDFNodeStreamFullReader(this);return this._fullRequestReader;}},{key:\"getRangeReader\",value:function getRangeReader(start,end){if(end<=this._progressiveDataLength){return null;}var rangeReader=this.isFsUrl?new PDFNodeStreamFsRangeReader(this,start,end):new PDFNodeStreamRangeReader(this,start,end);this._rangeRequestReaders.push(rangeReader);return rangeReader;}},{key:\"cancelAllRequests\",value:function cancelAllRequests(reason){if(this._fullRequestReader){this._fullRequestReader.cancel(reason);}var _iterator78=_createForOfIteratorHelper(this._rangeRequestReaders.slice(0)),_step78;try{for(_iterator78.s();!(_step78=_iterator78.n()).done;){var reader=_step78.value;reader.cancel(reason);}}catch(err){_iterator78.e(err);}finally{_iterator78.f();}}}]);return PDFNodeStream;}();exports.PDFNodeStream=PDFNodeStream;var BaseFullReader=/*#__PURE__*/function(){function BaseFullReader(stream){_classCallCheck(this,BaseFullReader);this._url=stream.url;this._done=false;this._storedError=null;this.onProgress=null;var source=stream.source;this._contentLength=source.length;this._loaded=0;this._filename=null;this._disableRange=source.disableRange||false;this._rangeChunkSize=source.rangeChunkSize;if(!this._rangeChunkSize&&!this._disableRange){this._disableRange=true;}this._isStreamingSupported=!source.disableStream;this._isRangeSupported=!source.disableRange;this._readableStream=null;this._readCapability=(0,_util.createPromiseCapability)();this._headersCapability=(0,_util.createPromiseCapability)();}_createClass(BaseFullReader,[{key:\"headersReady\",get:function get(){return this._headersCapability.promise;}},{key:\"filename\",get:function get(){return this._filename;}},{key:\"contentLength\",get:function get(){return this._contentLength;}},{key:\"isRangeSupported\",get:function get(){return this._isRangeSupported;}},{key:\"isStreamingSupported\",get:function get(){return this._isStreamingSupported;}},{key:\"read\",value:function(){var _read3=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee15(){var chunk,buffer;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee15$(_context15){while(1){switch(_context15.prev=_context15.next){case 0:_context15.next=2;return this._readCapability.promise;case 2:if(!this._done){_context15.next=4;break;}return _context15.abrupt(\"return\",{value:undefined,done:true});case 4:if(!this._storedError){_context15.next=6;break;}throw this._storedError;case 6:chunk=this._readableStream.read();if(!(chunk===null)){_context15.next=10;break;}this._readCapability=(0,_util.createPromiseCapability)();return _context15.abrupt(\"return\",this.read());case 10:this._loaded+=chunk.length;if(this.onProgress){this.onProgress({loaded:this._loaded,total:this._contentLength});}buffer=new Uint8Array(chunk).buffer;return _context15.abrupt(\"return\",{value:buffer,done:false});case 14:case\"end\":return _context15.stop();}}},_callee15,this);}));function read(){return _read3.apply(this,arguments);}return read;}()},{key:\"cancel\",value:function cancel(reason){if(!this._readableStream){this._error(reason);return;}this._readableStream.destroy(reason);}},{key:\"_error\",value:function _error(reason){this._storedError=reason;this._readCapability.resolve();}},{key:\"_setReadableStream\",value:function _setReadableStream(readableStream){var _this50=this;this._readableStream=readableStream;readableStream.on(\"readable\",function(){_this50._readCapability.resolve();});readableStream.on(\"end\",function(){readableStream.destroy();_this50._done=true;_this50._readCapability.resolve();});readableStream.on(\"error\",function(reason){_this50._error(reason);});if(!this._isStreamingSupported&&this._isRangeSupported){this._error(new _util.AbortException(\"streaming is disabled\"));}if(this._storedError){this._readableStream.destroy(this._storedError);}}}]);return BaseFullReader;}();var BaseRangeReader=/*#__PURE__*/function(){function BaseRangeReader(stream){_classCallCheck(this,BaseRangeReader);this._url=stream.url;this._done=false;this._storedError=null;this.onProgress=null;this._loaded=0;this._readableStream=null;this._readCapability=(0,_util.createPromiseCapability)();var source=stream.source;this._isStreamingSupported=!source.disableStream;}_createClass(BaseRangeReader,[{key:\"isStreamingSupported\",get:function get(){return this._isStreamingSupported;}},{key:\"read\",value:function(){var _read4=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee16(){var chunk,buffer;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee16$(_context16){while(1){switch(_context16.prev=_context16.next){case 0:_context16.next=2;return this._readCapability.promise;case 2:if(!this._done){_context16.next=4;break;}return _context16.abrupt(\"return\",{value:undefined,done:true});case 4:if(!this._storedError){_context16.next=6;break;}throw this._storedError;case 6:chunk=this._readableStream.read();if(!(chunk===null)){_context16.next=10;break;}this._readCapability=(0,_util.createPromiseCapability)();return _context16.abrupt(\"return\",this.read());case 10:this._loaded+=chunk.length;if(this.onProgress){this.onProgress({loaded:this._loaded});}buffer=new Uint8Array(chunk).buffer;return _context16.abrupt(\"return\",{value:buffer,done:false});case 14:case\"end\":return _context16.stop();}}},_callee16,this);}));function read(){return _read4.apply(this,arguments);}return read;}()},{key:\"cancel\",value:function cancel(reason){if(!this._readableStream){this._error(reason);return;}this._readableStream.destroy(reason);}},{key:\"_error\",value:function _error(reason){this._storedError=reason;this._readCapability.resolve();}},{key:\"_setReadableStream\",value:function _setReadableStream(readableStream){var _this51=this;this._readableStream=readableStream;readableStream.on(\"readable\",function(){_this51._readCapability.resolve();});readableStream.on(\"end\",function(){readableStream.destroy();_this51._done=true;_this51._readCapability.resolve();});readableStream.on(\"error\",function(reason){_this51._error(reason);});if(this._storedError){this._readableStream.destroy(this._storedError);}}}]);return BaseRangeReader;}();function createRequestOptions(parsedUrl,headers){return{protocol:parsedUrl.protocol,auth:parsedUrl.auth,host:parsedUrl.hostname,port:parsedUrl.port,path:parsedUrl.path,method:\"GET\",headers:headers};}var PDFNodeStreamFullReader=/*#__PURE__*/function(_BaseFullReader){_inherits(PDFNodeStreamFullReader,_BaseFullReader);var _super43=_createSuper(PDFNodeStreamFullReader);function PDFNodeStreamFullReader(stream){var _this52;_classCallCheck(this,PDFNodeStreamFullReader);_this52=_super43.call(this,stream);var handleResponse=function handleResponse(response){if(response.statusCode===404){var error=new _util.MissingPDFException(\"Missing PDF \\\"\".concat(_this52._url,\"\\\".\"));_this52._storedError=error;_this52._headersCapability.reject(error);return;}_this52._headersCapability.resolve();_this52._setReadableStream(response);var getResponseHeader=function getResponseHeader(name){return _this52._readableStream.headers[name.toLowerCase()];};var _ref61=(0,_network_utils.validateRangeRequestCapabilities)({getResponseHeader:getResponseHeader,isHttp:stream.isHttp,rangeChunkSize:_this52._rangeChunkSize,disableRange:_this52._disableRange}),allowRangeRequests=_ref61.allowRangeRequests,suggestedLength=_ref61.suggestedLength;_this52._isRangeSupported=allowRangeRequests;_this52._contentLength=suggestedLength||_this52._contentLength;_this52._filename=(0,_network_utils.extractFilenameFromHeader)(getResponseHeader);};_this52._request=null;if(_this52._url.protocol===\"http:\"){_this52._request=http.request(createRequestOptions(_this52._url,stream.httpHeaders),handleResponse);}else{_this52._request=https.request(createRequestOptions(_this52._url,stream.httpHeaders),handleResponse);}_this52._request.on(\"error\",function(reason){_this52._storedError=reason;_this52._headersCapability.reject(reason);});_this52._request.end();return _this52;}return PDFNodeStreamFullReader;}(BaseFullReader);var PDFNodeStreamRangeReader=/*#__PURE__*/function(_BaseRangeReader){_inherits(PDFNodeStreamRangeReader,_BaseRangeReader);var _super44=_createSuper(PDFNodeStreamRangeReader);function PDFNodeStreamRangeReader(stream,start,end){var _this53;_classCallCheck(this,PDFNodeStreamRangeReader);_this53=_super44.call(this,stream);_this53._httpHeaders={};for(var property in stream.httpHeaders){var value=stream.httpHeaders[property];if(typeof value===\"undefined\"){continue;}_this53._httpHeaders[property]=value;}_this53._httpHeaders.Range=\"bytes=\".concat(start,\"-\").concat(end-1);var handleResponse=function handleResponse(response){if(response.statusCode===404){var error=new _util.MissingPDFException(\"Missing PDF \\\"\".concat(_this53._url,\"\\\".\"));_this53._storedError=error;return;}_this53._setReadableStream(response);};_this53._request=null;if(_this53._url.protocol===\"http:\"){_this53._request=http.request(createRequestOptions(_this53._url,_this53._httpHeaders),handleResponse);}else{_this53._request=https.request(createRequestOptions(_this53._url,_this53._httpHeaders),handleResponse);}_this53._request.on(\"error\",function(reason){_this53._storedError=reason;});_this53._request.end();return _this53;}return PDFNodeStreamRangeReader;}(BaseRangeReader);var PDFNodeStreamFsFullReader=/*#__PURE__*/function(_BaseFullReader2){_inherits(PDFNodeStreamFsFullReader,_BaseFullReader2);var _super45=_createSuper(PDFNodeStreamFsFullReader);function PDFNodeStreamFsFullReader(stream){var _this54;_classCallCheck(this,PDFNodeStreamFsFullReader);_this54=_super45.call(this,stream);var path=decodeURIComponent(_this54._url.path);if(fileUriRegex.test(_this54._url.href)){path=path.replace(/^\\//,\"\");}fs.lstat(path,function(error,stat){if(error){if(error.code===\"ENOENT\"){error=new _util.MissingPDFException(\"Missing PDF \\\"\".concat(path,\"\\\".\"));}_this54._storedError=error;_this54._headersCapability.reject(error);return;}_this54._contentLength=stat.size;_this54._setReadableStream(fs.createReadStream(path));_this54._headersCapability.resolve();});return _this54;}return PDFNodeStreamFsFullReader;}(BaseFullReader);var PDFNodeStreamFsRangeReader=/*#__PURE__*/function(_BaseRangeReader2){_inherits(PDFNodeStreamFsRangeReader,_BaseRangeReader2);var _super46=_createSuper(PDFNodeStreamFsRangeReader);function PDFNodeStreamFsRangeReader(stream,start,end){var _this55;_classCallCheck(this,PDFNodeStreamFsRangeReader);_this55=_super46.call(this,stream);var path=decodeURIComponent(_this55._url.path);if(fileUriRegex.test(_this55._url.href)){path=path.replace(/^\\//,\"\");}_this55._setReadableStream(fs.createReadStream(path,{start:start,end:end-1}));return _this55;}return PDFNodeStreamFsRangeReader;}(BaseRangeReader);/***/},/* 24 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.createResponseStatusError=createResponseStatusError;exports.extractFilenameFromHeader=extractFilenameFromHeader;exports.validateRangeRequestCapabilities=validateRangeRequestCapabilities;exports.validateResponseStatus=validateResponseStatus;var _util=__w_pdfjs_require__(1);var _content_disposition=__w_pdfjs_require__(25);var _display_utils=__w_pdfjs_require__(5);function validateRangeRequestCapabilities(_ref62){var getResponseHeader=_ref62.getResponseHeader,isHttp=_ref62.isHttp,rangeChunkSize=_ref62.rangeChunkSize,disableRange=_ref62.disableRange;var returnValues={allowRangeRequests:false,suggestedLength:undefined};var length=parseInt(getResponseHeader(\"Content-Length\"),10);if(!Number.isInteger(length)){return returnValues;}returnValues.suggestedLength=length;if(length<=2*rangeChunkSize){return returnValues;}if(disableRange||!isHttp){return returnValues;}if(getResponseHeader(\"Accept-Ranges\")!==\"bytes\"){return returnValues;}var contentEncoding=getResponseHeader(\"Content-Encoding\")||\"identity\";if(contentEncoding!==\"identity\"){return returnValues;}returnValues.allowRangeRequests=true;return returnValues;}function extractFilenameFromHeader(getResponseHeader){var contentDisposition=getResponseHeader(\"Content-Disposition\");if(contentDisposition){var filename=(0,_content_disposition.getFilenameFromContentDispositionHeader)(contentDisposition);if(filename.includes(\"%\")){try{filename=decodeURIComponent(filename);}catch(ex){}}if((0,_display_utils.isPdfFile)(filename)){return filename;}}return null;}function createResponseStatusError(status,url){if(status===404||status===0&&url.startsWith(\"file:\")){return new _util.MissingPDFException('Missing PDF \"'+url+'\".');}return new _util.UnexpectedResponseException(\"Unexpected server response (\".concat(status,\") while retrieving PDF \\\"\").concat(url,\"\\\".\"),status);}function validateResponseStatus(status){return status===200||status===206;}/***/},/* 25 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.getFilenameFromContentDispositionHeader=getFilenameFromContentDispositionHeader;var _util=__w_pdfjs_require__(1);function getFilenameFromContentDispositionHeader(contentDisposition){var needsEncodingFixup=true;var tmp=toParamRegExp(\"filename\\\\*\",\"i\").exec(contentDisposition);if(tmp){tmp=tmp[1];var filename=rfc2616unquote(tmp);filename=unescape(filename);filename=rfc5987decode(filename);filename=rfc2047decode(filename);return fixupEncoding(filename);}tmp=rfc2231getparam(contentDisposition);if(tmp){var _filename=rfc2047decode(tmp);return fixupEncoding(_filename);}tmp=toParamRegExp(\"filename\",\"i\").exec(contentDisposition);if(tmp){tmp=tmp[1];var _filename2=rfc2616unquote(tmp);_filename2=rfc2047decode(_filename2);return fixupEncoding(_filename2);}function toParamRegExp(attributePattern,flags){return new RegExp(\"(?:^|;)\\\\s*\"+attributePattern+\"\\\\s*=\\\\s*\"+\"(\"+'[^\";\\\\s][^;\\\\s]*'+\"|\"+'\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?'+\")\",flags);}function textdecode(encoding,value){if(encoding){if(!/^[\\x00-\\xFF]+$/.test(value)){return value;}try{var decoder=new TextDecoder(encoding,{fatal:true});var buffer=(0,_util.stringToBytes)(value);value=decoder.decode(buffer);needsEncodingFixup=false;}catch(e){}}return value;}function fixupEncoding(value){if(needsEncodingFixup&&/[\\x80-\\xff]/.test(value)){value=textdecode(\"utf-8\",value);if(needsEncodingFixup){value=textdecode(\"iso-8859-1\",value);}}return value;}function rfc2231getparam(contentDispositionStr){var matches=[];var match;var iter=toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\",\"ig\");while((match=iter.exec(contentDispositionStr))!==null){var _match=match,_match2=_slicedToArray(_match,4),n=_match2[1],quot=_match2[2],part=_match2[3];n=parseInt(n,10);if(n in matches){if(n===0){break;}continue;}matches[n]=[quot,part];}var parts=[];for(var _n2=0;_n2<matches.length;++_n2){if(!(_n2 in matches)){break;}var _matches$_n=_slicedToArray(matches[_n2],2),_quot=_matches$_n[0],_part=_matches$_n[1];_part=rfc2616unquote(_part);if(_quot){_part=unescape(_part);if(_n2===0){_part=rfc5987decode(_part);}}parts.push(_part);}return parts.join(\"\");}function rfc2616unquote(value){if(value.startsWith('\"')){var parts=value.slice(1).split('\\\\\"');for(var i=0;i<parts.length;++i){var quotindex=parts[i].indexOf('\"');if(quotindex!==-1){parts[i]=parts[i].slice(0,quotindex);parts.length=i+1;}parts[i]=parts[i].replace(/\\\\(.)/g,\"$1\");}value=parts.join('\"');}return value;}function rfc5987decode(extvalue){var encodingend=extvalue.indexOf(\"'\");if(encodingend===-1){return extvalue;}var encoding=extvalue.slice(0,encodingend);var langvalue=extvalue.slice(encodingend+1);var value=langvalue.replace(/^[^']*'/,\"\");return textdecode(encoding,value);}function rfc2047decode(value){if(!value.startsWith(\"=?\")||/[\\x00-\\x19\\x80-\\xff]/.test(value)){return value;}return value.replace(/=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g,function(matches,charset,encoding,text){if(encoding===\"q\"||encoding===\"Q\"){text=text.replace(/_/g,\" \");text=text.replace(/=([0-9a-fA-F]{2})/g,function(match,hex){return String.fromCharCode(parseInt(hex,16));});return textdecode(charset,text);}try{text=atob(text);}catch(e){}return textdecode(charset,text);});}return\"\";}/***/},/* 26 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.PDFNetworkStream=void 0;var _util=__w_pdfjs_require__(1);var _network_utils=__w_pdfjs_require__(24);;var OK_RESPONSE=200;var PARTIAL_CONTENT_RESPONSE=206;function getArrayBuffer(xhr){var data=xhr.response;if(typeof data!==\"string\"){return data;}var array=(0,_util.stringToBytes)(data);return array.buffer;}var NetworkManager=/*#__PURE__*/function(){function NetworkManager(url){var args=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};_classCallCheck(this,NetworkManager);this.url=url;this.isHttp=/^https?:/i.test(url);this.httpHeaders=this.isHttp&&args.httpHeaders||Object.create(null);this.withCredentials=args.withCredentials||false;this.getXhr=args.getXhr||function NetworkManager_getXhr(){return new XMLHttpRequest();};this.currXhrId=0;this.pendingRequests=Object.create(null);}_createClass(NetworkManager,[{key:\"requestRange\",value:function requestRange(begin,end,listeners){var args={begin:begin,end:end};for(var prop in listeners){args[prop]=listeners[prop];}return this.request(args);}},{key:\"requestFull\",value:function requestFull(listeners){return this.request(listeners);}},{key:\"request\",value:function request(args){var xhr=this.getXhr();var xhrId=this.currXhrId++;var pendingRequest=this.pendingRequests[xhrId]={xhr:xhr};xhr.open(\"GET\",this.url);xhr.withCredentials=this.withCredentials;for(var property in this.httpHeaders){var value=this.httpHeaders[property];if(typeof value===\"undefined\"){continue;}xhr.setRequestHeader(property,value);}if(this.isHttp&&\"begin\"in args&&\"end\"in args){xhr.setRequestHeader(\"Range\",\"bytes=\".concat(args.begin,\"-\").concat(args.end-1));pendingRequest.expectedStatus=PARTIAL_CONTENT_RESPONSE;}else{pendingRequest.expectedStatus=OK_RESPONSE;}xhr.responseType=\"arraybuffer\";if(args.onError){xhr.onerror=function(evt){args.onError(xhr.status);};}xhr.onreadystatechange=this.onStateChange.bind(this,xhrId);xhr.onprogress=this.onProgress.bind(this,xhrId);pendingRequest.onHeadersReceived=args.onHeadersReceived;pendingRequest.onDone=args.onDone;pendingRequest.onError=args.onError;pendingRequest.onProgress=args.onProgress;xhr.send(null);return xhrId;}},{key:\"onProgress\",value:function onProgress(xhrId,evt){var _pendingRequest$onPro;var pendingRequest=this.pendingRequests[xhrId];if(!pendingRequest){return;}(_pendingRequest$onPro=pendingRequest.onProgress)===null||_pendingRequest$onPro===void 0?void 0:_pendingRequest$onPro.call(pendingRequest,evt);}},{key:\"onStateChange\",value:function onStateChange(xhrId,evt){var pendingRequest=this.pendingRequests[xhrId];if(!pendingRequest){return;}var xhr=pendingRequest.xhr;if(xhr.readyState>=2&&pendingRequest.onHeadersReceived){pendingRequest.onHeadersReceived();delete pendingRequest.onHeadersReceived;}if(xhr.readyState!==4){return;}if(!(xhrId in this.pendingRequests)){return;}delete this.pendingRequests[xhrId];if(xhr.status===0&&this.isHttp){var _pendingRequest$onErr;(_pendingRequest$onErr=pendingRequest.onError)===null||_pendingRequest$onErr===void 0?void 0:_pendingRequest$onErr.call(pendingRequest,xhr.status);return;}var xhrStatus=xhr.status||OK_RESPONSE;var ok_response_on_range_request=xhrStatus===OK_RESPONSE&&pendingRequest.expectedStatus===PARTIAL_CONTENT_RESPONSE;if(!ok_response_on_range_request&&xhrStatus!==pendingRequest.expectedStatus){var _pendingRequest$onErr2;(_pendingRequest$onErr2=pendingRequest.onError)===null||_pendingRequest$onErr2===void 0?void 0:_pendingRequest$onErr2.call(pendingRequest,xhr.status);return;}var chunk=getArrayBuffer(xhr);if(xhrStatus===PARTIAL_CONTENT_RESPONSE){var rangeHeader=xhr.getResponseHeader(\"Content-Range\");var matches=/bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);pendingRequest.onDone({begin:parseInt(matches[1],10),chunk:chunk});}else if(chunk){pendingRequest.onDone({begin:0,chunk:chunk});}else{var _pendingRequest$onErr3;(_pendingRequest$onErr3=pendingRequest.onError)===null||_pendingRequest$onErr3===void 0?void 0:_pendingRequest$onErr3.call(pendingRequest,xhr.status);}}},{key:\"getRequestXhr\",value:function getRequestXhr(xhrId){return this.pendingRequests[xhrId].xhr;}},{key:\"isPendingRequest\",value:function isPendingRequest(xhrId){return xhrId in this.pendingRequests;}},{key:\"abortRequest\",value:function abortRequest(xhrId){var xhr=this.pendingRequests[xhrId].xhr;delete this.pendingRequests[xhrId];xhr.abort();}}]);return NetworkManager;}();var PDFNetworkStream=/*#__PURE__*/function(){function PDFNetworkStream(source){_classCallCheck(this,PDFNetworkStream);this._source=source;this._manager=new NetworkManager(source.url,{httpHeaders:source.httpHeaders,withCredentials:source.withCredentials});this._rangeChunkSize=source.rangeChunkSize;this._fullRequestReader=null;this._rangeRequestReaders=[];}_createClass(PDFNetworkStream,[{key:\"_onRangeRequestReaderClosed\",value:function _onRangeRequestReaderClosed(reader){var i=this._rangeRequestReaders.indexOf(reader);if(i>=0){this._rangeRequestReaders.splice(i,1);}}},{key:\"getFullReader\",value:function getFullReader(){(0,_util.assert)(!this._fullRequestReader,\"PDFNetworkStream.getFullReader can only be called once.\");this._fullRequestReader=new PDFNetworkStreamFullRequestReader(this._manager,this._source);return this._fullRequestReader;}},{key:\"getRangeReader\",value:function getRangeReader(begin,end){var reader=new PDFNetworkStreamRangeRequestReader(this._manager,begin,end);reader.onClosed=this._onRangeRequestReaderClosed.bind(this);this._rangeRequestReaders.push(reader);return reader;}},{key:\"cancelAllRequests\",value:function cancelAllRequests(reason){var _this$_fullRequestRea5;(_this$_fullRequestRea5=this._fullRequestReader)===null||_this$_fullRequestRea5===void 0?void 0:_this$_fullRequestRea5.cancel(reason);var _iterator79=_createForOfIteratorHelper(this._rangeRequestReaders.slice(0)),_step79;try{for(_iterator79.s();!(_step79=_iterator79.n()).done;){var reader=_step79.value;reader.cancel(reason);}}catch(err){_iterator79.e(err);}finally{_iterator79.f();}}}]);return PDFNetworkStream;}();exports.PDFNetworkStream=PDFNetworkStream;var PDFNetworkStreamFullRequestReader=/*#__PURE__*/function(){function PDFNetworkStreamFullRequestReader(manager,source){_classCallCheck(this,PDFNetworkStreamFullRequestReader);this._manager=manager;var args={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=source.url;this._fullRequestId=manager.requestFull(args);this._headersReceivedCapability=(0,_util.createPromiseCapability)();this._disableRange=source.disableRange||false;this._contentLength=source.length;this._rangeChunkSize=source.rangeChunkSize;if(!this._rangeChunkSize&&!this._disableRange){this._disableRange=true;}this._isStreamingSupported=false;this._isRangeSupported=false;this._cachedChunks=[];this._requests=[];this._done=false;this._storedError=undefined;this._filename=null;this.onProgress=null;}_createClass(PDFNetworkStreamFullRequestReader,[{key:\"_onHeadersReceived\",value:function _onHeadersReceived(){var fullRequestXhrId=this._fullRequestId;var fullRequestXhr=this._manager.getRequestXhr(fullRequestXhrId);var getResponseHeader=function getResponseHeader(name){return fullRequestXhr.getResponseHeader(name);};var _ref63=(0,_network_utils.validateRangeRequestCapabilities)({getResponseHeader:getResponseHeader,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange}),allowRangeRequests=_ref63.allowRangeRequests,suggestedLength=_ref63.suggestedLength;if(allowRangeRequests){this._isRangeSupported=true;}this._contentLength=suggestedLength||this._contentLength;this._filename=(0,_network_utils.extractFilenameFromHeader)(getResponseHeader);if(this._isRangeSupported){this._manager.abortRequest(fullRequestXhrId);}this._headersReceivedCapability.resolve();}},{key:\"_onDone\",value:function _onDone(data){if(data){if(this._requests.length>0){var requestCapability=this._requests.shift();requestCapability.resolve({value:data.chunk,done:false});}else{this._cachedChunks.push(data.chunk);}}this._done=true;if(this._cachedChunks.length>0){return;}var _iterator80=_createForOfIteratorHelper(this._requests),_step80;try{for(_iterator80.s();!(_step80=_iterator80.n()).done;){var _requestCapability=_step80.value;_requestCapability.resolve({value:undefined,done:true});}}catch(err){_iterator80.e(err);}finally{_iterator80.f();}this._requests.length=0;}},{key:\"_onError\",value:function _onError(status){this._storedError=(0,_network_utils.createResponseStatusError)(status,this._url);this._headersReceivedCapability.reject(this._storedError);var _iterator81=_createForOfIteratorHelper(this._requests),_step81;try{for(_iterator81.s();!(_step81=_iterator81.n()).done;){var requestCapability=_step81.value;requestCapability.reject(this._storedError);}}catch(err){_iterator81.e(err);}finally{_iterator81.f();}this._requests.length=0;this._cachedChunks.length=0;}},{key:\"_onProgress\",value:function _onProgress(evt){var _this$onProgress;(_this$onProgress=this.onProgress)===null||_this$onProgress===void 0?void 0:_this$onProgress.call(this,{loaded:evt.loaded,total:evt.lengthComputable?evt.total:this._contentLength});}},{key:\"filename\",get:function get(){return this._filename;}},{key:\"isRangeSupported\",get:function get(){return this._isRangeSupported;}},{key:\"isStreamingSupported\",get:function get(){return this._isStreamingSupported;}},{key:\"contentLength\",get:function get(){return this._contentLength;}},{key:\"headersReady\",get:function get(){return this._headersReceivedCapability.promise;}},{key:\"read\",value:function(){var _read5=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee17(){var chunk,requestCapability;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee17$(_context17){while(1){switch(_context17.prev=_context17.next){case 0:if(!this._storedError){_context17.next=2;break;}throw this._storedError;case 2:if(!(this._cachedChunks.length>0)){_context17.next=5;break;}chunk=this._cachedChunks.shift();return _context17.abrupt(\"return\",{value:chunk,done:false});case 5:if(!this._done){_context17.next=7;break;}return _context17.abrupt(\"return\",{value:undefined,done:true});case 7:requestCapability=(0,_util.createPromiseCapability)();this._requests.push(requestCapability);return _context17.abrupt(\"return\",requestCapability.promise);case 10:case\"end\":return _context17.stop();}}},_callee17,this);}));function read(){return _read5.apply(this,arguments);}return read;}()},{key:\"cancel\",value:function cancel(reason){this._done=true;this._headersReceivedCapability.reject(reason);var _iterator82=_createForOfIteratorHelper(this._requests),_step82;try{for(_iterator82.s();!(_step82=_iterator82.n()).done;){var requestCapability=_step82.value;requestCapability.resolve({value:undefined,done:true});}}catch(err){_iterator82.e(err);}finally{_iterator82.f();}this._requests.length=0;if(this._manager.isPendingRequest(this._fullRequestId)){this._manager.abortRequest(this._fullRequestId);}this._fullRequestReader=null;}}]);return PDFNetworkStreamFullRequestReader;}();var PDFNetworkStreamRangeRequestReader=/*#__PURE__*/function(){function PDFNetworkStreamRangeRequestReader(manager,begin,end){_classCallCheck(this,PDFNetworkStreamRangeRequestReader);this._manager=manager;var args={onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=manager.url;this._requestId=manager.requestRange(begin,end,args);this._requests=[];this._queuedChunk=null;this._done=false;this._storedError=undefined;this.onProgress=null;this.onClosed=null;}_createClass(PDFNetworkStreamRangeRequestReader,[{key:\"_close\",value:function _close(){var _this$onClosed;(_this$onClosed=this.onClosed)===null||_this$onClosed===void 0?void 0:_this$onClosed.call(this,this);}},{key:\"_onDone\",value:function _onDone(data){var chunk=data.chunk;if(this._requests.length>0){var requestCapability=this._requests.shift();requestCapability.resolve({value:chunk,done:false});}else{this._queuedChunk=chunk;}this._done=true;var _iterator83=_createForOfIteratorHelper(this._requests),_step83;try{for(_iterator83.s();!(_step83=_iterator83.n()).done;){var _requestCapability2=_step83.value;_requestCapability2.resolve({value:undefined,done:true});}}catch(err){_iterator83.e(err);}finally{_iterator83.f();}this._requests.length=0;this._close();}},{key:\"_onError\",value:function _onError(status){this._storedError=(0,_network_utils.createResponseStatusError)(status,this._url);var _iterator84=_createForOfIteratorHelper(this._requests),_step84;try{for(_iterator84.s();!(_step84=_iterator84.n()).done;){var requestCapability=_step84.value;requestCapability.reject(this._storedError);}}catch(err){_iterator84.e(err);}finally{_iterator84.f();}this._requests.length=0;this._queuedChunk=null;}},{key:\"_onProgress\",value:function _onProgress(evt){if(!this.isStreamingSupported){var _this$onProgress2;(_this$onProgress2=this.onProgress)===null||_this$onProgress2===void 0?void 0:_this$onProgress2.call(this,{loaded:evt.loaded});}}},{key:\"isStreamingSupported\",get:function get(){return false;}},{key:\"read\",value:function(){var _read6=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee18(){var chunk,requestCapability;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee18$(_context18){while(1){switch(_context18.prev=_context18.next){case 0:if(!this._storedError){_context18.next=2;break;}throw this._storedError;case 2:if(!(this._queuedChunk!==null)){_context18.next=6;break;}chunk=this._queuedChunk;this._queuedChunk=null;return _context18.abrupt(\"return\",{value:chunk,done:false});case 6:if(!this._done){_context18.next=8;break;}return _context18.abrupt(\"return\",{value:undefined,done:true});case 8:requestCapability=(0,_util.createPromiseCapability)();this._requests.push(requestCapability);return _context18.abrupt(\"return\",requestCapability.promise);case 11:case\"end\":return _context18.stop();}}},_callee18,this);}));function read(){return _read6.apply(this,arguments);}return read;}()},{key:\"cancel\",value:function cancel(reason){this._done=true;var _iterator85=_createForOfIteratorHelper(this._requests),_step85;try{for(_iterator85.s();!(_step85=_iterator85.n()).done;){var requestCapability=_step85.value;requestCapability.resolve({value:undefined,done:true});}}catch(err){_iterator85.e(err);}finally{_iterator85.f();}this._requests.length=0;if(this._manager.isPendingRequest(this._requestId)){this._manager.abortRequest(this._requestId);}this._close();}}]);return PDFNetworkStreamRangeRequestReader;}();/***/},/* 27 */ /***/function(__unused_webpack_module,exports,__w_pdfjs_require__){Object.defineProperty(exports,\"__esModule\",{value:true});exports.PDFFetchStream=void 0;var _util=__w_pdfjs_require__(1);var _network_utils=__w_pdfjs_require__(24);;function createFetchOptions(headers,withCredentials,abortController){return{method:\"GET\",headers:headers,signal:abortController===null||abortController===void 0?void 0:abortController.signal,mode:\"cors\",credentials:withCredentials?\"include\":\"same-origin\",redirect:\"follow\"};}function createHeaders(httpHeaders){var headers=new Headers();for(var property in httpHeaders){var value=httpHeaders[property];if(typeof value===\"undefined\"){continue;}headers.append(property,value);}return headers;}var PDFFetchStream=/*#__PURE__*/function(){function PDFFetchStream(source){_classCallCheck(this,PDFFetchStream);this.source=source;this.isHttp=/^https?:/i.test(source.url);this.httpHeaders=this.isHttp&&source.httpHeaders||{};this._fullRequestReader=null;this._rangeRequestReaders=[];}_createClass(PDFFetchStream,[{key:\"_progressiveDataLength\",get:function get(){var _this$_fullRequestRea6,_this$_fullRequestRea7;return(_this$_fullRequestRea6=(_this$_fullRequestRea7=this._fullRequestReader)===null||_this$_fullRequestRea7===void 0?void 0:_this$_fullRequestRea7._loaded)!==null&&_this$_fullRequestRea6!==void 0?_this$_fullRequestRea6:0;}},{key:\"getFullReader\",value:function getFullReader(){(0,_util.assert)(!this._fullRequestReader,\"PDFFetchStream.getFullReader can only be called once.\");this._fullRequestReader=new PDFFetchStreamReader(this);return this._fullRequestReader;}},{key:\"getRangeReader\",value:function getRangeReader(begin,end){if(end<=this._progressiveDataLength){return null;}var reader=new PDFFetchStreamRangeReader(this,begin,end);this._rangeRequestReaders.push(reader);return reader;}},{key:\"cancelAllRequests\",value:function cancelAllRequests(reason){if(this._fullRequestReader){this._fullRequestReader.cancel(reason);}var _iterator86=_createForOfIteratorHelper(this._rangeRequestReaders.slice(0)),_step86;try{for(_iterator86.s();!(_step86=_iterator86.n()).done;){var reader=_step86.value;reader.cancel(reason);}}catch(err){_iterator86.e(err);}finally{_iterator86.f();}}}]);return PDFFetchStream;}();exports.PDFFetchStream=PDFFetchStream;var PDFFetchStreamReader=/*#__PURE__*/function(){function PDFFetchStreamReader(stream){var _this56=this;_classCallCheck(this,PDFFetchStreamReader);this._stream=stream;this._reader=null;this._loaded=0;this._filename=null;var source=stream.source;this._withCredentials=source.withCredentials||false;this._contentLength=source.length;this._headersCapability=(0,_util.createPromiseCapability)();this._disableRange=source.disableRange||false;this._rangeChunkSize=source.rangeChunkSize;if(!this._rangeChunkSize&&!this._disableRange){this._disableRange=true;}if(typeof AbortController!==\"undefined\"){this._abortController=new AbortController();}this._isStreamingSupported=!source.disableStream;this._isRangeSupported=!source.disableRange;this._headers=createHeaders(this._stream.httpHeaders);var url=source.url;fetch(url,createFetchOptions(this._headers,this._withCredentials,this._abortController)).then(function(response){if(!(0,_network_utils.validateResponseStatus)(response.status)){throw(0,_network_utils.createResponseStatusError)(response.status,url);}_this56._reader=response.body.getReader();_this56._headersCapability.resolve();var getResponseHeader=function getResponseHeader(name){return response.headers.get(name);};var _ref64=(0,_network_utils.validateRangeRequestCapabilities)({getResponseHeader:getResponseHeader,isHttp:_this56._stream.isHttp,rangeChunkSize:_this56._rangeChunkSize,disableRange:_this56._disableRange}),allowRangeRequests=_ref64.allowRangeRequests,suggestedLength=_ref64.suggestedLength;_this56._isRangeSupported=allowRangeRequests;_this56._contentLength=suggestedLength||_this56._contentLength;_this56._filename=(0,_network_utils.extractFilenameFromHeader)(getResponseHeader);if(!_this56._isStreamingSupported&&_this56._isRangeSupported){_this56.cancel(new _util.AbortException(\"Streaming is disabled.\"));}})[\"catch\"](this._headersCapability.reject);this.onProgress=null;}_createClass(PDFFetchStreamReader,[{key:\"headersReady\",get:function get(){return this._headersCapability.promise;}},{key:\"filename\",get:function get(){return this._filename;}},{key:\"contentLength\",get:function get(){return this._contentLength;}},{key:\"isRangeSupported\",get:function get(){return this._isRangeSupported;}},{key:\"isStreamingSupported\",get:function get(){return this._isStreamingSupported;}},{key:\"read\",value:function(){var _read7=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee19(){var _yield$this$_reader$r,value,done,buffer;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee19$(_context19){while(1){switch(_context19.prev=_context19.next){case 0:_context19.next=2;return this._headersCapability.promise;case 2:_context19.next=4;return this._reader.read();case 4:_yield$this$_reader$r=_context19.sent;value=_yield$this$_reader$r.value;done=_yield$this$_reader$r.done;if(!done){_context19.next=9;break;}return _context19.abrupt(\"return\",{value:value,done:done});case 9:this._loaded+=value.byteLength;if(this.onProgress){this.onProgress({loaded:this._loaded,total:this._contentLength});}buffer=new Uint8Array(value).buffer;return _context19.abrupt(\"return\",{value:buffer,done:false});case 13:case\"end\":return _context19.stop();}}},_callee19,this);}));function read(){return _read7.apply(this,arguments);}return read;}()},{key:\"cancel\",value:function cancel(reason){if(this._reader){this._reader.cancel(reason);}if(this._abortController){this._abortController.abort();}}}]);return PDFFetchStreamReader;}();var PDFFetchStreamRangeReader=/*#__PURE__*/function(){function PDFFetchStreamRangeReader(stream,begin,end){var _this57=this;_classCallCheck(this,PDFFetchStreamRangeReader);this._stream=stream;this._reader=null;this._loaded=0;var source=stream.source;this._withCredentials=source.withCredentials||false;this._readCapability=(0,_util.createPromiseCapability)();this._isStreamingSupported=!source.disableStream;if(typeof AbortController!==\"undefined\"){this._abortController=new AbortController();}this._headers=createHeaders(this._stream.httpHeaders);this._headers.append(\"Range\",\"bytes=\".concat(begin,\"-\").concat(end-1));var url=source.url;fetch(url,createFetchOptions(this._headers,this._withCredentials,this._abortController)).then(function(response){if(!(0,_network_utils.validateResponseStatus)(response.status)){throw(0,_network_utils.createResponseStatusError)(response.status,url);}_this57._readCapability.resolve();_this57._reader=response.body.getReader();})[\"catch\"](this._readCapability.reject);this.onProgress=null;}_createClass(PDFFetchStreamRangeReader,[{key:\"isStreamingSupported\",get:function get(){return this._isStreamingSupported;}},{key:\"read\",value:function(){var _read8=_asyncToGenerator(/*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee20(){var _yield$this$_reader$r2,value,done,buffer;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee20$(_context20){while(1){switch(_context20.prev=_context20.next){case 0:_context20.next=2;return this._readCapability.promise;case 2:_context20.next=4;return this._reader.read();case 4:_yield$this$_reader$r2=_context20.sent;value=_yield$this$_reader$r2.value;done=_yield$this$_reader$r2.done;if(!done){_context20.next=9;break;}return _context20.abrupt(\"return\",{value:value,done:done});case 9:this._loaded+=value.byteLength;if(this.onProgress){this.onProgress({loaded:this._loaded});}buffer=new Uint8Array(value).buffer;return _context20.abrupt(\"return\",{value:buffer,done:false});case 13:case\"end\":return _context20.stop();}}},_callee20,this);}));function read(){return _read8.apply(this,arguments);}return read;}()},{key:\"cancel\",value:function cancel(reason){if(this._reader){this._reader.cancel(reason);}if(this._abortController){this._abortController.abort();}}}]);return PDFFetchStreamRangeReader;}();/***/}/******/];/************************************************************************/ /******/ // The module cache\n/******/var __webpack_module_cache__={};/******/ /******/ // The require function\n/******/function __w_pdfjs_require__(moduleId){/******/ // Check if module is in cache\n/******/var cachedModule=__webpack_module_cache__[moduleId];/******/if(cachedModule!==undefined){/******/return cachedModule.exports;/******/}/******/ // Create a new module (and put it into the cache)\n/******/var module=__webpack_module_cache__[moduleId]={/******/ // no module.id needed\n/******/ // no module.loaded needed\n/******/exports:{}/******/};/******/ /******/ // Execute the module function\n/******/__webpack_modules__[moduleId](module,module.exports,__w_pdfjs_require__);/******/ /******/ // Return the exports of the module\n/******/return module.exports;/******/}/******/ /************************************************************************/var __webpack_exports__={};// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n(function(){var exports=__webpack_exports__;Object.defineProperty(exports,\"__esModule\",{value:true});Object.defineProperty(exports,\"AnnotationLayer\",{enumerable:true,get:function get(){return _annotation_layer.AnnotationLayer;}});Object.defineProperty(exports,\"AnnotationMode\",{enumerable:true,get:function get(){return _util.AnnotationMode;}});Object.defineProperty(exports,\"CMapCompressionType\",{enumerable:true,get:function get(){return _util.CMapCompressionType;}});Object.defineProperty(exports,\"GlobalWorkerOptions\",{enumerable:true,get:function get(){return _worker_options.GlobalWorkerOptions;}});Object.defineProperty(exports,\"InvalidPDFException\",{enumerable:true,get:function get(){return _util.InvalidPDFException;}});Object.defineProperty(exports,\"LoopbackPort\",{enumerable:true,get:function get(){return _api.LoopbackPort;}});Object.defineProperty(exports,\"MissingPDFException\",{enumerable:true,get:function get(){return _util.MissingPDFException;}});Object.defineProperty(exports,\"OPS\",{enumerable:true,get:function get(){return _util.OPS;}});Object.defineProperty(exports,\"PDFDataRangeTransport\",{enumerable:true,get:function get(){return _api.PDFDataRangeTransport;}});Object.defineProperty(exports,\"PDFDateString\",{enumerable:true,get:function get(){return _display_utils.PDFDateString;}});Object.defineProperty(exports,\"PDFWorker\",{enumerable:true,get:function get(){return _api.PDFWorker;}});Object.defineProperty(exports,\"PasswordResponses\",{enumerable:true,get:function get(){return _util.PasswordResponses;}});Object.defineProperty(exports,\"PermissionFlag\",{enumerable:true,get:function get(){return _util.PermissionFlag;}});Object.defineProperty(exports,\"PixelsPerInch\",{enumerable:true,get:function get(){return _display_utils.PixelsPerInch;}});Object.defineProperty(exports,\"RenderingCancelledException\",{enumerable:true,get:function get(){return _display_utils.RenderingCancelledException;}});Object.defineProperty(exports,\"SVGGraphics\",{enumerable:true,get:function get(){return _svg.SVGGraphics;}});Object.defineProperty(exports,\"UNSUPPORTED_FEATURES\",{enumerable:true,get:function get(){return _util.UNSUPPORTED_FEATURES;}});Object.defineProperty(exports,\"UnexpectedResponseException\",{enumerable:true,get:function get(){return _util.UnexpectedResponseException;}});Object.defineProperty(exports,\"Util\",{enumerable:true,get:function get(){return _util.Util;}});Object.defineProperty(exports,\"VerbosityLevel\",{enumerable:true,get:function get(){return _util.VerbosityLevel;}});Object.defineProperty(exports,\"XfaLayer\",{enumerable:true,get:function get(){return _xfa_layer.XfaLayer;}});Object.defineProperty(exports,\"build\",{enumerable:true,get:function get(){return _api.build;}});Object.defineProperty(exports,\"createPromiseCapability\",{enumerable:true,get:function get(){return _util.createPromiseCapability;}});Object.defineProperty(exports,\"createValidAbsoluteUrl\",{enumerable:true,get:function get(){return _util.createValidAbsoluteUrl;}});Object.defineProperty(exports,\"getDocument\",{enumerable:true,get:function get(){return _api.getDocument;}});Object.defineProperty(exports,\"getFilenameFromUrl\",{enumerable:true,get:function get(){return _display_utils.getFilenameFromUrl;}});Object.defineProperty(exports,\"getPdfFilenameFromUrl\",{enumerable:true,get:function get(){return _display_utils.getPdfFilenameFromUrl;}});Object.defineProperty(exports,\"getXfaPageViewport\",{enumerable:true,get:function get(){return _display_utils.getXfaPageViewport;}});Object.defineProperty(exports,\"isPdfFile\",{enumerable:true,get:function get(){return _display_utils.isPdfFile;}});Object.defineProperty(exports,\"loadScript\",{enumerable:true,get:function get(){return _display_utils.loadScript;}});Object.defineProperty(exports,\"renderTextLayer\",{enumerable:true,get:function get(){return _text_layer.renderTextLayer;}});Object.defineProperty(exports,\"shadow\",{enumerable:true,get:function get(){return _util.shadow;}});Object.defineProperty(exports,\"version\",{enumerable:true,get:function get(){return _api.version;}});var _util=__w_pdfjs_require__(1);var _api=__w_pdfjs_require__(4);var _display_utils=__w_pdfjs_require__(5);var _annotation_layer=__w_pdfjs_require__(18);var _worker_options=__w_pdfjs_require__(12);var _is_node=__w_pdfjs_require__(3);var _text_layer=__w_pdfjs_require__(21);var _svg=__w_pdfjs_require__(22);var _xfa_layer=__w_pdfjs_require__(20);var pdfjsVersion='2.14.102';var pdfjsBuild='db4f3adc5';{if(_is_node.isNodeJS){var _w_pdfjs_require__=__w_pdfjs_require__(23),PDFNodeStream=_w_pdfjs_require__.PDFNodeStream;(0,_api.setPDFNetworkStreamFactory)(function(params){return new PDFNodeStream(params);});}else{var _w_pdfjs_require__2=__w_pdfjs_require__(26),PDFNetworkStream=_w_pdfjs_require__2.PDFNetworkStream;var _w_pdfjs_require__3=__w_pdfjs_require__(27),PDFFetchStream=_w_pdfjs_require__3.PDFFetchStream;(0,_api.setPDFNetworkStreamFactory)(function(params){if((0,_display_utils.isValidFetchUrl)(params.url)){return new PDFFetchStream(params);}return new PDFNetworkStream(params);});}}})();/******/return __webpack_exports__;/******/}());});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQVYsQ0FBYSxDQUFiLENBQWdCLENBQWhCLENBQW1CLENBQW5CLENBQXNCLENBQXRCLENBQXlCLENBQXpCLENBQTRCLENBQTVCLENBQStCLENBQS9CLENBQWtDLENBQWxDLENBQXFDLENBQXJDLENBQXdDLENBQXhDLENBQTJDLENBQTNDLENBQThDLENBQTlDLENBQWlELENBQWpELENBQW9ELENBQXBELENBQXVELENBQXZELENBQTBELENBQTFELENBQTZELENBQTdELENBQWdFLENBQWhFLENBQW1FLENBQW5FLENBQXNFLENBQXRFLENBQXlFLEtBQXpFLENBQWdGLEtBQWhGLENBQXVGLEtBQXZGLENBQThGLEtBQTlGLENBQXFHLEtBQXJHLENBQTRHLEtBQTVHLENBQW1ILEtBQW5ILENBQTBILEtBQTFILENBQWlJLENBQWpJLENBQW9JLENBQXBJLENBQXVJLENBQXZJLENBQTBJLENBQTFJLENBQTZJLENBQTdJLENBQWdKLENBQWhKLENBQW1KLENBQW5KLENBQXNKLENBQXRKLENBQXlKLENBQXpKLENBQTRKLENBQTVKLENBQStKLENBQS9KLENBQWtLLENBQWxLLENBQXFLLENBQXJLLENBQXdLLENBQXhLLENBQTJLLENBQTNLLENBQThLLENBQTlLLENBQWlMLENBQWpMLENBQW9MLENBQXBMLENBQXVMLENBQXZMLENBQTBMLENBQTFMLENBQTZMLENBQTdMLENBQWdNLENBQWhNLENBQW1NLENBQW5NLENBQXNNLENBQXRNLENBQXlNLENBQXpNLENBQTRNLENBQTVNLENBQStNLENBQS9NLENBQWtOLENBQWxOLENBQXFOLENBQXJOLENBQXdOLENBQXhOLENBQTJOLENBQTNOLENBQThOLENBQTlOLENBQWlPLENBQWpPLENBQW9PLENBQXBPLENBQXVPLENBQXZPLENBQTBPLENBQTFPLENBQTZPLENBQTdPLENBQWdQLENBQWhQLENBQW1QLENBQW5QLENBQXNQLENBQXRQLENBQXlQLENBQXpQLENBQTRQLENBQTVQLENBQStQLENBQS9QLENBQWtRLENBQWxRLENBQXFRLENBQXJRLENBQXdRLENBQXhRLENBQTJRLENBQTNRLENBQThRLENBQTlRLENBQWlSLENBQWpSLENBQW9SLENBQXBSLENBQXVSLENBQXZSLENBQTBSLENBQTFSLENBQTZSLENBQTdSLENBQWdTLENBQWhTLENBQW1TLENBQW5TLENBQXNTLENBQXRTLENBQXlTLENBQXpTLENBQTRTLENBQTVTLENBQStTLENBQS9TLENBQWtULENBQWxULENBQXFULENBQXJULENBQXdULENBQXhULENBQTJULENBQTNULENBQThULENBQTlULENBQWlVLENBQWpVLENBQW9VLENBQXBVLENBQXVVLENBQXZVLENBQTBVLENBQTFVLENBQTZVLENBQTdVLENBQWdWLENBQWhWLENBQW1WLENBQW5WLENBQXNWLENBQXRWLENBQXlWLENBQXpWLENBQTRWLENBQTVWLENBQStWLENBQS9WLENBQWtXLENBQWxXLENBQXFXLENBQXJXLENBQXdXLENBQXhXLENBQTJXLENBQTNXLENBQThXLENBQTlXLENBQWlYLENBQWpYLENBQW9YLENBQXBYLENBQXVYLENBQXZYLENBQTBYLENBQTFYLENBQTZYLENBQTdYLENBQWdZLENBQWhZLENBQW1ZLENBQW5ZLENBQXNZLENBQXRZLENBQXlZLENBQXpZLENBQTRZLENBQTVZLENBQStZLENBQS9ZLENBQWtaLENBQWxaLENBQXFaLENBQXJaLENBQXdaLENBQXhaLENBQTJaLENBQTNaLENBQThaLENBQTlaLENBQWlhLE1BQWphLENBQXlhLE1BQXphLENBQWliLE1BQWpiLENBQXliLE1BQXpiLENBQWljLE1BQWpjLENBQXljLE1BQXpjLENBQWlkLEtBQWpkLENBQXdkLE1BQXhkLENBQWdlLE1BQWhlLENBQXdlLE1BQXhlLENBQWdmLE1BQWhmLENBQXdmLE1BQXhmLENBQWdnQixNQUFoZ0IsQ0FBd2dCLE1BQXhnQixDQUFnaEIsTUFBaGhCLENBQXdoQixNQUF4aEIsQ0FBZ2lCLE1BQWhpQixDQUF3aUIsTUFBeGlCLENBQWdqQixNQUFoakIsQ0FBd2pCLE1BQXhqQixDQUFna0IsTUFBaGtCLENBQXdrQixLQUF4a0IsQ0FBK2tCLEtBQS9rQixDQUFzbEIsS0FB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UCxDQUNILENBRkQsRUFHSCxDQVJELElBUU8sQ0FDSCx3QkFFSTNoQixtQkFBbUIsQ0FBQyxFQUFELENBRnZCLENBQ0l3M0UsZ0JBREoscUJBQ0lBLGdCQURKLENBSUEsd0JBRUl4M0UsbUJBQW1CLENBQUMsRUFBRCxDQUZ2QixDQUNJczZFLGNBREoscUJBQ0lBLGNBREosQ0FJQSxDQUFDLEVBQUdtQixJQUFJLENBQUMxN0QsMEJBQVQsRUFBcUMsU0FBQTRCLE1BQU0sQ0FBSSxDQUMzQyxHQUFJLENBQUMsRUFBR3pCLGNBQWMsQ0FBQ3NhLGVBQW5CLEVBQW9DN1ksTUFBTSxDQUFDOU0sR0FBM0MsQ0FBSixDQUFxRCxDQUNqRCxNQUFPLElBQUl5bEUsQ0FBQUEsY0FBSixDQUFtQjM0RCxNQUFuQixDQUFQLENBQ0gsQ0FFRCxNQUFPLElBQUk2MUQsQ0FBQUEsZ0JBQUosQ0FBcUI3MUQsTUFBckIsQ0FBUCxDQUNILENBTkQsRUFPSCxDQUNKLENBQ0osQ0E3UEQsSUErUEEsUUFBVSxNQUFPNDVELENBQUFBLG1CQUFQLENBQ1YsUUFBVSxDQTk3ZUUsRUFBaEIsRUFnOGVILENBMThlRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9wZGYuanM/MjlkZiJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuICAgIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JylcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG4gICAgICAgIGRlZmluZShcInBkZmpzLWRpc3QvYnVpbGQvcGRmXCIsIFtdLCBmYWN0b3J5KTtcbiAgICBlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JylcbiAgICAgICAgZXhwb3J0c1tcInBkZmpzLWRpc3QvYnVpbGQvcGRmXCJdID0gZmFjdG9yeSgpO1xuICAgIGVsc2VcbiAgICAgICAgcm9vdFtcInBkZmpzLWRpc3QvYnVpbGQvcGRmXCJdID0gcm9vdC5wZGZqc0xpYiA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAvKioqKioqLyAoKCkgPT4geyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4gICAgICAgIC8qKioqKiovIFx0XCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgIC8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoW1xuICAgICAgICAgICAgLyogMCAqLyxcbiAgICAgICAgICAgIC8qIDEgKi9cbiAgICAgICAgICAgIC8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXG5cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuVmVyYm9zaXR5TGV2ZWwgPSBleHBvcnRzLlV0aWwgPSBleHBvcnRzLlVua25vd25FcnJvckV4Y2VwdGlvbiA9IGV4cG9ydHMuVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uID0gZXhwb3J0cy5VTlNVUFBPUlRFRF9GRUFUVVJFUyA9IGV4cG9ydHMuVGV4dFJlbmRlcmluZ01vZGUgPSBleHBvcnRzLlN0cmVhbVR5cGUgPSBleHBvcnRzLlJlbmRlcmluZ0ludGVudEZsYWcgPSBleHBvcnRzLlBlcm1pc3Npb25GbGFnID0gZXhwb3J0cy5QYXNzd29yZFJlc3BvbnNlcyA9IGV4cG9ydHMuUGFzc3dvcmRFeGNlcHRpb24gPSBleHBvcnRzLlBhZ2VBY3Rpb25FdmVudFR5cGUgPSBleHBvcnRzLk9QUyA9IGV4cG9ydHMuTWlzc2luZ1BERkV4Y2VwdGlvbiA9IGV4cG9ydHMuSXNMaXR0bGVFbmRpYW5DYWNoZWQgPSBleHBvcnRzLklzRXZhbFN1cHBvcnRlZENhY2hlZCA9IGV4cG9ydHMuSW52YWxpZFBERkV4Y2VwdGlvbiA9IGV4cG9ydHMuSW1hZ2VLaW5kID0gZXhwb3J0cy5JREVOVElUWV9NQVRSSVggPSBleHBvcnRzLkZvcm1hdEVycm9yID0gZXhwb3J0cy5Gb250VHlwZSA9IGV4cG9ydHMuRk9OVF9JREVOVElUWV9NQVRSSVggPSBleHBvcnRzLkRvY3VtZW50QWN0aW9uRXZlbnRUeXBlID0gZXhwb3J0cy5DTWFwQ29tcHJlc3Npb25UeXBlID0gZXhwb3J0cy5CYXNlRXhjZXB0aW9uID0gZXhwb3J0cy5Bbm5vdGF0aW9uVHlwZSA9IGV4cG9ydHMuQW5ub3RhdGlvblN0YXRlTW9kZWxUeXBlID0gZXhwb3J0cy5Bbm5vdGF0aW9uUmV2aWV3U3RhdGUgPSBleHBvcnRzLkFubm90YXRpb25SZXBseVR5cGUgPSBleHBvcnRzLkFubm90YXRpb25Nb2RlID0gZXhwb3J0cy5Bbm5vdGF0aW9uTWFya2VkU3RhdGUgPSBleHBvcnRzLkFubm90YXRpb25GbGFnID0gZXhwb3J0cy5Bbm5vdGF0aW9uRmllbGRGbGFnID0gZXhwb3J0cy5Bbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlID0gZXhwb3J0cy5Bbm5vdGF0aW9uQWN0aW9uRXZlbnRUeXBlID0gZXhwb3J0cy5BYm9ydEV4Y2VwdGlvbiA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBleHBvcnRzLmFycmF5Qnl0ZUxlbmd0aCA9IGFycmF5Qnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgICBleHBvcnRzLmFycmF5c1RvQnl0ZXMgPSBhcnJheXNUb0J5dGVzO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuYXNzZXJ0ID0gYXNzZXJ0O1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuYnl0ZXNUb1N0cmluZyA9IGJ5dGVzVG9TdHJpbmc7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSA9IGNyZWF0ZVByb21pc2VDYXBhYmlsaXR5O1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuY3JlYXRlVmFsaWRBYnNvbHV0ZVVybCA9IGNyZWF0ZVZhbGlkQWJzb2x1dGVVcmw7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5lc2NhcGVTdHJpbmcgPSBlc2NhcGVTdHJpbmc7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5nZXRNb2RpZmljYXRpb25EYXRlID0gZ2V0TW9kaWZpY2F0aW9uRGF0ZTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLmdldFZlcmJvc2l0eUxldmVsID0gZ2V0VmVyYm9zaXR5TGV2ZWw7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5pbmZvID0gaW5mbztcbiAgICAgICAgICAgICAgICBleHBvcnRzLmlzQXJyYXlCdWZmZXIgPSBpc0FycmF5QnVmZmVyO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuaXNBcnJheUVxdWFsID0gaXNBcnJheUVxdWFsO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuaXNBc2NpaSA9IGlzQXNjaWk7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5vYmplY3RGcm9tTWFwID0gb2JqZWN0RnJvbU1hcDtcbiAgICAgICAgICAgICAgICBleHBvcnRzLm9iamVjdFNpemUgPSBvYmplY3RTaXplO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuc2V0VmVyYm9zaXR5TGV2ZWwgPSBzZXRWZXJib3NpdHlMZXZlbDtcbiAgICAgICAgICAgICAgICBleHBvcnRzLnNoYWRvdyA9IHNoYWRvdztcbiAgICAgICAgICAgICAgICBleHBvcnRzLnN0cmluZzMyID0gc3RyaW5nMzI7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5zdHJpbmdUb0J5dGVzID0gc3RyaW5nVG9CeXRlcztcbiAgICAgICAgICAgICAgICBleHBvcnRzLnN0cmluZ1RvUERGU3RyaW5nID0gc3RyaW5nVG9QREZTdHJpbmc7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5zdHJpbmdUb1VURjE2QkVTdHJpbmcgPSBzdHJpbmdUb1VURjE2QkVTdHJpbmc7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5zdHJpbmdUb1VURjhTdHJpbmcgPSBzdHJpbmdUb1VURjhTdHJpbmc7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy51bnJlYWNoYWJsZSA9IHVucmVhY2hhYmxlO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMudXRmOFN0cmluZ1RvU3RyaW5nID0gdXRmOFN0cmluZ1RvU3RyaW5nO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMud2FybiA9IHdhcm47XG5cbiAgICAgICAgICAgICAgICBfX3dfcGRmanNfcmVxdWlyZV9fKDIpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgSURFTlRJVFlfTUFUUklYID0gWzEsIDAsIDAsIDEsIDAsIDBdO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuSURFTlRJVFlfTUFUUklYID0gSURFTlRJVFlfTUFUUklYO1xuICAgICAgICAgICAgICAgIGNvbnN0IEZPTlRfSURFTlRJVFlfTUFUUklYID0gWzAuMDAxLCAwLCAwLCAwLjAwMSwgMCwgMF07XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5GT05UX0lERU5USVRZX01BVFJJWCA9IEZPTlRfSURFTlRJVFlfTUFUUklYO1xuICAgICAgICAgICAgICAgIGNvbnN0IFJlbmRlcmluZ0ludGVudEZsYWcgPSB7XG4gICAgICAgICAgICAgICAgICAgIEFOWTogMHgwMSxcbiAgICAgICAgICAgICAgICAgICAgRElTUExBWTogMHgwMixcbiAgICAgICAgICAgICAgICAgICAgUFJJTlQ6IDB4MDQsXG4gICAgICAgICAgICAgICAgICAgIEFOTk9UQVRJT05TX0ZPUk1TOiAweDEwLFxuICAgICAgICAgICAgICAgICAgICBBTk5PVEFUSU9OU19TVE9SQUdFOiAweDIwLFxuICAgICAgICAgICAgICAgICAgICBBTk5PVEFUSU9OU19ESVNBQkxFOiAweDQwLFxuICAgICAgICAgICAgICAgICAgICBPUExJU1Q6IDB4MTAwXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLlJlbmRlcmluZ0ludGVudEZsYWcgPSBSZW5kZXJpbmdJbnRlbnRGbGFnO1xuICAgICAgICAgICAgICAgIGNvbnN0IEFubm90YXRpb25Nb2RlID0ge1xuICAgICAgICAgICAgICAgICAgICBESVNBQkxFOiAwLFxuICAgICAgICAgICAgICAgICAgICBFTkFCTEU6IDEsXG4gICAgICAgICAgICAgICAgICAgIEVOQUJMRV9GT1JNUzogMixcbiAgICAgICAgICAgICAgICAgICAgRU5BQkxFX1NUT1JBR0U6IDNcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuQW5ub3RhdGlvbk1vZGUgPSBBbm5vdGF0aW9uTW9kZTtcbiAgICAgICAgICAgICAgICBjb25zdCBQZXJtaXNzaW9uRmxhZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgUFJJTlQ6IDB4MDQsXG4gICAgICAgICAgICAgICAgICAgIE1PRElGWV9DT05URU5UUzogMHgwOCxcbiAgICAgICAgICAgICAgICAgICAgQ09QWTogMHgxMCxcbiAgICAgICAgICAgICAgICAgICAgTU9ESUZZX0FOTk9UQVRJT05TOiAweDIwLFxuICAgICAgICAgICAgICAgICAgICBGSUxMX0lOVEVSQUNUSVZFX0ZPUk1TOiAweDEwMCxcbiAgICAgICAgICAgICAgICAgICAgQ09QWV9GT1JfQUNDRVNTSUJJTElUWTogMHgyMDAsXG4gICAgICAgICAgICAgICAgICAgIEFTU0VNQkxFOiAweDQwMCxcbiAgICAgICAgICAgICAgICAgICAgUFJJTlRfSElHSF9RVUFMSVRZOiAweDgwMFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5QZXJtaXNzaW9uRmxhZyA9IFBlcm1pc3Npb25GbGFnO1xuICAgICAgICAgICAgICAgIGNvbnN0IFRleHRSZW5kZXJpbmdNb2RlID0ge1xuICAgICAgICAgICAgICAgICAgICBGSUxMOiAwLFxuICAgICAgICAgICAgICAgICAgICBTVFJPS0U6IDEsXG4gICAgICAgICAgICAgICAgICAgIEZJTExfU1RST0tFOiAyLFxuICAgICAgICAgICAgICAgICAgICBJTlZJU0lCTEU6IDMsXG4gICAgICAgICAgICAgICAgICAgIEZJTExfQUREX1RPX1BBVEg6IDQsXG4gICAgICAgICAgICAgICAgICAgIFNUUk9LRV9BRERfVE9fUEFUSDogNSxcbiAgICAgICAgICAgICAgICAgICAgRklMTF9TVFJPS0VfQUREX1RPX1BBVEg6IDYsXG4gICAgICAgICAgICAgICAgICAgIEFERF9UT19QQVRIOiA3LFxuICAgICAgICAgICAgICAgICAgICBGSUxMX1NUUk9LRV9NQVNLOiAzLFxuICAgICAgICAgICAgICAgICAgICBBRERfVE9fUEFUSF9GTEFHOiA0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLlRleHRSZW5kZXJpbmdNb2RlID0gVGV4dFJlbmRlcmluZ01vZGU7XG4gICAgICAgICAgICAgICAgY29uc3QgSW1hZ2VLaW5kID0ge1xuICAgICAgICAgICAgICAgICAgICBHUkFZU0NBTEVfMUJQUDogMSxcbiAgICAgICAgICAgICAgICAgICAgUkdCXzI0QlBQOiAyLFxuICAgICAgICAgICAgICAgICAgICBSR0JBXzMyQlBQOiAzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLkltYWdlS2luZCA9IEltYWdlS2luZDtcbiAgICAgICAgICAgICAgICBjb25zdCBBbm5vdGF0aW9uVHlwZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgVEVYVDogMSxcbiAgICAgICAgICAgICAgICAgICAgTElOSzogMixcbiAgICAgICAgICAgICAgICAgICAgRlJFRVRFWFQ6IDMsXG4gICAgICAgICAgICAgICAgICAgIExJTkU6IDQsXG4gICAgICAgICAgICAgICAgICAgIFNRVUFSRTogNSxcbiAgICAgICAgICAgICAgICAgICAgQ0lSQ0xFOiA2LFxuICAgICAgICAgICAgICAgICAgICBQT0xZR09OOiA3LFxuICAgICAgICAgICAgICAgICAgICBQT0xZTElORTogOCxcbiAgICAgICAgICAgICAgICAgICAgSElHSExJR0hUOiA5LFxuICAgICAgICAgICAgICAgICAgICBVTkRFUkxJTkU6IDEwLFxuICAgICAgICAgICAgICAgICAgICBTUVVJR0dMWTogMTEsXG4gICAgICAgICAgICAgICAgICAgIFNUUklLRU9VVDogMTIsXG4gICAgICAgICAgICAgICAgICAgIFNUQU1QOiAxMyxcbiAgICAgICAgICAgICAgICAgICAgQ0FSRVQ6IDE0LFxuICAgICAgICAgICAgICAgICAgICBJTks6IDE1LFxuICAgICAgICAgICAgICAgICAgICBQT1BVUDogMTYsXG4gICAgICAgICAgICAgICAgICAgIEZJTEVBVFRBQ0hNRU5UOiAxNyxcbiAgICAgICAgICAgICAgICAgICAgU09VTkQ6IDE4LFxuICAgICAgICAgICAgICAgICAgICBNT1ZJRTogMTksXG4gICAgICAgICAgICAgICAgICAgIFdJREdFVDogMjAsXG4gICAgICAgICAgICAgICAgICAgIFNDUkVFTjogMjEsXG4gICAgICAgICAgICAgICAgICAgIFBSSU5URVJNQVJLOiAyMixcbiAgICAgICAgICAgICAgICAgICAgVFJBUE5FVDogMjMsXG4gICAgICAgICAgICAgICAgICAgIFdBVEVSTUFSSzogMjQsXG4gICAgICAgICAgICAgICAgICAgIFRIUkVFRDogMjUsXG4gICAgICAgICAgICAgICAgICAgIFJFREFDVDogMjZcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuQW5ub3RhdGlvblR5cGUgPSBBbm5vdGF0aW9uVHlwZTtcbiAgICAgICAgICAgICAgICBjb25zdCBBbm5vdGF0aW9uU3RhdGVNb2RlbFR5cGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIE1BUktFRDogXCJNYXJrZWRcIixcbiAgICAgICAgICAgICAgICAgICAgUkVWSUVXOiBcIlJldmlld1wiXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLkFubm90YXRpb25TdGF0ZU1vZGVsVHlwZSA9IEFubm90YXRpb25TdGF0ZU1vZGVsVHlwZTtcbiAgICAgICAgICAgICAgICBjb25zdCBBbm5vdGF0aW9uTWFya2VkU3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIE1BUktFRDogXCJNYXJrZWRcIixcbiAgICAgICAgICAgICAgICAgICAgVU5NQVJLRUQ6IFwiVW5tYXJrZWRcIlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5Bbm5vdGF0aW9uTWFya2VkU3RhdGUgPSBBbm5vdGF0aW9uTWFya2VkU3RhdGU7XG4gICAgICAgICAgICAgICAgY29uc3QgQW5ub3RhdGlvblJldmlld1N0YXRlID0ge1xuICAgICAgICAgICAgICAgICAgICBBQ0NFUFRFRDogXCJBY2NlcHRlZFwiLFxuICAgICAgICAgICAgICAgICAgICBSRUpFQ1RFRDogXCJSZWplY3RlZFwiLFxuICAgICAgICAgICAgICAgICAgICBDQU5DRUxMRUQ6IFwiQ2FuY2VsbGVkXCIsXG4gICAgICAgICAgICAgICAgICAgIENPTVBMRVRFRDogXCJDb21wbGV0ZWRcIixcbiAgICAgICAgICAgICAgICAgICAgTk9ORTogXCJOb25lXCJcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuQW5ub3RhdGlvblJldmlld1N0YXRlID0gQW5ub3RhdGlvblJldmlld1N0YXRlO1xuICAgICAgICAgICAgICAgIGNvbnN0IEFubm90YXRpb25SZXBseVR5cGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIEdST1VQOiBcIkdyb3VwXCIsXG4gICAgICAgICAgICAgICAgICAgIFJFUExZOiBcIlJcIlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5Bbm5vdGF0aW9uUmVwbHlUeXBlID0gQW5ub3RhdGlvblJlcGx5VHlwZTtcbiAgICAgICAgICAgICAgICBjb25zdCBBbm5vdGF0aW9uRmxhZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgSU5WSVNJQkxFOiAweDAxLFxuICAgICAgICAgICAgICAgICAgICBISURERU46IDB4MDIsXG4gICAgICAgICAgICAgICAgICAgIFBSSU5UOiAweDA0LFxuICAgICAgICAgICAgICAgICAgICBOT1pPT006IDB4MDgsXG4gICAgICAgICAgICAgICAgICAgIE5PUk9UQVRFOiAweDEwLFxuICAgICAgICAgICAgICAgICAgICBOT1ZJRVc6IDB4MjAsXG4gICAgICAgICAgICAgICAgICAgIFJFQURPTkxZOiAweDQwLFxuICAgICAgICAgICAgICAgICAgICBMT0NLRUQ6IDB4ODAsXG4gICAgICAgICAgICAgICAgICAgIFRPR0dMRU5PVklFVzogMHgxMDAsXG4gICAgICAgICAgICAgICAgICAgIExPQ0tFRENPTlRFTlRTOiAweDIwMFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5Bbm5vdGF0aW9uRmxhZyA9IEFubm90YXRpb25GbGFnO1xuICAgICAgICAgICAgICAgIGNvbnN0IEFubm90YXRpb25GaWVsZEZsYWcgPSB7XG4gICAgICAgICAgICAgICAgICAgIFJFQURPTkxZOiAweDAwMDAwMDEsXG4gICAgICAgICAgICAgICAgICAgIFJFUVVJUkVEOiAweDAwMDAwMDIsXG4gICAgICAgICAgICAgICAgICAgIE5PRVhQT1JUOiAweDAwMDAwMDQsXG4gICAgICAgICAgICAgICAgICAgIE1VTFRJTElORTogMHgwMDAxMDAwLFxuICAgICAgICAgICAgICAgICAgICBQQVNTV09SRDogMHgwMDAyMDAwLFxuICAgICAgICAgICAgICAgICAgICBOT1RPR0dMRVRPT0ZGOiAweDAwMDQwMDAsXG4gICAgICAgICAgICAgICAgICAgIFJBRElPOiAweDAwMDgwMDAsXG4gICAgICAgICAgICAgICAgICAgIFBVU0hCVVRUT046IDB4MDAxMDAwMCxcbiAgICAgICAgICAgICAgICAgICAgQ09NQk86IDB4MDAyMDAwMCxcbiAgICAgICAgICAgICAgICAgICAgRURJVDogMHgwMDQwMDAwLFxuICAgICAgICAgICAgICAgICAgICBTT1JUOiAweDAwODAwMDAsXG4gICAgICAgICAgICAgICAgICAgIEZJTEVTRUxFQ1Q6IDB4MDEwMDAwMCxcbiAgICAgICAgICAgICAgICAgICAgTVVMVElTRUxFQ1Q6IDB4MDIwMDAwMCxcbiAgICAgICAgICAgICAgICAgICAgRE9OT1RTUEVMTENIRUNLOiAweDA0MDAwMDAsXG4gICAgICAgICAgICAgICAgICAgIERPTk9UU0NST0xMOiAweDA4MDAwMDAsXG4gICAgICAgICAgICAgICAgICAgIENPTUI6IDB4MTAwMDAwMCxcbiAgICAgICAgICAgICAgICAgICAgUklDSFRFWFQ6IDB4MjAwMDAwMCxcbiAgICAgICAgICAgICAgICAgICAgUkFESU9TSU5VTklTT046IDB4MjAwMDAwMCxcbiAgICAgICAgICAgICAgICAgICAgQ09NTUlUT05TRUxDSEFOR0U6IDB4NDAwMDAwMFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5Bbm5vdGF0aW9uRmllbGRGbGFnID0gQW5ub3RhdGlvbkZpZWxkRmxhZztcbiAgICAgICAgICAgICAgICBjb25zdCBBbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlID0ge1xuICAgICAgICAgICAgICAgICAgICBTT0xJRDogMSxcbiAgICAgICAgICAgICAgICAgICAgREFTSEVEOiAyLFxuICAgICAgICAgICAgICAgICAgICBCRVZFTEVEOiAzLFxuICAgICAgICAgICAgICAgICAgICBJTlNFVDogNCxcbiAgICAgICAgICAgICAgICAgICAgVU5ERVJMSU5FOiA1XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLkFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUgPSBBbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlO1xuICAgICAgICAgICAgICAgIGNvbnN0IEFubm90YXRpb25BY3Rpb25FdmVudFR5cGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIEU6IFwiTW91c2UgRW50ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgWDogXCJNb3VzZSBFeGl0XCIsXG4gICAgICAgICAgICAgICAgICAgIEQ6IFwiTW91c2UgRG93blwiLFxuICAgICAgICAgICAgICAgICAgICBVOiBcIk1vdXNlIFVwXCIsXG4gICAgICAgICAgICAgICAgICAgIEZvOiBcIkZvY3VzXCIsXG4gICAgICAgICAgICAgICAgICAgIEJsOiBcIkJsdXJcIixcbiAgICAgICAgICAgICAgICAgICAgUE86IFwiUGFnZU9wZW5cIixcbiAgICAgICAgICAgICAgICAgICAgUEM6IFwiUGFnZUNsb3NlXCIsXG4gICAgICAgICAgICAgICAgICAgIFBWOiBcIlBhZ2VWaXNpYmxlXCIsXG4gICAgICAgICAgICAgICAgICAgIFBJOiBcIlBhZ2VJbnZpc2libGVcIixcbiAgICAgICAgICAgICAgICAgICAgSzogXCJLZXlzdHJva2VcIixcbiAgICAgICAgICAgICAgICAgICAgRjogXCJGb3JtYXRcIixcbiAgICAgICAgICAgICAgICAgICAgVjogXCJWYWxpZGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBDOiBcIkNhbGN1bGF0ZVwiXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLkFubm90YXRpb25BY3Rpb25FdmVudFR5cGUgPSBBbm5vdGF0aW9uQWN0aW9uRXZlbnRUeXBlO1xuICAgICAgICAgICAgICAgIGNvbnN0IERvY3VtZW50QWN0aW9uRXZlbnRUeXBlID0ge1xuICAgICAgICAgICAgICAgICAgICBXQzogXCJXaWxsQ2xvc2VcIixcbiAgICAgICAgICAgICAgICAgICAgV1M6IFwiV2lsbFNhdmVcIixcbiAgICAgICAgICAgICAgICAgICAgRFM6IFwiRGlkU2F2ZVwiLFxuICAgICAgICAgICAgICAgICAgICBXUDogXCJXaWxsUHJpbnRcIixcbiAgICAgICAgICAgICAgICAgICAgRFA6IFwiRGlkUHJpbnRcIlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5Eb2N1bWVudEFjdGlvbkV2ZW50VHlwZSA9IERvY3VtZW50QWN0aW9uRXZlbnRUeXBlO1xuICAgICAgICAgICAgICAgIGNvbnN0IFBhZ2VBY3Rpb25FdmVudFR5cGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIE86IFwiUGFnZU9wZW5cIixcbiAgICAgICAgICAgICAgICAgICAgQzogXCJQYWdlQ2xvc2VcIlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5QYWdlQWN0aW9uRXZlbnRUeXBlID0gUGFnZUFjdGlvbkV2ZW50VHlwZTtcbiAgICAgICAgICAgICAgICBjb25zdCBTdHJlYW1UeXBlID0ge1xuICAgICAgICAgICAgICAgICAgICBVTktOT1dOOiBcIlVOS05PV05cIixcbiAgICAgICAgICAgICAgICAgICAgRkxBVEU6IFwiRkxBVEVcIixcbiAgICAgICAgICAgICAgICAgICAgTFpXOiBcIkxaV1wiLFxuICAgICAgICAgICAgICAgICAgICBEQ1Q6IFwiRENUXCIsXG4gICAgICAgICAgICAgICAgICAgIEpQWDogXCJKUFhcIixcbiAgICAgICAgICAgICAgICAgICAgSkJJRzogXCJKQklHXCIsXG4gICAgICAgICAgICAgICAgICAgIEE4NTogXCJBODVcIixcbiAgICAgICAgICAgICAgICAgICAgQUhYOiBcIkFIWFwiLFxuICAgICAgICAgICAgICAgICAgICBDQ0Y6IFwiQ0NGXCIsXG4gICAgICAgICAgICAgICAgICAgIFJMWDogXCJSTFhcIlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5TdHJlYW1UeXBlID0gU3RyZWFtVHlwZTtcbiAgICAgICAgICAgICAgICBjb25zdCBGb250VHlwZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgVU5LTk9XTjogXCJVTktOT1dOXCIsXG4gICAgICAgICAgICAgICAgICAgIFRZUEUxOiBcIlRZUEUxXCIsXG4gICAgICAgICAgICAgICAgICAgIFRZUEUxU1RBTkRBUkQ6IFwiVFlQRTFTVEFOREFSRFwiLFxuICAgICAgICAgICAgICAgICAgICBUWVBFMUM6IFwiVFlQRTFDXCIsXG4gICAgICAgICAgICAgICAgICAgIENJREZPTlRUWVBFMDogXCJDSURGT05UVFlQRTBcIixcbiAgICAgICAgICAgICAgICAgICAgQ0lERk9OVFRZUEUwQzogXCJDSURGT05UVFlQRTBDXCIsXG4gICAgICAgICAgICAgICAgICAgIFRSVUVUWVBFOiBcIlRSVUVUWVBFXCIsXG4gICAgICAgICAgICAgICAgICAgIENJREZPTlRUWVBFMjogXCJDSURGT05UVFlQRTJcIixcbiAgICAgICAgICAgICAgICAgICAgVFlQRTM6IFwiVFlQRTNcIixcbiAgICAgICAgICAgICAgICAgICAgT1BFTlRZUEU6IFwiT1BFTlRZUEVcIixcbiAgICAgICAgICAgICAgICAgICAgVFlQRTA6IFwiVFlQRTBcIixcbiAgICAgICAgICAgICAgICAgICAgTU1UWVBFMTogXCJNTVRZUEUxXCJcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuRm9udFR5cGUgPSBGb250VHlwZTtcbiAgICAgICAgICAgICAgICBjb25zdCBWZXJib3NpdHlMZXZlbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgRVJST1JTOiAwLFxuICAgICAgICAgICAgICAgICAgICBXQVJOSU5HUzogMSxcbiAgICAgICAgICAgICAgICAgICAgSU5GT1M6IDVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuVmVyYm9zaXR5TGV2ZWwgPSBWZXJib3NpdHlMZXZlbDtcbiAgICAgICAgICAgICAgICBjb25zdCBDTWFwQ29tcHJlc3Npb25UeXBlID0ge1xuICAgICAgICAgICAgICAgICAgICBOT05FOiAwLFxuICAgICAgICAgICAgICAgICAgICBCSU5BUlk6IDEsXG4gICAgICAgICAgICAgICAgICAgIFNUUkVBTTogMlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5DTWFwQ29tcHJlc3Npb25UeXBlID0gQ01hcENvbXByZXNzaW9uVHlwZTtcbiAgICAgICAgICAgICAgICBjb25zdCBPUFMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY3k6IDEsXG4gICAgICAgICAgICAgICAgICAgIHNldExpbmVXaWR0aDogMixcbiAgICAgICAgICAgICAgICAgICAgc2V0TGluZUNhcDogMyxcbiAgICAgICAgICAgICAgICAgICAgc2V0TGluZUpvaW46IDQsXG4gICAgICAgICAgICAgICAgICAgIHNldE1pdGVyTGltaXQ6IDUsXG4gICAgICAgICAgICAgICAgICAgIHNldERhc2g6IDYsXG4gICAgICAgICAgICAgICAgICAgIHNldFJlbmRlcmluZ0ludGVudDogNyxcbiAgICAgICAgICAgICAgICAgICAgc2V0RmxhdG5lc3M6IDgsXG4gICAgICAgICAgICAgICAgICAgIHNldEdTdGF0ZTogOSxcbiAgICAgICAgICAgICAgICAgICAgc2F2ZTogMTAsXG4gICAgICAgICAgICAgICAgICAgIHJlc3RvcmU6IDExLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IDEyLFxuICAgICAgICAgICAgICAgICAgICBtb3ZlVG86IDEzLFxuICAgICAgICAgICAgICAgICAgICBsaW5lVG86IDE0LFxuICAgICAgICAgICAgICAgICAgICBjdXJ2ZVRvOiAxNSxcbiAgICAgICAgICAgICAgICAgICAgY3VydmVUbzI6IDE2LFxuICAgICAgICAgICAgICAgICAgICBjdXJ2ZVRvMzogMTcsXG4gICAgICAgICAgICAgICAgICAgIGNsb3NlUGF0aDogMTgsXG4gICAgICAgICAgICAgICAgICAgIHJlY3RhbmdsZTogMTksXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogMjAsXG4gICAgICAgICAgICAgICAgICAgIGNsb3NlU3Ryb2tlOiAyMSxcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogMjIsXG4gICAgICAgICAgICAgICAgICAgIGVvRmlsbDogMjMsXG4gICAgICAgICAgICAgICAgICAgIGZpbGxTdHJva2U6IDI0LFxuICAgICAgICAgICAgICAgICAgICBlb0ZpbGxTdHJva2U6IDI1LFxuICAgICAgICAgICAgICAgICAgICBjbG9zZUZpbGxTdHJva2U6IDI2LFxuICAgICAgICAgICAgICAgICAgICBjbG9zZUVPRmlsbFN0cm9rZTogMjcsXG4gICAgICAgICAgICAgICAgICAgIGVuZFBhdGg6IDI4LFxuICAgICAgICAgICAgICAgICAgICBjbGlwOiAyOSxcbiAgICAgICAgICAgICAgICAgICAgZW9DbGlwOiAzMCxcbiAgICAgICAgICAgICAgICAgICAgYmVnaW5UZXh0OiAzMSxcbiAgICAgICAgICAgICAgICAgICAgZW5kVGV4dDogMzIsXG4gICAgICAgICAgICAgICAgICAgIHNldENoYXJTcGFjaW5nOiAzMyxcbiAgICAgICAgICAgICAgICAgICAgc2V0V29yZFNwYWNpbmc6IDM0LFxuICAgICAgICAgICAgICAgICAgICBzZXRIU2NhbGU6IDM1LFxuICAgICAgICAgICAgICAgICAgICBzZXRMZWFkaW5nOiAzNixcbiAgICAgICAgICAgICAgICAgICAgc2V0Rm9udDogMzcsXG4gICAgICAgICAgICAgICAgICAgIHNldFRleHRSZW5kZXJpbmdNb2RlOiAzOCxcbiAgICAgICAgICAgICAgICAgICAgc2V0VGV4dFJpc2U6IDM5LFxuICAgICAgICAgICAgICAgICAgICBtb3ZlVGV4dDogNDAsXG4gICAgICAgICAgICAgICAgICAgIHNldExlYWRpbmdNb3ZlVGV4dDogNDEsXG4gICAgICAgICAgICAgICAgICAgIHNldFRleHRNYXRyaXg6IDQyLFxuICAgICAgICAgICAgICAgICAgICBuZXh0TGluZTogNDMsXG4gICAgICAgICAgICAgICAgICAgIHNob3dUZXh0OiA0NCxcbiAgICAgICAgICAgICAgICAgICAgc2hvd1NwYWNlZFRleHQ6IDQ1LFxuICAgICAgICAgICAgICAgICAgICBuZXh0TGluZVNob3dUZXh0OiA0NixcbiAgICAgICAgICAgICAgICAgICAgbmV4dExpbmVTZXRTcGFjaW5nU2hvd1RleHQ6IDQ3LFxuICAgICAgICAgICAgICAgICAgICBzZXRDaGFyV2lkdGg6IDQ4LFxuICAgICAgICAgICAgICAgICAgICBzZXRDaGFyV2lkdGhBbmRCb3VuZHM6IDQ5LFxuICAgICAgICAgICAgICAgICAgICBzZXRTdHJva2VDb2xvclNwYWNlOiA1MCxcbiAgICAgICAgICAgICAgICAgICAgc2V0RmlsbENvbG9yU3BhY2U6IDUxLFxuICAgICAgICAgICAgICAgICAgICBzZXRTdHJva2VDb2xvcjogNTIsXG4gICAgICAgICAgICAgICAgICAgIHNldFN0cm9rZUNvbG9yTjogNTMsXG4gICAgICAgICAgICAgICAgICAgIHNldEZpbGxDb2xvcjogNTQsXG4gICAgICAgICAgICAgICAgICAgIHNldEZpbGxDb2xvck46IDU1LFxuICAgICAgICAgICAgICAgICAgICBzZXRTdHJva2VHcmF5OiA1NixcbiAgICAgICAgICAgICAgICAgICAgc2V0RmlsbEdyYXk6IDU3LFxuICAgICAgICAgICAgICAgICAgICBzZXRTdHJva2VSR0JDb2xvcjogNTgsXG4gICAgICAgICAgICAgICAgICAgIHNldEZpbGxSR0JDb2xvcjogNTksXG4gICAgICAgICAgICAgICAgICAgIHNldFN0cm9rZUNNWUtDb2xvcjogNjAsXG4gICAgICAgICAgICAgICAgICAgIHNldEZpbGxDTVlLQ29sb3I6IDYxLFxuICAgICAgICAgICAgICAgICAgICBzaGFkaW5nRmlsbDogNjIsXG4gICAgICAgICAgICAgICAgICAgIGJlZ2luSW5saW5lSW1hZ2U6IDYzLFxuICAgICAgICAgICAgICAgICAgICBiZWdpbkltYWdlRGF0YTogNjQsXG4gICAgICAgICAgICAgICAgICAgIGVuZElubGluZUltYWdlOiA2NSxcbiAgICAgICAgICAgICAgICAgICAgcGFpbnRYT2JqZWN0OiA2NixcbiAgICAgICAgICAgICAgICAgICAgbWFya1BvaW50OiA2NyxcbiAgICAgICAgICAgICAgICAgICAgbWFya1BvaW50UHJvcHM6IDY4LFxuICAgICAgICAgICAgICAgICAgICBiZWdpbk1hcmtlZENvbnRlbnQ6IDY5LFxuICAgICAgICAgICAgICAgICAgICBiZWdpbk1hcmtlZENvbnRlbnRQcm9wczogNzAsXG4gICAgICAgICAgICAgICAgICAgIGVuZE1hcmtlZENvbnRlbnQ6IDcxLFxuICAgICAgICAgICAgICAgICAgICBiZWdpbkNvbXBhdDogNzIsXG4gICAgICAgICAgICAgICAgICAgIGVuZENvbXBhdDogNzMsXG4gICAgICAgICAgICAgICAgICAgIHBhaW50Rm9ybVhPYmplY3RCZWdpbjogNzQsXG4gICAgICAgICAgICAgICAgICAgIHBhaW50Rm9ybVhPYmplY3RFbmQ6IDc1LFxuICAgICAgICAgICAgICAgICAgICBiZWdpbkdyb3VwOiA3NixcbiAgICAgICAgICAgICAgICAgICAgZW5kR3JvdXA6IDc3LFxuICAgICAgICAgICAgICAgICAgICBiZWdpbkFubm90YXRpb25zOiA3OCxcbiAgICAgICAgICAgICAgICAgICAgZW5kQW5ub3RhdGlvbnM6IDc5LFxuICAgICAgICAgICAgICAgICAgICBiZWdpbkFubm90YXRpb246IDgwLFxuICAgICAgICAgICAgICAgICAgICBlbmRBbm5vdGF0aW9uOiA4MSxcbiAgICAgICAgICAgICAgICAgICAgcGFpbnRKcGVnWE9iamVjdDogODIsXG4gICAgICAgICAgICAgICAgICAgIHBhaW50SW1hZ2VNYXNrWE9iamVjdDogODMsXG4gICAgICAgICAgICAgICAgICAgIHBhaW50SW1hZ2VNYXNrWE9iamVjdEdyb3VwOiA4NCxcbiAgICAgICAgICAgICAgICAgICAgcGFpbnRJbWFnZVhPYmplY3Q6IDg1LFxuICAgICAgICAgICAgICAgICAgICBwYWludElubGluZUltYWdlWE9iamVjdDogODYsXG4gICAgICAgICAgICAgICAgICAgIHBhaW50SW5saW5lSW1hZ2VYT2JqZWN0R3JvdXA6IDg3LFxuICAgICAgICAgICAgICAgICAgICBwYWludEltYWdlWE9iamVjdFJlcGVhdDogODgsXG4gICAgICAgICAgICAgICAgICAgIHBhaW50SW1hZ2VNYXNrWE9iamVjdFJlcGVhdDogODksXG4gICAgICAgICAgICAgICAgICAgIHBhaW50U29saWRDb2xvckltYWdlTWFzazogOTAsXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdFBhdGg6IDkxXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLk9QUyA9IE9QUztcbiAgICAgICAgICAgICAgICBjb25zdCBVTlNVUFBPUlRFRF9GRUFUVVJFUyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdW5rbm93bjogXCJ1bmtub3duXCIsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1zOiBcImZvcm1zXCIsXG4gICAgICAgICAgICAgICAgICAgIGphdmFTY3JpcHQ6IFwiamF2YVNjcmlwdFwiLFxuICAgICAgICAgICAgICAgICAgICBzaWduYXR1cmVzOiBcInNpZ25hdHVyZXNcIixcbiAgICAgICAgICAgICAgICAgICAgc21hc2s6IFwic21hc2tcIixcbiAgICAgICAgICAgICAgICAgICAgc2hhZGluZ1BhdHRlcm46IFwic2hhZGluZ1BhdHRlcm5cIixcbiAgICAgICAgICAgICAgICAgICAgZm9udDogXCJmb250XCIsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yVGlsaW5nUGF0dGVybjogXCJlcnJvclRpbGluZ1BhdHRlcm5cIixcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JFeHRHU3RhdGU6IFwiZXJyb3JFeHRHU3RhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JYT2JqZWN0OiBcImVycm9yWE9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICBlcnJvckZvbnRMb2FkVHlwZTM6IFwiZXJyb3JGb250TG9hZFR5cGUzXCIsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yRm9udFN0YXRlOiBcImVycm9yRm9udFN0YXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yRm9udE1pc3Npbmc6IFwiZXJyb3JGb250TWlzc2luZ1wiLFxuICAgICAgICAgICAgICAgICAgICBlcnJvckZvbnRUcmFuc2xhdGU6IFwiZXJyb3JGb250VHJhbnNsYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ29sb3JTcGFjZTogXCJlcnJvckNvbG9yU3BhY2VcIixcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JPcGVyYXRvckxpc3Q6IFwiZXJyb3JPcGVyYXRvckxpc3RcIixcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JGb250VG9Vbmljb2RlOiBcImVycm9yRm9udFRvVW5pY29kZVwiLFxuICAgICAgICAgICAgICAgICAgICBlcnJvckZvbnRMb2FkTmF0aXZlOiBcImVycm9yRm9udExvYWROYXRpdmVcIixcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JGb250QnVpbGRQYXRoOiBcImVycm9yRm9udEJ1aWxkUGF0aFwiLFxuICAgICAgICAgICAgICAgICAgICBlcnJvckZvbnRHZXRQYXRoOiBcImVycm9yRm9udEdldFBhdGhcIixcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNYXJrZWRDb250ZW50OiBcImVycm9yTWFya2VkQ29udGVudFwiLFxuICAgICAgICAgICAgICAgICAgICBlcnJvckNvbnRlbnRTdWJTdHJlYW06IFwiZXJyb3JDb250ZW50U3ViU3RyZWFtXCJcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuVU5TVVBQT1JURURfRkVBVFVSRVMgPSBVTlNVUFBPUlRFRF9GRUFUVVJFUztcbiAgICAgICAgICAgICAgICBjb25zdCBQYXNzd29yZFJlc3BvbnNlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgTkVFRF9QQVNTV09SRDogMSxcbiAgICAgICAgICAgICAgICAgICAgSU5DT1JSRUNUX1BBU1NXT1JEOiAyXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLlBhc3N3b3JkUmVzcG9uc2VzID0gUGFzc3dvcmRSZXNwb25zZXM7XG4gICAgICAgICAgICAgICAgbGV0IHZlcmJvc2l0eSA9IFZlcmJvc2l0eUxldmVsLldBUk5JTkdTO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0VmVyYm9zaXR5TGV2ZWwobGV2ZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIobGV2ZWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJib3NpdHkgPSBsZXZlbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldFZlcmJvc2l0eUxldmVsKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmVyYm9zaXR5O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGluZm8obXNnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2ZXJib3NpdHkgPj0gVmVyYm9zaXR5TGV2ZWwuSU5GT1MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBJbmZvOiAke21zZ31gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHdhcm4obXNnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2ZXJib3NpdHkgPj0gVmVyYm9zaXR5TGV2ZWwuV0FSTklOR1MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBXYXJuaW5nOiAke21zZ31gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHVucmVhY2hhYmxlKG1zZykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhc3NlcnQoY29uZCwgbXNnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY29uZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdW5yZWFjaGFibGUobXNnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF9pc1ZhbGlkUHJvdG9jb2wodXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHVybC5wcm90b2NvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImh0dHA6XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaHR0cHM6XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZnRwOlwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1haWx0bzpcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ0ZWw6XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlVmFsaWRBYnNvbHV0ZVVybCh1cmwsIGJhc2VVcmwgPSBudWxsLCBvcHRpb25zID0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIHVybCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmFkZERlZmF1bHRQcm90b2NvbCAmJiB1cmwuc3RhcnRzV2l0aChcInd3dy5cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZG90cyA9IHVybC5tYXRjaCgvXFwuL2cpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb3RzICYmIGRvdHMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IGBodHRwOi8vJHt1cmx9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnRyeUNvbnZlcnRFbmNvZGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gc3RyaW5nVG9VVEY4U3RyaW5nKHVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWJzb2x1dGVVcmwgPSBiYXNlVXJsID8gbmV3IFVSTCh1cmwsIGJhc2VVcmwpIDogbmV3IFVSTCh1cmwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzVmFsaWRQcm90b2NvbChhYnNvbHV0ZVVybCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWJzb2x1dGVVcmw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7fVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNoYWRvdyhvYmosIHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IEJhc2VFeGNlcHRpb24gPSBmdW5jdGlvbiBCYXNlRXhjZXB0aW9uQ2xvc3VyZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gQmFzZUV4Y2VwdGlvbihtZXNzYWdlLCBuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gQmFzZUV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVucmVhY2hhYmxlKFwiQ2Fubm90IGluaXRpYWxpemUgQmFzZUV4Y2VwdGlvbi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgQmFzZUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBuZXcgRXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgQmFzZUV4Y2VwdGlvbi5jb25zdHJ1Y3RvciA9IEJhc2VFeGNlcHRpb247XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCYXNlRXhjZXB0aW9uO1xuICAgICAgICAgICAgICAgIH0oKTtcblxuICAgICAgICAgICAgICAgIGV4cG9ydHMuQmFzZUV4Y2VwdGlvbiA9IEJhc2VFeGNlcHRpb247XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBQYXNzd29yZEV4Y2VwdGlvbiBleHRlbmRzIEJhc2VFeGNlcHRpb24ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3Rvcihtc2csIGNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyKG1zZywgXCJQYXNzd29yZEV4Y2VwdGlvblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGV4cG9ydHMuUGFzc3dvcmRFeGNlcHRpb24gPSBQYXNzd29yZEV4Y2VwdGlvbjtcblxuICAgICAgICAgICAgICAgIGNsYXNzIFVua25vd25FcnJvckV4Y2VwdGlvbiBleHRlbmRzIEJhc2VFeGNlcHRpb24ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3Rvcihtc2csIGRldGFpbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyKG1zZywgXCJVbmtub3duRXJyb3JFeGNlcHRpb25cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRldGFpbHMgPSBkZXRhaWxzO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLlVua25vd25FcnJvckV4Y2VwdGlvbiA9IFVua25vd25FcnJvckV4Y2VwdGlvbjtcblxuICAgICAgICAgICAgICAgIGNsYXNzIEludmFsaWRQREZFeGNlcHRpb24gZXh0ZW5kcyBCYXNlRXhjZXB0aW9uIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IobXNnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlcihtc2csIFwiSW52YWxpZFBERkV4Y2VwdGlvblwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXhwb3J0cy5JbnZhbGlkUERGRXhjZXB0aW9uID0gSW52YWxpZFBERkV4Y2VwdGlvbjtcblxuICAgICAgICAgICAgICAgIGNsYXNzIE1pc3NpbmdQREZFeGNlcHRpb24gZXh0ZW5kcyBCYXNlRXhjZXB0aW9uIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IobXNnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlcihtc2csIFwiTWlzc2luZ1BERkV4Y2VwdGlvblwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXhwb3J0cy5NaXNzaW5nUERGRXhjZXB0aW9uID0gTWlzc2luZ1BERkV4Y2VwdGlvbjtcblxuICAgICAgICAgICAgICAgIGNsYXNzIFVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbiBleHRlbmRzIEJhc2VFeGNlcHRpb24ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3Rvcihtc2csIHN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VwZXIobXNnLCBcIlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbiA9IFVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbjtcblxuICAgICAgICAgICAgICAgIGNsYXNzIEZvcm1hdEVycm9yIGV4dGVuZHMgQmFzZUV4Y2VwdGlvbiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKG1zZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VwZXIobXNnLCBcIkZvcm1hdEVycm9yXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLkZvcm1hdEVycm9yID0gRm9ybWF0RXJyb3I7XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBBYm9ydEV4Y2VwdGlvbiBleHRlbmRzIEJhc2VFeGNlcHRpb24ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3Rvcihtc2cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyKG1zZywgXCJBYm9ydEV4Y2VwdGlvblwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXhwb3J0cy5BYm9ydEV4Y2VwdGlvbiA9IEFib3J0RXhjZXB0aW9uO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYnl0ZXNUb1N0cmluZyhieXRlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGJ5dGVzICE9PSBcIm9iamVjdFwiIHx8IGJ5dGVzID09PSBudWxsIHx8IGJ5dGVzLmxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bnJlYWNoYWJsZShcIkludmFsaWQgYXJndW1lbnQgZm9yIGJ5dGVzVG9TdHJpbmdcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBieXRlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IE1BWF9BUkdVTUVOVF9DT1VOVCA9IDgxOTI7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA8IE1BWF9BUkdVTUVOVF9DT1VOVCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYnl0ZXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyQnVmID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gTUFYX0FSR1VNRU5UX0NPVU5UKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaHVua0VuZCA9IE1hdGgubWluKGkgKyBNQVhfQVJHVU1FTlRfQ09VTlQsIGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaHVuayA9IGJ5dGVzLnN1YmFycmF5KGksIGNodW5rRW5kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ckJ1Zi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJCdWYuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0ciAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdW5yZWFjaGFibGUoXCJJbnZhbGlkIGFyZ3VtZW50IGZvciBzdHJpbmdUb0J5dGVzXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzW2ldID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFycmF5Qnl0ZUxlbmd0aChhcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyci5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyci5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJyLmJ5dGVMZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyci5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdW5yZWFjaGFibGUoXCJJbnZhbGlkIGFyZ3VtZW50IGZvciBhcnJheUJ5dGVMZW5ndGhcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYXJyYXlzVG9CeXRlcyhhcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gYXJyLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobGVuZ3RoID09PSAxICYmIGFyclswXSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcnJbMF07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0TGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRMZW5ndGggKz0gYXJyYXlCeXRlTGVuZ3RoKGFycltpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBsZXQgcG9zID0gMDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KHJlc3VsdExlbmd0aCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW0gPSBhcnJbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGl0ZW0gaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gc3RyaW5nVG9CeXRlcyhpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gbmV3IFVpbnQ4QXJyYXkoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtTGVuZ3RoID0gaXRlbS5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zZXQoaXRlbSwgcG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyArPSBpdGVtTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc3RyaW5nMzIodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUodmFsdWUgPj4gMjQgJiAweGZmLCB2YWx1ZSA+PiAxNiAmIDB4ZmYsIHZhbHVlID4+IDggJiAweGZmLCB2YWx1ZSAmIDB4ZmYpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG9iamVjdFNpemUob2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBvYmplY3RGcm9tTWFwKG1hcCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG1hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaXNMaXR0bGVFbmRpYW4oKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlcjggPSBuZXcgVWludDhBcnJheSg0KTtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyOFswXSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZpZXczMiA9IG5ldyBVaW50MzJBcnJheShidWZmZXI4LmJ1ZmZlciwgMCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2aWV3MzJbMF0gPT09IDE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgSXNMaXR0bGVFbmRpYW5DYWNoZWQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaGFkb3codGhpcywgXCJ2YWx1ZVwiLCBpc0xpdHRsZUVuZGlhbigpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLklzTGl0dGxlRW5kaWFuQ2FjaGVkID0gSXNMaXR0bGVFbmRpYW5DYWNoZWQ7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc0V2YWxTdXBwb3J0ZWQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgRnVuY3Rpb24oXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgSXNFdmFsU3VwcG9ydGVkQ2FjaGVkID0ge1xuICAgICAgICAgICAgICAgICAgICBnZXQgdmFsdWUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2hhZG93KHRoaXMsIFwidmFsdWVcIiwgaXNFdmFsU3VwcG9ydGVkKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuSXNFdmFsU3VwcG9ydGVkQ2FjaGVkID0gSXNFdmFsU3VwcG9ydGVkQ2FjaGVkO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhleE51bWJlcnMgPSBbLi4uQXJyYXkoMjU2KS5rZXlzKCldLm1hcChuID0+IG4udG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSk7XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBVdGlsIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljIG1ha2VIZXhDb2xvcihyLCBnLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCMke2hleE51bWJlcnNbcl19JHtoZXhOdW1iZXJzW2ddfSR7aGV4TnVtYmVyc1tiXX1gO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhdGljIHRyYW5zZm9ybShtMSwgbTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbbTFbMF0gKiBtMlswXSArIG0xWzJdICogbTJbMV0sIG0xWzFdICogbTJbMF0gKyBtMVszXSAqIG0yWzFdLCBtMVswXSAqIG0yWzJdICsgbTFbMl0gKiBtMlszXSwgbTFbMV0gKiBtMlsyXSArIG0xWzNdICogbTJbM10sIG0xWzBdICogbTJbNF0gKyBtMVsyXSAqIG0yWzVdICsgbTFbNF0sIG0xWzFdICogbTJbNF0gKyBtMVszXSAqIG0yWzVdICsgbTFbNV1dO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhdGljIGFwcGx5VHJhbnNmb3JtKHAsIG0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHh0ID0gcFswXSAqIG1bMF0gKyBwWzFdICogbVsyXSArIG1bNF07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB5dCA9IHBbMF0gKiBtWzFdICsgcFsxXSAqIG1bM10gKyBtWzVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt4dCwgeXRdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhdGljIGFwcGx5SW52ZXJzZVRyYW5zZm9ybShwLCBtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkID0gbVswXSAqIG1bM10gLSBtWzFdICogbVsyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHh0ID0gKHBbMF0gKiBtWzNdIC0gcFsxXSAqIG1bMl0gKyBtWzJdICogbVs1XSAtIG1bNF0gKiBtWzNdKSAvIGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB5dCA9ICgtcFswXSAqIG1bMV0gKyBwWzFdICogbVswXSArIG1bNF0gKiBtWzFdIC0gbVs1XSAqIG1bMF0pIC8gZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbeHQsIHl0XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN0YXRpYyBnZXRBeGlhbEFsaWduZWRCb3VuZGluZ0JveChyLCBtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwMSA9IFV0aWwuYXBwbHlUcmFuc2Zvcm0ociwgbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwMiA9IFV0aWwuYXBwbHlUcmFuc2Zvcm0oci5zbGljZSgyLCA0KSwgbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwMyA9IFV0aWwuYXBwbHlUcmFuc2Zvcm0oW3JbMF0sIHJbM11dLCBtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHA0ID0gVXRpbC5hcHBseVRyYW5zZm9ybShbclsyXSwgclsxXV0sIG0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtNYXRoLm1pbihwMVswXSwgcDJbMF0sIHAzWzBdLCBwNFswXSksIE1hdGgubWluKHAxWzFdLCBwMlsxXSwgcDNbMV0sIHA0WzFdKSwgTWF0aC5tYXgocDFbMF0sIHAyWzBdLCBwM1swXSwgcDRbMF0pLCBNYXRoLm1heChwMVsxXSwgcDJbMV0sIHAzWzFdLCBwNFsxXSldO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhdGljIGludmVyc2VUcmFuc2Zvcm0obSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZCA9IG1bMF0gKiBtWzNdIC0gbVsxXSAqIG1bMl07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW21bM10gLyBkLCAtbVsxXSAvIGQsIC1tWzJdIC8gZCwgbVswXSAvIGQsIChtWzJdICogbVs1XSAtIG1bNF0gKiBtWzNdKSAvIGQsIChtWzRdICogbVsxXSAtIG1bNV0gKiBtWzBdKSAvIGRdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhdGljIGFwcGx5M2RUcmFuc2Zvcm0obSwgdikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFttWzBdICogdlswXSArIG1bMV0gKiB2WzFdICsgbVsyXSAqIHZbMl0sIG1bM10gKiB2WzBdICsgbVs0XSAqIHZbMV0gKyBtWzVdICogdlsyXSwgbVs2XSAqIHZbMF0gKyBtWzddICogdlsxXSArIG1bOF0gKiB2WzJdXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN0YXRpYyBzaW5ndWxhclZhbHVlRGVjb21wb3NlMmRTY2FsZShtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc3Bvc2UgPSBbbVswXSwgbVsyXSwgbVsxXSwgbVszXV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gbVswXSAqIHRyYW5zcG9zZVswXSArIG1bMV0gKiB0cmFuc3Bvc2VbMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiID0gbVswXSAqIHRyYW5zcG9zZVsxXSArIG1bMV0gKiB0cmFuc3Bvc2VbM107XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjID0gbVsyXSAqIHRyYW5zcG9zZVswXSArIG1bM10gKiB0cmFuc3Bvc2VbMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkID0gbVsyXSAqIHRyYW5zcG9zZVsxXSArIG1bM10gKiB0cmFuc3Bvc2VbM107XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaXJzdCA9IChhICsgZCkgLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2Vjb25kID0gTWF0aC5zcXJ0KChhICsgZCkgKiogMiAtIDQgKiAoYSAqIGQgLSBjICogYikpIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN4ID0gZmlyc3QgKyBzZWNvbmQgfHwgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN5ID0gZmlyc3QgLSBzZWNvbmQgfHwgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbTWF0aC5zcXJ0KHN4KSwgTWF0aC5zcXJ0KHN5KV07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzdGF0aWMgbm9ybWFsaXplUmVjdChyZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gcmVjdC5zbGljZSgwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlY3RbMF0gPiByZWN0WzJdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgclswXSA9IHJlY3RbMl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgclsyXSA9IHJlY3RbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWN0WzFdID4gcmVjdFszXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJbMV0gPSByZWN0WzNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJbM10gPSByZWN0WzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN0YXRpYyBpbnRlcnNlY3QocmVjdDEsIHJlY3QyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSAtIGI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9yZGVyZWRYID0gW3JlY3QxWzBdLCByZWN0MVsyXSwgcmVjdDJbMF0sIHJlY3QyWzJdXS5zb3J0KGNvbXBhcmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JkZXJlZFkgPSBbcmVjdDFbMV0sIHJlY3QxWzNdLCByZWN0MlsxXSwgcmVjdDJbM11dLnNvcnQoY29tcGFyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3QxID0gVXRpbC5ub3JtYWxpemVSZWN0KHJlY3QxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3QyID0gVXRpbC5ub3JtYWxpemVSZWN0KHJlY3QyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yZGVyZWRYWzBdID09PSByZWN0MVswXSAmJiBvcmRlcmVkWFsxXSA9PT0gcmVjdDJbMF0gfHwgb3JkZXJlZFhbMF0gPT09IHJlY3QyWzBdICYmIG9yZGVyZWRYWzFdID09PSByZWN0MVswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFswXSA9IG9yZGVyZWRYWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFsyXSA9IG9yZGVyZWRYWzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yZGVyZWRZWzBdID09PSByZWN0MVsxXSAmJiBvcmRlcmVkWVsxXSA9PT0gcmVjdDJbMV0gfHwgb3JkZXJlZFlbMF0gPT09IHJlY3QyWzFdICYmIG9yZGVyZWRZWzFdID09PSByZWN0MVsxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFsxXSA9IG9yZGVyZWRZWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFszXSA9IG9yZGVyZWRZWzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN0YXRpYyBiZXppZXJCb3VuZGluZ0JveCh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR2YWx1ZXMgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3VuZHMgPSBbW10sIFtdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhLCBiLCBjLCB0LCB0MSwgdDIsIGIyYWMsIHNxcnRiMmFjO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDI7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPSA2ICogeDAgLSAxMiAqIHgxICsgNiAqIHgyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gLTMgKiB4MCArIDkgKiB4MSAtIDkgKiB4MiArIDMgKiB4MztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IDMgKiB4MSAtIDMgKiB4MDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gNiAqIHkwIC0gMTIgKiB5MSArIDYgKiB5MjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IC0zICogeTAgKyA5ICogeTEgLSA5ICogeTIgKyAzICogeTM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSAzICogeTEgLSAzICogeTA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKGEpIDwgMWUtMTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKGIpIDwgMWUtMTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdCA9IC1jIC8gYjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA8IHQgJiYgdCA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR2YWx1ZXMucHVzaCh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIyYWMgPSBiICogYiAtIDQgKiBjICogYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcXJ0YjJhYyA9IE1hdGguc3FydChiMmFjKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiMmFjIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0MSA9ICgtYiArIHNxcnRiMmFjKSAvICgyICogYSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA8IHQxICYmIHQxIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dmFsdWVzLnB1c2godDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQyID0gKC1iIC0gc3FydGIyYWMpIC8gKDIgKiBhKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgwIDwgdDIgJiYgdDIgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR2YWx1ZXMucHVzaCh0Mik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaiA9IHR2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG10O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgamxlbiA9IGo7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChqLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ID0gdHZhbHVlc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdCA9IDEgLSB0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kc1swXVtqXSA9IG10ICogbXQgKiBtdCAqIHgwICsgMyAqIG10ICogbXQgKiB0ICogeDEgKyAzICogbXQgKiB0ICogdCAqIHgyICsgdCAqIHQgKiB0ICogeDM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRzWzFdW2pdID0gbXQgKiBtdCAqIG10ICogeTAgKyAzICogbXQgKiBtdCAqIHQgKiB5MSArIDMgKiBtdCAqIHQgKiB0ICogeTIgKyB0ICogdCAqIHQgKiB5MztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRzWzBdW2psZW5dID0geDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3VuZHNbMV1bamxlbl0gPSB5MDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kc1swXVtqbGVuICsgMV0gPSB4MztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kc1sxXVtqbGVuICsgMV0gPSB5MztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kc1swXS5sZW5ndGggPSBib3VuZHNbMV0ubGVuZ3RoID0gamxlbiArIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW01hdGgubWluKC4uLmJvdW5kc1swXSksIE1hdGgubWluKC4uLmJvdW5kc1sxXSksIE1hdGgubWF4KC4uLmJvdW5kc1swXSksIE1hdGgubWF4KC4uLmJvdW5kc1sxXSldO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLlV0aWwgPSBVdGlsO1xuICAgICAgICAgICAgICAgIGNvbnN0IFBERlN0cmluZ1RyYW5zbGF0ZVRhYmxlID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDB4MmQ4LCAweDJjNywgMHgyYzYsIDB4MmQ5LCAweDJkZCwgMHgyZGIsIDB4MmRhLCAweDJkYywgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMHgyMDIyLCAweDIwMjAsIDB4MjAyMSwgMHgyMDI2LCAweDIwMTQsIDB4MjAxMywgMHgxOTIsIDB4MjA0NCwgMHgyMDM5LCAweDIwM2EsIDB4MjIxMiwgMHgyMDMwLCAweDIwMWUsIDB4MjAxYywgMHgyMDFkLCAweDIwMTgsIDB4MjAxOSwgMHgyMDFhLCAweDIxMjIsIDB4ZmIwMSwgMHhmYjAyLCAweDE0MSwgMHgxNTIsIDB4MTYwLCAweDE3OCwgMHgxN2QsIDB4MTMxLCAweDE0MiwgMHgxNTMsIDB4MTYxLCAweDE3ZSwgMCwgMHgyMGFjXTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN0cmluZ1RvUERGU3RyaW5nKHN0cikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RyWzBdID49IFwiXFx4RUZcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVuY29kaW5nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RyWzBdID09PSBcIlxceEZFXCIgJiYgc3RyWzFdID09PSBcIlxceEZGXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGluZyA9IFwidXRmLTE2YmVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyWzBdID09PSBcIlxceEZGXCIgJiYgc3RyWzFdID09PSBcIlxceEZFXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGluZyA9IFwidXRmLTE2bGVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyWzBdID09PSBcIlxceEVGXCIgJiYgc3RyWzFdID09PSBcIlxceEJCXCIgJiYgc3RyWzJdID09PSBcIlxceEJGXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGluZyA9IFwidXRmLThcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuY29kaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcihlbmNvZGluZywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmF0YWw6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IHN0cmluZ1RvQnl0ZXMoc3RyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZXIuZGVjb2RlKGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2Fybihgc3RyaW5nVG9QREZTdHJpbmc6IFwiJHtleH1cIi5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJCdWYgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBzdHIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29kZSA9IFBERlN0cmluZ1RyYW5zbGF0ZVRhYmxlW3N0ci5jaGFyQ29kZUF0KGkpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ckJ1Zi5wdXNoKGNvZGUgPyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpIDogc3RyLmNoYXJBdChpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyQnVmLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZXNjYXBlU3RyaW5nKHN0cikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbKClcXFxcXFxuXFxyXSkvZywgbWF0Y2ggPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID09PSBcIlxcblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXFxcXG5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2ggPT09IFwiXFxyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcXFxcclwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYFxcXFwke21hdGNofWA7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzQXNjaWkoc3RyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAvXltcXHgwMC1cXHg3Rl0qJC8udGVzdChzdHIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN0cmluZ1RvVVRGMTZCRVN0cmluZyhzdHIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnVmID0gW1wiXFx4RkVcXHhGRlwiXTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBzdHIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhciA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyID4+IDggJiAweGZmKSwgU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyICYgMHhmZikpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJ1Zi5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN0cmluZ1RvVVRGOFN0cmluZyhzdHIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoc3RyKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdXRmOFN0cmluZ1RvU3RyaW5nKHN0cikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPT0gbnVsbCAmJiB2LmJ5dGVMZW5ndGggIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc0FycmF5RXF1YWwoYXJyMSwgYXJyMikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJyMS5sZW5ndGggIT09IGFycjIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBhcnIxLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcnIxW2ldICE9PSBhcnIyW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0TW9kaWZpY2F0aW9uRGF0ZShkYXRlID0gbmV3IERhdGUoKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBidWZmZXIgPSBbZGF0ZS5nZXRVVENGdWxsWWVhcigpLnRvU3RyaW5nKCksIChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKSwgZGF0ZS5nZXRVVENEYXRlKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIiksIGRhdGUuZ2V0VVRDSG91cnMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKSwgZGF0ZS5nZXRVVENNaW51dGVzKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIiksIGRhdGUuZ2V0VVRDU2Vjb25kcygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlci5qb2luKFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYXBhYmlsaXR5ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlzU2V0dGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2FwYWJpbGl0eSwgXCJzZXR0bGVkXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNTZXR0bGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjYXBhYmlsaXR5LnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXBhYmlsaXR5LnJlc29sdmUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU2V0dGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcGFiaWxpdHkucmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU2V0dGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhcGFiaWxpdHk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyoqKi8gfSksXG4gICAgICAgICAgICAvKiAyICovXG4gICAgICAgICAgICAvKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXG5cbiAgICAgICAgICAgICAgICB2YXIgX2lzX25vZGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDMpO1xuXG4gICAgICAgICAgICAgICAgO1xuXG4gICAgICAgICAgICAgICAgLyoqKi8gfSksXG4gICAgICAgICAgICAvKiAzICovXG4gICAgICAgICAgICAvKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cblxuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLmlzTm9kZUpTID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzTm9kZUpTID0gdHlwZW9mIHByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgcHJvY2VzcyArIFwiXCIgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiICYmICFwcm9jZXNzLnZlcnNpb25zLm53ICYmICEocHJvY2Vzcy52ZXJzaW9ucy5lbGVjdHJvbiAmJiBwcm9jZXNzLnR5cGUgJiYgcHJvY2Vzcy50eXBlICE9PSBcImJyb3dzZXJcIik7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5pc05vZGVKUyA9IGlzTm9kZUpTO1xuXG4gICAgICAgICAgICAgICAgLyoqKi8gfSksXG4gICAgICAgICAgICAvKiA0ICovXG4gICAgICAgICAgICAvKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblxuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLmJ1aWxkID0gZXhwb3J0cy5SZW5kZXJUYXNrID0gZXhwb3J0cy5QREZXb3JrZXJVdGlsID0gZXhwb3J0cy5QREZXb3JrZXIgPSBleHBvcnRzLlBERlBhZ2VQcm94eSA9IGV4cG9ydHMuUERGRG9jdW1lbnRQcm94eSA9IGV4cG9ydHMuUERGRG9jdW1lbnRMb2FkaW5nVGFzayA9IGV4cG9ydHMuUERGRGF0YVJhbmdlVHJhbnNwb3J0ID0gZXhwb3J0cy5Mb29wYmFja1BvcnQgPSBleHBvcnRzLkRlZmF1bHRTdGFuZGFyZEZvbnREYXRhRmFjdG9yeSA9IGV4cG9ydHMuRGVmYXVsdENhbnZhc0ZhY3RvcnkgPSBleHBvcnRzLkRlZmF1bHRDTWFwUmVhZGVyRmFjdG9yeSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBleHBvcnRzLmdldERvY3VtZW50ID0gZ2V0RG9jdW1lbnQ7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5zZXRQREZOZXR3b3JrU3RyZWFtRmFjdG9yeSA9IHNldFBERk5ldHdvcmtTdHJlYW1GYWN0b3J5O1xuICAgICAgICAgICAgICAgIGV4cG9ydHMudmVyc2lvbiA9IHZvaWQgMDtcblxuICAgICAgICAgICAgICAgIHZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgX2Rpc3BsYXlfdXRpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDUpO1xuXG4gICAgICAgICAgICAgICAgdmFyIF9mb250X2xvYWRlciA9IF9fd19wZGZqc19yZXF1aXJlX18oNyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgX25vZGVfdXRpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIF9hbm5vdGF0aW9uX3N0b3JhZ2UgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDkpO1xuXG4gICAgICAgICAgICAgICAgdmFyIF9jYW52YXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTtcblxuICAgICAgICAgICAgICAgIHZhciBfd29ya2VyX29wdGlvbnMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyKTtcblxuICAgICAgICAgICAgICAgIHZhciBfaXNfbm9kZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgX21lc3NhZ2VfaGFuZGxlciA9IF9fd19wZGZqc19yZXF1aXJlX18oMTMpO1xuXG4gICAgICAgICAgICAgICAgdmFyIF9tZXRhZGF0YSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTQpO1xuXG4gICAgICAgICAgICAgICAgdmFyIF9vcHRpb25hbF9jb250ZW50X2NvbmZpZyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTUpO1xuXG4gICAgICAgICAgICAgICAgdmFyIF90cmFuc3BvcnRfc3RyZWFtID0gX193X3BkZmpzX3JlcXVpcmVfXygxNik7XG5cbiAgICAgICAgICAgICAgICB2YXIgX3hmYV90ZXh0ID0gX193X3BkZmpzX3JlcXVpcmVfXygxNyk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBERUZBVUxUX1JBTkdFX0NIVU5LX1NJWkUgPSA2NTUzNjtcbiAgICAgICAgICAgICAgICBjb25zdCBSRU5ERVJJTkdfQ0FOQ0VMTEVEX1RJTUVPVVQgPSAxMDA7XG4gICAgICAgICAgICAgICAgY29uc3QgRGVmYXVsdENhbnZhc0ZhY3RvcnkgPSBfaXNfbm9kZS5pc05vZGVKUyA/IF9ub2RlX3V0aWxzLk5vZGVDYW52YXNGYWN0b3J5IDogX2Rpc3BsYXlfdXRpbHMuRE9NQ2FudmFzRmFjdG9yeTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLkRlZmF1bHRDYW52YXNGYWN0b3J5ID0gRGVmYXVsdENhbnZhc0ZhY3Rvcnk7XG4gICAgICAgICAgICAgICAgY29uc3QgRGVmYXVsdENNYXBSZWFkZXJGYWN0b3J5ID0gX2lzX25vZGUuaXNOb2RlSlMgPyBfbm9kZV91dGlscy5Ob2RlQ01hcFJlYWRlckZhY3RvcnkgOiBfZGlzcGxheV91dGlscy5ET01DTWFwUmVhZGVyRmFjdG9yeTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLkRlZmF1bHRDTWFwUmVhZGVyRmFjdG9yeSA9IERlZmF1bHRDTWFwUmVhZGVyRmFjdG9yeTtcbiAgICAgICAgICAgICAgICBjb25zdCBEZWZhdWx0U3RhbmRhcmRGb250RGF0YUZhY3RvcnkgPSBfaXNfbm9kZS5pc05vZGVKUyA/IF9ub2RlX3V0aWxzLk5vZGVTdGFuZGFyZEZvbnREYXRhRmFjdG9yeSA6IF9kaXNwbGF5X3V0aWxzLkRPTVN0YW5kYXJkRm9udERhdGFGYWN0b3J5O1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuRGVmYXVsdFN0YW5kYXJkRm9udERhdGFGYWN0b3J5ID0gRGVmYXVsdFN0YW5kYXJkRm9udERhdGFGYWN0b3J5O1xuICAgICAgICAgICAgICAgIGxldCBjcmVhdGVQREZOZXR3b3JrU3RyZWFtO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2V0UERGTmV0d29ya1N0cmVhbUZhY3RvcnkocGRmTmV0d29ya1N0cmVhbUZhY3RvcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlUERGTmV0d29ya1N0cmVhbSA9IHBkZk5ldHdvcmtTdHJlYW1GYWN0b3J5O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldERvY3VtZW50KHNyYykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXNrID0gbmV3IFBERkRvY3VtZW50TG9hZGluZ1Rhc2soKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNvdXJjZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNyYyA9PT0gXCJzdHJpbmdcIiB8fCBzcmMgaW5zdGFuY2VvZiBVUkwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNyY1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoMCwgX3V0aWwuaXNBcnJheUJ1ZmZlcikoc3JjKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHNyY1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzcmMgaW5zdGFuY2VvZiBQREZEYXRhUmFuZ2VUcmFuc3BvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZTogc3JjXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzcmMgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHBhcmFtZXRlciBpbiBnZXREb2N1bWVudCwgXCIgKyBcIm5lZWQgZWl0aGVyIHN0cmluZywgVVJMLCBVaW50OEFycmF5LCBvciBwYXJhbWV0ZXIgb2JqZWN0LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzcmMudXJsICYmICFzcmMuZGF0YSAmJiAhc3JjLnJhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwYXJhbWV0ZXIgb2JqZWN0OiBuZWVkIGVpdGhlciAuZGF0YSwgLnJhbmdlIG9yIC51cmxcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IHNyYztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCByYW5nZVRyYW5zcG9ydCA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXIgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBzb3VyY2Vba2V5XTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwidXJsXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1trZXldID0gbmV3IFVSTCh2YWx1ZSwgd2luZG93LmxvY2F0aW9uKS5ocmVmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoYENhbm5vdCBjcmVhdGUgdmFsaWQgVVJMOiBcIiR7ZXh9XCIuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHZhbHVlIGluc3RhbmNlb2YgVVJMKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXNba2V5XSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgUERGIHVybCBkYXRhOiBcIiArIFwiZWl0aGVyIHN0cmluZyBvciBVUkwtb2JqZWN0IGlzIGV4cGVjdGVkIGluIHRoZSB1cmwgcHJvcGVydHkuXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJhbmdlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlVHJhbnNwb3J0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIndvcmtlclwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXIgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGF0YVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzX25vZGUuaXNOb2RlSlMgJiYgdHlwZW9mIEJ1ZmZlciAhPT0gXCJ1bmRlZmluZWRcIiAmJiB2YWx1ZSBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zW2tleV0gPSBuZXcgVWludDhBcnJheSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1trZXldID0gKDAsIF91dGlsLnN0cmluZ1RvQnl0ZXMpKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwgJiYgIWlzTmFOKHZhbHVlLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1trZXldID0gbmV3IFVpbnQ4QXJyYXkodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCgwLCBfdXRpbC5pc0FycmF5QnVmZmVyKSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1trZXldID0gbmV3IFVpbnQ4QXJyYXkodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBQREYgYmluYXJ5IGRhdGE6IGVpdGhlciB0eXBlZCBhcnJheSwgXCIgKyBcInN0cmluZywgb3IgYXJyYXktbGlrZSBvYmplY3QgaXMgZXhwZWN0ZWQgaW4gdGhlIGRhdGEgcHJvcGVydHkuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuQ01hcFJlYWRlckZhY3RvcnkgPSBwYXJhbXMuQ01hcFJlYWRlckZhY3RvcnkgfHwgRGVmYXVsdENNYXBSZWFkZXJGYWN0b3J5O1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuU3RhbmRhcmRGb250RGF0YUZhY3RvcnkgPSBwYXJhbXMuU3RhbmRhcmRGb250RGF0YUZhY3RvcnkgfHwgRGVmYXVsdFN0YW5kYXJkRm9udERhdGFGYWN0b3J5O1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuaWdub3JlRXJyb3JzID0gcGFyYW1zLnN0b3BBdEVycm9ycyAhPT0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmZvbnRFeHRyYVByb3BlcnRpZXMgPSBwYXJhbXMuZm9udEV4dHJhUHJvcGVydGllcyA9PT0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnBkZkJ1ZyA9IHBhcmFtcy5wZGZCdWcgPT09IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5lbmFibGVYZmEgPSBwYXJhbXMuZW5hYmxlWGZhID09PSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihwYXJhbXMucmFuZ2VDaHVua1NpemUpIHx8IHBhcmFtcy5yYW5nZUNodW5rU2l6ZSA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5yYW5nZUNodW5rU2l6ZSA9IERFRkFVTFRfUkFOR0VfQ0hVTktfU0laRTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1zLmRvY0Jhc2VVcmwgIT09IFwic3RyaW5nXCIgfHwgKDAsIF9kaXNwbGF5X3V0aWxzLmlzRGF0YVNjaGVtZSkocGFyYW1zLmRvY0Jhc2VVcmwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMuZG9jQmFzZVVybCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIocGFyYW1zLm1heEltYWdlU2l6ZSkgfHwgcGFyYW1zLm1heEltYWdlU2l6ZSA8IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMubWF4SW1hZ2VTaXplID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5jTWFwVXJsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMuY01hcFVybCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5zdGFuZGFyZEZvbnREYXRhVXJsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMuc3RhbmRhcmRGb250RGF0YVVybCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy51c2VXb3JrZXJGZXRjaCAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy51c2VXb3JrZXJGZXRjaCA9IHBhcmFtcy5DTWFwUmVhZGVyRmFjdG9yeSA9PT0gX2Rpc3BsYXlfdXRpbHMuRE9NQ01hcFJlYWRlckZhY3RvcnkgJiYgcGFyYW1zLlN0YW5kYXJkRm9udERhdGFGYWN0b3J5ID09PSBfZGlzcGxheV91dGlscy5ET01TdGFuZGFyZEZvbnREYXRhRmFjdG9yeTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1zLmlzRXZhbFN1cHBvcnRlZCAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5pc0V2YWxTdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMuZGlzYWJsZUZvbnRGYWNlICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmRpc2FibGVGb250RmFjZSA9IF9pc19ub2RlLmlzTm9kZUpTO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMudXNlU3lzdGVtRm9udHMgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMudXNlU3lzdGVtRm9udHMgPSAhX2lzX25vZGUuaXNOb2RlSlMgJiYgIXBhcmFtcy5kaXNhYmxlRm9udEZhY2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5vd25lckRvY3VtZW50ICE9PSBcIm9iamVjdFwiIHx8IHBhcmFtcy5vd25lckRvY3VtZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMub3duZXJEb2N1bWVudCA9IGdsb2JhbFRoaXMuZG9jdW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5kaXNhYmxlUmFuZ2UgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMuZGlzYWJsZVJhbmdlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5kaXNhYmxlU3RyZWFtICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmRpc2FibGVTdHJlYW0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1zLmRpc2FibGVBdXRvRmV0Y2ggIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMuZGlzYWJsZUF1dG9GZXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLnNldFZlcmJvc2l0eUxldmVsKShwYXJhbXMudmVyYm9zaXR5KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXdvcmtlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd29ya2VyUGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcmJvc2l0eTogcGFyYW1zLnZlcmJvc2l0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3J0OiBfd29ya2VyX29wdGlvbnMuR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJQb3J0XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2VyID0gd29ya2VyUGFyYW1zLnBvcnQgPyBQREZXb3JrZXIuZnJvbVBvcnQod29ya2VyUGFyYW1zKSA6IG5ldyBQREZXb3JrZXIod29ya2VyUGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2suX3dvcmtlciA9IHdvcmtlcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvY0lkID0gdGFzay5kb2NJZDtcbiAgICAgICAgICAgICAgICAgICAgd29ya2VyLnByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFzay5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMb2FkaW5nIGFib3J0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmtlcklkUHJvbWlzZSA9IF9mZXRjaERvY3VtZW50KHdvcmtlciwgcGFyYW1zLCByYW5nZVRyYW5zcG9ydCwgZG9jSWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXR3b3JrU3RyZWFtUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ldHdvcmtTdHJlYW07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2VUcmFuc3BvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29ya1N0cmVhbSA9IG5ldyBfdHJhbnNwb3J0X3N0cmVhbS5QREZEYXRhVHJhbnNwb3J0U3RyZWFtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aDogcGFyYW1zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxEYXRhOiBwYXJhbXMuaW5pdGlhbERhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzc2l2ZURvbmU6IHBhcmFtcy5wcm9ncmVzc2l2ZURvbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZTogcGFyYW1zLmNvbnRlbnREaXNwb3NpdGlvbkZpbGVuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZVJhbmdlOiBwYXJhbXMuZGlzYWJsZVJhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZVN0cmVhbTogcGFyYW1zLmRpc2FibGVTdHJlYW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmFuZ2VUcmFuc3BvcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXBhcmFtcy5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldHdvcmtTdHJlYW0gPSBjcmVhdGVQREZOZXR3b3JrU3RyZWFtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogcGFyYW1zLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aDogcGFyYW1zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBIZWFkZXJzOiBwYXJhbXMuaHR0cEhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHBhcmFtcy53aXRoQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZUNodW5rU2l6ZTogcGFyYW1zLnJhbmdlQ2h1bmtTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZVJhbmdlOiBwYXJhbXMuZGlzYWJsZVJhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZVN0cmVhbTogcGFyYW1zLmRpc2FibGVTdHJlYW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShuZXR3b3JrU3RyZWFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFt3b3JrZXJJZFByb21pc2UsIG5ldHdvcmtTdHJlYW1Qcm9taXNlXSkudGhlbihmdW5jdGlvbiAoW3dvcmtlcklkLCBuZXR3b3JrU3RyZWFtXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXNrLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMb2FkaW5nIGFib3J0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZUhhbmRsZXIgPSBuZXcgX21lc3NhZ2VfaGFuZGxlci5NZXNzYWdlSGFuZGxlcihkb2NJZCwgd29ya2VySWQsIHdvcmtlci5wb3J0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc3BvcnQgPSBuZXcgV29ya2VyVHJhbnNwb3J0KG1lc3NhZ2VIYW5kbGVyLCB0YXNrLCBuZXR3b3JrU3RyZWFtLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2suX3RyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5zZW5kKFwiUmVhZHlcIiwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2godGFzay5fY2FwYWJpbGl0eS5yZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFzaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBhc3luYyBmdW5jdGlvbiBfZmV0Y2hEb2N1bWVudCh3b3JrZXIsIHNvdXJjZSwgcGRmRGF0YVJhbmdlVHJhbnNwb3J0LCBkb2NJZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAod29ya2VyLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV29ya2VyIHdhcyBkZXN0cm95ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAocGRmRGF0YVJhbmdlVHJhbnNwb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UubGVuZ3RoID0gcGRmRGF0YVJhbmdlVHJhbnNwb3J0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZS5pbml0aWFsRGF0YSA9IHBkZkRhdGFSYW5nZVRyYW5zcG9ydC5pbml0aWFsRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZS5wcm9ncmVzc2l2ZURvbmUgPSBwZGZEYXRhUmFuZ2VUcmFuc3BvcnQucHJvZ3Jlc3NpdmVEb25lO1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLmNvbnRlbnREaXNwb3NpdGlvbkZpbGVuYW1lID0gcGRmRGF0YVJhbmdlVHJhbnNwb3J0LmNvbnRlbnREaXNwb3NpdGlvbkZpbGVuYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd29ya2VySWQgPSBhd2FpdCB3b3JrZXIubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0RG9jUmVxdWVzdFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb2NJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwaVZlcnNpb246ICcyLjE0LjEwMicsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBzb3VyY2UuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNvdXJjZS51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHNvdXJjZS5wYXNzd29yZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlQXV0b0ZldGNoOiBzb3VyY2UuZGlzYWJsZUF1dG9GZXRjaCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZUNodW5rU2l6ZTogc291cmNlLnJhbmdlQ2h1bmtTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aDogc291cmNlLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heEltYWdlU2l6ZTogc291cmNlLm1heEltYWdlU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVGb250RmFjZTogc291cmNlLmRpc2FibGVGb250RmFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY0Jhc2VVcmw6IHNvdXJjZS5kb2NCYXNlVXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlRXJyb3JzOiBzb3VyY2UuaWdub3JlRXJyb3JzLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNFdmFsU3VwcG9ydGVkOiBzb3VyY2UuaXNFdmFsU3VwcG9ydGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEV4dHJhUHJvcGVydGllczogc291cmNlLmZvbnRFeHRyYVByb3BlcnRpZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVYZmE6IHNvdXJjZS5lbmFibGVYZmEsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VTeXN0ZW1Gb250czogc291cmNlLnVzZVN5c3RlbUZvbnRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgY01hcFVybDogc291cmNlLnVzZVdvcmtlckZldGNoID8gc291cmNlLmNNYXBVcmwgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhbmRhcmRGb250RGF0YVVybDogc291cmNlLnVzZVdvcmtlckZldGNoID8gc291cmNlLnN0YW5kYXJkRm9udERhdGFVcmwgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh3b3JrZXIuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXb3JrZXIgd2FzIGRlc3Ryb3llZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3b3JrZXJJZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBQREZEb2N1bWVudExvYWRpbmdUYXNrIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljICNkb2NJZCA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNwb3J0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3dvcmtlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY0lkID0gYGQke1BERkRvY3VtZW50TG9hZGluZ1Rhc2suI2RvY0lkKyt9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUGFzc3dvcmQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25VbnN1cHBvcnRlZEZlYXR1cmUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0IHByb21pc2UoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYXN5bmMgZGVzdHJveSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3RyYW5zcG9ydD8uZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNwb3J0ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3dvcmtlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3dvcmtlci5kZXN0cm95KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl93b3JrZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLlBERkRvY3VtZW50TG9hZGluZ1Rhc2sgPSBQREZEb2N1bWVudExvYWRpbmdUYXNrO1xuXG4gICAgICAgICAgICAgICAgY2xhc3MgUERGRGF0YVJhbmdlVHJhbnNwb3J0IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IobGVuZ3RoLCBpbml0aWFsRGF0YSwgcHJvZ3Jlc3NpdmVEb25lID0gZmFsc2UsIGNvbnRlbnREaXNwb3NpdGlvbkZpbGVuYW1lID0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxEYXRhID0gaW5pdGlhbERhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2dyZXNzaXZlRG9uZSA9IHByb2dyZXNzaXZlRG9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGVudERpc3Bvc2l0aW9uRmlsZW5hbWUgPSBjb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JhbmdlTGlzdGVuZXJzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9ncmVzc0xpc3RlbmVycyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvZ3Jlc3NpdmVSZWFkTGlzdGVuZXJzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9ncmVzc2l2ZURvbmVMaXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGFkZFJhbmdlTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JhbmdlTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYWRkUHJvZ3Jlc3NMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvZ3Jlc3NMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBhZGRQcm9ncmVzc2l2ZVJlYWRMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvZ3Jlc3NpdmVSZWFkTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYWRkUHJvZ3Jlc3NpdmVEb25lTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Byb2dyZXNzaXZlRG9uZUxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG9uRGF0YVJhbmdlKGJlZ2luLCBjaHVuaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiB0aGlzLl9yYW5nZUxpc3RlbmVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyKGJlZ2luLCBjaHVuayk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBvbkRhdGFQcm9ncmVzcyhsb2FkZWQsIHRvdGFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkeUNhcGFiaWxpdHkucHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGxpc3RlbmVyIG9mIHRoaXMuX3Byb2dyZXNzTGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyKGxvYWRlZCwgdG90YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgb25EYXRhUHJvZ3Jlc3NpdmVSZWFkKGNodW5rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkeUNhcGFiaWxpdHkucHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGxpc3RlbmVyIG9mIHRoaXMuX3Byb2dyZXNzaXZlUmVhZExpc3RlbmVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcihjaHVuayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBvbkRhdGFQcm9ncmVzc2l2ZURvbmUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkeUNhcGFiaWxpdHkucHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGxpc3RlbmVyIG9mIHRoaXMuX3Byb2dyZXNzaXZlRG9uZUxpc3RlbmVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdHJhbnNwb3J0UmVhZHkoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkeUNhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdERhdGFSYW5nZShiZWdpbiwgZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiQWJzdHJhY3QgbWV0aG9kIFBERkRhdGFSYW5nZVRyYW5zcG9ydC5yZXF1ZXN0RGF0YVJhbmdlXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYWJvcnQoKSB7fVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXhwb3J0cy5QREZEYXRhUmFuZ2VUcmFuc3BvcnQgPSBQREZEYXRhUmFuZ2VUcmFuc3BvcnQ7XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBQREZEb2N1bWVudFByb3h5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IocGRmSW5mbywgdHJhbnNwb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wZGZJbmZvID0gcGRmSW5mbztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImZpbmdlcnByaW50XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfZGlzcGxheV91dGlscy5kZXByZWNhdGVkKShcImBQREZEb2N1bWVudFByb3h5LmZpbmdlcnByaW50YCwgXCIgKyBcInBsZWFzZSB1c2UgYFBERkRvY3VtZW50UHJveHkuZmluZ2VycHJpbnRzYCBpbnN0ZWFkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluZ2VycHJpbnRzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJnZXRTdGF0c1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF9kaXNwbGF5X3V0aWxzLmRlcHJlY2F0ZWQpKFwiYFBERkRvY3VtZW50UHJveHkuZ2V0U3RhdHNgLCBcIiArIFwicGxlYXNlIHVzZSB0aGUgYFBERkRvY3VtZW50UHJveHkuc3RhdHNgLWdldHRlciBpbnN0ZWFkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdHMgfHwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtVHlwZXM6IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFR5cGVzOiB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0IGFubm90YXRpb25TdG9yYWdlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5hbm5vdGF0aW9uU3RvcmFnZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBudW1QYWdlcygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wZGZJbmZvLm51bVBhZ2VzO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0IGZpbmdlcnByaW50cygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wZGZJbmZvLmZpbmdlcnByaW50cztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBzdGF0cygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuc3RhdHM7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgaXNQdXJlWGZhKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5fdHJhbnNwb3J0Ll9odG1sRm9yWGZhO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0IGFsbFhmYUh0bWwoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0Ll9odG1sRm9yWGZhO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFnZShwYWdlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldFBhZ2UocGFnZU51bWJlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRQYWdlSW5kZXgocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldFBhZ2VJbmRleChyZWYpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0RGVzdGluYXRpb25zKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXREZXN0aW5hdGlvbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldERlc3RpbmF0aW9uKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldERlc3RpbmF0aW9uKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldFBhZ2VMYWJlbHMoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldFBhZ2VMYWJlbHMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldFBhZ2VMYXlvdXQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldFBhZ2VMYXlvdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldFBhZ2VNb2RlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRQYWdlTW9kZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0Vmlld2VyUHJlZmVyZW5jZXMoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldFZpZXdlclByZWZlcmVuY2VzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRPcGVuQWN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRPcGVuQWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRBdHRhY2htZW50cygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0QXR0YWNobWVudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldEphdmFTY3JpcHQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldEphdmFTY3JpcHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldEpTQWN0aW9ucygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0RG9jSlNBY3Rpb25zKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRPdXRsaW5lKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRPdXRsaW5lKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRPcHRpb25hbENvbnRlbnRDb25maWcoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldE9wdGlvbmFsQ29udGVudENvbmZpZygpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0UGVybWlzc2lvbnMoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldFBlcm1pc3Npb25zKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRNZXRhZGF0YSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldE1hcmtJbmZvKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRNYXJrSW5mbygpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0RGF0YSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0RGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0RG93bmxvYWRJbmZvKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5kb3dubG9hZEluZm9DYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKGtlZXBMb2FkZWRGb250cyA9IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LnN0YXJ0Q2xlYW51cChrZWVwTG9hZGVkRm9udHMgfHwgdGhpcy5pc1B1cmVYZmEpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZGVzdHJveSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRpbmdUYXNrLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBsb2FkaW5nUGFyYW1zKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5sb2FkaW5nUGFyYW1zO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0IGxvYWRpbmdUYXNrKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5sb2FkaW5nVGFzaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNhdmVEb2N1bWVudCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl90cmFuc3BvcnQuYW5ub3RhdGlvblN0b3JhZ2Uuc2l6ZSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF9kaXNwbGF5X3V0aWxzLmRlcHJlY2F0ZWQpKFwic2F2ZURvY3VtZW50IGNhbGxlZCB3aGlsZSBgYW5ub3RhdGlvblN0b3JhZ2VgIGlzIGVtcHR5LCBcIiArIFwicGxlYXNlIHVzZSB0aGUgZ2V0RGF0YS1tZXRob2QgaW5zdGVhZC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuc2F2ZURvY3VtZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRGaWVsZE9iamVjdHMoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldEZpZWxkT2JqZWN0cygpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaGFzSlNBY3Rpb25zKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5oYXNKU0FjdGlvbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldENhbGN1bGF0aW9uT3JkZXJJZHMoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldENhbGN1bGF0aW9uT3JkZXJJZHMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXhwb3J0cy5QREZEb2N1bWVudFByb3h5ID0gUERGRG9jdW1lbnRQcm94eTtcblxuICAgICAgICAgICAgICAgIGNsYXNzIFBERlBhZ2VQcm94eSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKHBhZ2VJbmRleCwgcGFnZUluZm8sIHRyYW5zcG9ydCwgb3duZXJEb2N1bWVudCwgcGRmQnVnID0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhZ2VJbmRleCA9IHBhZ2VJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhZ2VJbmZvID0gcGFnZUluZm87XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vd25lckRvY3VtZW50ID0gb3duZXJEb2N1bWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zcG9ydCA9IHRyYW5zcG9ydDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRzID0gcGRmQnVnID8gbmV3IF9kaXNwbGF5X3V0aWxzLlN0YXRUaW1lcigpIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BkZkJ1ZyA9IHBkZkJ1ZztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tbW9uT2JqcyA9IHRyYW5zcG9ydC5jb21tb25PYmpzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vYmpzID0gbmV3IFBERk9iamVjdHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYW51cEFmdGVyUmVuZGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdDbGVhbnVwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRlbnRTdGF0ZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbm5vdGF0aW9uUHJvbWlzZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0IHBhZ2VOdW1iZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFnZUluZGV4ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCByb3RhdGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFnZUluZm8ucm90YXRlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0IHJlZigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYWdlSW5mby5yZWY7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgdXNlclVuaXQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFnZUluZm8udXNlclVuaXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgdmlldygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYWdlSW5mby52aWV3O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0Vmlld3BvcnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiA9IHRoaXMucm90YXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRZID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbnRGbGlwID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA9IHt9KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IF9kaXNwbGF5X3V0aWxzLlBhZ2VWaWV3cG9ydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveDogdGhpcy52aWV3LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb250RmxpcFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRBbm5vdGF0aW9ucyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnQgPSBcImRpc3BsYXlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ID0ge30pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGludGVudEFyZ3MgPSB0aGlzLl90cmFuc3BvcnQuZ2V0UmVuZGVyaW5nSW50ZW50KGludGVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcm9taXNlID0gdGhpcy5fYW5ub3RhdGlvblByb21pc2VzLmdldChpbnRlbnRBcmdzLmNhY2hlS2V5KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSA9IHRoaXMuX3RyYW5zcG9ydC5nZXRBbm5vdGF0aW9ucyh0aGlzLl9wYWdlSW5kZXgsIGludGVudEFyZ3MucmVuZGVyaW5nSW50ZW50KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Fubm90YXRpb25Qcm9taXNlcy5zZXQoaW50ZW50QXJncy5jYWNoZUtleSwgcHJvbWlzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGFubm90YXRpb25zID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBhbm5vdGF0aW9uIG9mIGFubm90YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5ub3RhdGlvbi50aXRsZU9iaiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFubm90YXRpb24sIFwidGl0bGVcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX2Rpc3BsYXlfdXRpbHMuZGVwcmVjYXRlZCkoXCJgdGl0bGVgLXByb3BlcnR5IG9uIGFubm90YXRpb24sIHBsZWFzZSB1c2UgYHRpdGxlT2JqYCBpbnN0ZWFkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhbm5vdGF0aW9uLnRpdGxlT2JqLnN0cjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbm5vdGF0aW9uLmNvbnRlbnRzT2JqICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYW5ub3RhdGlvbiwgXCJjb250ZW50c1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfZGlzcGxheV91dGlscy5kZXByZWNhdGVkKShcImBjb250ZW50c2AtcHJvcGVydHkgb24gYW5ub3RhdGlvbiwgcGxlYXNlIHVzZSBgY29udGVudHNPYmpgIGluc3RlYWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFubm90YXRpb24uY29udGVudHNPYmouc3RyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhbm5vdGF0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRKU0FjdGlvbnMoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fanNBY3Rpb25zUHJvbWlzZSB8fD0gdGhpcy5fdHJhbnNwb3J0LmdldFBhZ2VKU0FjdGlvbnModGhpcy5fcGFnZUluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGFzeW5jIGdldFhmYSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuX2h0bWxGb3JYZmE/LmNoaWxkcmVuW3RoaXMuX3BhZ2VJbmRleF0gfHwgbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzQ29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnQgPSBcImRpc3BsYXlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uTW9kZSA9IF91dGlsLkFubm90YXRpb25Nb2RlLkVOQUJMRSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm0gPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlTGF5ZXIgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhc0ZhY3RvcnkgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsQ29udGVudENvbmZpZ1Byb21pc2UgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFubm90YXRpb25DYW52YXNNYXAgPSBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzWzBdPy5yZW5kZXJJbnRlcmFjdGl2ZUZvcm1zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX2Rpc3BsYXlfdXRpbHMuZGVwcmVjYXRlZCkoXCJyZW5kZXIgbm8gbG9uZ2VyIGFjY2VwdHMgdGhlIGByZW5kZXJJbnRlcmFjdGl2ZUZvcm1zYC1vcHRpb24sIFwiICsgXCJwbGVhc2UgdXNlIHRoZSBgYW5ub3RhdGlvbk1vZGVgLW9wdGlvbiBpbnN0ZWFkLlwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHNbMF0ucmVuZGVySW50ZXJhY3RpdmVGb3JtcyA9PT0gdHJ1ZSAmJiBhbm5vdGF0aW9uTW9kZSA9PT0gX3V0aWwuQW5ub3RhdGlvbk1vZGUuRU5BQkxFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFubm90YXRpb25Nb2RlID0gX3V0aWwuQW5ub3RhdGlvbk1vZGUuRU5BQkxFX0ZPUk1TO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1swXT8uaW5jbHVkZUFubm90YXRpb25TdG9yYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX2Rpc3BsYXlfdXRpbHMuZGVwcmVjYXRlZCkoXCJyZW5kZXIgbm8gbG9uZ2VyIGFjY2VwdHMgdGhlIGBpbmNsdWRlQW5ub3RhdGlvblN0b3JhZ2VgLW9wdGlvbiwgXCIgKyBcInBsZWFzZSB1c2UgdGhlIGBhbm5vdGF0aW9uTW9kZWAtb3B0aW9uIGluc3RlYWQuXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1swXS5pbmNsdWRlQW5ub3RhdGlvblN0b3JhZ2UgPT09IHRydWUgJiYgYW5ub3RhdGlvbk1vZGUgPT09IF91dGlsLkFubm90YXRpb25Nb2RlLkVOQUJMRSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uTW9kZSA9IF91dGlsLkFubm90YXRpb25Nb2RlLkVOQUJMRV9TVE9SQUdFO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhdHMudGltZShcIk92ZXJhbGxcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGludGVudEFyZ3MgPSB0aGlzLl90cmFuc3BvcnQuZ2V0UmVuZGVyaW5nSW50ZW50KGludGVudCwgYW5ub3RhdGlvbk1vZGUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdDbGVhbnVwID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9uYWxDb250ZW50Q29uZmlnUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsQ29udGVudENvbmZpZ1Byb21pc2UgPSB0aGlzLl90cmFuc3BvcnQuZ2V0T3B0aW9uYWxDb250ZW50Q29uZmlnKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbnRlbnRTdGF0ZSA9IHRoaXMuX2ludGVudFN0YXRlcy5nZXQoaW50ZW50QXJncy5jYWNoZUtleSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW50ZW50U3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnRTdGF0ZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRlbnRTdGF0ZXMuc2V0KGludGVudEFyZ3MuY2FjaGVLZXksIGludGVudFN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludGVudFN0YXRlLnN0cmVhbVJlYWRlckNhbmNlbFRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyQ2FuY2VsVGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyQ2FuY2VsVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbnZhc0ZhY3RvcnlJbnN0YW5jZSA9IGNhbnZhc0ZhY3RvcnkgfHwgbmV3IERlZmF1bHRDYW52YXNGYWN0b3J5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvd25lckRvY3VtZW50OiB0aGlzLl9vd25lckRvY3VtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGludGVudFByaW50ID0gISEoaW50ZW50QXJncy5yZW5kZXJpbmdJbnRlbnQgJiBfdXRpbC5SZW5kZXJpbmdJbnRlbnRGbGFnLlBSSU5UKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnRlbnRTdGF0ZS5kaXNwbGF5UmVhZHlDYXBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50U3RhdGUuZGlzcGxheVJlYWR5Q2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuQXJyYXk6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzQXJyYXk6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0Q2h1bms6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdGF0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGF0cy50aW1lKFwiUGFnZSBSZXF1ZXN0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3B1bXBPcGVyYXRvckxpc3QoaW50ZW50QXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBsZXRlID0gZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVudFN0YXRlLnJlbmRlclRhc2tzLmRlbGV0ZShpbnRlcm5hbFJlbmRlclRhc2spO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2xlYW51cEFmdGVyUmVuZGVyIHx8IGludGVudFByaW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ0NsZWFudXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyeUNsZWFudXAoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFJlbmRlclRhc2suY2FwYWJpbGl0eS5yZWplY3QoZXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Fib3J0T3BlcmF0b3JMaXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVudFN0YXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IgOiBuZXcgRXJyb3IoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVybmFsUmVuZGVyVGFzay5jYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3RhdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhdHMudGltZUVuZChcIlJlbmRlcmluZ1wiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGF0cy50aW1lRW5kKFwiT3ZlcmFsbFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnRlcm5hbFJlbmRlclRhc2sgPSBuZXcgSW50ZXJuYWxSZW5kZXJUYXNrKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogY29tcGxldGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhc0NvbnRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlTGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ianM6IHRoaXMub2JqcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tb25PYmpzOiB0aGlzLmNvbW1vbk9ianMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ub3RhdGlvbkNhbnZhc01hcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvckxpc3Q6IGludGVudFN0YXRlLm9wZXJhdG9yTGlzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlSW5kZXg6IHRoaXMuX3BhZ2VJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNGYWN0b3J5OiBjYW52YXNGYWN0b3J5SW5zdGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlUmVxdWVzdEFuaW1hdGlvbkZyYW1lOiAhaW50ZW50UHJpbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGRmQnVnOiB0aGlzLl9wZGZCdWdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgKGludGVudFN0YXRlLnJlbmRlclRhc2tzIHx8PSBuZXcgU2V0KCkpLmFkZChpbnRlcm5hbFJlbmRlclRhc2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVuZGVyVGFzayA9IGludGVybmFsUmVuZGVyVGFzay50YXNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwoW2ludGVudFN0YXRlLmRpc3BsYXlSZWFkeUNhcGFiaWxpdHkucHJvbWlzZSwgb3B0aW9uYWxDb250ZW50Q29uZmlnUHJvbWlzZV0pLnRoZW4oKFt0cmFuc3BhcmVuY3ksIG9wdGlvbmFsQ29udGVudENvbmZpZ10pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nQ2xlYW51cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRzLnRpbWUoXCJSZW5kZXJpbmdcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxSZW5kZXJUYXNrLmluaXRpYWxpemVHcmFwaGljcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcGFyZW5jeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxDb250ZW50Q29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxSZW5kZXJUYXNrLm9wZXJhdG9yTGlzdENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGNvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZW5kZXJUYXNrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0T3BlcmF0b3JMaXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnQgPSBcImRpc3BsYXlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uTW9kZSA9IF91dGlsLkFubm90YXRpb25Nb2RlLkVOQUJMRVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA9IHt9KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBvcGVyYXRvckxpc3RDaGFuZ2VkKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QubGFzdENodW5rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVudFN0YXRlLm9wTGlzdFJlYWRDYXBhYmlsaXR5LnJlc29sdmUoaW50ZW50U3RhdGUub3BlcmF0b3JMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50U3RhdGUucmVuZGVyVGFza3MuZGVsZXRlKG9wTGlzdFRhc2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW50ZW50QXJncyA9IHRoaXMuX3RyYW5zcG9ydC5nZXRSZW5kZXJpbmdJbnRlbnQoaW50ZW50LCBhbm5vdGF0aW9uTW9kZSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbnRlbnRTdGF0ZSA9IHRoaXMuX2ludGVudFN0YXRlcy5nZXQoaW50ZW50QXJncy5jYWNoZUtleSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW50ZW50U3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnRTdGF0ZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRlbnRTdGF0ZXMuc2V0KGludGVudEFyZ3MuY2FjaGVLZXksIGludGVudFN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9wTGlzdFRhc2s7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW50ZW50U3RhdGUub3BMaXN0UmVhZENhcGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcExpc3RUYXNrID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcExpc3RUYXNrLm9wZXJhdG9yTGlzdENoYW5nZWQgPSBvcGVyYXRvckxpc3RDaGFuZ2VkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVudFN0YXRlLm9wTGlzdFJlYWRDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcyB8fD0gbmV3IFNldCgpKS5hZGQob3BMaXN0VGFzayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50U3RhdGUub3BlcmF0b3JMaXN0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbkFycmF5OiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnc0FycmF5OiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdENodW5rOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3RhdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhdHMudGltZShcIlBhZ2UgUmVxdWVzdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wdW1wT3BlcmF0b3JMaXN0KGludGVudEFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW50ZW50U3RhdGUub3BMaXN0UmVhZENhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbVRleHRDb250ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVDb21iaW5lVGV4dEl0ZW1zID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNsdWRlTWFya2VkQ29udGVudCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gPSB7fSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgVEVYVF9DT05URU5UX0NIVU5LX1NJWkUgPSAxMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0Lm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoU3RyZWFtKFwiR2V0VGV4dENvbnRlbnRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VJbmRleDogdGhpcy5fcGFnZUluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbWJpbmVUZXh0SXRlbXM6IGRpc2FibGVDb21iaW5lVGV4dEl0ZW1zICE9PSB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1ZGVNYXJrZWRDb250ZW50OiBpbmNsdWRlTWFya2VkQ29udGVudCA9PT0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hXYXRlck1hcms6IFRFWFRfQ09OVEVOVF9DSFVOS19TSVpFLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZSh0ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGV4dENvbnRlbnQuaXRlbXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRUZXh0Q29udGVudChwYXJhbXMgPSB7fSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RyYW5zcG9ydC5faHRtbEZvclhmYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFhmYSgpLnRoZW4oeGZhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF94ZmFfdGV4dC5YZmFUZXh0LnRleHRDb250ZW50KHhmYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlYWRhYmxlU3RyZWFtID0gdGhpcy5zdHJlYW1UZXh0Q29udGVudChwYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBwdW1wKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVhZCgpLnRoZW4oZnVuY3Rpb24gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0ZXh0Q29udGVudC5zdHlsZXMsIHZhbHVlLnN0eWxlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Q29udGVudC5pdGVtcy5wdXNoKC4uLnZhbHVlLml0ZW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1bXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWFkZXIgPSByZWFkYWJsZVN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Q29udGVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZXM6IE9iamVjdC5jcmVhdGUobnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1bXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0U3RydWN0VHJlZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdHJ1Y3RUcmVlUHJvbWlzZSB8fD0gdGhpcy5fdHJhbnNwb3J0LmdldFN0cnVjdFRyZWUodGhpcy5fcGFnZUluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9kZXN0cm95KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2FpdE9uID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaW50ZW50U3RhdGUgb2YgdGhpcy5faW50ZW50U3RhdGVzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWJvcnRPcGVyYXRvckxpc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnRTdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uOiBuZXcgRXJyb3IoXCJQYWdlIHdhcyBkZXN0cm95ZWQuXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JjZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludGVudFN0YXRlLm9wTGlzdFJlYWRDYXBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaW50ZXJuYWxSZW5kZXJUYXNrIG9mIGludGVudFN0YXRlLnJlbmRlclRhc2tzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhaXRPbi5wdXNoKGludGVybmFsUmVuZGVyVGFzay5jb21wbGV0ZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFJlbmRlclRhc2suY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9ianMuY2xlYXIoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5ub3RhdGlvblByb21pc2VzLmNsZWFyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2pzQWN0aW9uc1Byb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RydWN0VHJlZVByb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nQ2xlYW51cCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHdhaXRPbik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKHJlc2V0U3RhdHMgPSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nQ2xlYW51cCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdHJ5Q2xlYW51cChyZXNldFN0YXRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF90cnlDbGVhbnVwKHJlc2V0U3RhdHMgPSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBlbmRpbmdDbGVhbnVwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJUYXNrcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvckxpc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gb2YgdGhpcy5faW50ZW50U3RhdGVzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbmRlclRhc2tzLnNpemUgPiAwIHx8ICFvcGVyYXRvckxpc3QubGFzdENodW5rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ludGVudFN0YXRlcy5jbGVhcigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9ianMuY2xlYXIoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5ub3RhdGlvblByb21pc2VzLmNsZWFyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2pzQWN0aW9uc1Byb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RydWN0VHJlZVByb21pc2UgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzZXRTdGF0cyAmJiB0aGlzLl9zdGF0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRzID0gbmV3IF9kaXNwbGF5X3V0aWxzLlN0YXRUaW1lcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdDbGVhbnVwID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9zdGFydFJlbmRlclBhZ2UodHJhbnNwYXJlbmN5LCBjYWNoZUtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW50ZW50U3RhdGUgPSB0aGlzLl9pbnRlbnRTdGF0ZXMuZ2V0KGNhY2hlS2V5KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnRlbnRTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhdHMudGltZUVuZChcIlBhZ2UgUmVxdWVzdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludGVudFN0YXRlLmRpc3BsYXlSZWFkeUNhcGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnRTdGF0ZS5kaXNwbGF5UmVhZHlDYXBhYmlsaXR5LnJlc29sdmUodHJhbnNwYXJlbmN5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9yZW5kZXJQYWdlQ2h1bmsob3BlcmF0b3JMaXN0Q2h1bmssIGludGVudFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBvcGVyYXRvckxpc3RDaHVuay5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50U3RhdGUub3BlcmF0b3JMaXN0LmZuQXJyYXkucHVzaChvcGVyYXRvckxpc3RDaHVuay5mbkFycmF5W2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QuYXJnc0FycmF5LnB1c2gob3BlcmF0b3JMaXN0Q2h1bmsuYXJnc0FycmF5W2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50U3RhdGUub3BlcmF0b3JMaXN0Lmxhc3RDaHVuayA9IG9wZXJhdG9yTGlzdENodW5rLmxhc3RDaHVuaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpbnRlcm5hbFJlbmRlclRhc2sgb2YgaW50ZW50U3RhdGUucmVuZGVyVGFza3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFJlbmRlclRhc2sub3BlcmF0b3JMaXN0Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BlcmF0b3JMaXN0Q2h1bmsubGFzdENodW5rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJ5Q2xlYW51cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX3B1bXBPcGVyYXRvckxpc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyaW5nSW50ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVLZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVhZGFibGVTdHJlYW0gPSB0aGlzLl90cmFuc3BvcnQubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhTdHJlYW0oXCJHZXRPcGVyYXRvckxpc3RcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VJbmRleDogdGhpcy5fcGFnZUluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVudDogcmVuZGVyaW5nSW50ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFubm90YXRpb25TdG9yYWdlOiByZW5kZXJpbmdJbnRlbnQgJiBfdXRpbC5SZW5kZXJpbmdJbnRlbnRGbGFnLkFOTk9UQVRJT05TX1NUT1JBR0UgPyB0aGlzLl90cmFuc3BvcnQuYW5ub3RhdGlvblN0b3JhZ2Uuc2VyaWFsaXphYmxlIDogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IHJlYWRhYmxlU3RyZWFtLmdldFJlYWRlcigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnRlbnRTdGF0ZSA9IHRoaXMuX2ludGVudFN0YXRlcy5nZXQoY2FjaGVLZXkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnRTdGF0ZS5zdHJlYW1SZWFkZXIgPSByZWFkZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHB1bXAgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlYWQoKS50aGVuKCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl90cmFuc3BvcnQuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJQYWdlQ2h1bmsodmFsdWUsIGludGVudFN0YXRlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdW1wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVhc29uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdHJhbnNwb3J0LmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludGVudFN0YXRlLm9wZXJhdG9yTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50U3RhdGUub3BlcmF0b3JMaXN0Lmxhc3RDaHVuayA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaW50ZXJuYWxSZW5kZXJUYXNrIG9mIGludGVudFN0YXRlLnJlbmRlclRhc2tzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxSZW5kZXJUYXNrLm9wZXJhdG9yTGlzdENoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJ5Q2xlYW51cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludGVudFN0YXRlLmRpc3BsYXlSZWFkeUNhcGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVudFN0YXRlLmRpc3BsYXlSZWFkeUNhcGFiaWxpdHkucmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW50ZW50U3RhdGUub3BMaXN0UmVhZENhcGFiaWxpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVudFN0YXRlLm9wTGlzdFJlYWRDYXBhYmlsaXR5LnJlamVjdChyZWFzb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgcmVhc29uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBwdW1wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfYWJvcnRPcGVyYXRvckxpc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVudFN0YXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JjZSA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWludGVudFN0YXRlLnN0cmVhbVJlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmb3JjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcy5zaXplID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlYXNvbiBpbnN0YW5jZW9mIF9kaXNwbGF5X3V0aWxzLlJlbmRlcmluZ0NhbmNlbGxlZEV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnRTdGF0ZS5zdHJlYW1SZWFkZXJDYW5jZWxUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hYm9ydE9wZXJhdG9yTGlzdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50U3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyQ2FuY2VsVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFJFTkRFUklOR19DQU5DRUxMRURfVElNRU9VVCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVudFN0YXRlLnN0cmVhbVJlYWRlci5jYW5jZWwobmV3IF91dGlsLkFib3J0RXhjZXB0aW9uKHJlYXNvbi5tZXNzYWdlKSkuY2F0Y2goKCkgPT4ge30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RyYW5zcG9ydC5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2N1ckNhY2hlS2V5LCBjdXJJbnRlbnRTdGF0ZV0gb2YgdGhpcy5faW50ZW50U3RhdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckludGVudFN0YXRlID09PSBpbnRlbnRTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRlbnRTdGF0ZXMuZGVsZXRlKGN1ckNhY2hlS2V5KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0IHN0YXRzKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRzO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLlBERlBhZ2VQcm94eSA9IFBERlBhZ2VQcm94eTtcblxuICAgICAgICAgICAgICAgIGNsYXNzIExvb3BiYWNrUG9ydCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWZlcnJlZCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2Uob2JqLCB0cmFuc2ZlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHN0cnVjdHVyZWRDbG9uZShvYmosIHRyYW5zZmVycylcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlZmVycmVkLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRlcm1pbmF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVycy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLkxvb3BiYWNrUG9ydCA9IExvb3BiYWNrUG9ydDtcbiAgICAgICAgICAgICAgICBjb25zdCBQREZXb3JrZXJVdGlsID0ge1xuICAgICAgICAgICAgICAgICAgICBpc1dvcmtlckRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tXb3JrZXJTcmM6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGZha2VXb3JrZXJJZDogMFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5QREZXb3JrZXJVdGlsID0gUERGV29ya2VyVXRpbDtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfaXNfbm9kZS5pc05vZGVKUyAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBQREZXb3JrZXJVdGlsLmlzV29ya2VyRGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgUERGV29ya2VyVXRpbC5mYWxsYmFja1dvcmtlclNyYyA9IFwiLi9wZGYud29ya2VyLmpzXCI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwZGZqc0ZpbGVQYXRoID0gZG9jdW1lbnQ/LmN1cnJlbnRTY3JpcHQ/LnNyYztcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBkZmpzRmlsZVBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQREZXb3JrZXJVdGlsLmZhbGxiYWNrV29ya2VyU3JjID0gcGRmanNGaWxlUGF0aC5yZXBsYWNlKC8oXFwuKD86bWluXFwuKT9qcykoXFw/LiopPyQvaSwgXCIud29ya2VyJDEkMlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIFBERldvcmtlclV0aWwuaXNTYW1lT3JpZ2luID0gZnVuY3Rpb24gKGJhc2VVcmwsIG90aGVyVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYmFzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlID0gbmV3IFVSTChiYXNlVXJsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYmFzZS5vcmlnaW4gfHwgYmFzZS5vcmlnaW4gPT09IFwibnVsbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvdGhlciA9IG5ldyBVUkwob3RoZXJVcmwsIGJhc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJhc2Uub3JpZ2luID09PSBvdGhlci5vcmlnaW47XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgUERGV29ya2VyVXRpbC5jcmVhdGVDRE5XcmFwcGVyID0gZnVuY3Rpb24gKHVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd3JhcHBlciA9IGBpbXBvcnRTY3JpcHRzKFwiJHt1cmx9XCIpO2A7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihbd3JhcHBlcl0pKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBQREZXb3JrZXIge1xuICAgICAgICAgICAgICAgICAgICBzdGF0aWMgI3dvcmtlclBvcnRzID0gbmV3IFdlYWtNYXAoKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyYm9zaXR5ID0gKDAsIF91dGlsLmdldFZlcmJvc2l0eUxldmVsKSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gPSB7fSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcnQgJiYgUERGV29ya2VyLiN3b3JrZXJQb3J0cy5oYXMocG9ydCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgdXNlIG1vcmUgdGhhbiBvbmUgUERGV29ya2VyIHBlciBwb3J0LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZlcmJvc2l0eSA9IHZlcmJvc2l0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BvcnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fd2ViV29ya2VyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21lc3NhZ2VIYW5kbGVyID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQREZXb3JrZXIuI3dvcmtlclBvcnRzLnNldChwb3J0LCB0aGlzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemVGcm9tUG9ydChwb3J0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0IHByb21pc2UoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVhZHlDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgcG9ydCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wb3J0O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0IG1lc3NhZ2VIYW5kbGVyKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21lc3NhZ2VIYW5kbGVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX2luaXRpYWxpemVGcm9tUG9ydChwb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3J0ID0gcG9ydDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21lc3NhZ2VIYW5kbGVyID0gbmV3IF9tZXNzYWdlX2hhbmRsZXIuTWVzc2FnZUhhbmRsZXIoXCJtYWluXCIsIFwid29ya2VyXCIsIHBvcnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZXNzYWdlSGFuZGxlci5vbihcInJlYWR5XCIsIGZ1bmN0aW9uICgpIHt9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZHlDYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9pbml0aWFsaXplKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBXb3JrZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgIVBERldvcmtlclV0aWwuaXNXb3JrZXJEaXNhYmxlZCAmJiAhUERGV29ya2VyLl9tYWluVGhyZWFkV29ya2VyTWVzc2FnZUhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgd29ya2VyU3JjID0gUERGV29ya2VyLndvcmtlclNyYztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghUERGV29ya2VyVXRpbC5pc1NhbWVPcmlnaW4od2luZG93LmxvY2F0aW9uLmhyZWYsIHdvcmtlclNyYykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlclNyYyA9IFBERldvcmtlclV0aWwuY3JlYXRlQ0ROV3JhcHBlcihuZXcgVVJMKHdvcmtlclNyYywgd2luZG93LmxvY2F0aW9uKS5ocmVmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmtlciA9IG5ldyBXb3JrZXIod29ya2VyU3JjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZUhhbmRsZXIgPSBuZXcgX21lc3NhZ2VfaGFuZGxlci5NZXNzYWdlSGFuZGxlcihcIm1haW5cIiwgXCJ3b3JrZXJcIiwgd29ya2VyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXJtaW5hdGVFYXJseSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlci5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgb25Xb3JrZXJFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXIudGVybWluYXRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eS5yZWplY3QobmV3IEVycm9yKFwiV29ya2VyIHdhcyBkZXN0cm95ZWRcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXR1cEZha2VXb3JrZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvbldvcmtlckVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl93ZWJXb3JrZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hdGVFYXJseSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlci5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgb25Xb3JrZXJFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwidGVzdFwiLCBkYXRhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlci5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgb25Xb3JrZXJFcnJvcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1pbmF0ZUVhcmx5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21lc3NhZ2VIYW5kbGVyID0gbWVzc2FnZUhhbmRsZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9ydCA9IHdvcmtlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl93ZWJXb3JrZXIgPSB3b3JrZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkeUNhcGFiaWxpdHkucmVzb2x2ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUhhbmRsZXIuc2VuZChcImNvbmZpZ3VyZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcmJvc2l0eTogdGhpcy52ZXJib3NpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0dXBGYWtlV29ya2VyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29ya2VyLnRlcm1pbmF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUhhbmRsZXIub24oXCJyZWFkeVwiLCBkYXRhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtlci5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgb25Xb3JrZXJFcnJvcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1pbmF0ZUVhcmx5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRUZXN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0dXBGYWtlV29ya2VyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbmRUZXN0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVzdE9iaiA9IG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5zZW5kKFwidGVzdFwiLCB0ZXN0T2JqLCBbdGVzdE9iai5idWZmZXJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kVGVzdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwuaW5mbykoXCJUaGUgd29ya2VyIGhhcyBiZWVuIGRpc2FibGVkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldHVwRmFrZVdvcmtlcigpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX3NldHVwRmFrZVdvcmtlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghUERGV29ya2VyVXRpbC5pc1dvcmtlckRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiU2V0dGluZyB1cCBmYWtlIHdvcmtlci5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUERGV29ya2VyVXRpbC5pc1dvcmtlckRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgUERGV29ya2VyLl9zZXR1cEZha2VXb3JrZXJHbG9iYWwudGhlbihXb3JrZXJNZXNzYWdlSGFuZGxlciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eS5yZWplY3QobmV3IEVycm9yKFwiV29ya2VyIHdhcyBkZXN0cm95ZWRcIikpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3J0ID0gbmV3IExvb3BiYWNrUG9ydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BvcnQgPSBwb3J0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gYGZha2Uke1BERldvcmtlclV0aWwuZmFrZVdvcmtlcklkKyt9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JrZXJIYW5kbGVyID0gbmV3IF9tZXNzYWdlX2hhbmRsZXIuTWVzc2FnZUhhbmRsZXIoaWQgKyBcIl93b3JrZXJcIiwgaWQsIHBvcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdvcmtlck1lc3NhZ2VIYW5kbGVyLnNldHVwKHdvcmtlckhhbmRsZXIsIHBvcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VIYW5kbGVyID0gbmV3IF9tZXNzYWdlX2hhbmRsZXIuTWVzc2FnZUhhbmRsZXIoaWQsIGlkICsgXCJfd29ya2VyXCIsIHBvcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21lc3NhZ2VIYW5kbGVyID0gbWVzc2FnZUhhbmRsZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkeUNhcGFiaWxpdHkucmVzb2x2ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUhhbmRsZXIuc2VuZChcImNvbmZpZ3VyZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcmJvc2l0eTogdGhpcy52ZXJib3NpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKHJlYXNvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZHlDYXBhYmlsaXR5LnJlamVjdChuZXcgRXJyb3IoYFNldHRpbmcgdXAgZmFrZSB3b3JrZXIgZmFpbGVkOiBcIiR7cmVhc29uLm1lc3NhZ2V9XCIuYCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBkZXN0cm95KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fd2ViV29ya2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fd2ViV29ya2VyLnRlcm1pbmF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fd2ViV29ya2VyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgUERGV29ya2VyLiN3b3JrZXJQb3J0cy5kZWxldGUodGhpcy5fcG9ydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3J0ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX21lc3NhZ2VIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVzc2FnZUhhbmRsZXIuZGVzdHJveSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVzc2FnZUhhbmRsZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhdGljIGZyb21Qb3J0KHBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXJhbXM/LnBvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQREZXb3JrZXIuZnJvbVBvcnQgLSBpbnZhbGlkIG1ldGhvZCBzaWduYXR1cmUuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4jd29ya2VyUG9ydHMuaGFzKHBhcmFtcy5wb3J0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiN3b3JrZXJQb3J0cy5nZXQocGFyYW1zLnBvcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBERldvcmtlcihwYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhdGljIGdldCB3b3JrZXJTcmMoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3dvcmtlcl9vcHRpb25zLkdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF93b3JrZXJfb3B0aW9ucy5HbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclNyYztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFBERldvcmtlclV0aWwuZmFsbGJhY2tXb3JrZXJTcmMgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9pc19ub2RlLmlzTm9kZUpTKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfZGlzcGxheV91dGlscy5kZXByZWNhdGVkKSgnTm8gXCJHbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclNyY1wiIHNwZWNpZmllZC4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUERGV29ya2VyVXRpbC5mYWxsYmFja1dvcmtlclNyYztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBcIkdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjXCIgc3BlY2lmaWVkLicpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhdGljIGdldCBfbWFpblRocmVhZFdvcmtlck1lc3NhZ2VIYW5kbGVyKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2xvYmFsVGhpcy5wZGZqc1dvcmtlcj8uV29ya2VyTWVzc2FnZUhhbmRsZXIgfHwgbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzdGF0aWMgZ2V0IF9zZXR1cEZha2VXb3JrZXJHbG9iYWwoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2FkZXIgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFpbldvcmtlck1lc3NhZ2VIYW5kbGVyID0gdGhpcy5fbWFpblRocmVhZFdvcmtlck1lc3NhZ2VIYW5kbGVyO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1haW5Xb3JrZXJNZXNzYWdlSGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFpbldvcmtlck1lc3NhZ2VIYW5kbGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNfbm9kZS5pc05vZGVKUyAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmtlciA9IGV2YWwoXCJyZXF1aXJlXCIpKHRoaXMud29ya2VyU3JjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdvcmtlci5Xb3JrZXJNZXNzYWdlSGFuZGxlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCAoMCwgX2Rpc3BsYXlfdXRpbHMubG9hZFNjcmlwdCkodGhpcy53b3JrZXJTcmMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cucGRmanNXb3JrZXIuV29ya2VyTWVzc2FnZUhhbmRsZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF91dGlsLnNoYWRvdykodGhpcywgXCJfc2V0dXBGYWtlV29ya2VyR2xvYmFsXCIsIGxvYWRlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXhwb3J0cy5QREZXb3JrZXIgPSBQREZXb3JrZXI7XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBQREZXb3JrZXIuZ2V0V29ya2VyU3JjID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF9kaXNwbGF5X3V0aWxzLmRlcHJlY2F0ZWQpKFwiYFBERldvcmtlci5nZXRXb3JrZXJTcmMoKWAsIHBsZWFzZSB1c2UgYFBERldvcmtlci53b3JrZXJTcmNgIGluc3RlYWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud29ya2VyU3JjO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIFdvcmtlclRyYW5zcG9ydCB7XG4gICAgICAgICAgICAgICAgICAgICNkb2NTdGF0cyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICNwYWdlQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICAgICAgICAgICNwYWdlUHJvbWlzZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICAgICAgICAgICNtZXRhZGF0YVByb21pc2UgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2VIYW5kbGVyLCBsb2FkaW5nVGFzaywgbmV0d29ya1N0cmVhbSwgcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2VIYW5kbGVyID0gbWVzc2FnZUhhbmRsZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmdUYXNrID0gbG9hZGluZ1Rhc2s7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1vbk9ianMgPSBuZXcgUERGT2JqZWN0cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb250TG9hZGVyID0gbmV3IF9mb250X2xvYWRlci5Gb250TG9hZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2NJZDogbG9hZGluZ1Rhc2suZG9jSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25VbnN1cHBvcnRlZEZlYXR1cmU6IHRoaXMuX29uVW5zdXBwb3J0ZWRGZWF0dXJlLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJEb2N1bWVudDogcGFyYW1zLm93bmVyRG9jdW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVFbGVtZW50OiBwYXJhbXMuc3R5bGVFbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhcmFtcyA9IHBhcmFtcztcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXJhbXMudXNlV29ya2VyRmV0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkNNYXBSZWFkZXJGYWN0b3J5ID0gbmV3IHBhcmFtcy5DTWFwUmVhZGVyRmFjdG9yeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VVcmw6IHBhcmFtcy5jTWFwVXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0NvbXByZXNzZWQ6IHBhcmFtcy5jTWFwUGFja2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5TdGFuZGFyZEZvbnREYXRhRmFjdG9yeSA9IG5ldyBwYXJhbXMuU3RhbmRhcmRGb250RGF0YUZhY3Rvcnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlVXJsOiBwYXJhbXMuc3RhbmRhcmRGb250RGF0YVVybFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95Q2FwYWJpbGl0eSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXNzd29yZENhcGFiaWxpdHkgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbmV0d29ya1N0cmVhbSA9IG5ldHdvcmtTdHJlYW07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mdWxsUmVhZGVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RQcm9ncmVzcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvd25sb2FkSW5mb0NhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHVwTWVzc2FnZUhhbmRsZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBhbm5vdGF0aW9uU3RvcmFnZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX3V0aWwuc2hhZG93KSh0aGlzLCBcImFubm90YXRpb25TdG9yYWdlXCIsIG5ldyBfYW5ub3RhdGlvbl9zdG9yYWdlLkFubm90YXRpb25TdG9yYWdlKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0IHN0YXRzKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuI2RvY1N0YXRzO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0UmVuZGVyaW5nSW50ZW50KGludGVudCwgYW5ub3RhdGlvbk1vZGUgPSBfdXRpbC5Bbm5vdGF0aW9uTW9kZS5FTkFCTEUsIGlzT3BMaXN0ID0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZW5kZXJpbmdJbnRlbnQgPSBfdXRpbC5SZW5kZXJpbmdJbnRlbnRGbGFnLkRJU1BMQVk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGFzdE1vZGlmaWVkID0gXCJcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChpbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYW55XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmluZ0ludGVudCA9IF91dGlsLlJlbmRlcmluZ0ludGVudEZsYWcuQU5ZO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkaXNwbGF5XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInByaW50XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmluZ0ludGVudCA9IF91dGlsLlJlbmRlcmluZ0ludGVudEZsYWcuUFJJTlQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKGBnZXRSZW5kZXJpbmdJbnRlbnQgLSBpbnZhbGlkIGludGVudDogJHtpbnRlbnR9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoYW5ub3RhdGlvbk1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25Nb2RlLkRJU0FCTEU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmluZ0ludGVudCArPSBfdXRpbC5SZW5kZXJpbmdJbnRlbnRGbGFnLkFOTk9UQVRJT05TX0RJU0FCTEU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uTW9kZS5FTkFCTEU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uTW9kZS5FTkFCTEVfRk9STVM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmluZ0ludGVudCArPSBfdXRpbC5SZW5kZXJpbmdJbnRlbnRGbGFnLkFOTk9UQVRJT05TX0ZPUk1TO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvbk1vZGUuRU5BQkxFX1NUT1JBR0U6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmluZ0ludGVudCArPSBfdXRpbC5SZW5kZXJpbmdJbnRlbnRGbGFnLkFOTk9UQVRJT05TX1NUT1JBR0U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNb2RpZmllZCA9IHRoaXMuYW5ub3RhdGlvblN0b3JhZ2UubGFzdE1vZGlmaWVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKShgZ2V0UmVuZGVyaW5nSW50ZW50IC0gaW52YWxpZCBhbm5vdGF0aW9uTW9kZTogJHthbm5vdGF0aW9uTW9kZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzT3BMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyaW5nSW50ZW50ICs9IF91dGlsLlJlbmRlcmluZ0ludGVudEZsYWcuT1BMSVNUO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmluZ0ludGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZUtleTogYCR7cmVuZGVyaW5nSW50ZW50fV8ke2xhc3RNb2RpZmllZH1gXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZGVzdHJveSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3lDYXBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVzdHJveUNhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95Q2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Bhc3N3b3JkQ2FwYWJpbGl0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bhc3N3b3JkQ2FwYWJpbGl0eS5yZWplY3QobmV3IEVycm9yKFwiV29ya2VyIHdhcyBkZXN0cm95ZWQgZHVyaW5nIG9uUGFzc3dvcmQgY2FsbGJhY2tcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3YWl0T24gPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBwYWdlIG9mIHRoaXMuI3BhZ2VDYWNoZS52YWx1ZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhaXRPbi5wdXNoKHBhZ2UuX2Rlc3Ryb3koKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI3BhZ2VDYWNoZS5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jcGFnZVByb21pc2VzLmNsZWFyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KFwiYW5ub3RhdGlvblN0b3JhZ2VcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFubm90YXRpb25TdG9yYWdlLnJlc2V0TW9kaWZpZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVybWluYXRlZCA9IHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiVGVybWluYXRlXCIsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FpdE9uLnB1c2godGVybWluYXRlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBQcm9taXNlLmFsbCh3YWl0T24pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tbW9uT2Jqcy5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9udExvYWRlci5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI21ldGFkYXRhUHJvbWlzZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2V0RmllbGRPYmplY3RzUHJvbWlzZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFzSlNBY3Rpb25zUHJvbWlzZSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fbmV0d29ya1N0cmVhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9uZXR3b3JrU3RyZWFtLmNhbmNlbEFsbFJlcXVlc3RzKG5ldyBfdXRpbC5BYm9ydEV4Y2VwdGlvbihcIldvcmtlciB3YXMgdGVybWluYXRlZC5cIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1lc3NhZ2VIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZUhhbmRsZXIuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2VIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3lDYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMuZGVzdHJveUNhcGFiaWxpdHkucmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlc3Ryb3lDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzZXR1cE1lc3NhZ2VIYW5kbGVyKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VIYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmdUYXNrXG4gICAgICAgICAgICAgICAgICAgICAgICB9ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwiR2V0UmVhZGVyXCIsIChkYXRhLCBzaW5rKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLmFzc2VydCkodGhpcy5fbmV0d29ya1N0cmVhbSwgXCJHZXRSZWFkZXIgLSBubyBgSVBERlN0cmVhbWAgaW5zdGFuY2UgYXZhaWxhYmxlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mdWxsUmVhZGVyID0gdGhpcy5fbmV0d29ya1N0cmVhbS5nZXRGdWxsUmVhZGVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mdWxsUmVhZGVyLm9uUHJvZ3Jlc3MgPSBldnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXN0UHJvZ3Jlc3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkZWQ6IGV2dC5sb2FkZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbDogZXZ0LnRvdGFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpbmsub25QdWxsID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mdWxsUmVhZGVyLnJlYWQoKS50aGVuKGZ1bmN0aW9uICh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaW5rLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwuYXNzZXJ0KSgoMCwgX3V0aWwuaXNBcnJheUJ1ZmZlcikodmFsdWUpLCBcIkdldFJlYWRlciAtIGV4cGVjdGVkIGFuIEFycmF5QnVmZmVyLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpbmsuZW5xdWV1ZShuZXcgVWludDhBcnJheSh2YWx1ZSksIDEsIFt2YWx1ZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChyZWFzb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2luay5lcnJvcihyZWFzb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2luay5vbkNhbmNlbCA9IHJlYXNvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxSZWFkZXIuY2FuY2VsKHJlYXNvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2luay5yZWFkeS5jYXRjaChyZWFkeVJlYXNvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IHJlYWR5UmVhc29uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5vbihcIlJlYWRlckhlYWRlcnNSZWFkeVwiLCBkYXRhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJzQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmdWxsUmVhZGVyID0gdGhpcy5fZnVsbFJlYWRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxsUmVhZGVyLmhlYWRlcnNSZWFkeS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmdWxsUmVhZGVyLmlzU3RyZWFtaW5nU3VwcG9ydGVkIHx8ICFmdWxsUmVhZGVyLmlzUmFuZ2VTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9sYXN0UHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nVGFzay5vblByb2dyZXNzPy4odGhpcy5fbGFzdFByb2dyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbFJlYWRlci5vblByb2dyZXNzID0gZXZ0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nVGFzay5vblByb2dyZXNzPy4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkZWQ6IGV2dC5sb2FkZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsOiBldnQudG90YWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzQ2FwYWJpbGl0eS5yZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU3RyZWFtaW5nU3VwcG9ydGVkOiBmdWxsUmVhZGVyLmlzU3RyZWFtaW5nU3VwcG9ydGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNSYW5nZVN1cHBvcnRlZDogZnVsbFJlYWRlci5pc1JhbmdlU3VwcG9ydGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudExlbmd0aDogZnVsbFJlYWRlci5jb250ZW50TGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGhlYWRlcnNDYXBhYmlsaXR5LnJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhlYWRlcnNDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwiR2V0UmFuZ2VSZWFkZXJcIiwgKGRhdGEsIHNpbmspID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwuYXNzZXJ0KSh0aGlzLl9uZXR3b3JrU3RyZWFtLCBcIkdldFJhbmdlUmVhZGVyIC0gbm8gYElQREZTdHJlYW1gIGluc3RhbmNlIGF2YWlsYWJsZS5cIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByYW5nZVJlYWRlciA9IHRoaXMuX25ldHdvcmtTdHJlYW0uZ2V0UmFuZ2VSZWFkZXIoZGF0YS5iZWdpbiwgZGF0YS5lbmQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyYW5nZVJlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaW5rLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaW5rLm9uUHVsbCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VSZWFkZXIucmVhZCgpLnRoZW4oZnVuY3Rpb24gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpbmsuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC5hc3NlcnQpKCgwLCBfdXRpbC5pc0FycmF5QnVmZmVyKSh2YWx1ZSksIFwiR2V0UmFuZ2VSZWFkZXIgLSBleHBlY3RlZCBhbiBBcnJheUJ1ZmZlci5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaW5rLmVucXVldWUobmV3IFVpbnQ4QXJyYXkodmFsdWUpLCAxLCBbdmFsdWVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2gocmVhc29uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpbmsuZXJyb3IocmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpbmsub25DYW5jZWwgPSByZWFzb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZVJlYWRlci5jYW5jZWwocmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2luay5yZWFkeS5jYXRjaChyZWFkeVJlYXNvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IHJlYWR5UmVhc29uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5vbihcIkdldERvY1wiLCAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGRmSW5mb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbnVtUGFnZXMgPSBwZGZJbmZvLm51bVBhZ2VzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2h0bWxGb3JYZmEgPSBwZGZJbmZvLmh0bWxGb3JYZmE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHBkZkluZm8uaHRtbEZvclhmYTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmdUYXNrLl9jYXBhYmlsaXR5LnJlc29sdmUobmV3IFBERkRvY3VtZW50UHJveHkocGRmSW5mbywgdGhpcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5vbihcIkRvY0V4Y2VwdGlvblwiLCBmdW5jdGlvbiAoZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVhc29uO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChleC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJQYXNzd29yZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uID0gbmV3IF91dGlsLlBhc3N3b3JkRXhjZXB0aW9uKGV4Lm1lc3NhZ2UsIGV4LmNvZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkludmFsaWRQREZFeGNlcHRpb25cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbiA9IG5ldyBfdXRpbC5JbnZhbGlkUERGRXhjZXB0aW9uKGV4Lm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIk1pc3NpbmdQREZFeGNlcHRpb25cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbiA9IG5ldyBfdXRpbC5NaXNzaW5nUERGRXhjZXB0aW9uKGV4Lm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uID0gbmV3IF91dGlsLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbihleC5tZXNzYWdlLCBleC5zdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlVua25vd25FcnJvckV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uID0gbmV3IF91dGlsLlVua25vd25FcnJvckV4Y2VwdGlvbihleC5tZXNzYWdlLCBleC5kZXRhaWxzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiRG9jRXhjZXB0aW9uIC0gZXhwZWN0ZWQgYSB2YWxpZCBFcnJvci5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGluZ1Rhc2suX2NhcGFiaWxpdHkucmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwiUGFzc3dvcmRSZXF1ZXN0XCIsIGV4Y2VwdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFzc3dvcmRDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvYWRpbmdUYXNrLm9uUGFzc3dvcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlUGFzc3dvcmQgPSBwYXNzd29yZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFzc3dvcmQgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bhc3N3b3JkQ2FwYWJpbGl0eS5yZWplY3QocGFzc3dvcmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXNzd29yZENhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmdUYXNrLm9uUGFzc3dvcmQodXBkYXRlUGFzc3dvcmQsIGV4Y2VwdGlvbi5jb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bhc3N3b3JkQ2FwYWJpbGl0eS5yZWplY3QoZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFzc3dvcmRDYXBhYmlsaXR5LnJlamVjdChuZXcgX3V0aWwuUGFzc3dvcmRFeGNlcHRpb24oZXhjZXB0aW9uLm1lc3NhZ2UsIGV4Y2VwdGlvbi5jb2RlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Bhc3N3b3JkQ2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5vbihcIkRhdGFMb2FkZWRcIiwgZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGluZ1Rhc2sub25Qcm9ncmVzcz8uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVkOiBkYXRhLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWw6IGRhdGEubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZEluZm9DYXBhYmlsaXR5LnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwiU3RhcnRSZW5kZXJQYWdlXCIsIGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFnZSA9IHRoaXMuI3BhZ2VDYWNoZS5nZXQoZGF0YS5wYWdlSW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZS5fc3RhcnRSZW5kZXJQYWdlKGRhdGEudHJhbnNwYXJlbmN5LCBkYXRhLmNhY2hlS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUhhbmRsZXIub24oXCJjb21tb25vYmpcIiwgKFtpZCwgdHlwZSwgZXhwb3J0ZWREYXRhXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29tbW9uT2Jqcy5oYXMoaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkZvbnRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHRoaXMuX3BhcmFtcztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiZXJyb3JcIiBpbiBleHBvcnRlZERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleHBvcnRlZEVycm9yID0gZXhwb3J0ZWREYXRhLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKShgRXJyb3IgZHVyaW5nIGZvbnQgbG9hZGluZzogJHtleHBvcnRlZEVycm9yfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tbW9uT2Jqcy5yZXNvbHZlKGlkLCBleHBvcnRlZEVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZvbnRSZWdpc3RyeSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMucGRmQnVnICYmIGdsb2JhbFRoaXMuRm9udEluc3BlY3Rvcj8uZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRSZWdpc3RyeSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJGb250KGZvbnQsIHVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsVGhpcy5Gb250SW5zcGVjdG9yLmZvbnRBZGRlZChmb250LCB1cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb250ID0gbmV3IF9mb250X2xvYWRlci5Gb250RmFjZU9iamVjdChleHBvcnRlZERhdGEsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0V2YWxTdXBwb3J0ZWQ6IHBhcmFtcy5pc0V2YWxTdXBwb3J0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZUZvbnRGYWNlOiBwYXJhbXMuZGlzYWJsZUZvbnRGYWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZUVycm9yczogcGFyYW1zLmlnbm9yZUVycm9ycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblVuc3VwcG9ydGVkRmVhdHVyZTogdGhpcy5fb25VbnN1cHBvcnRlZEZlYXR1cmUuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250UmVnaXN0cnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb250TG9hZGVyLmJpbmQoZm9udCkuY2F0Y2gocmVhc29uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiRm9udEZhbGxiYWNrXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGFyYW1zLmZvbnRFeHRyYVByb3BlcnRpZXMgJiYgZm9udC5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQuZGF0YSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21tb25PYmpzLnJlc29sdmUoaWQsIGZvbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiRm9udFBhdGhcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkltYWdlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1vbk9ianMucmVzb2x2ZShpZCwgZXhwb3J0ZWREYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEdvdCB1bmtub3duIGNvbW1vbiBvYmplY3QgdHlwZSAke3R5cGV9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5vbihcIm9ialwiLCAoW2lkLCBwYWdlSW5kZXgsIHR5cGUsIGltYWdlRGF0YV0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VQcm94eSA9IHRoaXMuI3BhZ2VDYWNoZS5nZXQocGFnZUluZGV4KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYWdlUHJveHkub2Jqcy5oYXMoaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkltYWdlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlUHJveHkub2Jqcy5yZXNvbHZlKGlkLCBpbWFnZURhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgTUFYX0lNQUdFX1NJWkVfVE9fU1RPUkUgPSA4MDAwMDAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VEYXRhPy5kYXRhPy5sZW5ndGggPiBNQVhfSU1BR0VfU0laRV9UT19TVE9SRSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VQcm94eS5jbGVhbnVwQWZ0ZXJSZW5kZXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiUGF0dGVyblwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVByb3h5Lm9ianMucmVzb2x2ZShpZCwgaW1hZ2VEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEdvdCB1bmtub3duIG9iamVjdCB0eXBlICR7dHlwZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwiRG9jUHJvZ3Jlc3NcIiwgZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nVGFzay5vblByb2dyZXNzPy4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkZWQ6IGRhdGEubG9hZGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbDogZGF0YS50b3RhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5vbihcIkRvY1N0YXRzXCIsIGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jZG9jU3RhdHMgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtVHlwZXM6IE9iamVjdC5mcmVlemUoZGF0YS5zdHJlYW1UeXBlcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRUeXBlczogT2JqZWN0LmZyZWV6ZShkYXRhLmZvbnRUeXBlcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUhhbmRsZXIub24oXCJVbnN1cHBvcnRlZEZlYXR1cmVcIiwgdGhpcy5fb25VbnN1cHBvcnRlZEZlYXR1cmUuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5vbihcIkZldGNoQnVpbHRJbkNNYXBcIiwgZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJXb3JrZXIgd2FzIGRlc3Ryb3llZC5cIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5DTWFwUmVhZGVyRmFjdG9yeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQ01hcFJlYWRlckZhY3Rvcnkgbm90IGluaXRpYWxpemVkLCBzZWUgdGhlIGB1c2VXb3JrZXJGZXRjaGAgcGFyYW1ldGVyLlwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuQ01hcFJlYWRlckZhY3RvcnkuZmV0Y2goZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwiRmV0Y2hTdGFuZGFyZEZvbnREYXRhXCIsIGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiV29ya2VyIHdhcyBkZXN0cm95ZWQuXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuU3RhbmRhcmRGb250RGF0YUZhY3RvcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlN0YW5kYXJkRm9udERhdGFGYWN0b3J5IG5vdCBpbml0aWFsaXplZCwgc2VlIHRoZSBgdXNlV29ya2VyRmV0Y2hgIHBhcmFtZXRlci5cIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlN0YW5kYXJkRm9udERhdGFGYWN0b3J5LmZldGNoKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfb25VbnN1cHBvcnRlZEZlYXR1cmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVJZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmdUYXNrLm9uVW5zdXBwb3J0ZWRGZWF0dXJlPy4oZmVhdHVyZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldERhdGEoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXREYXRhXCIsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFnZShwYWdlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIocGFnZU51bWJlcikgfHwgcGFnZU51bWJlciA8PSAwIHx8IHBhZ2VOdW1iZXIgPiB0aGlzLl9udW1QYWdlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJJbnZhbGlkIHBhZ2UgcmVxdWVzdC5cIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWdlSW5kZXggPSBwYWdlTnVtYmVyIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZWRQcm9taXNlID0gdGhpcy4jcGFnZVByb21pc2VzLmdldChwYWdlSW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FjaGVkUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWRQcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXRQYWdlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlSW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4ocGFnZUluZm8gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcmFuc3BvcnQgZGVzdHJveWVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2UgPSBuZXcgUERGUGFnZVByb3h5KHBhZ2VJbmRleCwgcGFnZUluZm8sIHRoaXMsIHRoaXMuX3BhcmFtcy5vd25lckRvY3VtZW50LCB0aGlzLl9wYXJhbXMucGRmQnVnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNwYWdlQ2FjaGUuc2V0KHBhZ2VJbmRleCwgcGFnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI3BhZ2VQcm9taXNlcy5zZXQocGFnZUluZGV4LCBwcm9taXNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFnZUluZGV4KHJlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZWYgIT09IFwib2JqZWN0XCIgfHwgcmVmID09PSBudWxsIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKHJlZi5udW0pIHx8IHJlZi5udW0gPCAwIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKHJlZi5nZW4pIHx8IHJlZi5nZW4gPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkludmFsaWQgcGFnZUluZGV4IHJlcXVlc3QuXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0UGFnZUluZGV4XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW06IHJlZi5udW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuOiByZWYuZ2VuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldEFubm90YXRpb25zKHBhZ2VJbmRleCwgaW50ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXRBbm5vdGF0aW9uc1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZUluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzYXZlRG9jdW1lbnQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJTYXZlRG9jdW1lbnRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUHVyZVhmYTogISF0aGlzLl9odG1sRm9yWGZhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bVBhZ2VzOiB0aGlzLl9udW1QYWdlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uU3RvcmFnZTogdGhpcy5hbm5vdGF0aW9uU3RvcmFnZS5zZXJpYWxpemFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IHRoaXMuX2Z1bGxSZWFkZXI/LmZpbGVuYW1lID8/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW5ub3RhdGlvblN0b3JhZ2UucmVzZXRNb2RpZmllZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRGaWVsZE9iamVjdHMoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0RmllbGRPYmplY3RzUHJvbWlzZSB8fD0gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXRGaWVsZE9iamVjdHNcIiwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBoYXNKU0FjdGlvbnMoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faGFzSlNBY3Rpb25zUHJvbWlzZSB8fD0gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJIYXNKU0FjdGlvbnNcIiwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRDYWxjdWxhdGlvbk9yZGVySWRzKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0Q2FsY3VsYXRpb25PcmRlcklkc1wiLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldERlc3RpbmF0aW9ucygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldERlc3RpbmF0aW9uc1wiLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldERlc3RpbmF0aW9uKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGlkICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkludmFsaWQgZGVzdGluYXRpb24gcmVxdWVzdC5cIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXREZXN0aW5hdGlvblwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFnZUxhYmVscygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldFBhZ2VMYWJlbHNcIiwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRQYWdlTGF5b3V0KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0UGFnZUxheW91dFwiLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldFBhZ2VNb2RlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0UGFnZU1vZGVcIiwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRWaWV3ZXJQcmVmZXJlbmNlcygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldFZpZXdlclByZWZlcmVuY2VzXCIsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0T3BlbkFjdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldE9wZW5BY3Rpb25cIiwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRBdHRhY2htZW50cygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldEF0dGFjaG1lbnRzXCIsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0SmF2YVNjcmlwdCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldEphdmFTY3JpcHRcIiwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXREb2NKU0FjdGlvbnMoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXREb2NKU0FjdGlvbnNcIiwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRQYWdlSlNBY3Rpb25zKHBhZ2VJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0UGFnZUpTQWN0aW9uc1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZUluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldFN0cnVjdFRyZWUocGFnZUluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXRTdHJ1Y3RUcmVlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlSW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0T3V0bGluZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldE91dGxpbmVcIiwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRPcHRpb25hbENvbnRlbnRDb25maWcoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXRPcHRpb25hbENvbnRlbnRDb25maWdcIiwgbnVsbCkudGhlbihyZXN1bHRzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IF9vcHRpb25hbF9jb250ZW50X2NvbmZpZy5PcHRpb25hbENvbnRlbnRDb25maWcocmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldFBlcm1pc3Npb25zKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0UGVybWlzc2lvbnNcIiwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRNZXRhZGF0YSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiNtZXRhZGF0YVByb21pc2UgfHw9IHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0TWV0YWRhdGFcIiwgbnVsbCkudGhlbihyZXN1bHRzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvOiByZXN1bHRzWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogcmVzdWx0c1sxXSA/IG5ldyBfbWV0YWRhdGEuTWV0YWRhdGEocmVzdWx0c1sxXSkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZTogdGhpcy5fZnVsbFJlYWRlcj8uZmlsZW5hbWUgPz8gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudExlbmd0aDogdGhpcy5fZnVsbFJlYWRlcj8uY29udGVudExlbmd0aCA/PyBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0TWFya0luZm8oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXRNYXJrSW5mb1wiLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGFzeW5jIHN0YXJ0Q2xlYW51cChrZWVwTG9hZGVkRm9udHMgPSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJDbGVhbnVwXCIsIG51bGwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGFnZSBvZiB0aGlzLiNwYWdlQ2FjaGUudmFsdWVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjbGVhbnVwU3VjY2Vzc2Z1bCA9IHBhZ2UuY2xlYW51cCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjbGVhbnVwU3VjY2Vzc2Z1bCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHN0YXJ0Q2xlYW51cDogUGFnZSAke3BhZ2UucGFnZU51bWJlcn0gaXMgY3VycmVudGx5IHJlbmRlcmluZy5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tbW9uT2Jqcy5jbGVhcigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWtlZXBMb2FkZWRGb250cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9udExvYWRlci5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNtZXRhZGF0YVByb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2V0RmllbGRPYmplY3RzUHJvbWlzZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYXNKU0FjdGlvbnNQcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBsb2FkaW5nUGFyYW1zKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gdGhpcy5fcGFyYW1zO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgwLCBfdXRpbC5zaGFkb3cpKHRoaXMsIFwibG9hZGluZ1BhcmFtc1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZUF1dG9GZXRjaDogcGFyYW1zLmRpc2FibGVBdXRvRmV0Y2gsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlWGZhOiBwYXJhbXMuZW5hYmxlWGZhXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgUERGT2JqZWN0cyB7XG4gICAgICAgICAgICAgICAgICAgICNvYmpzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgICAgICAgICAgICAgICAgICAjZW5zdXJlT2JqKG9iaklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvYmogPSB0aGlzLiNvYmpzW29iaklkXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiNvYmpzW29iaklkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXBhYmlsaXR5OiAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldChvYmpJZCwgY2FsbGJhY2sgPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvYmogPSB0aGlzLiNlbnN1cmVPYmoob2JqSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5jYXBhYmlsaXR5LnByb21pc2UudGhlbigoKSA9PiBjYWxsYmFjayhvYmouZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvYmogPSB0aGlzLiNvYmpzW29iaklkXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvYmo/LmNhcGFiaWxpdHkuc2V0dGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUmVxdWVzdGluZyBvYmplY3QgdGhhdCBpc24ndCByZXNvbHZlZCB5ZXQgJHtvYmpJZH0uYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmouZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGhhcyhvYmpJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2JqID0gdGhpcy4jb2Jqc1tvYmpJZF07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqPy5jYXBhYmlsaXR5LnNldHRsZWQgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG9iaklkLCBkYXRhID0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2JqID0gdGhpcy4jZW5zdXJlT2JqKG9iaklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5kYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5jYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jb2JqcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIFJlbmRlclRhc2sge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihpbnRlcm5hbFJlbmRlclRhc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ludGVybmFsUmVuZGVyVGFzayA9IGludGVybmFsUmVuZGVyVGFzaztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25Db250aW51ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgcHJvbWlzZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnRlcm5hbFJlbmRlclRhc2suY2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW50ZXJuYWxSZW5kZXJUYXNrLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLlJlbmRlclRhc2sgPSBSZW5kZXJUYXNrO1xuXG4gICAgICAgICAgICAgICAgY2xhc3MgSW50ZXJuYWxSZW5kZXJUYXNrIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljICNjYW52YXNJblVzZSA9IG5ldyBXZWFrU2V0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbW9uT2JqcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFubm90YXRpb25DYW52YXNNYXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvckxpc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNGYWN0b3J5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlUmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZGZCdWcgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2JqcyA9IG9ianM7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1vbk9ianMgPSBjb21tb25PYmpzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbm5vdGF0aW9uQ2FudmFzTWFwID0gYW5ub3RhdGlvbkNhbnZhc01hcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3BlcmF0b3JMaXN0SWR4ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3BlcmF0b3JMaXN0ID0gb3BlcmF0b3JMaXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFnZUluZGV4ID0gcGFnZUluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXNGYWN0b3J5ID0gY2FudmFzRmFjdG9yeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BkZkJ1ZyA9IHBkZkJ1ZztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmFwaGljc1JlYWR5Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmFwaGljc1JlYWR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91c2VSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB1c2VSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPT09IHRydWUgJiYgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FuY2VsbGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhc2sgPSBuZXcgUmVuZGVyVGFzayh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbmNlbEJvdW5kID0gdGhpcy5jYW5jZWwuYmluZCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRpbnVlQm91bmQgPSB0aGlzLl9jb250aW51ZS5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGVOZXh0Qm91bmQgPSB0aGlzLl9zY2hlZHVsZU5leHQuYmluZCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX25leHRCb3VuZCA9IHRoaXMuX25leHQuYmluZCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbnZhcyA9IHBhcmFtcy5jYW52YXNDb250ZXh0LmNhbnZhcztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBjb21wbGV0ZWQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jYXBhYmlsaXR5LnByb21pc2UuY2F0Y2goZnVuY3Rpb24gKCkge30pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGl6ZUdyYXBoaWNzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BhcmVuY3kgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbENvbnRlbnRDb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NhbnZhcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChJbnRlcm5hbFJlbmRlclRhc2suI2NhbnZhc0luVXNlLmhhcyh0aGlzLl9jYW52YXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCB1c2UgdGhlIHNhbWUgY2FudmFzIGR1cmluZyBtdWx0aXBsZSByZW5kZXIoKSBvcGVyYXRpb25zLiBcIiArIFwiVXNlIGRpZmZlcmVudCBjYW52YXMgb3IgZW5zdXJlIHByZXZpb3VzIG9wZXJhdGlvbnMgd2VyZSBcIiArIFwiY2FuY2VsbGVkIG9yIGNvbXBsZXRlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSW50ZXJuYWxSZW5kZXJUYXNrLiNjYW52YXNJblVzZS5hZGQodGhpcy5fY2FudmFzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3BkZkJ1ZyAmJiBnbG9iYWxUaGlzLlN0ZXBwZXJNYW5hZ2VyPy5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGVwcGVyID0gZ2xvYmFsVGhpcy5TdGVwcGVyTWFuYWdlci5jcmVhdGUodGhpcy5fcGFnZUluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0ZXBwZXIuaW5pdCh0aGlzLm9wZXJhdG9yTGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGVwcGVyLm5leHRCcmVha1BvaW50ID0gdGhpcy5zdGVwcGVyLmdldE5leHRCcmVha1BvaW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNDb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZUxheWVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gPSB0aGlzLnBhcmFtcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2Z4ID0gbmV3IF9jYW52YXMuQ2FudmFzR3JhcGhpY3MoY2FudmFzQ29udGV4dCwgdGhpcy5jb21tb25PYmpzLCB0aGlzLm9ianMsIHRoaXMuY2FudmFzRmFjdG9yeSwgaW1hZ2VMYXllciwgb3B0aW9uYWxDb250ZW50Q29uZmlnLCB0aGlzLmFubm90YXRpb25DYW52YXNNYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZnguYmVnaW5EcmF3aW5nKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwYXJlbmN5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVyYXRvckxpc3RJZHggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmFwaGljc1JlYWR5ID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ3JhcGhpY3NSZWFkeUNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmFwaGljc1JlYWR5Q2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbChlcnJvciA9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxsZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5nZngpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdmeC5lbmREcmF3aW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jYW52YXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnRlcm5hbFJlbmRlclRhc2suI2NhbnZhc0luVXNlLmRlbGV0ZSh0aGlzLl9jYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrKGVycm9yIHx8IG5ldyBfZGlzcGxheV91dGlscy5SZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb24oYFJlbmRlcmluZyBjYW5jZWxsZWQsIHBhZ2UgJHt0aGlzLl9wYWdlSW5kZXggKyAxfWAsIFwiY2FudmFzXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yTGlzdENoYW5nZWQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ3JhcGhpY3NSZWFkeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5ncmFwaGljc1JlYWR5Q2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmFwaGljc1JlYWR5Q2FsbGJhY2sgPSB0aGlzLl9jb250aW51ZUJvdW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RlcHBlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RlcHBlci51cGRhdGVPcGVyYXRvckxpc3QodGhpcy5vcGVyYXRvckxpc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb250aW51ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX2NvbnRpbnVlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50YXNrLm9uQ29udGludWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhc2sub25Db250aW51ZSh0aGlzLl9zY2hlZHVsZU5leHRCb3VuZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NjaGVkdWxlTmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX3NjaGVkdWxlTmV4dCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91c2VSZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbmV4dEJvdW5kKCkuY2F0Y2godGhpcy5fY2FuY2VsQm91bmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKHRoaXMuX25leHRCb3VuZCkuY2F0Y2godGhpcy5fY2FuY2VsQm91bmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYXN5bmMgX25leHQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jYW5jZWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3BlcmF0b3JMaXN0SWR4ID0gdGhpcy5nZnguZXhlY3V0ZU9wZXJhdG9yTGlzdCh0aGlzLm9wZXJhdG9yTGlzdCwgdGhpcy5vcGVyYXRvckxpc3RJZHgsIHRoaXMuX2NvbnRpbnVlQm91bmQsIHRoaXMuc3RlcHBlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wZXJhdG9yTGlzdElkeCA9PT0gdGhpcy5vcGVyYXRvckxpc3QuYXJnc0FycmF5Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3BlcmF0b3JMaXN0Lmxhc3RDaHVuaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdmeC5lbmREcmF3aW5nKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NhbnZhcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW50ZXJuYWxSZW5kZXJUYXNrLiNjYW52YXNJblVzZS5kZWxldGUodGhpcy5fY2FudmFzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHZlcnNpb24gPSAnMi4xNC4xMDInO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgICAgICAgY29uc3QgYnVpbGQgPSAnZGI0ZjNhZGM1JztcbiAgICAgICAgICAgICAgICBleHBvcnRzLmJ1aWxkID0gYnVpbGQ7XG5cbiAgICAgICAgICAgICAgICAvKioqLyB9KSxcbiAgICAgICAgICAgIC8qIDUgKi9cbiAgICAgICAgICAgIC8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXG5cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuU3RhdFRpbWVyID0gZXhwb3J0cy5SZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb24gPSBleHBvcnRzLlBpeGVsc1BlckluY2ggPSBleHBvcnRzLlBhZ2VWaWV3cG9ydCA9IGV4cG9ydHMuUERGRGF0ZVN0cmluZyA9IGV4cG9ydHMuRE9NU3RhbmRhcmRGb250RGF0YUZhY3RvcnkgPSBleHBvcnRzLkRPTVNWR0ZhY3RvcnkgPSBleHBvcnRzLkRPTUNhbnZhc0ZhY3RvcnkgPSBleHBvcnRzLkRPTUNNYXBSZWFkZXJGYWN0b3J5ID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuZGVwcmVjYXRlZCA9IGRlcHJlY2F0ZWQ7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5nZXRGaWxlbmFtZUZyb21VcmwgPSBnZXRGaWxlbmFtZUZyb21Vcmw7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5nZXRQZGZGaWxlbmFtZUZyb21VcmwgPSBnZXRQZGZGaWxlbmFtZUZyb21Vcmw7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5nZXRYZmFQYWdlVmlld3BvcnQgPSBnZXRYZmFQYWdlVmlld3BvcnQ7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5pc0RhdGFTY2hlbWUgPSBpc0RhdGFTY2hlbWU7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5pc1BkZkZpbGUgPSBpc1BkZkZpbGU7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5pc1ZhbGlkRmV0Y2hVcmwgPSBpc1ZhbGlkRmV0Y2hVcmw7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5sb2FkU2NyaXB0ID0gbG9hZFNjcmlwdDtcblxuICAgICAgICAgICAgICAgIHZhciBfYmFzZV9mYWN0b3J5ID0gX193X3BkZmpzX3JlcXVpcmVfXyg2KTtcblxuICAgICAgICAgICAgICAgIHZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBTVkdfTlMgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBQaXhlbHNQZXJJbmNoIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljIENTUyA9IDk2LjA7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRpYyBQREYgPSA3Mi4wO1xuICAgICAgICAgICAgICAgICAgICBzdGF0aWMgUERGX1RPX0NTU19VTklUUyA9IHRoaXMuQ1NTIC8gdGhpcy5QREY7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXhwb3J0cy5QaXhlbHNQZXJJbmNoID0gUGl4ZWxzUGVySW5jaDtcblxuICAgICAgICAgICAgICAgIGNsYXNzIERPTUNhbnZhc0ZhY3RvcnkgZXh0ZW5kcyBfYmFzZV9mYWN0b3J5LkJhc2VDYW52YXNGYWN0b3J5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJEb2N1bWVudCA9IGdsb2JhbFRoaXMuZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA9IHt9KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG9jdW1lbnQgPSBvd25lckRvY3VtZW50O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZUNhbnZhcyh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW52YXMgPSB0aGlzLl9kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FudmFzO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLkRPTUNhbnZhc0ZhY3RvcnkgPSBET01DYW52YXNGYWN0b3J5O1xuXG4gICAgICAgICAgICAgICAgYXN5bmMgZnVuY3Rpb24gZmV0Y2hEYXRhKHVybCwgYXNUeXBlZEFycmF5ID0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWRGZXRjaFVybCh1cmwsIGRvY3VtZW50LmJhc2VVUkkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhc1R5cGVkQXJyYXkgPyBuZXcgVWludDhBcnJheShhd2FpdCByZXNwb25zZS5hcnJheUJ1ZmZlcigpKSA6ICgwLCBfdXRpbC5zdHJpbmdUb0J5dGVzKShhd2FpdCByZXNwb25zZS50ZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Qub3BlbihcIkdFVFwiLCB1cmwsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXNUeXBlZEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IFhNTEh0dHBSZXF1ZXN0LkRPTkUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMjAwIHx8IHJlcXVlc3Quc3RhdHVzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhc1R5cGVkQXJyYXkgJiYgcmVxdWVzdC5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IG5ldyBVaW50OEFycmF5KHJlcXVlc3QucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFhc1R5cGVkQXJyYXkgJiYgcmVxdWVzdC5yZXNwb25zZVRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSAoMCwgX3V0aWwuc3RyaW5nVG9CeXRlcykocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKHJlcXVlc3Quc3RhdHVzVGV4dCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5zZW5kKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBET01DTWFwUmVhZGVyRmFjdG9yeSBleHRlbmRzIF9iYXNlX2ZhY3RvcnkuQmFzZUNNYXBSZWFkZXJGYWN0b3J5IHtcbiAgICAgICAgICAgICAgICAgICAgX2ZldGNoRGF0YSh1cmwsIGNvbXByZXNzaW9uVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoRGF0YSh1cmwsIHRoaXMuaXNDb21wcmVzc2VkKS50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNNYXBEYXRhOiBkYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wcmVzc2lvblR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGV4cG9ydHMuRE9NQ01hcFJlYWRlckZhY3RvcnkgPSBET01DTWFwUmVhZGVyRmFjdG9yeTtcblxuICAgICAgICAgICAgICAgIGNsYXNzIERPTVN0YW5kYXJkRm9udERhdGFGYWN0b3J5IGV4dGVuZHMgX2Jhc2VfZmFjdG9yeS5CYXNlU3RhbmRhcmRGb250RGF0YUZhY3Rvcnkge1xuICAgICAgICAgICAgICAgICAgICBfZmV0Y2hEYXRhKHVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoRGF0YSh1cmwsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLkRPTVN0YW5kYXJkRm9udERhdGFGYWN0b3J5ID0gRE9NU3RhbmRhcmRGb250RGF0YUZhY3Rvcnk7XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBET01TVkdGYWN0b3J5IGV4dGVuZHMgX2Jhc2VfZmFjdG9yeS5CYXNlU1ZHRmFjdG9yeSB7XG4gICAgICAgICAgICAgICAgICAgIF9jcmVhdGVTVkcodHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTVkdfTlMsIHR5cGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLkRPTVNWR0ZhY3RvcnkgPSBET01TVkdGYWN0b3J5O1xuXG4gICAgICAgICAgICAgICAgY2xhc3MgUGFnZVZpZXdwb3J0IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRYID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFkgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9udEZsaXAgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdCb3ggPSB2aWV3Qm94O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2FsZSA9IHNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3RhdGlvbiA9IHJvdGF0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXRYID0gb2Zmc2V0WDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0WSA9IG9mZnNldFk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXJYID0gKHZpZXdCb3hbMl0gKyB2aWV3Qm94WzBdKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjZW50ZXJZID0gKHZpZXdCb3hbM10gKyB2aWV3Qm94WzFdKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcm90YXRlQSwgcm90YXRlQiwgcm90YXRlQywgcm90YXRlRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uICU9IDM2MDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvdGF0aW9uIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uICs9IDM2MDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChyb3RhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTgwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGVBID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZUIgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGVDID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlRCA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA5MDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlQSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZUIgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGVDID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlRCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyNzA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZUEgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGVCID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZUMgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlRCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGVBID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlQiA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZUMgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGVEID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUGFnZVZpZXdwb3J0OiBJbnZhbGlkIHJvdGF0aW9uLCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgOTAgZGVncmVlcy5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb250RmxpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZUMgPSAtcm90YXRlQztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGVEID0gLXJvdGF0ZUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvZmZzZXRDYW52YXNYLCBvZmZzZXRDYW52YXNZO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHdpZHRoLCBoZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3RhdGVBID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0Q2FudmFzWCA9IE1hdGguYWJzKGNlbnRlclkgLSB2aWV3Qm94WzFdKSAqIHNjYWxlICsgb2Zmc2V0WDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRDYW52YXNZID0gTWF0aC5hYnMoY2VudGVyWCAtIHZpZXdCb3hbMF0pICogc2NhbGUgKyBvZmZzZXRZO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gTWF0aC5hYnModmlld0JveFszXSAtIHZpZXdCb3hbMV0pICogc2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5hYnModmlld0JveFsyXSAtIHZpZXdCb3hbMF0pICogc2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldENhbnZhc1ggPSBNYXRoLmFicyhjZW50ZXJYIC0gdmlld0JveFswXSkgKiBzY2FsZSArIG9mZnNldFg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0Q2FudmFzWSA9IE1hdGguYWJzKGNlbnRlclkgLSB2aWV3Qm94WzFdKSAqIHNjYWxlICsgb2Zmc2V0WTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IE1hdGguYWJzKHZpZXdCb3hbMl0gLSB2aWV3Qm94WzBdKSAqIHNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IE1hdGguYWJzKHZpZXdCb3hbM10gLSB2aWV3Qm94WzFdKSAqIHNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IFtyb3RhdGVBICogc2NhbGUsIHJvdGF0ZUIgKiBzY2FsZSwgcm90YXRlQyAqIHNjYWxlLCByb3RhdGVEICogc2NhbGUsIG9mZnNldENhbnZhc1ggLSByb3RhdGVBICogc2NhbGUgKiBjZW50ZXJYIC0gcm90YXRlQyAqIHNjYWxlICogY2VudGVyWSwgb2Zmc2V0Q2FudmFzWSAtIHJvdGF0ZUIgKiBzY2FsZSAqIGNlbnRlclggLSByb3RhdGVEICogc2NhbGUgKiBjZW50ZXJZXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY2xvbmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUgPSB0aGlzLnNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRpb24gPSB0aGlzLnJvdGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WCA9IHRoaXMub2Zmc2V0WCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFkgPSB0aGlzLm9mZnNldFksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb250RmxpcCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0gPSB7fSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQYWdlVmlld3BvcnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g6IHRoaXMudmlld0JveC5zbGljZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb250RmxpcFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb252ZXJ0VG9WaWV3cG9ydFBvaW50KHgsIHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKFt4LCB5XSwgdGhpcy50cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29udmVydFRvVmlld3BvcnRSZWN0YW5nbGUocmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9wTGVmdCA9IF91dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oW3JlY3RbMF0sIHJlY3RbMV1dLCB0aGlzLnRyYW5zZm9ybSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvdHRvbVJpZ2h0ID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbcmVjdFsyXSwgcmVjdFszXV0sIHRoaXMudHJhbnNmb3JtKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0b3BMZWZ0WzBdLCB0b3BMZWZ0WzFdLCBib3R0b21SaWdodFswXSwgYm90dG9tUmlnaHRbMV1dO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29udmVydFRvUGRmUG9pbnQoeCwgeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF91dGlsLlV0aWwuYXBwbHlJbnZlcnNlVHJhbnNmb3JtKFt4LCB5XSwgdGhpcy50cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLlBhZ2VWaWV3cG9ydCA9IFBhZ2VWaWV3cG9ydDtcblxuICAgICAgICAgICAgICAgIGNsYXNzIFJlbmRlcmluZ0NhbmNlbGxlZEV4Y2VwdGlvbiBleHRlbmRzIF91dGlsLkJhc2VFeGNlcHRpb24ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3Rvcihtc2csIHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyKG1zZywgXCJSZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb25cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLlJlbmRlcmluZ0NhbmNlbGxlZEV4Y2VwdGlvbiA9IFJlbmRlcmluZ0NhbmNlbGxlZEV4Y2VwdGlvbjtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzRGF0YVNjaGVtZSh1cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWkgPSB1cmwubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaSA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkgPCBpaSAmJiB1cmxbaV0udHJpbSgpID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXJsLnN1YnN0cmluZyhpLCBpICsgNSkudG9Mb3dlckNhc2UoKSA9PT0gXCJkYXRhOlwiO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzUGRmRmlsZShmaWxlbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIGZpbGVuYW1lID09PSBcInN0cmluZ1wiICYmIC9cXC5wZGYkL2kudGVzdChmaWxlbmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0RmlsZW5hbWVGcm9tVXJsKHVybCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmNob3IgPSB1cmwuaW5kZXhPZihcIiNcIik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHF1ZXJ5ID0gdXJsLmluZGV4T2YoXCI/XCIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSBNYXRoLm1pbihhbmNob3IgPiAwID8gYW5jaG9yIDogdXJsLmxlbmd0aCwgcXVlcnkgPiAwID8gcXVlcnkgOiB1cmwubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVybC5zdWJzdHJpbmcodXJsLmxhc3RJbmRleE9mKFwiL1wiLCBlbmQpICsgMSwgZW5kKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRQZGZGaWxlbmFtZUZyb21VcmwodXJsLCBkZWZhdWx0RmlsZW5hbWUgPSBcImRvY3VtZW50LnBkZlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVmYXVsdEZpbGVuYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRGF0YVNjaGVtZSh1cmwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoJ2dldFBkZkZpbGVuYW1lRnJvbVVybDogaWdub3JlIFwiZGF0YTpcIi1VUkwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVmYXVsdEZpbGVuYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVVUkkgPSAvXig/Oig/OlteOl0rOik/XFwvXFwvW14vXSspPyhbXj8jXSopKFxcP1teI10qKT8oIy4qKT8kLztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVGaWxlbmFtZSA9IC9bXi8/Iz1dK1xcLnBkZlxcYig/IS4qXFwucGRmXFxiKS9pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzcGxpdFVSSSA9IHJlVVJJLmV4ZWModXJsKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN1Z2dlc3RlZEZpbGVuYW1lID0gcmVGaWxlbmFtZS5leGVjKHNwbGl0VVJJWzFdKSB8fCByZUZpbGVuYW1lLmV4ZWMoc3BsaXRVUklbMl0pIHx8IHJlRmlsZW5hbWUuZXhlYyhzcGxpdFVSSVszXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1Z2dlc3RlZEZpbGVuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0ZWRGaWxlbmFtZSA9IHN1Z2dlc3RlZEZpbGVuYW1lWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3VnZ2VzdGVkRmlsZW5hbWUuaW5jbHVkZXMoXCIlXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdGVkRmlsZW5hbWUgPSByZUZpbGVuYW1lLmV4ZWMoZGVjb2RlVVJJQ29tcG9uZW50KHN1Z2dlc3RlZEZpbGVuYW1lKSlbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHt9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3VnZ2VzdGVkRmlsZW5hbWUgfHwgZGVmYXVsdEZpbGVuYW1lO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIFN0YXRUaW1lciB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydGVkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGltZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRpbWUobmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgaW4gdGhpcy5zdGFydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKGBUaW1lciBpcyBhbHJlYWR5IHJ1bm5pbmcgZm9yICR7bmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydGVkW25hbWVdID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRpbWVFbmQobmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobmFtZSBpbiB0aGlzLnN0YXJ0ZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKGBUaW1lciBoYXMgbm90IGJlZW4gc3RhcnRlZCBmb3IgJHtuYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHRoaXMuc3RhcnRlZFtuYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IERhdGUubm93KClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc3RhcnRlZFtuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRvU3RyaW5nKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3V0QnVmID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbG9uZ2VzdCA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdGltZSBvZiB0aGlzLnRpbWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IHRpbWUubmFtZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lLmxlbmd0aCA+IGxvbmdlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2VzdCA9IG5hbWUubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0aW1lIG9mIHRoaXMudGltZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IHRpbWUuZW5kIC0gdGltZS5zdGFydDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRCdWYucHVzaChgJHt0aW1lLm5hbWUucGFkRW5kKGxvbmdlc3QpfSAke2R1cmF0aW9ufW1zXFxuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvdXRCdWYuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXhwb3J0cy5TdGF0VGltZXIgPSBTdGF0VGltZXI7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpc1ZhbGlkRmV0Y2hVcmwodXJsLCBiYXNlVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdG9jb2xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gPSBiYXNlVXJsID8gbmV3IFVSTCh1cmwsIGJhc2VVcmwpIDogbmV3IFVSTCh1cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvY29sID09PSBcImh0dHA6XCIgfHwgcHJvdG9jb2wgPT09IFwiaHR0cHM6XCI7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBsb2FkU2NyaXB0KHNyYywgcmVtb3ZlU2NyaXB0RWxlbWVudCA9IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NyaXB0LnNyYyA9IHNyYztcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2NyaXB0Lm9ubG9hZCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZlU2NyaXB0RWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JpcHQucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShldnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2NyaXB0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgQ2Fubm90IGxvYWQgc2NyaXB0IGF0OiAke3NjcmlwdC5zcmN9YCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkZXByZWNhdGVkKGRldGFpbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJEZXByZWNhdGVkIEFQSSB1c2FnZTogXCIgKyBkZXRhaWxzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgcGRmRGF0ZVN0cmluZ1JlZ2V4O1xuXG4gICAgICAgICAgICAgICAgY2xhc3MgUERGRGF0ZVN0cmluZyB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRpYyB0b0RhdGVPYmplY3QoaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXQgfHwgdHlwZW9mIGlucHV0ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGRmRGF0ZVN0cmluZ1JlZ2V4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGRmRGF0ZVN0cmluZ1JlZ2V4ID0gbmV3IFJlZ0V4cChcIl5EOlwiICsgXCIoXFxcXGR7NH0pXCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihbWnwrfC1dKT9cIiArIFwiKFxcXFxkezJ9KT9cIiArIFwiJz9cIiArIFwiKFxcXFxkezJ9KT9cIiArIFwiJz9cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSBwZGZEYXRlU3RyaW5nUmVnZXguZXhlYyhpbnB1dCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB5ZWFyID0gcGFyc2VJbnQobWF0Y2hlc1sxXSwgMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1vbnRoID0gcGFyc2VJbnQobWF0Y2hlc1syXSwgMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9udGggPSBtb250aCA+PSAxICYmIG1vbnRoIDw9IDEyID8gbW9udGggLSAxIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXkgPSBwYXJzZUludChtYXRjaGVzWzNdLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXkgPSBkYXkgPj0gMSAmJiBkYXkgPD0gMzEgPyBkYXkgOiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhvdXIgPSBwYXJzZUludChtYXRjaGVzWzRdLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBob3VyID0gaG91ciA+PSAwICYmIGhvdXIgPD0gMjMgPyBob3VyIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtaW51dGUgPSBwYXJzZUludChtYXRjaGVzWzVdLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW51dGUgPSBtaW51dGUgPj0gMCAmJiBtaW51dGUgPD0gNTkgPyBtaW51dGUgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNlY29uZCA9IHBhcnNlSW50KG1hdGNoZXNbNl0sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZCA9IHNlY29uZCA+PSAwICYmIHNlY29uZCA8PSA1OSA/IHNlY29uZCA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1bml2ZXJzYWxUaW1lUmVsYXRpb24gPSBtYXRjaGVzWzddIHx8IFwiWlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9mZnNldEhvdXIgPSBwYXJzZUludChtYXRjaGVzWzhdLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRIb3VyID0gb2Zmc2V0SG91ciA+PSAwICYmIG9mZnNldEhvdXIgPD0gMjMgPyBvZmZzZXRIb3VyIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvZmZzZXRNaW51dGUgPSBwYXJzZUludChtYXRjaGVzWzldLCAxMCkgfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldE1pbnV0ZSA9IG9mZnNldE1pbnV0ZSA+PSAwICYmIG9mZnNldE1pbnV0ZSA8PSA1OSA/IG9mZnNldE1pbnV0ZSA6IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bml2ZXJzYWxUaW1lUmVsYXRpb24gPT09IFwiLVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG91ciArPSBvZmZzZXRIb3VyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZSArPSBvZmZzZXRNaW51dGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHVuaXZlcnNhbFRpbWVSZWxhdGlvbiA9PT0gXCIrXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3VyIC09IG9mZnNldEhvdXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlIC09IG9mZnNldE1pbnV0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGV4cG9ydHMuUERGRGF0ZVN0cmluZyA9IFBERkRhdGVTdHJpbmc7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRYZmFQYWdlVmlld3BvcnQoeGZhUGFnZSwge1xuICAgICAgICAgICAgICAgICAgICBzY2FsZSA9IDEsXG4gICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gMFxuICAgICAgICAgICAgICAgIH0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgfSA9IHhmYVBhZ2UuYXR0cmlidXRlcy5zdHlsZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgdmlld0JveCA9IFswLCAwLCBwYXJzZUludCh3aWR0aCksIHBhcnNlSW50KGhlaWdodCldO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhZ2VWaWV3cG9ydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3Qm94LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvblxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKioqLyB9KSxcbiAgICAgICAgICAgIC8qIDYgKi9cbiAgICAgICAgICAgIC8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXG5cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuQmFzZVN0YW5kYXJkRm9udERhdGFGYWN0b3J5ID0gZXhwb3J0cy5CYXNlU1ZHRmFjdG9yeSA9IGV4cG9ydHMuQmFzZUNhbnZhc0ZhY3RvcnkgPSBleHBvcnRzLkJhc2VDTWFwUmVhZGVyRmFjdG9yeSA9IHZvaWQgMDtcblxuICAgICAgICAgICAgICAgIHZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMSk7XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBCYXNlQ2FudmFzRmFjdG9yeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IEJhc2VDYW52YXNGYWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIkNhbm5vdCBpbml0aWFsaXplIEJhc2VDYW52YXNGYWN0b3J5LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod2lkdGggPD0gMCB8fCBoZWlnaHQgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2FudmFzIHNpemVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuX2NyZWF0ZUNhbnZhcyh3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogY2FudmFzLmdldENvbnRleHQoXCIyZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlc2V0KGNhbnZhc0FuZENvbnRleHQsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2FudmFzQW5kQ29udGV4dC5jYW52YXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW52YXMgaXMgbm90IHNwZWNpZmllZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoIDw9IDAgfHwgaGVpZ2h0IDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNhbnZhcyBzaXplXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNBbmRDb250ZXh0LmNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzQW5kQ29udGV4dC5jYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZGVzdHJveShjYW52YXNBbmRDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbnZhc0FuZENvbnRleHQuY2FudmFzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FudmFzIGlzIG5vdCBzcGVjaWZpZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhc0FuZENvbnRleHQuY2FudmFzLndpZHRoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhc0FuZENvbnRleHQuY2FudmFzLmhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNBbmRDb250ZXh0LmNhbnZhcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNBbmRDb250ZXh0LmNvbnRleHQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZUNhbnZhcyh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiQWJzdHJhY3QgbWV0aG9kIGBfY3JlYXRlQ2FudmFzYCBjYWxsZWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLkJhc2VDYW52YXNGYWN0b3J5ID0gQmFzZUNhbnZhc0ZhY3Rvcnk7XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBCYXNlQ01hcFJlYWRlckZhY3Rvcnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlVXJsID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29tcHJlc3NlZCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBCYXNlQ01hcFJlYWRlckZhY3RvcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiQ2Fubm90IGluaXRpYWxpemUgQmFzZUNNYXBSZWFkZXJGYWN0b3J5LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNlVXJsID0gYmFzZVVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNDb21wcmVzc2VkID0gaXNDb21wcmVzc2VkO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYXN5bmMgZmV0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYmFzZVVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIENNYXAgXCJiYXNlVXJsXCIgcGFyYW1ldGVyIG11c3QgYmUgc3BlY2lmaWVkLCBlbnN1cmUgdGhhdCAnICsgJ3RoZSBcImNNYXBVcmxcIiBhbmQgXCJjTWFwUGFja2VkXCIgQVBJIHBhcmFtZXRlcnMgYXJlIHByb3ZpZGVkLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDTWFwIG5hbWUgbXVzdCBiZSBzcGVjaWZpZWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSB0aGlzLmJhc2VVcmwgKyBuYW1lICsgKHRoaXMuaXNDb21wcmVzc2VkID8gXCIuYmNtYXBcIiA6IFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tcHJlc3Npb25UeXBlID0gdGhpcy5pc0NvbXByZXNzZWQgPyBfdXRpbC5DTWFwQ29tcHJlc3Npb25UeXBlLkJJTkFSWSA6IF91dGlsLkNNYXBDb21wcmVzc2lvblR5cGUuTk9ORTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9mZXRjaERhdGEodXJsLCBjb21wcmVzc2lvblR5cGUpLmNhdGNoKHJlYXNvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gbG9hZCAke3RoaXMuaXNDb21wcmVzc2VkID8gXCJiaW5hcnkgXCIgOiBcIlwifUNNYXAgYXQ6ICR7dXJsfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfZmV0Y2hEYXRhKHVybCwgY29tcHJlc3Npb25UeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiQWJzdHJhY3QgbWV0aG9kIGBfZmV0Y2hEYXRhYCBjYWxsZWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLkJhc2VDTWFwUmVhZGVyRmFjdG9yeSA9IEJhc2VDTWFwUmVhZGVyRmFjdG9yeTtcblxuICAgICAgICAgICAgICAgIGNsYXNzIEJhc2VTdGFuZGFyZEZvbnREYXRhRmFjdG9yeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VVcmwgPSBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBCYXNlU3RhbmRhcmRGb250RGF0YUZhY3RvcnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiQ2Fubm90IGluaXRpYWxpemUgQmFzZVN0YW5kYXJkRm9udERhdGFGYWN0b3J5LlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNlVXJsID0gYmFzZVVybDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGFzeW5jIGZldGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5iYXNlVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgc3RhbmRhcmQgZm9udCBcImJhc2VVcmxcIiBwYXJhbWV0ZXIgbXVzdCBiZSBzcGVjaWZpZWQsIGVuc3VyZSB0aGF0ICcgKyAndGhlIFwic3RhbmRhcmRGb250RGF0YVVybFwiIEFQSSBwYXJhbWV0ZXIgaXMgcHJvdmlkZWQuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZmlsZW5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGb250IGZpbGVuYW1lIG11c3QgYmUgc3BlY2lmaWVkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJsID0gYCR7dGhpcy5iYXNlVXJsfSR7ZmlsZW5hbWV9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9mZXRjaERhdGEodXJsKS5jYXRjaChyZWFzb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGxvYWQgZm9udCBkYXRhIGF0OiAke3VybH1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX2ZldGNoRGF0YSh1cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoXCJBYnN0cmFjdCBtZXRob2QgYF9mZXRjaERhdGFgIGNhbGxlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGV4cG9ydHMuQmFzZVN0YW5kYXJkRm9udERhdGFGYWN0b3J5ID0gQmFzZVN0YW5kYXJkRm9udERhdGFGYWN0b3J5O1xuXG4gICAgICAgICAgICAgICAgY2xhc3MgQmFzZVNWR0ZhY3Rvcnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBCYXNlU1ZHRmFjdG9yeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoXCJDYW5ub3QgaW5pdGlhbGl6ZSBCYXNlU1ZHRmFjdG9yeS5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjcmVhdGUod2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoIDw9IDAgfHwgaGVpZ2h0IDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIFNWRyBkaW1lbnNpb25zXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdmcgPSB0aGlzLl9jcmVhdGVTVkcoXCJzdmc6c3ZnXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdmcuc2V0QXR0cmlidXRlKFwidmVyc2lvblwiLCBcIjEuMVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBgJHt3aWR0aH1weGApO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBgJHtoZWlnaHR9cHhgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJwcmVzZXJ2ZUFzcGVjdFJhdGlvXCIsIFwibm9uZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIsIGAwIDAgJHt3aWR0aH0gJHtoZWlnaHR9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3ZnO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudCh0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIFNWRyBlbGVtZW50IHR5cGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVTVkcodHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfY3JlYXRlU1ZHKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoXCJBYnN0cmFjdCBtZXRob2QgYF9jcmVhdGVTVkdgIGNhbGxlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGV4cG9ydHMuQmFzZVNWR0ZhY3RvcnkgPSBCYXNlU1ZHRmFjdG9yeTtcblxuICAgICAgICAgICAgICAgIC8qKiovIH0pLFxuICAgICAgICAgICAgLyogNyAqL1xuICAgICAgICAgICAgLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG5cblxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5Gb250TG9hZGVyID0gZXhwb3J0cy5Gb250RmFjZU9iamVjdCA9IHZvaWQgMDtcblxuICAgICAgICAgICAgICAgIHZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMSk7XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBCYXNlRm9udExvYWRlciB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY0lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25VbnN1cHBvcnRlZEZlYXR1cmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvd25lckRvY3VtZW50ID0gZ2xvYmFsVGhpcy5kb2N1bWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlRWxlbWVudCA9IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IEJhc2VGb250TG9hZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIkNhbm5vdCBpbml0aWFsaXplIEJhc2VGb250TG9hZGVyLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2NJZCA9IGRvY0lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25VbnN1cHBvcnRlZEZlYXR1cmUgPSBvblVuc3VwcG9ydGVkRmVhdHVyZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RvY3VtZW50ID0gb3duZXJEb2N1bWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmF0aXZlRm9udEZhY2VzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0eWxlRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBhZGROYXRpdmVGb250RmFjZShuYXRpdmVGb250RmFjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVGb250RmFjZXMucHVzaChuYXRpdmVGb250RmFjZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RvY3VtZW50LmZvbnRzLmFkZChuYXRpdmVGb250RmFjZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpbnNlcnRSdWxlKHJ1bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdHlsZUVsZW1lbnQgPSB0aGlzLnN0eWxlRWxlbWVudDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdHlsZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZUVsZW1lbnQgPSB0aGlzLnN0eWxlRWxlbWVudCA9IHRoaXMuX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZUVsZW1lbnQuaWQgPSBgUERGSlNfRk9OVF9TVFlMRV9UQUdfJHt0aGlzLmRvY0lkfWA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlU2hlZXQgPSBzdHlsZUVsZW1lbnQuc2hlZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZVNoZWV0Lmluc2VydFJ1bGUocnVsZSwgc3R5bGVTaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY2xlYXIoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG5hdGl2ZUZvbnRGYWNlIG9mIHRoaXMubmF0aXZlRm9udEZhY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG9jdW1lbnQuZm9udHMuZGVsZXRlKG5hdGl2ZUZvbnRGYWNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXRpdmVGb250RmFjZXMubGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3R5bGVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHlsZUVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHlsZUVsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYXN5bmMgYmluZChmb250KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9udC5hdHRhY2hlZCB8fCBmb250Lm1pc3NpbmdGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250LmF0dGFjaGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNGb250TG9hZGluZ0FQSVN1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hdGl2ZUZvbnRGYWNlID0gZm9udC5jcmVhdGVOYXRpdmVGb250RmFjZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hdGl2ZUZvbnRGYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkTmF0aXZlRm9udEZhY2UobmF0aXZlRm9udEZhY2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBuYXRpdmVGb250RmFjZS5sb2FkZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vblVuc3VwcG9ydGVkRmVhdHVyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZUlkOiBfdXRpbC5VTlNVUFBPUlRFRF9GRUFUVVJFUy5lcnJvckZvbnRMb2FkTmF0aXZlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKGBGYWlsZWQgdG8gbG9hZCBmb250ICcke25hdGl2ZUZvbnRGYWNlLmZhbWlseX0nOiAnJHtleH0nLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC5kaXNhYmxlRm9udEZhY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJ1bGUgPSBmb250LmNyZWF0ZUZvbnRGYWNlUnVsZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocnVsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0UnVsZShydWxlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzU3luY0ZvbnRMb2FkaW5nU3VwcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMuX3F1ZXVlTG9hZGluZ0NhbGxiYWNrKHJlc29sdmUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByZXBhcmVGb250TG9hZEV2ZW50KFtydWxlXSwgW2ZvbnRdLCByZXF1ZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9xdWV1ZUxvYWRpbmdDYWxsYmFjayhjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIkFic3RyYWN0IG1ldGhvZCBgX3F1ZXVlTG9hZGluZ0NhbGxiYWNrYC5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgaXNGb250TG9hZGluZ0FQSVN1cHBvcnRlZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhc0ZvbnRzID0gISF0aGlzLl9kb2N1bWVudD8uZm9udHM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF91dGlsLnNoYWRvdykodGhpcywgXCJpc0ZvbnRMb2FkaW5nQVBJU3VwcG9ydGVkXCIsIGhhc0ZvbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBpc1N5bmNGb250TG9hZGluZ1N1cHBvcnRlZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoXCJBYnN0cmFjdCBtZXRob2QgYGlzU3luY0ZvbnRMb2FkaW5nU3VwcG9ydGVkYC5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgX2xvYWRUZXN0Rm9udCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoXCJBYnN0cmFjdCBtZXRob2QgYF9sb2FkVGVzdEZvbnRgLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9wcmVwYXJlRm9udExvYWRFdmVudChydWxlcywgZm9udHNUb0xvYWQsIHJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoXCJBYnN0cmFjdCBtZXRob2QgYF9wcmVwYXJlRm9udExvYWRFdmVudGAuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgRm9udExvYWRlcjtcbiAgICAgICAgICAgICAgICBleHBvcnRzLkZvbnRMb2FkZXIgPSBGb250TG9hZGVyO1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZXhwb3J0cy5Gb250TG9hZGVyID0gRm9udExvYWRlciA9IGNsYXNzIEdlbmVyaWNGb250TG9hZGVyIGV4dGVuZHMgQmFzZUZvbnRMb2FkZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VwZXIocGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmdDb250ZXh0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0czogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRSZXF1ZXN0SWQ6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZFRlc3RGb250SWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQgaXNTeW5jRm9udExvYWRpbmdTdXBwb3J0ZWQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN1cHBvcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtID0gL01vemlsbGFcXC81LjAuKj9ydjooXFxkKykuKj8gR2Vja28vLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0/LlsxXSA+PSAxNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX3V0aWwuc2hhZG93KSh0aGlzLCBcImlzU3luY0ZvbnRMb2FkaW5nU3VwcG9ydGVkXCIsIHN1cHBvcnRlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9xdWV1ZUxvYWRpbmdDYWxsYmFjayhjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXBsZXRlUmVxdWVzdCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLmFzc2VydCkoIXJlcXVlc3QuZG9uZSwgXCJjb21wbGV0ZVJlcXVlc3QoKSBjYW5ub3QgYmUgY2FsbGVkIHR3aWNlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY29udGV4dC5yZXF1ZXN0cy5sZW5ndGggPiAwICYmIGNvbnRleHQucmVxdWVzdHNbMF0uZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3RoZXJSZXF1ZXN0ID0gY29udGV4dC5yZXF1ZXN0cy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChvdGhlclJlcXVlc3QuY2FsbGJhY2ssIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMubG9hZGluZ0NvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGBwZGZqcy1mb250LWxvYWRpbmctJHtjb250ZXh0Lm5leHRSZXF1ZXN0SWQrK31gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlUmVxdWVzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQucmVxdWVzdHMucHVzaChyZXF1ZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0IF9sb2FkVGVzdEZvbnQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2V0TG9hZFRlc3RGb250ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXRvYihcIlQxUlVUd0FMQUlBQUF3QXdRMFpHSURIdFpnNEFBQU9ZQUFBQWdVWkdWRTFsa3pad0FBQUVIQUFBQUJ4SFJFVkdBQlFBXCIgKyBcIkZRQUFCRGdBQUFBZVQxTXZNbFlOWXdrQUFBRWdBQUFBWUdOdFlYQUJEUUxVQUFBQ05BQUFBVUpvWldGay94VkZEUUFBXCIgKyBcIkFMd0FBQUEyYUdobFlRZGtBK29BQUFEMEFBQUFKR2h0ZEhnRDZBQUFBQUFFV0FBQUFBWnRZWGh3QUFKUUFBQUFBUmdBXCIgKyBcIkFBQUdibUZ0WlZqbWRINEFBQUdBQUFBQXNYQnZjM1QvaGdBekFBQURlQUFBQUNBQUFRQUFBQUVBQUxaUkZzUmZEenoxXCIgKyBcIkFBc0Q2QUFBQUFET0JPVExBQUFBQU00S0hEd0FBQUFBQStnRElRQUFBQWdBQWdBQUFBQUFBQUFCQUFBRElRQUFBRm9EXCIgKyBcIjZBQUFBQUFENkFBQkFBQUFBQUFBQUFBQUFBQUFBQUFBQVFBQVVBQUFBZ0FBQUFRRDZBSDBBQVVBQUFLS0Fyd0FBQUNNXCIgKyBcIkFvb0N2QUFBQWVBQU1RRUNBQUFDQUFZSkFBQUFBQUFBQUFBQUFRQUFBQUFBQUFBQUFBQUFBRkJtUldRQXdBQXVBQzREXCIgKyBcIklQODRBRm9ESVFBQUFBQUFBUUFBQUFBQUFBQUFBQ0FBSUFBQkFBQUFEZ0N1QUFFQUFBQUFBQUFBQVFBQUFBRUFBQUFBXCIgKyBcIkFBRUFBUUFBQUFFQUFBQUFBQUlBQVFBQUFBRUFBQUFBQUFNQUFRQUFBQUVBQUFBQUFBUUFBUUFBQUFFQUFBQUFBQVVBXCIgKyBcIkFRQUFBQUVBQUFBQUFBWUFBUUFBQUFNQUFRUUpBQUFBQWdBQkFBTUFBUVFKQUFFQUFnQUJBQU1BQVFRSkFBSUFBZ0FCXCIgKyBcIkFBTUFBUVFKQUFNQUFnQUJBQU1BQVFRSkFBUUFBZ0FCQUFNQUFRUUpBQVVBQWdBQkFBTUFBUVFKQUFZQUFnQUJXQUJZXCIgKyBcIkFBQUFBQUFBQXdBQUFBTUFBQUFjQUFFQUFBQUFBRHdBQXdBQkFBQUFIQUFFQUNBQUFBQUVBQVFBQVFBQUFDNy8vd0FBXCIgKyBcIkFDNy8vLy9UQUFFQUFBQUFBQUFCQmdBQUFRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBXCIgKyBcIkFBQUFBQUFBQUFBQUFBQUFBQUVBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBXCIgKyBcIkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBXCIgKyBcIkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBXCIgKyBcIkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBXCIgKyBcIkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU1BQUFBQUFBRC9nd0F5QUFBQUFRQUFBQUFBQUFBQUFBQUFBQUFBXCIgKyBcIkFBQUJBQVFFQUFFQkFRSllBQUVCQVNINER3RDRHd0hFQXZnY0EvZ1hCSXdNQVl1TCtuejV0UVhrRDVqM0NCTG5FUUFDXCIgKyBcIkFRRUJJVmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWUFBQUJBUUFBRHdBQ0FRRUVFL3QzXCIgKyBcIkRvdjZmQUg2ZkFUK2ZQcDgrbndIRG9zTUN2bTFDdm0xREF6NmZCUUFBQUFBQUFBQkFBQUFBTW1KYnpFQUFBQUF6Z1RqXCIgKyBcIkZRQUFBQURPQk9RcEFBRUFBQUFBQUFBQURBQVVBQVFBQUFBQkFBQUFBZ0FCQUFBQUFBQUFBQUFENkFBQUFBQUFBQT09XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF91dGlsLnNoYWRvdykodGhpcywgXCJfbG9hZFRlc3RGb250XCIsIGdldExvYWRUZXN0Rm9udCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgX3ByZXBhcmVGb250TG9hZEV2ZW50KHJ1bGVzLCBmb250cywgcmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGludDMyKGRhdGEsIG9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5jaGFyQ29kZUF0KG9mZnNldCkgPDwgMjQgfCBkYXRhLmNoYXJDb2RlQXQob2Zmc2V0ICsgMSkgPDwgMTYgfCBkYXRhLmNoYXJDb2RlQXQob2Zmc2V0ICsgMikgPDwgOCB8IGRhdGEuY2hhckNvZGVBdChvZmZzZXQgKyAzKSAmIDB4ZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc3BsaWNlU3RyaW5nKHMsIG9mZnNldCwgcmVtb3ZlLCBpbnNlcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2h1bmsxID0gcy5zdWJzdHJpbmcoMCwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2h1bmsyID0gcy5zdWJzdHJpbmcob2Zmc2V0ICsgcmVtb3ZlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNodW5rMSArIGluc2VydCArIGNodW5rMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaSwgaWk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW52YXMgPSB0aGlzLl9kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjYWxsZWQgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaXNGb250UmVhZHkobmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVkKys7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxlZCA+IDMwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoXCJMb2FkIHRlc3QgZm9udCBuZXZlciBsb2FkZWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5mb250ID0gXCIzMHB4IFwiICsgbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KFwiLlwiLCAwLCAyMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgMSwgMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlRGF0YS5kYXRhWzNdID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoaXNGb250UmVhZHkuYmluZChudWxsLCBuYW1lLCBjYWxsYmFjaykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvYWRUZXN0Rm9udElkID0gYGx0JHtEYXRlLm5vdygpfSR7dGhpcy5sb2FkVGVzdEZvbnRJZCsrfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSB0aGlzLl9sb2FkVGVzdEZvbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgQ09NTUVOVF9PRkZTRVQgPSA5NzY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHNwbGljZVN0cmluZyhkYXRhLCBDT01NRU5UX09GRlNFVCwgbG9hZFRlc3RGb250SWQubGVuZ3RoLCBsb2FkVGVzdEZvbnRJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgQ0ZGX0NIRUNLU1VNX09GRlNFVCA9IDE2O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFhYWFhfVkFMVUUgPSAweDU4NTg1ODU4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGVja3N1bSA9IGludDMyKGRhdGEsIENGRl9DSEVDS1NVTV9PRkZTRVQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMCwgaWkgPSBsb2FkVGVzdEZvbnRJZC5sZW5ndGggLSAzOyBpIDwgaWk7IGkgKz0gNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja3N1bSA9IGNoZWNrc3VtIC0gWFhYWF9WQUxVRSArIGludDMyKGxvYWRUZXN0Rm9udElkLCBpKSB8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPCBsb2FkVGVzdEZvbnRJZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tzdW0gPSBjaGVja3N1bSAtIFhYWFhfVkFMVUUgKyBpbnQzMihsb2FkVGVzdEZvbnRJZCArIFwiWFhYXCIsIGkpIHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gc3BsaWNlU3RyaW5nKGRhdGEsIENGRl9DSEVDS1NVTV9PRkZTRVQsIDQsICgwLCBfdXRpbC5zdHJpbmczMikoY2hlY2tzdW0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBgdXJsKGRhdGE6Zm9udC9vcGVudHlwZTtiYXNlNjQsJHtidG9hKGRhdGEpfSk7YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBydWxlID0gYEBmb250LWZhY2Uge2ZvbnQtZmFtaWx5OlwiJHtsb2FkVGVzdEZvbnRJZH1cIjtzcmM6JHt1cmx9fWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRSdWxlKHJ1bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWVzID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZvbnQgb2YgZm9udHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXMucHVzaChmb250LmxvYWRlZE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzLnB1c2gobG9hZFRlc3RGb250SWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGl2ID0gdGhpcy5fZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXYuc3R5bGUud2lkdGggPSBkaXYuc3R5bGUuaGVpZ2h0ID0gXCIxMHB4XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5zdHlsZS50b3AgPSBkaXYuc3R5bGUubGVmdCA9IFwiMHB4XCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgbmFtZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BhbiA9IHRoaXMuX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4udGV4dENvbnRlbnQgPSBcIkhpXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4uc3R5bGUuZm9udEZhbWlseSA9IG5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChzcGFuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0ZvbnRSZWFkeShsb2FkVGVzdEZvbnRJZCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXYucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIEZvbnRGYWNlT2JqZWN0IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IodHJhbnNsYXRlZERhdGEsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRXZhbFN1cHBvcnRlZCA9IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlRm9udEZhY2UgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZUVycm9ycyA9IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25VbnN1cHBvcnRlZEZlYXR1cmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250UmVnaXN0cnkgPSBudWxsXG4gICAgICAgICAgICAgICAgICAgIH0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcGlsZWRHbHlwaHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgaW4gdHJhbnNsYXRlZERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2ldID0gdHJhbnNsYXRlZERhdGFbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNFdmFsU3VwcG9ydGVkID0gaXNFdmFsU3VwcG9ydGVkICE9PSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZUZvbnRGYWNlID0gZGlzYWJsZUZvbnRGYWNlID09PSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pZ25vcmVFcnJvcnMgPSBpZ25vcmVFcnJvcnMgPT09IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vblVuc3VwcG9ydGVkRmVhdHVyZSA9IG9uVW5zdXBwb3J0ZWRGZWF0dXJlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb250UmVnaXN0cnkgPSBmb250UmVnaXN0cnk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVOYXRpdmVGb250RmFjZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kYXRhIHx8IHRoaXMuZGlzYWJsZUZvbnRGYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuYXRpdmVGb250RmFjZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNzc0ZvbnRJbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlRm9udEZhY2UgPSBuZXcgRm9udEZhY2UodGhpcy5sb2FkZWROYW1lLCB0aGlzLmRhdGEsIHt9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3NzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IHRoaXMuY3NzRm9udEluZm8uZm9udFdlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jc3NGb250SW5mby5pdGFsaWNBbmdsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3Muc3R5bGUgPSBgb2JsaXF1ZSAke3RoaXMuY3NzRm9udEluZm8uaXRhbGljQW5nbGV9ZGVnYDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVGb250RmFjZSA9IG5ldyBGb250RmFjZSh0aGlzLmNzc0ZvbnRJbmZvLmZvbnRGYW1pbHksIHRoaXMuZGF0YSwgY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZm9udFJlZ2lzdHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb250UmVnaXN0cnkucmVnaXN0ZXJGb250KHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmF0aXZlRm9udEZhY2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVGb250RmFjZVJ1bGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZGF0YSB8fCB0aGlzLmRpc2FibGVGb250RmFjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gKDAsIF91dGlsLmJ5dGVzVG9TdHJpbmcpKHRoaXMuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBgdXJsKGRhdGE6JHt0aGlzLm1pbWV0eXBlfTtiYXNlNjQsJHtidG9hKGRhdGEpfSk7YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBydWxlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY3NzRm9udEluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlID0gYEBmb250LWZhY2Uge2ZvbnQtZmFtaWx5OlwiJHt0aGlzLmxvYWRlZE5hbWV9XCI7c3JjOiR7dXJsfX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3NzID0gYGZvbnQtd2VpZ2h0OiAke3RoaXMuY3NzRm9udEluZm8uZm9udFdlaWdodH07YDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNzc0ZvbnRJbmZvLml0YWxpY0FuZ2xlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcyArPSBgZm9udC1zdHlsZTogb2JsaXF1ZSAke3RoaXMuY3NzRm9udEluZm8uaXRhbGljQW5nbGV9ZGVnO2A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZSA9IGBAZm9udC1mYWNlIHtmb250LWZhbWlseTpcIiR7dGhpcy5jc3NGb250SW5mby5mb250RmFtaWx5fVwiOyR7Y3NzfXNyYzoke3VybH19YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZm9udFJlZ2lzdHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb250UmVnaXN0cnkucmVnaXN0ZXJGb250KHRoaXMsIHVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBydWxlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0UGF0aEdlbmVyYXRvcihvYmpzLCBjaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbXBpbGVkR2x5cGhzW2NoYXJhY3Rlcl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBpbGVkR2x5cGhzW2NoYXJhY3Rlcl07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjbWRzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZHMgPSBvYmpzLmdldCh0aGlzLmxvYWRlZE5hbWUgKyBcIl9wYXRoX1wiICsgY2hhcmFjdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlnbm9yZUVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vblVuc3VwcG9ydGVkRmVhdHVyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVJZDogX3V0aWwuVU5TVVBQT1JURURfRkVBVFVSRVMuZXJyb3JGb250R2V0UGF0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKGBnZXRQYXRoR2VuZXJhdG9yIC0gaWdub3JpbmcgY2hhcmFjdGVyOiBcIiR7ZXh9XCIuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcGlsZWRHbHlwaHNbY2hhcmFjdGVyXSA9IGZ1bmN0aW9uIChjLCBzaXplKSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNFdmFsU3VwcG9ydGVkICYmIF91dGlsLklzRXZhbFN1cHBvcnRlZENhY2hlZC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGpzQnVmID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGN1cnJlbnQgb2YgY21kcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhcmdzID0gY3VycmVudC5hcmdzICE9PSB1bmRlZmluZWQgPyBjdXJyZW50LmFyZ3Muam9pbihcIixcIikgOiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc0J1Zi5wdXNoKFwiYy5cIiwgY3VycmVudC5jbWQsIFwiKFwiLCBhcmdzLCBcIik7XFxuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBpbGVkR2x5cGhzW2NoYXJhY3Rlcl0gPSBuZXcgRnVuY3Rpb24oXCJjXCIsIFwic2l6ZVwiLCBqc0J1Zi5qb2luKFwiXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcGlsZWRHbHlwaHNbY2hhcmFjdGVyXSA9IGZ1bmN0aW9uIChjLCBzaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjdXJyZW50IG9mIGNtZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQuY21kID09PSBcInNjYWxlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuYXJncyA9IFtzaXplLCAtc2l6ZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjW2N1cnJlbnQuY21kXS5hcHBseShjLCBjdXJyZW50LmFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGV4cG9ydHMuRm9udEZhY2VPYmplY3QgPSBGb250RmFjZU9iamVjdDtcblxuICAgICAgICAgICAgICAgIC8qKiovIH0pLFxuICAgICAgICAgICAgLyogOCAqL1xuICAgICAgICAgICAgLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG5cblxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5Ob2RlU3RhbmRhcmRGb250RGF0YUZhY3RvcnkgPSBleHBvcnRzLk5vZGVDYW52YXNGYWN0b3J5ID0gZXhwb3J0cy5Ob2RlQ01hcFJlYWRlckZhY3RvcnkgPSB2b2lkIDA7XG5cbiAgICAgICAgICAgICAgICB2YXIgX2Jhc2VfZmFjdG9yeSA9IF9fd19wZGZqc19yZXF1aXJlX18oNik7XG5cbiAgICAgICAgICAgICAgICB2YXIgX2lzX25vZGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDMpO1xuXG4gICAgICAgICAgICAgICAgdmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXygxKTtcblxuICAgICAgICAgICAgICAgIGxldCBOb2RlQ2FudmFzRmFjdG9yeSA9IGNsYXNzIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiTm90IGltcGxlbWVudGVkOiBOb2RlQ2FudmFzRmFjdG9yeVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLk5vZGVDYW52YXNGYWN0b3J5ID0gTm9kZUNhbnZhc0ZhY3Rvcnk7XG4gICAgICAgICAgICAgICAgbGV0IE5vZGVDTWFwUmVhZGVyRmFjdG9yeSA9IGNsYXNzIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiTm90IGltcGxlbWVudGVkOiBOb2RlQ01hcFJlYWRlckZhY3RvcnlcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5Ob2RlQ01hcFJlYWRlckZhY3RvcnkgPSBOb2RlQ01hcFJlYWRlckZhY3Rvcnk7XG4gICAgICAgICAgICAgICAgbGV0IE5vZGVTdGFuZGFyZEZvbnREYXRhRmFjdG9yeSA9IGNsYXNzIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiTm90IGltcGxlbWVudGVkOiBOb2RlU3RhbmRhcmRGb250RGF0YUZhY3RvcnlcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5Ob2RlU3RhbmRhcmRGb250RGF0YUZhY3RvcnkgPSBOb2RlU3RhbmRhcmRGb250RGF0YUZhY3Rvcnk7XG5cbiAgICAgICAgICAgICAgICBpZiAoX2lzX25vZGUuaXNOb2RlSlMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmV0Y2hEYXRhID0gZnVuY3Rpb24gKHVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZzLnJlYWRGaWxlKHVybCwgKGVycm9yLCBkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvciB8fCAhZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihlcnJvcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgVWludDhBcnJheShkYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBleHBvcnRzLk5vZGVDYW52YXNGYWN0b3J5ID0gTm9kZUNhbnZhc0ZhY3RvcnkgPSBjbGFzcyBleHRlbmRzIF9iYXNlX2ZhY3RvcnkuQmFzZUNhbnZhc0ZhY3Rvcnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZUNhbnZhcyh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgQ2FudmFzID0gcmVxdWlyZShcImNhbnZhc1wiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDYW52YXMuY3JlYXRlQ2FudmFzKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGV4cG9ydHMuTm9kZUNNYXBSZWFkZXJGYWN0b3J5ID0gTm9kZUNNYXBSZWFkZXJGYWN0b3J5ID0gY2xhc3MgZXh0ZW5kcyBfYmFzZV9mYWN0b3J5LkJhc2VDTWFwUmVhZGVyRmFjdG9yeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZmV0Y2hEYXRhKHVybCwgY29tcHJlc3Npb25UeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoRGF0YSh1cmwpLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjTWFwRGF0YTogZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXByZXNzaW9uVHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGV4cG9ydHMuTm9kZVN0YW5kYXJkRm9udERhdGFGYWN0b3J5ID0gTm9kZVN0YW5kYXJkRm9udERhdGFGYWN0b3J5ID0gY2xhc3MgZXh0ZW5kcyBfYmFzZV9mYWN0b3J5LkJhc2VTdGFuZGFyZEZvbnREYXRhRmFjdG9yeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZmV0Y2hEYXRhKHVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaERhdGEodXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKiovIH0pLFxuICAgICAgICAgICAgLyogOSAqL1xuICAgICAgICAgICAgLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG5cblxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5Bbm5vdGF0aW9uU3RvcmFnZSA9IHZvaWQgMDtcblxuICAgICAgICAgICAgICAgIHZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMSk7XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBBbm5vdGF0aW9uU3RvcmFnZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RvcmFnZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RpbWVTdGFtcCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb2RpZmllZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblNldE1vZGlmaWVkID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25SZXNldE1vZGlmaWVkID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldFZhbHVlKGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX3N0b3JhZ2UuZ2V0KGtleSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZGVmYXVsdFZhbHVlLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzZXRWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvYmogPSB0aGlzLl9zdG9yYWdlLmdldChrZXkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbW9kaWZpZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iaiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZW50cnksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmpbZW50cnldICE9PSB2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ialtlbnRyeV0gPSB2YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0b3JhZ2Uuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kaWZpZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90aW1lU3RhbXAgPSBEYXRlLm5vdygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0TW9kaWZpZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldEFsbCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdG9yYWdlLnNpemUgPiAwID8gKDAsIF91dGlsLm9iamVjdEZyb21NYXApKHRoaXMuX3N0b3JhZ2UpIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBzaXplKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0b3JhZ2Uuc2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9zZXRNb2RpZmllZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fbW9kaWZpZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb2RpZmllZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMub25TZXRNb2RpZmllZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25TZXRNb2RpZmllZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlc2V0TW9kaWZpZWQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fbW9kaWZpZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb2RpZmllZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9uUmVzZXRNb2RpZmllZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25SZXNldE1vZGlmaWVkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0IHNlcmlhbGl6YWJsZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdG9yYWdlLnNpemUgPiAwID8gdGhpcy5fc3RvcmFnZSA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgbGFzdE1vZGlmaWVkKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RpbWVTdGFtcC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLkFubm90YXRpb25TdG9yYWdlID0gQW5ub3RhdGlvblN0b3JhZ2U7XG5cbiAgICAgICAgICAgICAgICAvKioqLyB9KSxcbiAgICAgICAgICAgIC8qIDEwICovXG4gICAgICAgICAgICAvKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblxuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLkNhbnZhc0dyYXBoaWNzID0gdm9pZCAwO1xuXG4gICAgICAgICAgICAgICAgdmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXygxKTtcblxuICAgICAgICAgICAgICAgIHZhciBfcGF0dGVybl9oZWxwZXIgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExKTtcblxuICAgICAgICAgICAgICAgIHZhciBfZGlzcGxheV91dGlscyA9IF9fd19wZGZqc19yZXF1aXJlX18oNSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBNSU5fRk9OVF9TSVpFID0gMTY7XG4gICAgICAgICAgICAgICAgY29uc3QgTUFYX0ZPTlRfU0laRSA9IDEwMDtcbiAgICAgICAgICAgICAgICBjb25zdCBNQVhfR1JPVVBfU0laRSA9IDQwOTY7XG4gICAgICAgICAgICAgICAgY29uc3QgRVhFQ1VUSU9OX1RJTUUgPSAxNTtcbiAgICAgICAgICAgICAgICBjb25zdCBFWEVDVVRJT05fU1RFUFMgPSAxMDtcbiAgICAgICAgICAgICAgICBjb25zdCBDT01QSUxFX1RZUEUzX0dMWVBIUyA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc3QgTUFYX1NJWkVfVE9fQ09NUElMRSA9IDEwMDA7XG4gICAgICAgICAgICAgICAgY29uc3QgRlVMTF9DSFVOS19IRUlHSFQgPSAxNjtcbiAgICAgICAgICAgICAgICBjb25zdCBMSU5FV0lEVEhfU0NBTEVfRkFDVE9SID0gMS4wMDAwMDE7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBtaXJyb3JDb250ZXh0T3BlcmF0aW9ucyhjdHgsIGRlc3RDdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN0eC5fcmVtb3ZlTWlycm9yaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb250ZXh0IGlzIGFscmVhZHkgZm9yd2FyZGluZyBvcGVyYXRpb25zLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGN0eC5fX29yaWdpbmFsU2F2ZSA9IGN0eC5zYXZlO1xuICAgICAgICAgICAgICAgICAgICBjdHguX19vcmlnaW5hbFJlc3RvcmUgPSBjdHgucmVzdG9yZTtcbiAgICAgICAgICAgICAgICAgICAgY3R4Ll9fb3JpZ2luYWxSb3RhdGUgPSBjdHgucm90YXRlO1xuICAgICAgICAgICAgICAgICAgICBjdHguX19vcmlnaW5hbFNjYWxlID0gY3R4LnNjYWxlO1xuICAgICAgICAgICAgICAgICAgICBjdHguX19vcmlnaW5hbFRyYW5zbGF0ZSA9IGN0eC50cmFuc2xhdGU7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5fX29yaWdpbmFsVHJhbnNmb3JtID0gY3R4LnRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgY3R4Ll9fb3JpZ2luYWxTZXRUcmFuc2Zvcm0gPSBjdHguc2V0VHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgICAgICBjdHguX19vcmlnaW5hbFJlc2V0VHJhbnNmb3JtID0gY3R4LnJlc2V0VHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgICAgICBjdHguX19vcmlnaW5hbENsaXAgPSBjdHguY2xpcDtcbiAgICAgICAgICAgICAgICAgICAgY3R4Ll9fb3JpZ2luYWxNb3ZlVG8gPSBjdHgubW92ZVRvO1xuICAgICAgICAgICAgICAgICAgICBjdHguX19vcmlnaW5hbExpbmVUbyA9IGN0eC5saW5lVG87XG4gICAgICAgICAgICAgICAgICAgIGN0eC5fX29yaWdpbmFsQmV6aWVyQ3VydmVUbyA9IGN0eC5iZXppZXJDdXJ2ZVRvO1xuICAgICAgICAgICAgICAgICAgICBjdHguX19vcmlnaW5hbFJlY3QgPSBjdHgucmVjdDtcbiAgICAgICAgICAgICAgICAgICAgY3R4Ll9fb3JpZ2luYWxDbG9zZVBhdGggPSBjdHguY2xvc2VQYXRoO1xuICAgICAgICAgICAgICAgICAgICBjdHguX19vcmlnaW5hbEJlZ2luUGF0aCA9IGN0eC5iZWdpblBhdGg7XG5cbiAgICAgICAgICAgICAgICAgICAgY3R4Ll9yZW1vdmVNaXJyb3JpbmcgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguc2F2ZSA9IGN0eC5fX29yaWdpbmFsU2F2ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5yZXN0b3JlID0gY3R4Ll9fb3JpZ2luYWxSZXN0b3JlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJvdGF0ZSA9IGN0eC5fX29yaWdpbmFsUm90YXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnNjYWxlID0gY3R4Ll9fb3JpZ2luYWxTY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUgPSBjdHguX19vcmlnaW5hbFRyYW5zbGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2Zvcm0gPSBjdHguX19vcmlnaW5hbFRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zZXRUcmFuc2Zvcm0gPSBjdHguX19vcmlnaW5hbFNldFRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5yZXNldFRyYW5zZm9ybSA9IGN0eC5fX29yaWdpbmFsUmVzZXRUcmFuc2Zvcm07XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguY2xpcCA9IGN0eC5fX29yaWdpbmFsQ2xpcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8gPSBjdHguX19vcmlnaW5hbE1vdmVUbztcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5saW5lVG8gPSBjdHguX19vcmlnaW5hbExpbmVUbztcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvID0gY3R4Ll9fb3JpZ2luYWxCZXppZXJDdXJ2ZVRvO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJlY3QgPSBjdHguX19vcmlnaW5hbFJlY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguY2xvc2VQYXRoID0gY3R4Ll9fb3JpZ2luYWxDbG9zZVBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoID0gY3R4Ll9fb3JpZ2luYWxCZWdpblBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgY3R4Ll9yZW1vdmVNaXJyb3Jpbmc7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgY3R4LnNhdmUgPSBmdW5jdGlvbiBjdHhTYXZlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdEN0eC5zYXZlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19vcmlnaW5hbFNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSA9IGZ1bmN0aW9uIGN0eFJlc3RvcmUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0Q3R4LnJlc3RvcmUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fX29yaWdpbmFsUmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUgPSBmdW5jdGlvbiBjdHhUcmFuc2xhdGUoeCwgeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdEN0eC50cmFuc2xhdGUoeCwgeSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19vcmlnaW5hbFRyYW5zbGF0ZSh4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBjdHguc2NhbGUgPSBmdW5jdGlvbiBjdHhTY2FsZSh4LCB5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0Q3R4LnNjYWxlKHgsIHkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9fb3JpZ2luYWxTY2FsZSh4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBjdHgudHJhbnNmb3JtID0gZnVuY3Rpb24gY3R4VHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RDdHgudHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9fb3JpZ2luYWxUcmFuc2Zvcm0oYSwgYiwgYywgZCwgZSwgZik7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgY3R4LnNldFRyYW5zZm9ybSA9IGZ1bmN0aW9uIGN0eFNldFRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0Q3R4LnNldFRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fX29yaWdpbmFsU2V0VHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGN0eC5yZXNldFRyYW5zZm9ybSA9IGZ1bmN0aW9uIGN0eFJlc2V0VHJhbnNmb3JtKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdEN0eC5yZXNldFRyYW5zZm9ybSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9fb3JpZ2luYWxSZXNldFRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGN0eC5yb3RhdGUgPSBmdW5jdGlvbiBjdHhSb3RhdGUoYW5nbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RDdHgucm90YXRlKGFuZ2xlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fX29yaWdpbmFsUm90YXRlKGFuZ2xlKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBjdHguY2xpcCA9IGZ1bmN0aW9uIGN0eFJvdGF0ZShydWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0Q3R4LmNsaXAocnVsZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19vcmlnaW5hbENsaXAocnVsZSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgY3R4Lm1vdmVUbyA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0Q3R4Lm1vdmVUbyh4LCB5KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fX29yaWdpbmFsTW92ZVRvKHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGN0eC5saW5lVG8gPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdEN0eC5saW5lVG8oeCwgeSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19vcmlnaW5hbExpbmVUbyh4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyA9IGZ1bmN0aW9uIChjcDF4LCBjcDF5LCBjcDJ4LCBjcDJ5LCB4LCB5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0Q3R4LmJlemllckN1cnZlVG8oY3AxeCwgY3AxeSwgY3AyeCwgY3AyeSwgeCwgeSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19vcmlnaW5hbEJlemllckN1cnZlVG8oY3AxeCwgY3AxeSwgY3AyeCwgY3AyeSwgeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgY3R4LnJlY3QgPSBmdW5jdGlvbiAoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdEN0eC5yZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9fb3JpZ2luYWxSZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGN0eC5jbG9zZVBhdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0Q3R4LmNsb3NlUGF0aCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9fb3JpZ2luYWxDbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdEN0eC5iZWdpblBhdGgoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fX29yaWdpbmFsQmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYWRkQ29udGV4dEN1cnJlbnRUcmFuc2Zvcm0oY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdHguX3RyYW5zZm9ybVN0YWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguX3RyYW5zZm9ybVN0YWNrID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGN0eC5fb3JpZ2luYWxTYXZlID0gY3R4LnNhdmU7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5fb3JpZ2luYWxSZXN0b3JlID0gY3R4LnJlc3RvcmU7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5fb3JpZ2luYWxSb3RhdGUgPSBjdHgucm90YXRlO1xuICAgICAgICAgICAgICAgICAgICBjdHguX29yaWdpbmFsU2NhbGUgPSBjdHguc2NhbGU7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5fb3JpZ2luYWxUcmFuc2xhdGUgPSBjdHgudHJhbnNsYXRlO1xuICAgICAgICAgICAgICAgICAgICBjdHguX29yaWdpbmFsVHJhbnNmb3JtID0gY3R4LnRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgY3R4Ll9vcmlnaW5hbFNldFRyYW5zZm9ybSA9IGN0eC5zZXRUcmFuc2Zvcm07XG4gICAgICAgICAgICAgICAgICAgIGN0eC5fb3JpZ2luYWxSZXNldFRyYW5zZm9ybSA9IGN0eC5yZXNldFRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgY3R4Ll90cmFuc2Zvcm1NYXRyaXggPSBjdHguX3RyYW5zZm9ybU1hdHJpeCB8fCBbMSwgMCwgMCwgMSwgMCwgMF07XG4gICAgICAgICAgICAgICAgICAgIGN0eC5fdHJhbnNmb3JtU3RhY2sgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LmdldFByb3RvdHlwZU9mKGN0eCksIFwibGluZVdpZHRoXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4Ll9zZXRMaW5lV2lkdGggPSBkZXNjLnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5fZ2V0TGluZVdpZHRoID0gZGVzYy5nZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBcImxpbmVXaWR0aFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXRMaW5lV2lkdGgod2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0TGluZVdpZHRoKHdpZHRoICogTElORVdJRFRIX1NDQUxFX0ZBQ1RPUik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldExpbmVXaWR0aCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldExpbmVXaWR0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChfKSB7fVxuXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIFwibW96Q3VycmVudFRyYW5zZm9ybVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldEN1cnJlbnRUcmFuc2Zvcm0oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zZm9ybU1hdHJpeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIFwibW96Q3VycmVudFRyYW5zZm9ybUludmVyc2VcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXRDdXJyZW50VHJhbnNmb3JtSW52ZXJzZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbYSwgYiwgYywgZCwgZSwgZl0gPSB0aGlzLl90cmFuc2Zvcm1NYXRyaXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRfYmMgPSBhICogZCAtIGIgKiBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJjX2FkID0gYiAqIGMgLSBhICogZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2QgLyBhZF9iYywgYiAvIGJjX2FkLCBjIC8gYmNfYWQsIGEgLyBhZF9iYywgKGQgKiBlIC0gYyAqIGYpIC8gYmNfYWQsIChiICogZSAtIGEgKiBmKSAvIGFkX2JjXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY3R4LnNhdmUgPSBmdW5jdGlvbiBjdHhTYXZlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2xkID0gdGhpcy5fdHJhbnNmb3JtTWF0cml4O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2Zvcm1TdGFjay5wdXNoKG9sZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybU1hdHJpeCA9IG9sZC5zbGljZSgwLCA2KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3JpZ2luYWxTYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUgPSBmdW5jdGlvbiBjdHhSZXN0b3JlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RyYW5zZm9ybVN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKShcIlRyaWVkIHRvIHJlc3RvcmUgYSBjdHggd2hlbiB0aGUgc3RhY2sgd2FzIGFscmVhZHkgZW1wdHkuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2ID0gdGhpcy5fdHJhbnNmb3JtU3RhY2sucG9wKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNmb3JtTWF0cml4ID0gcHJldjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29yaWdpbmFsUmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUgPSBmdW5jdGlvbiBjdHhUcmFuc2xhdGUoeCwgeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbSA9IHRoaXMuX3RyYW5zZm9ybU1hdHJpeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1bNF0gPSBtWzBdICogeCArIG1bMl0gKiB5ICsgbVs0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1bNV0gPSBtWzFdICogeCArIG1bM10gKiB5ICsgbVs1XTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3JpZ2luYWxUcmFuc2xhdGUoeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgY3R4LnNjYWxlID0gZnVuY3Rpb24gY3R4U2NhbGUoeCwgeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbSA9IHRoaXMuX3RyYW5zZm9ybU1hdHJpeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1bMF0gKj0geDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1bMV0gKj0geDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1bMl0gKj0geTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1bM10gKj0geTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3JpZ2luYWxTY2FsZSh4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBjdHgudHJhbnNmb3JtID0gZnVuY3Rpb24gY3R4VHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG0gPSB0aGlzLl90cmFuc2Zvcm1NYXRyaXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2Zvcm1NYXRyaXggPSBbbVswXSAqIGEgKyBtWzJdICogYiwgbVsxXSAqIGEgKyBtWzNdICogYiwgbVswXSAqIGMgKyBtWzJdICogZCwgbVsxXSAqIGMgKyBtWzNdICogZCwgbVswXSAqIGUgKyBtWzJdICogZiArIG1bNF0sIG1bMV0gKiBlICsgbVszXSAqIGYgKyBtWzVdXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY3R4Ll9vcmlnaW5hbFRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBjdHguc2V0VHJhbnNmb3JtID0gZnVuY3Rpb24gY3R4U2V0VHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybU1hdHJpeCA9IFthLCBiLCBjLCBkLCBlLCBmXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY3R4Ll9vcmlnaW5hbFNldFRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBjdHgucmVzZXRUcmFuc2Zvcm0gPSBmdW5jdGlvbiBjdHhSZXNldFRyYW5zZm9ybSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybU1hdHJpeCA9IFsxLCAwLCAwLCAxLCAwLCAwXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY3R4Ll9vcmlnaW5hbFJlc2V0VHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgY3R4LnJvdGF0ZSA9IGZ1bmN0aW9uIGN0eFJvdGF0ZShhbmdsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29zVmFsdWUgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzaW5WYWx1ZSA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG0gPSB0aGlzLl90cmFuc2Zvcm1NYXRyaXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2Zvcm1NYXRyaXggPSBbbVswXSAqIGNvc1ZhbHVlICsgbVsyXSAqIHNpblZhbHVlLCBtWzFdICogY29zVmFsdWUgKyBtWzNdICogc2luVmFsdWUsIG1bMF0gKiAtc2luVmFsdWUgKyBtWzJdICogY29zVmFsdWUsIG1bMV0gKiAtc2luVmFsdWUgKyBtWzNdICogY29zVmFsdWUsIG1bNF0sIG1bNV1dO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcmlnaW5hbFJvdGF0ZShhbmdsZSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgQ2FjaGVkQ2FudmFzZXMge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihjYW52YXNGYWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc0ZhY3RvcnkgPSBjYW52YXNGYWN0b3J5O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRDYW52YXMoaWQsIHdpZHRoLCBoZWlnaHQsIHRyYWNrVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2FudmFzRW50cnk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhY2hlW2lkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzRW50cnkgPSB0aGlzLmNhY2hlW2lkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc0ZhY3RvcnkucmVzZXQoY2FudmFzRW50cnksIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhc0VudHJ5LmNvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNFbnRyeSA9IHRoaXMuY2FudmFzRmFjdG9yeS5jcmVhdGUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZVtpZF0gPSBjYW52YXNFbnRyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNrVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ29udGV4dEN1cnJlbnRUcmFuc2Zvcm0oY2FudmFzRW50cnkuY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYW52YXNFbnRyeTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLmNhY2hlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FudmFzRW50cnkgPSB0aGlzLmNhY2hlW2lkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhc0ZhY3RvcnkuZGVzdHJveShjYW52YXNFbnRyeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuY2FjaGVbaWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjb21waWxlVHlwZTNHbHlwaChpbWdEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFBPSU5UX1RPX1BST0NFU1NfTElNSVQgPSAxMDAwO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBQT0lOVF9UWVBFUyA9IG5ldyBVaW50OEFycmF5KFswLCAyLCA0LCAwLCAxLCAwLCA1LCA0LCA4LCAxMCwgMCwgOCwgMCwgMiwgMSwgMF0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IGltZ0RhdGEud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBpbWdEYXRhLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoMSA9IHdpZHRoICsgMTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGksIGlpLCBqLCBqMDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9pbnRzID0gbmV3IFVpbnQ4QXJyYXkod2lkdGgxICogKGhlaWdodCArIDEpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZVNpemUgPSB3aWR0aCArIDcgJiB+NyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEwID0gaW1nRGF0YS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkobGluZVNpemUgKiBoZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcG9zID0gMDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGRhdGEwLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW0gPSBkYXRhMFtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXNrID0gMTI4O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobWFzayA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW3BvcysrXSA9IGVsZW0gJiBtYXNrID8gMCA6IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrID4+PSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgcG9zID0gMDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtwb3NdICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHNbMF0gPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgKytjb3VudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDE7IGogPCB3aWR0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtwb3NdICE9PSBkYXRhW3BvcyArIDFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzW2pdID0gZGF0YVtwb3NdID8gMiA6IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKytjb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtwb3NdICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHNbal0gPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgKytjb3VudDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBoZWlnaHQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zID0gaSAqIGxpbmVTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgajAgPSBpICogd2lkdGgxO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtwb3MgLSBsaW5lU2l6ZV0gIT09IGRhdGFbcG9zXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50c1tqMF0gPSBkYXRhW3Bvc10gPyAxIDogODtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArK2NvdW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3VtID0gKGRhdGFbcG9zXSA/IDQgOiAwKSArIChkYXRhW3BvcyAtIGxpbmVTaXplXSA/IDggOiAwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMTsgaiA8IHdpZHRoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdW0gPSAoc3VtID4+IDIpICsgKGRhdGFbcG9zICsgMV0gPyA0IDogMCkgKyAoZGF0YVtwb3MgLSBsaW5lU2l6ZSArIDFdID8gOCA6IDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFBPSU5UX1RZUEVTW3N1bV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzW2owICsgal0gPSBQT0lOVF9UWVBFU1tzdW1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArK2NvdW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtwb3MgLSBsaW5lU2l6ZV0gIT09IGRhdGFbcG9zXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50c1tqMCArIGpdID0gZGF0YVtwb3NdID8gMiA6IDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKytjb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ID4gUE9JTlRfVE9fUFJPQ0VTU19MSU1JVCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcG9zID0gbGluZVNpemUgKiAoaGVpZ2h0IC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIGowID0gaSAqIHdpZHRoMTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtwb3NdICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHNbajBdID0gODtcbiAgICAgICAgICAgICAgICAgICAgICAgICsrY291bnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAxOyBqIDwgd2lkdGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFbcG9zXSAhPT0gZGF0YVtwb3MgKyAxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50c1tqMCArIGpdID0gZGF0YVtwb3NdID8gNCA6IDg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKytjb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtwb3NdICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHNbajAgKyBqXSA9IDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICArK2NvdW50O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ID4gUE9JTlRfVE9fUFJPQ0VTU19MSU1JVCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGVwcyA9IG5ldyBJbnQzMkFycmF5KFswLCB3aWR0aDEsIC0xLCAwLCAtd2lkdGgxLCAwLCAwLCAwLCAxXSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG91dGxpbmVzID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgY291bnQgJiYgaSA8PSBoZWlnaHQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHAgPSBpICogd2lkdGgxO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kID0gcCArIHdpZHRoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAocCA8IGVuZCAmJiAhcG9pbnRzW3BdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocCA9PT0gZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvb3JkcyA9IFtwICUgd2lkdGgxLCBpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHAwID0gcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0eXBlID0gcG9pbnRzW3BdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RlcCA9IHN0ZXBzW3R5cGVdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwICs9IHN0ZXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoIXBvaW50c1twXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcCA9IHBvaW50c1twXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcCAhPT0gNSAmJiBwcCAhPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IHBwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHNbcF0gPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSBwcCAmIDB4MzMgKiB0eXBlID4+IDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50c1twXSAmPSB0eXBlID4+IDIgfCB0eXBlIDw8IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29vcmRzLnB1c2gocCAlIHdpZHRoMSwgcCAvIHdpZHRoMSB8IDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwb2ludHNbcF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1jb3VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlIChwMCAhPT0gcCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmVzLnB1c2goY29vcmRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC0taTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRyYXdPdXRsaW5lID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5zY2FsZSgxIC8gd2lkdGgsIC0xIC8gaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMudHJhbnNsYXRlKDAsIC1oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5iZWdpblBhdGgoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDAsIGtrID0gb3V0bGluZXMubGVuZ3RoOyBrIDwga2s7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBvdXRsaW5lc1trXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLm1vdmVUbyhvWzBdLCBvWzFdKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGwgPSAyLCBsbCA9IG8ubGVuZ3RoOyBsIDwgbGw7IGwgKz0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmxpbmVUbyhvW2xdLCBvW2wgKyAxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjLmZpbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHJhd091dGxpbmU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgQ2FudmFzRXh0cmFTdGF0ZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWxwaGFJc1NoYXBlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvbnRTaXplID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9udFNpemVTY2FsZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHRNYXRyaXggPSBfdXRpbC5JREVOVElUWV9NQVRSSVg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHRNYXRyaXhTY2FsZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvbnRNYXRyaXggPSBfdXRpbC5GT05UX0lERU5USVRZX01BVFJJWDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGVhZGluZyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGluZVggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saW5lWSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJTcGFjaW5nID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud29yZFNwYWNpbmcgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0SFNjYWxlID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dFJlbmRlcmluZ01vZGUgPSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0UmlzZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbGxDb2xvciA9IFwiIzAwMDAwMFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJva2VDb2xvciA9IFwiIzAwMDAwMFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXR0ZXJuRmlsbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxsQWxwaGEgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJva2VBbHBoYSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVXaWR0aCA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVNNYXNrID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmZXJNYXBzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnROZXdQYXRoQW5kQ2xpcEJveChbMCwgMCwgd2lkdGgsIGhlaWdodF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY2xvbmUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjbG9uZSA9IE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9uZS5jbGlwQm94ID0gdGhpcy5jbGlwQm94LnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW50UG9pbnQoeCwgeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVQYXRoTWluTWF4KHRyYW5zZm9ybSwgeCwgeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgW3gsIHldID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbeCwgeV0sIHRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1pblggPSBNYXRoLm1pbih0aGlzLm1pblgsIHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5taW5ZID0gTWF0aC5taW4odGhpcy5taW5ZLCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF4WCA9IE1hdGgubWF4KHRoaXMubWF4WCwgeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1heFkgPSBNYXRoLm1heCh0aGlzLm1heFksIHkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ3VydmVQYXRoTWluTWF4KHRyYW5zZm9ybSwgeDAsIHkwLCB4MSwgeTEsIHgyLCB5MiwgeDMsIHkzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBib3ggPSBfdXRpbC5VdGlsLmJlemllckJvdW5kaW5nQm94KHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIsIHgzLCB5Myk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUGF0aE1pbk1heCh0cmFuc2Zvcm0sIGJveFswXSwgYm94WzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUGF0aE1pbk1heCh0cmFuc2Zvcm0sIGJveFsyXSwgYm94WzNdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldFBhdGhCb3VuZGluZ0JveChwYXRoVHlwZSA9IF9wYXR0ZXJuX2hlbHBlci5QYXRoVHlwZS5GSUxMLCB0cmFuc2Zvcm0gPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBib3ggPSBbdGhpcy5taW5YLCB0aGlzLm1pblksIHRoaXMubWF4WCwgdGhpcy5tYXhZXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGhUeXBlID09PSBfcGF0dGVybl9oZWxwZXIuUGF0aFR5cGUuU1RST0tFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIlN0cm9rZSBib3VuZGluZyBib3ggbXVzdCBpbmNsdWRlIHRyYW5zZm9ybS5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NhbGUgPSBfdXRpbC5VdGlsLnNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKHRyYW5zZm9ybSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB4U3Ryb2tlUGFkID0gc2NhbGVbMF0gKiB0aGlzLmxpbmVXaWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeVN0cm9rZVBhZCA9IHNjYWxlWzFdICogdGhpcy5saW5lV2lkdGggLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveFswXSAtPSB4U3Ryb2tlUGFkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveFsxXSAtPSB5U3Ryb2tlUGFkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveFsyXSArPSB4U3Ryb2tlUGFkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveFszXSArPSB5U3Ryb2tlUGFkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYm94O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ2xpcEZyb21QYXRoKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW50ZXJzZWN0ID0gX3V0aWwuVXRpbC5pbnRlcnNlY3QodGhpcy5jbGlwQm94LCB0aGlzLmdldFBhdGhCb3VuZGluZ0JveCgpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydE5ld1BhdGhBbmRDbGlwQm94KGludGVyc2VjdCB8fCBbMCwgMCwgMCwgMF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhcnROZXdQYXRoQW5kQ2xpcEJveChib3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpcEJveCA9IGJveDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWluWCA9IEluZmluaXR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5taW5ZID0gSW5maW5pdHk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1heFggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXhZID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldENsaXBwZWRQYXRoQm91bmRpbmdCb3gocGF0aFR5cGUgPSBfcGF0dGVybl9oZWxwZXIuUGF0aFR5cGUuRklMTCwgdHJhbnNmb3JtID0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF91dGlsLlV0aWwuaW50ZXJzZWN0KHRoaXMuY2xpcEJveCwgdGhpcy5nZXRQYXRoQm91bmRpbmdCb3gocGF0aFR5cGUsIHRyYW5zZm9ybSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwdXRCaW5hcnlJbWFnZURhdGEoY3R4LCBpbWdEYXRhLCB0cmFuc2Zlck1hcHMgPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgSW1hZ2VEYXRhICE9PSBcInVuZGVmaW5lZFwiICYmIGltZ0RhdGEgaW5zdGFuY2VvZiBJbWFnZURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5wdXRJbWFnZURhdGEoaW1nRGF0YSwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBpbWdEYXRhLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gaW1nRGF0YS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFydGlhbENodW5rSGVpZ2h0ID0gaGVpZ2h0ICUgRlVMTF9DSFVOS19IRUlHSFQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZ1bGxDaHVua3MgPSAoaGVpZ2h0IC0gcGFydGlhbENodW5rSGVpZ2h0KSAvIEZVTExfQ0hVTktfSEVJR0hUO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b3RhbENodW5rcyA9IHBhcnRpYWxDaHVua0hlaWdodCA9PT0gMCA/IGZ1bGxDaHVua3MgOiBmdWxsQ2h1bmtzICsgMTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2h1bmtJbWdEYXRhID0gY3R4LmNyZWF0ZUltYWdlRGF0YSh3aWR0aCwgRlVMTF9DSFVOS19IRUlHSFQpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3JjUG9zID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RQb3M7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNyYyA9IGltZ0RhdGEuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzdCA9IGNodW5rSW1nRGF0YS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaSwgaiwgdGhpc0NodW5rSGVpZ2h0LCBlbGVtc0luVGhpc0NodW5rO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdHJhbnNmZXJNYXBSZWQsIHRyYW5zZmVyTWFwR3JlZW4sIHRyYW5zZmVyTWFwQmx1ZSwgdHJhbnNmZXJNYXBHcmF5O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zlck1hcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHJhbnNmZXJNYXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmZXJNYXBSZWQgPSB0cmFuc2Zlck1hcHNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZmVyTWFwR3JlZW4gPSB0cmFuc2Zlck1hcHNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZmVyTWFwQmx1ZSA9IHRyYW5zZmVyTWFwc1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmZXJNYXBHcmF5ID0gdHJhbnNmZXJNYXBzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmZXJNYXBSZWQgPSB0cmFuc2Zlck1hcHNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZmVyTWFwR3JlZW4gPSB0cmFuc2Zlck1hcHNbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZmVyTWFwQmx1ZSA9IHRyYW5zZmVyTWFwc1syXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmZXJNYXBHcmF5ID0gdHJhbnNmZXJNYXBzWzNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbWdEYXRhLmtpbmQgPT09IF91dGlsLkltYWdlS2luZC5HUkFZU0NBTEVfMUJQUCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3JjTGVuZ3RoID0gc3JjLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXN0MzIgPSBuZXcgVWludDMyQXJyYXkoZGVzdC5idWZmZXIsIDAsIGRlc3QuYnl0ZUxlbmd0aCA+PiAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlc3QzMkRhdGFMZW5ndGggPSBkZXN0MzIubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnVsbFNyY0RpZmYgPSB3aWR0aCArIDcgPj4gMztcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB3aGl0ZSA9IDB4ZmZmZmZmZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYmxhY2sgPSBfdXRpbC5Jc0xpdHRsZUVuZGlhbkNhY2hlZC52YWx1ZSA/IDB4ZmYwMDAwMDAgOiAweDAwMDAwMGZmO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNmZXJNYXBHcmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZmVyTWFwR3JheVswXSA9PT0gMHhmZiAmJiB0cmFuc2Zlck1hcEdyYXlbMHhmZl0gPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3doaXRlLCBibGFja10gPSBbYmxhY2ssIHdoaXRlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b3RhbENodW5rczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0NodW5rSGVpZ2h0ID0gaSA8IGZ1bGxDaHVua3MgPyBGVUxMX0NIVU5LX0hFSUdIVCA6IHBhcnRpYWxDaHVua0hlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0UG9zID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCB0aGlzQ2h1bmtIZWlnaHQ7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzcmNEaWZmID0gc3JjTGVuZ3RoIC0gc3JjUG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgayA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtFbmQgPSBzcmNEaWZmID4gZnVsbFNyY0RpZmYgPyB3aWR0aCA6IHNyY0RpZmYgKiA4IC0gNztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga0VuZFVucm9sbGVkID0ga0VuZCAmIH43O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWFzayA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzcmNCeXRlID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgayA8IGtFbmRVbnJvbGxlZDsgayArPSA4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNCeXRlID0gc3JjW3NyY1BvcysrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3QzMltkZXN0UG9zKytdID0gc3JjQnl0ZSAmIDEyOCA/IHdoaXRlIDogYmxhY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IHNyY0J5dGUgJiA2NCA/IHdoaXRlIDogYmxhY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IHNyY0J5dGUgJiAzMiA/IHdoaXRlIDogYmxhY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IHNyY0J5dGUgJiAxNiA/IHdoaXRlIDogYmxhY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IHNyY0J5dGUgJiA4ID8gd2hpdGUgOiBibGFjaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3QzMltkZXN0UG9zKytdID0gc3JjQnl0ZSAmIDQgPyB3aGl0ZSA6IGJsYWNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdDMyW2Rlc3RQb3MrK10gPSBzcmNCeXRlICYgMiA/IHdoaXRlIDogYmxhY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IHNyY0J5dGUgJiAxID8gd2hpdGUgOiBibGFjaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyBrIDwga0VuZDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFzayA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyY0J5dGUgPSBzcmNbc3JjUG9zKytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2sgPSAxMjg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3QzMltkZXN0UG9zKytdID0gc3JjQnl0ZSAmIG1hc2sgPyB3aGl0ZSA6IGJsYWNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFzayA+Pj0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChkZXN0UG9zIDwgZGVzdDMyRGF0YUxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnB1dEltYWdlRGF0YShjaHVua0ltZ0RhdGEsIDAsIGkgKiBGVUxMX0NIVU5LX0hFSUdIVCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW1nRGF0YS5raW5kID09PSBfdXRpbC5JbWFnZUtpbmQuUkdCQV8zMkJQUCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFzVHJhbnNmZXJNYXBzID0gISEodHJhbnNmZXJNYXBSZWQgfHwgdHJhbnNmZXJNYXBHcmVlbiB8fCB0cmFuc2Zlck1hcEJsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaiA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtc0luVGhpc0NodW5rID0gd2lkdGggKiBGVUxMX0NIVU5LX0hFSUdIVCAqIDQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBmdWxsQ2h1bmtzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0LnNldChzcmMuc3ViYXJyYXkoc3JjUG9zLCBzcmNQb3MgKyBlbGVtc0luVGhpc0NodW5rKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjUG9zICs9IGVsZW1zSW5UaGlzQ2h1bms7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzVHJhbnNmZXJNYXBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZWxlbXNJblRoaXNDaHVuazsgayArPSA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNmZXJNYXBSZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0W2sgKyAwXSA9IHRyYW5zZmVyTWFwUmVkW2Rlc3RbayArIDBdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZmVyTWFwR3JlZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0W2sgKyAxXSA9IHRyYW5zZmVyTWFwR3JlZW5bZGVzdFtrICsgMV1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNmZXJNYXBCbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdFtrICsgMl0gPSB0cmFuc2Zlck1hcEJsdWVbZGVzdFtrICsgMl1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnB1dEltYWdlRGF0YShjaHVua0ltZ0RhdGEsIDAsIGopO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGogKz0gRlVMTF9DSFVOS19IRUlHSFQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpIDwgdG90YWxDaHVua3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtc0luVGhpc0NodW5rID0gd2lkdGggKiBwYXJ0aWFsQ2h1bmtIZWlnaHQgKiA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3Quc2V0KHNyYy5zdWJhcnJheShzcmNQb3MsIHNyY1BvcyArIGVsZW1zSW5UaGlzQ2h1bmspKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNUcmFuc2Zlck1hcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBlbGVtc0luVGhpc0NodW5rOyBrICs9IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zlck1hcFJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RbayArIDBdID0gdHJhbnNmZXJNYXBSZWRbZGVzdFtrICsgMF1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNmZXJNYXBHcmVlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RbayArIDFdID0gdHJhbnNmZXJNYXBHcmVlbltkZXN0W2sgKyAxXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zlck1hcEJsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0W2sgKyAyXSA9IHRyYW5zZmVyTWFwQmx1ZVtkZXN0W2sgKyAyXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgucHV0SW1hZ2VEYXRhKGNodW5rSW1nRGF0YSwgMCwgaik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW1nRGF0YS5raW5kID09PSBfdXRpbC5JbWFnZUtpbmQuUkdCXzI0QlBQKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoYXNUcmFuc2Zlck1hcHMgPSAhISh0cmFuc2Zlck1hcFJlZCB8fCB0cmFuc2Zlck1hcEdyZWVuIHx8IHRyYW5zZmVyTWFwQmx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzQ2h1bmtIZWlnaHQgPSBGVUxMX0NIVU5LX0hFSUdIVDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1zSW5UaGlzQ2h1bmsgPSB3aWR0aCAqIHRoaXNDaHVua0hlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRvdGFsQ2h1bmtzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA+PSBmdWxsQ2h1bmtzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNDaHVua0hlaWdodCA9IHBhcnRpYWxDaHVua0hlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbXNJblRoaXNDaHVuayA9IHdpZHRoICogdGhpc0NodW5rSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RQb3MgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gZWxlbXNJblRoaXNDaHVuazsgai0tOykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0W2Rlc3RQb3MrK10gPSBzcmNbc3JjUG9zKytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0W2Rlc3RQb3MrK10gPSBzcmNbc3JjUG9zKytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0W2Rlc3RQb3MrK10gPSBzcmNbc3JjUG9zKytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0W2Rlc3RQb3MrK10gPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc1RyYW5zZmVyTWFwcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGRlc3RQb3M7IGsgKz0gNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZmVyTWFwUmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdFtrICsgMF0gPSB0cmFuc2Zlck1hcFJlZFtkZXN0W2sgKyAwXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zlck1hcEdyZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdFtrICsgMV0gPSB0cmFuc2Zlck1hcEdyZWVuW2Rlc3RbayArIDFdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZmVyTWFwQmx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RbayArIDJdID0gdHJhbnNmZXJNYXBCbHVlW2Rlc3RbayArIDJdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5wdXRJbWFnZURhdGEoY2h1bmtJbWdEYXRhLCAwLCBpICogRlVMTF9DSFVOS19IRUlHSFQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBiYWQgaW1hZ2Uga2luZDogJHtpbWdEYXRhLmtpbmR9YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwdXRCaW5hcnlJbWFnZU1hc2soY3R4LCBpbWdEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGltZ0RhdGEuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBpbWdEYXRhLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0aWFsQ2h1bmtIZWlnaHQgPSBoZWlnaHQgJSBGVUxMX0NIVU5LX0hFSUdIVDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnVsbENodW5rcyA9IChoZWlnaHQgLSBwYXJ0aWFsQ2h1bmtIZWlnaHQpIC8gRlVMTF9DSFVOS19IRUlHSFQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvdGFsQ2h1bmtzID0gcGFydGlhbENodW5rSGVpZ2h0ID09PSAwID8gZnVsbENodW5rcyA6IGZ1bGxDaHVua3MgKyAxO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaHVua0ltZ0RhdGEgPSBjdHguY3JlYXRlSW1hZ2VEYXRhKHdpZHRoLCBGVUxMX0NIVU5LX0hFSUdIVCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzcmNQb3MgPSAwO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzcmMgPSBpbWdEYXRhLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlc3QgPSBjaHVua0ltZ0RhdGEuZGF0YTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsQ2h1bmtzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRoaXNDaHVua0hlaWdodCA9IGkgPCBmdWxsQ2h1bmtzID8gRlVMTF9DSFVOS19IRUlHSFQgOiBwYXJ0aWFsQ2h1bmtIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGVzdFBvcyA9IDM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpc0NodW5rSGVpZ2h0OyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZWxlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFzayA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHdpZHRoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtID0gc3JjW3NyY1BvcysrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2sgPSAxMjg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0W2Rlc3RQb3NdID0gZWxlbSAmIG1hc2sgPyAwIDogMjU1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0UG9zICs9IDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2sgPj49IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgucHV0SW1hZ2VEYXRhKGNodW5rSW1nRGF0YSwgMCwgaSAqIEZVTExfQ0hVTktfSEVJR0hUKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvcHlDdHhTdGF0ZShzb3VyY2VDdHgsIGRlc3RDdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IFtcInN0cm9rZVN0eWxlXCIsIFwiZmlsbFN0eWxlXCIsIFwiZmlsbFJ1bGVcIiwgXCJnbG9iYWxBbHBoYVwiLCBcImxpbmVXaWR0aFwiLCBcImxpbmVDYXBcIiwgXCJsaW5lSm9pblwiLCBcIm1pdGVyTGltaXRcIiwgXCJnbG9iYWxDb21wb3NpdGVPcGVyYXRpb25cIiwgXCJmb250XCJdO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHByb3BlcnRpZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlQ3R4W3Byb3BlcnR5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdEN0eFtwcm9wZXJ0eV0gPSBzb3VyY2VDdHhbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZUN0eC5zZXRMaW5lRGFzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0Q3R4LnNldExpbmVEYXNoKHNvdXJjZUN0eC5nZXRMaW5lRGFzaCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc3RDdHgubGluZURhc2hPZmZzZXQgPSBzb3VyY2VDdHgubGluZURhc2hPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXNldEN0eFRvRGVmYXVsdChjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gXCIjMDAwMDAwXCI7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBcIiMwMDAwMDBcIjtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxSdWxlID0gXCJub256ZXJvXCI7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSAxO1xuICAgICAgICAgICAgICAgICAgICBjdHgubGluZUNhcCA9IFwiYnV0dFwiO1xuICAgICAgICAgICAgICAgICAgICBjdHgubGluZUpvaW4gPSBcIm1pdGVyXCI7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5taXRlckxpbWl0ID0gMTA7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcInNvdXJjZS1vdmVyXCI7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5mb250ID0gXCIxMHB4IHNhbnMtc2VyaWZcIjtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY3R4LnNldExpbmVEYXNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaChbXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgubGluZURhc2hPZmZzZXQgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY29tcG9zZVNNYXNrQmFja2Ryb3AoYnl0ZXMsIHIwLCBnMCwgYjApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gYnl0ZXMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAzOyBpIDwgbGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFscGhhID0gYnl0ZXNbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHBoYSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzW2kgLSAzXSA9IHIwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzW2kgLSAyXSA9IGcwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzW2kgLSAxXSA9IGIwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhbHBoYSA8IDI1NSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFscGhhXyA9IDI1NSAtIGFscGhhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzW2kgLSAzXSA9IGJ5dGVzW2kgLSAzXSAqIGFscGhhICsgcjAgKiBhbHBoYV8gPj4gODtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlc1tpIC0gMl0gPSBieXRlc1tpIC0gMl0gKiBhbHBoYSArIGcwICogYWxwaGFfID4+IDg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZXNbaSAtIDFdID0gYnl0ZXNbaSAtIDFdICogYWxwaGEgKyBiMCAqIGFscGhhXyA+PiA4O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY29tcG9zZVNNYXNrQWxwaGEobWFza0RhdGEsIGxheWVyRGF0YSwgdHJhbnNmZXJNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gbWFza0RhdGEubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzY2FsZSA9IDEgLyAyNTU7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDM7IGkgPCBsZW5ndGg7IGkgKz0gNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxwaGEgPSB0cmFuc2Zlck1hcCA/IHRyYW5zZmVyTWFwW21hc2tEYXRhW2ldXSA6IG1hc2tEYXRhW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJEYXRhW2ldID0gbGF5ZXJEYXRhW2ldICogYWxwaGEgKiBzY2FsZSB8IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjb21wb3NlU01hc2tMdW1pbm9zaXR5KG1hc2tEYXRhLCBsYXllckRhdGEsIHRyYW5zZmVyTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IG1hc2tEYXRhLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMzsgaSA8IGxlbmd0aDsgaSArPSA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB5ID0gbWFza0RhdGFbaSAtIDNdICogNzcgKyBtYXNrRGF0YVtpIC0gMl0gKiAxNTIgKyBtYXNrRGF0YVtpIC0gMV0gKiAyODtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyRGF0YVtpXSA9IHRyYW5zZmVyTWFwID8gbGF5ZXJEYXRhW2ldICogdHJhbnNmZXJNYXBbeSA+PiA4XSA+PiA4IDogbGF5ZXJEYXRhW2ldICogeSA+PiAxNjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdlbmVyaWNDb21wb3NlU01hc2sobWFza0N0eCwgbGF5ZXJDdHgsIHdpZHRoLCBoZWlnaHQsIHN1YnR5cGUsIGJhY2tkcm9wLCB0cmFuc2Zlck1hcCwgbGF5ZXJPZmZzZXRYLCBsYXllck9mZnNldFksIG1hc2tPZmZzZXRYLCBtYXNrT2Zmc2V0WSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBoYXNCYWNrZHJvcCA9ICEhYmFja2Ryb3A7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIwID0gaGFzQmFja2Ryb3AgPyBiYWNrZHJvcFswXSA6IDA7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGcwID0gaGFzQmFja2Ryb3AgPyBiYWNrZHJvcFsxXSA6IDA7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGIwID0gaGFzQmFja2Ryb3AgPyBiYWNrZHJvcFsyXSA6IDA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb21wb3NlRm47XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnR5cGUgPT09IFwiTHVtaW5vc2l0eVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb3NlRm4gPSBjb21wb3NlU01hc2tMdW1pbm9zaXR5O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9zZUZuID0gY29tcG9zZVNNYXNrQWxwaGE7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBQSVhFTFNfVE9fUFJPQ0VTUyA9IDEwNDg1NzY7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNodW5rU2l6ZSA9IE1hdGgubWluKGhlaWdodCwgTWF0aC5jZWlsKFBJWEVMU19UT19QUk9DRVNTIC8gd2lkdGgpKTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCBoZWlnaHQ7IHJvdyArPSBjaHVua1NpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNodW5rSGVpZ2h0ID0gTWF0aC5taW4oY2h1bmtTaXplLCBoZWlnaHQgLSByb3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFza0RhdGEgPSBtYXNrQ3R4LmdldEltYWdlRGF0YShsYXllck9mZnNldFggLSBtYXNrT2Zmc2V0WCwgcm93ICsgKGxheWVyT2Zmc2V0WSAtIG1hc2tPZmZzZXRZKSwgd2lkdGgsIGNodW5rSGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxheWVyRGF0YSA9IGxheWVyQ3R4LmdldEltYWdlRGF0YShsYXllck9mZnNldFgsIHJvdyArIGxheWVyT2Zmc2V0WSwgd2lkdGgsIGNodW5rSGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0JhY2tkcm9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9zZVNNYXNrQmFja2Ryb3AobWFza0RhdGEuZGF0YSwgcjAsIGcwLCBiMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvc2VGbihtYXNrRGF0YS5kYXRhLCBsYXllckRhdGEuZGF0YSwgdHJhbnNmZXJNYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJDdHgucHV0SW1hZ2VEYXRhKGxheWVyRGF0YSwgbGF5ZXJPZmZzZXRYLCByb3cgKyBsYXllck9mZnNldFkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY29tcG9zZVNNYXNrKGN0eCwgc21hc2ssIGxheWVyQ3R4LCBsYXllckJveCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXllck9mZnNldFggPSBsYXllckJveFswXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGF5ZXJPZmZzZXRZID0gbGF5ZXJCb3hbMV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxheWVyV2lkdGggPSBsYXllckJveFsyXSAtIGxheWVyT2Zmc2V0WDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGF5ZXJIZWlnaHQgPSBsYXllckJveFszXSAtIGxheWVyT2Zmc2V0WTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJXaWR0aCA9PT0gMCB8fCBsYXllckhlaWdodCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJpY0NvbXBvc2VTTWFzayhzbWFzay5jb250ZXh0LCBsYXllckN0eCwgbGF5ZXJXaWR0aCwgbGF5ZXJIZWlnaHQsIHNtYXNrLnN1YnR5cGUsIHNtYXNrLmJhY2tkcm9wLCBzbWFzay50cmFuc2Zlck1hcCwgbGF5ZXJPZmZzZXRYLCBsYXllck9mZnNldFksIHNtYXNrLm9mZnNldFgsIHNtYXNrLm9mZnNldFkpO1xuICAgICAgICAgICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSAxO1xuICAgICAgICAgICAgICAgICAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzb3VyY2Utb3ZlclwiO1xuICAgICAgICAgICAgICAgICAgICBjdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGxheWVyQ3R4LmNhbnZhcywgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0SW1hZ2VTbW9vdGhpbmdFbmFibGVkKHRyYW5zZm9ybSwgaW50ZXJwb2xhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NhbGUgPSBfdXRpbC5VdGlsLnNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKHRyYW5zZm9ybSk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2NhbGVbMF0gPSBNYXRoLmZyb3VuZChzY2FsZVswXSk7XG4gICAgICAgICAgICAgICAgICAgIHNjYWxlWzFdID0gTWF0aC5mcm91bmQoc2NhbGVbMV0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3R1YWxTY2FsZSA9IE1hdGguZnJvdW5kKChnbG9iYWxUaGlzLmRldmljZVBpeGVsUmF0aW8gfHwgMSkgKiBfZGlzcGxheV91dGlscy5QaXhlbHNQZXJJbmNoLlBERl9UT19DU1NfVU5JVFMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnRlcnBvbGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW50ZXJwb2xhdGU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2NhbGVbMF0gPD0gYWN0dWFsU2NhbGUgfHwgc2NhbGVbMV0gPD0gYWN0dWFsU2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IExJTkVfQ0FQX1NUWUxFUyA9IFtcImJ1dHRcIiwgXCJyb3VuZFwiLCBcInNxdWFyZVwiXTtcbiAgICAgICAgICAgICAgICBjb25zdCBMSU5FX0pPSU5fU1RZTEVTID0gW1wibWl0ZXJcIiwgXCJyb3VuZFwiLCBcImJldmVsXCJdO1xuICAgICAgICAgICAgICAgIGNvbnN0IE5PUk1BTF9DTElQID0ge307XG4gICAgICAgICAgICAgICAgY29uc3QgRU9fQ0xJUCA9IHt9O1xuXG4gICAgICAgICAgICAgICAgY2xhc3MgQ2FudmFzR3JhcGhpY3Mge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihjYW52YXNDdHgsIGNvbW1vbk9ianMsIG9ianMsIGNhbnZhc0ZhY3RvcnksIGltYWdlTGF5ZXIsIG9wdGlvbmFsQ29udGVudENvbmZpZywgYW5ub3RhdGlvbkNhbnZhc01hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHggPSBjYW52YXNDdHg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSBuZXcgQ2FudmFzRXh0cmFTdGF0ZSh0aGlzLmN0eC5jYW52YXMud2lkdGgsIHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZVN0YWNrID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdDbGlwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ0VPRmlsbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXMgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy54b2JqcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1vbk9ianMgPSBjb21tb25PYmpzO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vYmpzID0gb2JqcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzRmFjdG9yeSA9IGNhbnZhc0ZhY3Rvcnk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmltYWdlTGF5ZXIgPSBpbWFnZUxheWVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ncm91cFN0YWNrID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NpbmdUeXBlMyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhc2VUcmFuc2Zvcm0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNlVHJhbnNmb3JtU3RhY2sgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXBMZXZlbCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNtYXNrU3RhY2sgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc21hc2tDb3VudGVyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGVtcFNNYXNrID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3VzcGVuZGVkQ3R4ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGVudFZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXJrZWRDb250ZW50U3RhY2sgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uYWxDb250ZW50Q29uZmlnID0gb3B0aW9uYWxDb250ZW50Q29uZmlnO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRDYW52YXNlcyA9IG5ldyBDYWNoZWRDYW52YXNlcyh0aGlzLmNhbnZhc0ZhY3RvcnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRQYXR0ZXJucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW5ub3RhdGlvbkNhbnZhc01hcCA9IGFubm90YXRpb25DYW52YXNNYXA7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdwb3J0U2NhbGUgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRwdXRTY2FsZVggPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRwdXRTY2FsZVkgPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FudmFzQ3R4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ29udGV4dEN1cnJlbnRUcmFuc2Zvcm0oY2FudmFzQ3R4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkU2NhbGVGb3JTdHJva2luZyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRHZXRTaW5nbGVQaXhlbFdpZHRoID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJlZ2luRHJhd2luZyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcGFyZW5jeSA9IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQgPSBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuY3R4LmNhbnZhcy53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kIHx8IFwicmdiKDI1NSwgMjU1LCAyNTUpXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5maWxsUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zcGFyZW5jeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zcGFyZW50Q2FudmFzID0gdGhpcy5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoXCJ0cmFuc3BhcmVudFwiLCB3aWR0aCwgaGVpZ2h0LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBvc2l0ZUN0eCA9IHRoaXMuY3R4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwYXJlbnRDYW52YXMgPSB0cmFuc3BhcmVudENhbnZhcy5jYW52YXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHggPSB0cmFuc3BhcmVudENhbnZhcy5jb250ZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC50cmFuc2Zvcm0uYXBwbHkodGhpcy5jdHgsIHRoaXMuY29tcG9zaXRlQ3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldEN0eFRvRGVmYXVsdCh0aGlzLmN0eCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC50cmFuc2Zvcm0uYXBwbHkodGhpcy5jdHgsIHRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRwdXRTY2FsZVggPSB0cmFuc2Zvcm1bMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRwdXRTY2FsZVkgPSB0cmFuc2Zvcm1bMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LnRyYW5zZm9ybS5hcHBseSh0aGlzLmN0eCwgdmlld3BvcnQudHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlld3BvcnRTY2FsZSA9IHZpZXdwb3J0LnNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNlVHJhbnNmb3JtID0gdGhpcy5jdHgubW96Q3VycmVudFRyYW5zZm9ybS5zbGljZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbWFnZUxheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbWFnZUxheWVyLmJlZ2luTGF5b3V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBleGVjdXRlT3BlcmF0b3JMaXN0KG9wZXJhdG9yTGlzdCwgZXhlY3V0aW9uU3RhcnRJZHgsIGNvbnRpbnVlQ2FsbGJhY2ssIHN0ZXBwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyZ3NBcnJheSA9IG9wZXJhdG9yTGlzdC5hcmdzQXJyYXk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmbkFycmF5ID0gb3BlcmF0b3JMaXN0LmZuQXJyYXk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaSA9IGV4ZWN1dGlvblN0YXJ0SWR4IHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhcmdzQXJyYXlMZW4gPSBhcmdzQXJyYXkubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJnc0FycmF5TGVuID09PSBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNodW5rT3BlcmF0aW9ucyA9IGFyZ3NBcnJheUxlbiAtIGkgPiBFWEVDVVRJT05fU1RFUFMgJiYgdHlwZW9mIGNvbnRpbnVlQ2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZFRpbWUgPSBjaHVua09wZXJhdGlvbnMgPyBEYXRlLm5vdygpICsgRVhFQ1VUSU9OX1RJTUUgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0ZXBzID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1vbk9ianMgPSB0aGlzLmNvbW1vbk9ianM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvYmpzID0gdGhpcy5vYmpzO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZuSWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0ZXBwZXIgIT09IHVuZGVmaW5lZCAmJiBpID09PSBzdGVwcGVyLm5leHRCcmVha1BvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXBwZXIuYnJlYWtJdChpLCBjb250aW51ZUNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm5JZCA9IGZuQXJyYXlbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm5JZCAhPT0gX3V0aWwuT1BTLmRlcGVuZGVuY3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1tmbklkXS5hcHBseSh0aGlzLCBhcmdzQXJyYXlbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZGVwT2JqSWQgb2YgYXJnc0FycmF5W2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvYmpzUG9vbCA9IGRlcE9iaklkLnN0YXJ0c1dpdGgoXCJnX1wiKSA/IGNvbW1vbk9ianMgOiBvYmpzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9ianNQb29sLmhhcyhkZXBPYmpJZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpzUG9vbC5nZXQoZGVwT2JqSWQsIGNvbnRpbnVlQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IGFyZ3NBcnJheUxlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2h1bmtPcGVyYXRpb25zICYmICsrc3RlcHMgPiBFWEVDVVRJT05fU1RFUFMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKERhdGUubm93KCkgPiBlbmRUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZUNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXBzID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBlbmREcmF3aW5nKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMuc3RhdGVTdGFjay5sZW5ndGggfHwgdGhpcy5pblNNYXNrTW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5yZXN0b3JlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYW5zcGFyZW50Q2FudmFzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHggPSB0aGlzLmNvbXBvc2l0ZUN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LmRyYXdJbWFnZSh0aGlzLnRyYW5zcGFyZW50Q2FudmFzLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc3BhcmVudENhbnZhcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkQ2FudmFzZXMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkUGF0dGVybnMuY2xlYXIoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW1hZ2VMYXllcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2VMYXllci5lbmRMYXlvdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9zY2FsZUltYWdlKGltZywgaW52ZXJzZVRyYW5zZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBpbWcud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBpbWcuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHdpZHRoU2NhbGUgPSBNYXRoLm1heChNYXRoLmh5cG90KGludmVyc2VUcmFuc2Zvcm1bMF0sIGludmVyc2VUcmFuc2Zvcm1bMV0pLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBoZWlnaHRTY2FsZSA9IE1hdGgubWF4KE1hdGguaHlwb3QoaW52ZXJzZVRyYW5zZm9ybVsyXSwgaW52ZXJzZVRyYW5zZm9ybVszXSksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhaW50V2lkdGggPSB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWludEhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0bXBDYW52YXNJZCA9IFwicHJlc2NhbGUxXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG1wQ2FudmFzLCB0bXBDdHg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh3aWR0aFNjYWxlID4gMiAmJiBwYWludFdpZHRoID4gMSB8fCBoZWlnaHRTY2FsZSA+IDIgJiYgcGFpbnRIZWlnaHQgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1dpZHRoID0gcGFpbnRXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SGVpZ2h0ID0gcGFpbnRIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2lkdGhTY2FsZSA+IDIgJiYgcGFpbnRXaWR0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3V2lkdGggPSBNYXRoLmNlaWwocGFpbnRXaWR0aCAvIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aFNjYWxlIC89IHBhaW50V2lkdGggLyBuZXdXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGVpZ2h0U2NhbGUgPiAyICYmIHBhaW50SGVpZ2h0ID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdIZWlnaHQgPSBNYXRoLmNlaWwocGFpbnRIZWlnaHQgLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0U2NhbGUgLz0gcGFpbnRIZWlnaHQgLyBuZXdIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wQ2FudmFzID0gdGhpcy5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXModG1wQ2FudmFzSWQsIG5ld1dpZHRoLCBuZXdIZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcEN0eCA9IHRtcENhbnZhcy5jb250ZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcEN0eC5jbGVhclJlY3QoMCwgMCwgbmV3V2lkdGgsIG5ld0hlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wQ3R4LmRyYXdJbWFnZShpbWcsIDAsIDAsIHBhaW50V2lkdGgsIHBhaW50SGVpZ2h0LCAwLCAwLCBuZXdXaWR0aCwgbmV3SGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWcgPSB0bXBDYW52YXMuY2FudmFzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhaW50V2lkdGggPSBuZXdXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWludEhlaWdodCA9IG5ld0hlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBDYW52YXNJZCA9IHRtcENhbnZhc0lkID09PSBcInByZXNjYWxlMVwiID8gXCJwcmVzY2FsZTJcIiA6IFwicHJlc2NhbGUxXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhaW50V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFpbnRIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfY3JlYXRlTWFza0NhbnZhcyhpbWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBpbWcud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaW1nLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGxDb2xvciA9IHRoaXMuY3VycmVudC5maWxsQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1BhdHRlcm5GaWxsID0gdGhpcy5jdXJyZW50LnBhdHRlcm5GaWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFza0NhbnZhcyA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKFwibWFza0NhbnZhc1wiLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hc2tDdHggPSBtYXNrQ2FudmFzLmNvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBwdXRCaW5hcnlJbWFnZU1hc2sobWFza0N0eCwgaW1nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9ialRvQ2FudmFzID0gY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXNrVG9DYW52YXMgPSBfdXRpbC5VdGlsLnRyYW5zZm9ybShvYmpUb0NhbnZhcywgWzEgLyB3aWR0aCwgMCwgMCwgLTEgLyBoZWlnaHQsIDAsIDBdKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza1RvQ2FudmFzID0gX3V0aWwuVXRpbC50cmFuc2Zvcm0obWFza1RvQ2FudmFzLCBbMSwgMCwgMCwgMSwgMCwgLWhlaWdodF0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb3JkMSA9IF91dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oWzAsIDBdLCBtYXNrVG9DYW52YXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb3JkMiA9IF91dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oW3dpZHRoLCBoZWlnaHRdLCBtYXNrVG9DYW52YXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gX3V0aWwuVXRpbC5ub3JtYWxpemVSZWN0KFtjb3JkMVswXSwgY29yZDFbMV0sIGNvcmQyWzBdLCBjb3JkMlsxXV0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkcmF3bldpZHRoID0gTWF0aC5jZWlsKHJlY3RbMl0gLSByZWN0WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRyYXduSGVpZ2h0ID0gTWF0aC5jZWlsKHJlY3RbM10gLSByZWN0WzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGxDYW52YXMgPSB0aGlzLmNhY2hlZENhbnZhc2VzLmdldENhbnZhcyhcImZpbGxDYW52YXNcIiwgZHJhd25XaWR0aCwgZHJhd25IZWlnaHQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsbEN0eCA9IGZpbGxDYW52YXMuY29udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldFggPSBNYXRoLm1pbihjb3JkMVswXSwgY29yZDJbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WSA9IE1hdGgubWluKGNvcmQxWzFdLCBjb3JkMlsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsQ3R4LnRyYW5zbGF0ZSgtb2Zmc2V0WCwgLW9mZnNldFkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbEN0eC50cmFuc2Zvcm0uYXBwbHkoZmlsbEN0eCwgbWFza1RvQ2FudmFzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NhbGVkID0gdGhpcy5fc2NhbGVJbWFnZShtYXNrQ2FudmFzLmNhbnZhcywgZmlsbEN0eC5tb3pDdXJyZW50VHJhbnNmb3JtSW52ZXJzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxDdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZ2V0SW1hZ2VTbW9vdGhpbmdFbmFibGVkKGZpbGxDdHgubW96Q3VycmVudFRyYW5zZm9ybSwgaW1nLmludGVycG9sYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxDdHguZHJhd0ltYWdlKHNjYWxlZC5pbWcsIDAsIDAsIHNjYWxlZC5pbWcud2lkdGgsIHNjYWxlZC5pbWcuaGVpZ2h0LCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxDdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzb3VyY2UtaW5cIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW52ZXJzZSA9IF91dGlsLlV0aWwudHJhbnNmb3JtKGZpbGxDdHgubW96Q3VycmVudFRyYW5zZm9ybUludmVyc2UsIFsxLCAwLCAwLCAxLCAtb2Zmc2V0WCwgLW9mZnNldFldKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbEN0eC5maWxsU3R5bGUgPSBpc1BhdHRlcm5GaWxsID8gZmlsbENvbG9yLmdldFBhdHRlcm4oY3R4LCB0aGlzLCBpbnZlcnNlLCBfcGF0dGVybl9oZWxwZXIuUGF0aFR5cGUuRklMTCkgOiBmaWxsQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsQ3R4LmZpbGxSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW52YXM6IGZpbGxDYW52YXMuY2FudmFzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFg6IE1hdGgucm91bmQob2Zmc2V0WCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogTWF0aC5yb3VuZChvZmZzZXRZKVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNldExpbmVXaWR0aCh3aWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoICE9PSB0aGlzLmN1cnJlbnQubGluZVdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkU2NhbGVGb3JTdHJva2luZyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5saW5lV2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0TGluZUNhcChzdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHgubGluZUNhcCA9IExJTkVfQ0FQX1NUWUxFU1tzdHlsZV07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzZXRMaW5lSm9pbihzdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHgubGluZUpvaW4gPSBMSU5FX0pPSU5fU1RZTEVTW3N0eWxlXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNldE1pdGVyTGltaXQobGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4Lm1pdGVyTGltaXQgPSBsaW1pdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNldERhc2goZGFzaEFycmF5LCBkYXNoUGhhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3R4LnNldExpbmVEYXNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguc2V0TGluZURhc2goZGFzaEFycmF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgubGluZURhc2hPZmZzZXQgPSBkYXNoUGhhc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzZXRSZW5kZXJpbmdJbnRlbnQoaW50ZW50KSB7fVxuXG4gICAgICAgICAgICAgICAgICAgIHNldEZsYXRuZXNzKGZsYXRuZXNzKSB7fVxuXG4gICAgICAgICAgICAgICAgICAgIHNldEdTdGF0ZShzdGF0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHN0YXRlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBzdGF0ZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gc3RhdGVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBzdGF0ZVsxXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJMV1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRMaW5lV2lkdGgodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkxDXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldExpbmVDYXAodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkxKXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldExpbmVKb2luKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJNTFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRNaXRlckxpbWl0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJEXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldERhc2godmFsdWVbMF0sIHZhbHVlWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJSSVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRSZW5kZXJpbmdJbnRlbnQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkZMXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEZsYXRuZXNzKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJGb250XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEZvbnQodmFsdWVbMF0sIHZhbHVlWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJDQVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LnN0cm9rZUFscGhhID0gc3RhdGVbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiY2FcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5maWxsQWxwaGEgPSBzdGF0ZVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4Lmdsb2JhbEFscGhhID0gc3RhdGVbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQk1cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlNNYXNrXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQuYWN0aXZlU01hc2sgPSB2YWx1ZSA/IHRoaXMudGVtcFNNYXNrIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGVtcFNNYXNrID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tTTWFza1N0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiVFJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC50cmFuc2Zlck1hcHMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgaW5TTWFza01vZGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gISF0aGlzLnN1c3BlbmRlZEN0eDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrU01hc2tTdGF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluU01hc2tNb2RlID0gdGhpcy5pblNNYXNrTW9kZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudC5hY3RpdmVTTWFzayAmJiAhaW5TTWFza01vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJlZ2luU01hc2tNb2RlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmN1cnJlbnQuYWN0aXZlU01hc2sgJiYgaW5TTWFza01vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVuZFNNYXNrTW9kZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYmVnaW5TTWFza01vZGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pblNNYXNrTW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImJlZ2luU01hc2tNb2RlIGNhbGxlZCB3aGlsZSBhbHJlYWR5IGluIHNtYXNrIG1vZGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRyYXduV2lkdGggPSB0aGlzLmN0eC5jYW52YXMud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkcmF3bkhlaWdodCA9IHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYWNoZUlkID0gXCJzbWFza0dyb3VwQXRcIiArIHRoaXMuZ3JvdXBMZXZlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjcmF0Y2hDYW52YXMgPSB0aGlzLmNhY2hlZENhbnZhc2VzLmdldENhbnZhcyhjYWNoZUlkLCBkcmF3bldpZHRoLCBkcmF3bkhlaWdodCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1c3BlbmRlZEN0eCA9IHRoaXMuY3R4O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHggPSBzY3JhdGNoQ2FudmFzLmNvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zZXRUcmFuc2Zvcm0uYXBwbHkoY3R4LCB0aGlzLnN1c3BlbmRlZEN0eC5tb3pDdXJyZW50VHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlDdHhTdGF0ZSh0aGlzLnN1c3BlbmRlZEN0eCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pcnJvckNvbnRleHRPcGVyYXRpb25zKGN0eCwgdGhpcy5zdXNwZW5kZWRDdHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRHU3RhdGUoW1tcIkJNXCIsIFwic291cmNlLW92ZXJcIl0sIFtcImNhXCIsIDFdLCBbXCJDQVwiLCAxXV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZW5kU01hc2tNb2RlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmluU01hc2tNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZW5kU01hc2tNb2RlIGNhbGxlZCB3aGlsZSBub3QgaW4gc21hc2sgbW9kZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHguX3JlbW92ZU1pcnJvcmluZygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3B5Q3R4U3RhdGUodGhpcy5jdHgsIHRoaXMuc3VzcGVuZGVkQ3R4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4ID0gdGhpcy5zdXNwZW5kZWRDdHg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1c3BlbmRlZEN0eCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb21wb3NlKGRpcnR5Qm94KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY3VycmVudC5hY3RpdmVTTWFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkaXJ0eUJveCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcnR5Qm94ID0gWzAsIDAsIHRoaXMuY3R4LmNhbnZhcy53aWR0aCwgdGhpcy5jdHguY2FudmFzLmhlaWdodF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcnR5Qm94WzBdID0gTWF0aC5mbG9vcihkaXJ0eUJveFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlydHlCb3hbMV0gPSBNYXRoLmZsb29yKGRpcnR5Qm94WzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJ0eUJveFsyXSA9IE1hdGguY2VpbChkaXJ0eUJveFsyXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlydHlCb3hbM10gPSBNYXRoLmNlaWwoZGlydHlCb3hbM10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzbWFzayA9IHRoaXMuY3VycmVudC5hY3RpdmVTTWFzaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1c3BlbmRlZEN0eCA9IHRoaXMuc3VzcGVuZGVkQ3R4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9zZVNNYXNrKHN1c3BlbmRlZEN0eCwgc21hc2ssIHRoaXMuY3R4LCBkaXJ0eUJveCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jdHguY2FudmFzLndpZHRoLCB0aGlzLmN0eC5jYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNhdmUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pblNNYXNrTW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlDdHhTdGF0ZSh0aGlzLmN0eCwgdGhpcy5zdXNwZW5kZWRDdHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3VzcGVuZGVkQ3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHguc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvbGQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlU3RhY2sucHVzaChvbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gb2xkLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXN0b3JlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGVTdGFjay5sZW5ndGggPT09IDAgJiYgdGhpcy5pblNNYXNrTW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW5kU01hc2tNb2RlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlU3RhY2subGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5zdGF0ZVN0YWNrLnBvcCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5TTWFza01vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdXNwZW5kZWRDdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5Q3R4U3RhdGUodGhpcy5zdXNwZW5kZWRDdHgsIHRoaXMuY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja1NNYXNrU3RhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdDbGlwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRTY2FsZUZvclN0cm9raW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRHZXRTaW5nbGVQaXhlbFdpZHRoID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC50cmFuc2Zvcm0oYSwgYiwgYywgZCwgZSwgZik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRTY2FsZUZvclN0cm9raW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlZEdldFNpbmdsZVBpeGVsV2lkdGggPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0UGF0aChvcHMsIGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4ID0gY3VycmVudC54LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBjdXJyZW50Lnk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RhcnRYLCBzdGFydFk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gMCwgaWkgPSBvcHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAob3BzW2ldIHwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5yZWN0YW5nbGU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gYXJnc1tqKytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gYXJnc1tqKytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gYXJnc1tqKytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeHcgPSB4ICsgd2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB5aCA9IHkgKyBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgubW92ZVRvKHgsIHkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2lkdGggPT09IDAgfHwgaGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmxpbmVUbyh4dywgeWgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgubGluZVRvKHh3LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgubGluZVRvKHh3LCB5aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmxpbmVUbyh4LCB5aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQudXBkYXRlUGF0aE1pbk1heChjdHgubW96Q3VycmVudFRyYW5zZm9ybSwgeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnVwZGF0ZVBhdGhNaW5NYXgoY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0sIHh3LCB5aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5tb3ZlVG86XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gYXJnc1tqKytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnVwZGF0ZVBhdGhNaW5NYXgoY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0sIHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMubGluZVRvOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBhcmdzW2orK107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgubGluZVRvKHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC51cGRhdGVQYXRoTWluTWF4KGN0eC5tb3pDdXJyZW50VHJhbnNmb3JtLCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmN1cnZlVG86XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydFggPSB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRZID0geTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSBhcmdzW2ogKyA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBhcmdzW2ogKyA1XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKGFyZ3Nbal0sIGFyZ3NbaiArIDFdLCBhcmdzW2ogKyAyXSwgYXJnc1tqICsgM10sIHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC51cGRhdGVDdXJ2ZVBhdGhNaW5NYXgoY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0sIHN0YXJ0WCwgc3RhcnRZLCBhcmdzW2pdLCBhcmdzW2ogKyAxXSwgYXJnc1tqICsgMl0sIGFyZ3NbaiArIDNdLCB4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGogKz0gNjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmN1cnZlVG8yOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRYID0geDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0WSA9IHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyh4LCB5LCBhcmdzW2pdLCBhcmdzW2ogKyAxXSwgYXJnc1tqICsgMl0sIGFyZ3NbaiArIDNdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQudXBkYXRlQ3VydmVQYXRoTWluTWF4KGN0eC5tb3pDdXJyZW50VHJhbnNmb3JtLCBzdGFydFgsIHN0YXJ0WSwgeCwgeSwgYXJnc1tqXSwgYXJnc1tqICsgMV0sIGFyZ3NbaiArIDJdLCBhcmdzW2ogKyAzXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gYXJnc1tqICsgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gYXJnc1tqICsgM107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqICs9IDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5jdXJ2ZVRvMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0WCA9IHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydFkgPSB5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IGFyZ3NbaiArIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGFyZ3NbaiArIDNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmJlemllckN1cnZlVG8oYXJnc1tqXSwgYXJnc1tqICsgMV0sIHgsIHksIHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC51cGRhdGVDdXJ2ZVBhdGhNaW5NYXgoY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0sIHN0YXJ0WCwgc3RhcnRZLCBhcmdzW2pdLCBhcmdzW2ogKyAxXSwgeCwgeSwgeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqICs9IDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5jbG9zZVBhdGg6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuc2V0Q3VycmVudFBvaW50KHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY2xvc2VQYXRoKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzdHJva2UoY29uc3VtZVBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN1bWVQYXRoID0gdHlwZW9mIGNvbnN1bWVQYXRoICE9PSBcInVuZGVmaW5lZFwiID8gY29uc3VtZVBhdGggOiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJva2VDb2xvciA9IHRoaXMuY3VycmVudC5zdHJva2VDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IHRoaXMuY3VycmVudC5zdHJva2VBbHBoYTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudFZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0cm9rZUNvbG9yID09PSBcIm9iamVjdFwiICYmIHN0cm9rZUNvbG9yPy5nZXRQYXR0ZXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0cm9rZUNvbG9yLmdldFBhdHRlcm4oY3R4LCB0aGlzLCBjdHgubW96Q3VycmVudFRyYW5zZm9ybUludmVyc2UsIF9wYXR0ZXJuX2hlbHBlci5QYXRoVHlwZS5TVFJPS0UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2NhbGVBbmRTdHJva2UoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzY2FsZUFuZFN0cm9rZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25zdW1lUGF0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29uc3VtZVBhdGgodGhpcy5jdXJyZW50LmdldENsaXBwZWRQYXRoQm91bmRpbmdCb3goKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IHRoaXMuY3VycmVudC5maWxsQWxwaGE7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjbG9zZVN0cm9rZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZmlsbChjb25zdW1lUGF0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3VtZVBhdGggPSB0eXBlb2YgY29uc3VtZVBhdGggIT09IFwidW5kZWZpbmVkXCIgPyBjb25zdW1lUGF0aCA6IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGxDb2xvciA9IHRoaXMuY3VycmVudC5maWxsQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1BhdHRlcm5GaWxsID0gdGhpcy5jdXJyZW50LnBhdHRlcm5GaWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5lZWRSZXN0b3JlID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1BhdHRlcm5GaWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gZmlsbENvbG9yLmdldFBhdHRlcm4oY3R4LCB0aGlzLCBjdHgubW96Q3VycmVudFRyYW5zZm9ybUludmVyc2UsIF9wYXR0ZXJuX2hlbHBlci5QYXRoVHlwZS5GSUxMKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWVkUmVzdG9yZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGludGVyc2VjdCA9IHRoaXMuY3VycmVudC5nZXRDbGlwcGVkUGF0aEJvdW5kaW5nQm94KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRlbnRWaXNpYmxlICYmIGludGVyc2VjdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBlbmRpbmdFT0ZpbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGwoXCJldmVub2RkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdFT0ZpbGwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5lZWRSZXN0b3JlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnN1bWVQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25zdW1lUGF0aChpbnRlcnNlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZW9GaWxsKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nRU9GaWxsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsbCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZmlsbFN0cm9rZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsbChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cm9rZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnN1bWVQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBlb0ZpbGxTdHJva2UoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdFT0ZpbGwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxsU3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjbG9zZUZpbGxTdHJva2UoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxsU3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjbG9zZUVPRmlsbFN0cm9rZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ0VPRmlsbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxsU3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBlbmRQYXRoKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25zdW1lUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY2xpcCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ0NsaXAgPSBOT1JNQUxfQ0xJUDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGVvQ2xpcCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ0NsaXAgPSBFT19DTElQO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYmVnaW5UZXh0KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LnRleHRNYXRyaXggPSBfdXRpbC5JREVOVElUWV9NQVRSSVg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQudGV4dE1hdHJpeFNjYWxlID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC54ID0gdGhpcy5jdXJyZW50LmxpbmVYID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC55ID0gdGhpcy5jdXJyZW50LmxpbmVZID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGVuZFRleHQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRocyA9IHRoaXMucGVuZGluZ1RleHRQYXRocztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF0aHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gcGF0aHNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnNldFRyYW5zZm9ybS5hcHBseShjdHgsIHBhdGgudHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgudHJhbnNsYXRlKHBhdGgueCwgcGF0aC55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoLmFkZFRvUGF0aChjdHgsIHBhdGguZm9udFNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmNsaXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnBlbmRpbmdUZXh0UGF0aHM7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzZXRDaGFyU3BhY2luZyhzcGFjaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQuY2hhclNwYWNpbmcgPSBzcGFjaW5nO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0V29yZFNwYWNpbmcoc3BhY2luZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LndvcmRTcGFjaW5nID0gc3BhY2luZztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNldEhTY2FsZShzY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LnRleHRIU2NhbGUgPSBzY2FsZSAvIDEwMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNldExlYWRpbmcobGVhZGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LmxlYWRpbmcgPSAtbGVhZGluZztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNldEZvbnQoZm9udFJlZk5hbWUsIHNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvbnRPYmogPSB0aGlzLmNvbW1vbk9ianMuZ2V0KGZvbnRSZWZOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZm9udE9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgZmluZCBmb250IGZvciAke2ZvbnRSZWZOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmZvbnRNYXRyaXggPSBmb250T2JqLmZvbnRNYXRyaXggfHwgX3V0aWwuRk9OVF9JREVOVElUWV9NQVRSSVg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LmZvbnRNYXRyaXhbMF0gPT09IDAgfHwgY3VycmVudC5mb250TWF0cml4WzNdID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiSW52YWxpZCBmb250IG1hdHJpeCBmb3IgZm9udCBcIiArIGZvbnRSZWZOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNpemUgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZSA9IC1zaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuZm9udERpcmVjdGlvbiA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmZvbnREaXJlY3Rpb24gPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQuZm9udCA9IGZvbnRPYmo7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQuZm9udFNpemUgPSBzaXplO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9udE9iai5pc1R5cGUzRm9udCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGZvbnRPYmoubG9hZGVkTmFtZSB8fCBcInNhbnMtc2VyaWZcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBib2xkID0gXCJub3JtYWxcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvbnRPYmouYmxhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2xkID0gXCI5MDBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9udE9iai5ib2xkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9sZCA9IFwiYm9sZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGFsaWMgPSBmb250T2JqLml0YWxpYyA/IFwiaXRhbGljXCIgOiBcIm5vcm1hbFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHlwZWZhY2UgPSBgXCIke25hbWV9XCIsICR7Zm9udE9iai5mYWxsYmFja05hbWV9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBicm93c2VyRm9udFNpemUgPSBzaXplO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2l6ZSA8IE1JTl9GT05UX1NJWkUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicm93c2VyRm9udFNpemUgPSBNSU5fRk9OVF9TSVpFO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzaXplID4gTUFYX0ZPTlRfU0laRSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyb3dzZXJGb250U2l6ZSA9IE1BWF9GT05UX1NJWkU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5mb250U2l6ZVNjYWxlID0gc2l6ZSAvIGJyb3dzZXJGb250U2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LmZvbnQgPSBgJHtpdGFsaWN9ICR7Ym9sZH0gJHticm93c2VyRm9udFNpemV9cHggJHt0eXBlZmFjZX1gO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGV4dFJlbmRlcmluZ01vZGUobW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LnRleHRSZW5kZXJpbmdNb2RlID0gbW9kZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNldFRleHRSaXNlKHJpc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC50ZXh0UmlzZSA9IHJpc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBtb3ZlVGV4dCh4LCB5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQueCA9IHRoaXMuY3VycmVudC5saW5lWCArPSB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LnkgPSB0aGlzLmN1cnJlbnQubGluZVkgKz0geTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNldExlYWRpbmdNb3ZlVGV4dCh4LCB5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldExlYWRpbmcoLXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZlVGV4dCh4LCB5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNldFRleHRNYXRyaXgoYSwgYiwgYywgZCwgZSwgZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LnRleHRNYXRyaXggPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQudGV4dE1hdHJpeFNjYWxlID0gTWF0aC5oeXBvdChhLCBiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC54ID0gdGhpcy5jdXJyZW50LmxpbmVYID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC55ID0gdGhpcy5jdXJyZW50LmxpbmVZID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG5leHRMaW5lKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZlVGV4dCgwLCB0aGlzLmN1cnJlbnQubGVhZGluZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBwYWludENoYXIoY2hhcmFjdGVyLCB4LCB5LCBwYXR0ZXJuVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb250ID0gY3VycmVudC5mb250O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dFJlbmRlcmluZ01vZGUgPSBjdXJyZW50LnRleHRSZW5kZXJpbmdNb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9udFNpemUgPSBjdXJyZW50LmZvbnRTaXplIC8gY3VycmVudC5mb250U2l6ZVNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsbFN0cm9rZU1vZGUgPSB0ZXh0UmVuZGVyaW5nTW9kZSAmIF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFX01BU0s7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0FkZFRvUGF0aFNldCA9ICEhKHRleHRSZW5kZXJpbmdNb2RlICYgX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuQUREX1RPX1BBVEhfRkxBRyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXR0ZXJuRmlsbCA9IGN1cnJlbnQucGF0dGVybkZpbGwgJiYgIWZvbnQubWlzc2luZ0ZpbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYWRkVG9QYXRoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9udC5kaXNhYmxlRm9udEZhY2UgfHwgaXNBZGRUb1BhdGhTZXQgfHwgcGF0dGVybkZpbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRUb1BhdGggPSBmb250LmdldFBhdGhHZW5lcmF0b3IodGhpcy5jb21tb25PYmpzLCBjaGFyYWN0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9udC5kaXNhYmxlRm9udEZhY2UgfHwgcGF0dGVybkZpbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFRvUGF0aChjdHgsIGZvbnRTaXplKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXR0ZXJuVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zZXRUcmFuc2Zvcm0uYXBwbHkoY3R4LCBwYXR0ZXJuVHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsbFN0cm9rZU1vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTEwgfHwgZmlsbFN0cm9rZU1vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5TVFJPS0UgfHwgZmlsbFN0cm9rZU1vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsbFN0cm9rZU1vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTEwgfHwgZmlsbFN0cm9rZU1vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsVGV4dChjaGFyYWN0ZXIsIHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuU1RST0tFIHx8IGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMX1NUUk9LRSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguc3Ryb2tlVGV4dChjaGFyYWN0ZXIsIHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQWRkVG9QYXRoU2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aHMgPSB0aGlzLnBlbmRpbmdUZXh0UGF0aHMgfHwgKHRoaXMucGVuZGluZ1RleHRQYXRocyA9IFtdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRocy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBjdHgubW96Q3VycmVudFRyYW5zZm9ybSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFRvUGF0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0IGlzRm9udFN1YnBpeGVsQUFFbmFibGVkKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IGN0eFxuICAgICAgICAgICAgICAgICAgICAgICAgfSA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKFwiaXNGb250U3VicGl4ZWxBQUVuYWJsZWRcIiwgMTAsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zY2FsZSgxLjUsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KFwiSVwiLCAwLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCAxMCwgMTApLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMzsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtpXSA+IDAgJiYgZGF0YVtpXSA8IDI1NSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF91dGlsLnNoYWRvdykodGhpcywgXCJpc0ZvbnRTdWJwaXhlbEFBRW5hYmxlZFwiLCBlbmFibGVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNob3dUZXh0KGdseXBocykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvbnQgPSBjdXJyZW50LmZvbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb250LmlzVHlwZTNGb250KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hvd1R5cGUzVGV4dChnbHlwaHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb250U2l6ZSA9IGN1cnJlbnQuZm9udFNpemU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb250U2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9udFNpemVTY2FsZSA9IGN1cnJlbnQuZm9udFNpemVTY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYXJTcGFjaW5nID0gY3VycmVudC5jaGFyU3BhY2luZztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmRTcGFjaW5nID0gY3VycmVudC53b3JkU3BhY2luZztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvbnREaXJlY3Rpb24gPSBjdXJyZW50LmZvbnREaXJlY3Rpb247XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0SFNjYWxlID0gY3VycmVudC50ZXh0SFNjYWxlICogZm9udERpcmVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdseXBoc0xlbmd0aCA9IGdseXBocy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IGZvbnQudmVydGljYWw7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzcGFjaW5nRGlyID0gdmVydGljYWwgPyAxIDogLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0Vk1ldHJpY3MgPSBmb250LmRlZmF1bHRWTWV0cmljcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdpZHRoQWR2YW5jZVNjYWxlID0gZm9udFNpemUgKiBjdXJyZW50LmZvbnRNYXRyaXhbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzaW1wbGVGaWxsVGV4dCA9IGN1cnJlbnQudGV4dFJlbmRlcmluZ01vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTEwgJiYgIWZvbnQuZGlzYWJsZUZvbnRGYWNlICYmICFjdXJyZW50LnBhdHRlcm5GaWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2Zvcm0uYXBwbHkoY3R4LCBjdXJyZW50LnRleHRNYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShjdXJyZW50LngsIGN1cnJlbnQueSArIGN1cnJlbnQudGV4dFJpc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9udERpcmVjdGlvbiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguc2NhbGUodGV4dEhTY2FsZSwgLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguc2NhbGUodGV4dEhTY2FsZSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXR0ZXJuVHJhbnNmb3JtO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5wYXR0ZXJuRmlsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0dGVybiA9IGN1cnJlbnQuZmlsbENvbG9yLmdldFBhdHRlcm4oY3R4LCB0aGlzLCBjdHgubW96Q3VycmVudFRyYW5zZm9ybUludmVyc2UsIF9wYXR0ZXJuX2hlbHBlci5QYXRoVHlwZS5GSUxMKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuVHJhbnNmb3JtID0gY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gcGF0dGVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmVXaWR0aCA9IGN1cnJlbnQubGluZVdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NhbGUgPSBjdXJyZW50LnRleHRNYXRyaXhTY2FsZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjYWxlID09PSAwIHx8IGxpbmVXaWR0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGxTdHJva2VNb2RlID0gY3VycmVudC50ZXh0UmVuZGVyaW5nTW9kZSAmIF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFX01BU0s7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsbFN0cm9rZU1vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLlNUUk9LRSB8fCBmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTF9TVFJPS0UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoID0gdGhpcy5nZXRTaW5nbGVQaXhlbFdpZHRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lV2lkdGggLz0gc2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb250U2l6ZVNjYWxlICE9PSAxLjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguc2NhbGUoZm9udFNpemVTY2FsZSwgZm9udFNpemVTY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoIC89IGZvbnRTaXplU2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGdseXBoc0xlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2x5cGggPSBnbHlwaHNbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGdseXBoID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggKz0gc3BhY2luZ0RpciAqIGdseXBoICogZm9udFNpemUgLyAxMDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdG9yZU5lZWRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwYWNpbmcgPSAoZ2x5cGguaXNTcGFjZSA/IHdvcmRTcGFjaW5nIDogMCkgKyBjaGFyU3BhY2luZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFyYWN0ZXIgPSBnbHlwaC5mb250Q2hhcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhY2NlbnQgPSBnbHlwaC5hY2NlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNjYWxlZFgsIHNjYWxlZFk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHdpZHRoID0gZ2x5cGgud2lkdGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgdm1ldHJpYyA9IGdseXBoLnZtZXRyaWMgfHwgZGVmYXVsdFZNZXRyaWNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2eCA9IC0oZ2x5cGgudm1ldHJpYyA/IHZtZXRyaWNbMV0gOiB3aWR0aCAqIDAuNSkgKiB3aWR0aEFkdmFuY2VTY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdnkgPSB2bWV0cmljWzJdICogd2lkdGhBZHZhbmNlU2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gdm1ldHJpYyA/IC12bWV0cmljWzBdIDogd2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlZFggPSB2eCAvIGZvbnRTaXplU2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlZFkgPSAoeCArIHZ5KSAvIGZvbnRTaXplU2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVkWCA9IHggLyBmb250U2l6ZVNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZWRZID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9udC5yZW1lYXN1cmUgJiYgd2lkdGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lYXN1cmVkV2lkdGggPSBjdHgubWVhc3VyZVRleHQoY2hhcmFjdGVyKS53aWR0aCAqIDEwMDAgLyBmb250U2l6ZSAqIGZvbnRTaXplU2NhbGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoIDwgbWVhc3VyZWRXaWR0aCAmJiB0aGlzLmlzRm9udFN1YnBpeGVsQUFFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFyYWN0ZXJTY2FsZVggPSB3aWR0aCAvIG1lYXN1cmVkV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN0b3JlTmVlZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguc2NhbGUoY2hhcmFjdGVyU2NhbGVYLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlZFggLz0gY2hhcmFjdGVyU2NhbGVYO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpZHRoICE9PSBtZWFzdXJlZFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZWRYICs9ICh3aWR0aCAtIG1lYXN1cmVkV2lkdGgpIC8gMjAwMCAqIGZvbnRTaXplIC8gZm9udFNpemVTY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRlbnRWaXNpYmxlICYmIChnbHlwaC5pc0luRm9udCB8fCBmb250Lm1pc3NpbmdGaWxlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2ltcGxlRmlsbFRleHQgJiYgIWFjY2VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGNoYXJhY3Rlciwgc2NhbGVkWCwgc2NhbGVkWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhaW50Q2hhcihjaGFyYWN0ZXIsIHNjYWxlZFgsIHNjYWxlZFksIHBhdHRlcm5UcmFuc2Zvcm0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWNjZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NhbGVkQWNjZW50WCA9IHNjYWxlZFggKyBmb250U2l6ZSAqIGFjY2VudC5vZmZzZXQueCAvIGZvbnRTaXplU2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NhbGVkQWNjZW50WSA9IHNjYWxlZFkgLSBmb250U2l6ZSAqIGFjY2VudC5vZmZzZXQueSAvIGZvbnRTaXplU2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWludENoYXIoYWNjZW50LmZvbnRDaGFyLCBzY2FsZWRBY2NlbnRYLCBzY2FsZWRBY2NlbnRZLCBwYXR0ZXJuVHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGFyV2lkdGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcldpZHRoID0gd2lkdGggKiB3aWR0aEFkdmFuY2VTY2FsZSAtIHNwYWNpbmcgKiBmb250RGlyZWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJXaWR0aCA9IHdpZHRoICogd2lkdGhBZHZhbmNlU2NhbGUgKyBzcGFjaW5nICogZm9udERpcmVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ICs9IGNoYXJXaWR0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN0b3JlTmVlZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnkgLT0geDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC54ICs9IHggKiB0ZXh0SFNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2hvd1R5cGUzVGV4dChnbHlwaHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvbnQgPSBjdXJyZW50LmZvbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb250U2l6ZSA9IGN1cnJlbnQuZm9udFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb250RGlyZWN0aW9uID0gY3VycmVudC5mb250RGlyZWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BhY2luZ0RpciA9IGZvbnQudmVydGljYWwgPyAxIDogLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFyU3BhY2luZyA9IGN1cnJlbnQuY2hhclNwYWNpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JkU3BhY2luZyA9IGN1cnJlbnQud29yZFNwYWNpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0SFNjYWxlID0gY3VycmVudC50ZXh0SFNjYWxlICogZm9udERpcmVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvbnRNYXRyaXggPSBjdXJyZW50LmZvbnRNYXRyaXggfHwgX3V0aWwuRk9OVF9JREVOVElUWV9NQVRSSVg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnbHlwaHNMZW5ndGggPSBnbHlwaHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNUZXh0SW52aXNpYmxlID0gY3VycmVudC50ZXh0UmVuZGVyaW5nTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuSU5WSVNJQkxFO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGksIGdseXBoLCB3aWR0aCwgc3BhY2luZ0xlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVGV4dEludmlzaWJsZSB8fCBmb250U2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkU2NhbGVGb3JTdHJva2luZyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRHZXRTaW5nbGVQaXhlbFdpZHRoID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgudHJhbnNmb3JtLmFwcGx5KGN0eCwgY3VycmVudC50ZXh0TWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoY3VycmVudC54LCBjdXJyZW50LnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnNjYWxlKHRleHRIU2NhbGUsIGZvbnREaXJlY3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZ2x5cGhzTGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbHlwaCA9IGdseXBoc1tpXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZ2x5cGggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhY2luZ0xlbmd0aCA9IHNwYWNpbmdEaXIgKiBnbHlwaCAqIGZvbnRTaXplIC8gMTAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHgudHJhbnNsYXRlKHNwYWNpbmdMZW5ndGgsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnggKz0gc3BhY2luZ0xlbmd0aCAqIHRleHRIU2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwYWNpbmcgPSAoZ2x5cGguaXNTcGFjZSA/IHdvcmRTcGFjaW5nIDogMCkgKyBjaGFyU3BhY2luZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcGVyYXRvckxpc3QgPSBmb250LmNoYXJQcm9jT3BlcmF0b3JMaXN0W2dseXBoLm9wZXJhdG9yTGlzdElkXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3BlcmF0b3JMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKShgVHlwZTMgY2hhcmFjdGVyIFwiJHtnbHlwaC5vcGVyYXRvckxpc3RJZH1cIiBpcyBub3QgYXZhaWxhYmxlLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250ZW50VmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NpbmdUeXBlMyA9IGdseXBoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnNjYWxlKGZvbnRTaXplLCBmb250U2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2Zvcm0uYXBwbHkoY3R4LCBmb250TWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5leGVjdXRlT3BlcmF0b3JMaXN0KG9wZXJhdG9yTGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbZ2x5cGgud2lkdGgsIDBdLCBmb250TWF0cml4KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gdHJhbnNmb3JtZWRbMF0gKiBmb250U2l6ZSArIHNwYWNpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSh3aWR0aCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC54ICs9IHdpZHRoICogdGV4dEhTY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc2luZ1R5cGUzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNldENoYXJXaWR0aCh4V2lkdGgsIHlXaWR0aCkge31cblxuICAgICAgICAgICAgICAgICAgICBzZXRDaGFyV2lkdGhBbmRCb3VuZHMoeFdpZHRoLCB5V2lkdGgsIGxseCwgbGx5LCB1cngsIHVyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHgucmVjdChsbHgsIGxseSwgdXJ4IC0gbGx4LCB1cnkgLSBsbHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGlwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVuZFBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldENvbG9yTl9QYXR0ZXJuKElSKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGF0dGVybjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKElSWzBdID09PSBcIlRpbGluZ1BhdHRlcm5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gSVJbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZVRyYW5zZm9ybSA9IHRoaXMuYmFzZVRyYW5zZm9ybSB8fCB0aGlzLmN0eC5tb3pDdXJyZW50VHJhbnNmb3JtLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FudmFzR3JhcGhpY3NGYWN0b3J5ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVDYW52YXNHcmFwaGljczogY3R4ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ2FudmFzR3JhcGhpY3MoY3R4LCB0aGlzLmNvbW1vbk9ianMsIHRoaXMub2JqcywgdGhpcy5jYW52YXNGYWN0b3J5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybiA9IG5ldyBfcGF0dGVybl9oZWxwZXIuVGlsaW5nUGF0dGVybihJUiwgY29sb3IsIHRoaXMuY3R4LCBjYW52YXNHcmFwaGljc0ZhY3RvcnksIGJhc2VUcmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuID0gdGhpcy5fZ2V0UGF0dGVybihJUlsxXSwgSVJbMl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGF0dGVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNldFN0cm9rZUNvbG9yTigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5zdHJva2VDb2xvciA9IHRoaXMuZ2V0Q29sb3JOX1BhdHRlcm4oYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNldEZpbGxDb2xvck4oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQuZmlsbENvbG9yID0gdGhpcy5nZXRDb2xvck5fUGF0dGVybihhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LnBhdHRlcm5GaWxsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNldFN0cm9rZVJHQkNvbG9yKHIsIGcsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gX3V0aWwuVXRpbC5tYWtlSGV4Q29sb3IociwgZywgYik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQuc3Ryb2tlQ29sb3IgPSBjb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNldEZpbGxSR0JDb2xvcihyLCBnLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2xvciA9IF91dGlsLlV0aWwubWFrZUhleENvbG9yKHIsIGcsIGIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5maWxsQ29sb3IgPSBjb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5wYXR0ZXJuRmlsbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX2dldFBhdHRlcm4ob2JqSWQsIG1hdHJpeCA9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXR0ZXJuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWNoZWRQYXR0ZXJucy5oYXMob2JqSWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybiA9IHRoaXMuY2FjaGVkUGF0dGVybnMuZ2V0KG9iaklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybiA9ICgwLCBfcGF0dGVybl9oZWxwZXIuZ2V0U2hhZGluZ1BhdHRlcm4pKHRoaXMub2Jqcy5nZXQob2JqSWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhY2hlZFBhdHRlcm5zLnNldChvYmpJZCwgcGF0dGVybik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLm1hdHJpeCA9IG1hdHJpeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhdHRlcm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzaGFkaW5nRmlsbChvYmpJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRlbnRWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXR0ZXJuID0gdGhpcy5fZ2V0UGF0dGVybihvYmpJZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBwYXR0ZXJuLmdldFBhdHRlcm4oY3R4LCB0aGlzLCBjdHgubW96Q3VycmVudFRyYW5zZm9ybUludmVyc2UsIF9wYXR0ZXJuX2hlbHBlci5QYXRoVHlwZS5TSEFESU5HKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGludiA9IGN0eC5tb3pDdXJyZW50VHJhbnNmb3JtSW52ZXJzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IGN0eC5jYW52YXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbMCwgMF0sIGludik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiciA9IF91dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oWzAsIGhlaWdodF0sIGludik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1bCA9IF91dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oW3dpZHRoLCAwXSwgaW52KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVyID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbd2lkdGgsIGhlaWdodF0sIGludik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB4MCA9IE1hdGgubWluKGJsWzBdLCBiclswXSwgdWxbMF0sIHVyWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB5MCA9IE1hdGgubWluKGJsWzFdLCBiclsxXSwgdWxbMV0sIHVyWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB4MSA9IE1hdGgubWF4KGJsWzBdLCBiclswXSwgdWxbMF0sIHVyWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB5MSA9IE1hdGgubWF4KGJsWzFdLCBiclsxXSwgdWxbMV0sIHVyWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5maWxsUmVjdCh4MCwgeTAsIHgxIC0geDAsIHkxIC0geTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5maWxsUmVjdCgtMWUxMCwgLTFlMTAsIDJlMTAsIDJlMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBvc2UodGhpcy5jdXJyZW50LmdldENsaXBwZWRQYXRoQm91bmRpbmdCb3goKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJlZ2luSW5saW5lSW1hZ2UoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKFwiU2hvdWxkIG5vdCBjYWxsIGJlZ2luSW5saW5lSW1hZ2VcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBiZWdpbkltYWdlRGF0YSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoXCJTaG91bGQgbm90IGNhbGwgYmVnaW5JbWFnZURhdGFcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBwYWludEZvcm1YT2JqZWN0QmVnaW4obWF0cml4LCBiYm94KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGVudFZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNlVHJhbnNmb3JtU3RhY2sucHVzaCh0aGlzLmJhc2VUcmFuc2Zvcm0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShtYXRyaXgpICYmIG1hdHJpeC5sZW5ndGggPT09IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5hcHBseSh0aGlzLCBtYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhc2VUcmFuc2Zvcm0gPSB0aGlzLmN0eC5tb3pDdXJyZW50VHJhbnNmb3JtO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmJveCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gYmJveFsyXSAtIGJib3hbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gYmJveFszXSAtIGJib3hbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHgucmVjdChiYm94WzBdLCBiYm94WzFdLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQudXBkYXRlUGF0aE1pbk1heCh0aGlzLmN0eC5tb3pDdXJyZW50VHJhbnNmb3JtLCBiYm94WzBdLCBiYm94WzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQudXBkYXRlUGF0aE1pbk1heCh0aGlzLmN0eC5tb3pDdXJyZW50VHJhbnNmb3JtLCBiYm94WzJdLCBiYm94WzNdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVuZFBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHBhaW50Rm9ybVhPYmplY3RFbmQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGVudFZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNlVHJhbnNmb3JtID0gdGhpcy5iYXNlVHJhbnNmb3JtU3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBiZWdpbkdyb3VwKGdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGVudFZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pblNNYXNrTW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW5kU01hc2tNb2RlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEN0eCA9IHRoaXMuY3R4O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWdyb3VwLmlzb2xhdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLmluZm8pKFwiVE9ETzogU3VwcG9ydCBub24taXNvbGF0ZWQgZ3JvdXBzLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdyb3VwLmtub2Nrb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiS25vY2tvdXQgZ3JvdXBzIG5vdCBzdXBwb3J0ZWQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50VHJhbnNmb3JtID0gY3VycmVudEN0eC5tb3pDdXJyZW50VHJhbnNmb3JtO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXAubWF0cml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEN0eC50cmFuc2Zvcm0uYXBwbHkoY3VycmVudEN0eCwgZ3JvdXAubWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFncm91cC5iYm94KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQm91bmRpbmcgYm94IGlzIHJlcXVpcmVkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJvdW5kcyA9IF91dGlsLlV0aWwuZ2V0QXhpYWxBbGlnbmVkQm91bmRpbmdCb3goZ3JvdXAuYmJveCwgY3VycmVudEN0eC5tb3pDdXJyZW50VHJhbnNmb3JtKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FudmFzQm91bmRzID0gWzAsIDAsIGN1cnJlbnRDdHguY2FudmFzLndpZHRoLCBjdXJyZW50Q3R4LmNhbnZhcy5oZWlnaHRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRzID0gX3V0aWwuVXRpbC5pbnRlcnNlY3QoYm91bmRzLCBjYW52YXNCb3VuZHMpIHx8IFswLCAwLCAwLCAwXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldFggPSBNYXRoLmZsb29yKGJvdW5kc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRZID0gTWF0aC5mbG9vcihib3VuZHNbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRyYXduV2lkdGggPSBNYXRoLm1heChNYXRoLmNlaWwoYm91bmRzWzJdKSAtIG9mZnNldFgsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRyYXduSGVpZ2h0ID0gTWF0aC5tYXgoTWF0aC5jZWlsKGJvdW5kc1szXSkgLSBvZmZzZXRZLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzY2FsZVggPSAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlWSA9IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkcmF3bldpZHRoID4gTUFYX0dST1VQX1NJWkUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVggPSBkcmF3bldpZHRoIC8gTUFYX0dST1VQX1NJWkU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhd25XaWR0aCA9IE1BWF9HUk9VUF9TSVpFO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHJhd25IZWlnaHQgPiBNQVhfR1JPVVBfU0laRSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlWSA9IGRyYXduSGVpZ2h0IC8gTUFYX0dST1VQX1NJWkU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhd25IZWlnaHQgPSBNQVhfR1JPVVBfU0laRTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LnN0YXJ0TmV3UGF0aEFuZENsaXBCb3goWzAsIDAsIGRyYXduV2lkdGgsIGRyYXduSGVpZ2h0XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2FjaGVJZCA9IFwiZ3JvdXBBdFwiICsgdGhpcy5ncm91cExldmVsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXAuc21hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZUlkICs9IFwiX3NtYXNrX1wiICsgdGhpcy5zbWFza0NvdW50ZXIrKyAlIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjcmF0Y2hDYW52YXMgPSB0aGlzLmNhY2hlZENhbnZhc2VzLmdldENhbnZhcyhjYWNoZUlkLCBkcmF3bldpZHRoLCBkcmF3bkhlaWdodCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBncm91cEN0eCA9IHNjcmF0Y2hDYW52YXMuY29udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwQ3R4LnNjYWxlKDEgLyBzY2FsZVgsIDEgLyBzY2FsZVkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBDdHgudHJhbnNsYXRlKC1vZmZzZXRYLCAtb2Zmc2V0WSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cEN0eC50cmFuc2Zvcm0uYXBwbHkoZ3JvdXBDdHgsIGN1cnJlbnRUcmFuc2Zvcm0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXAuc21hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNtYXNrU3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhczogc2NyYXRjaENhbnZhcy5jYW52YXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IGdyb3VwQ3R4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRYLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRZLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlWSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VidHlwZTogZ3JvdXAuc21hc2suc3VidHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6IGdyb3VwLnNtYXNrLmJhY2tkcm9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zlck1hcDogZ3JvdXAuc21hc2sudHJhbnNmZXJNYXAgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRUcmFuc2Zvcm1JbnZlcnNlOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDdHgudHJhbnNsYXRlKG9mZnNldFgsIG9mZnNldFkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDdHguc2NhbGUoc2NhbGVYLCBzY2FsZVkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDdHguc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3B5Q3R4U3RhdGUoY3VycmVudEN0eCwgZ3JvdXBDdHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHggPSBncm91cEN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0R1N0YXRlKFtbXCJCTVwiLCBcInNvdXJjZS1vdmVyXCJdLCBbXCJjYVwiLCAxXSwgW1wiQ0FcIiwgMV1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXBTdGFjay5wdXNoKGN1cnJlbnRDdHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ncm91cExldmVsKys7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBlbmRHcm91cChncm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRlbnRWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdyb3VwTGV2ZWwtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwQ3R4ID0gdGhpcy5jdHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLmdyb3VwU3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXAuc21hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbXBTTWFzayA9IHRoaXMuc21hc2tTdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRNdHggPSB0aGlzLmN0eC5tb3pDdXJyZW50VHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5zZXRUcmFuc2Zvcm0uYXBwbHkodGhpcy5jdHgsIGN1cnJlbnRNdHgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlydHlCb3ggPSBfdXRpbC5VdGlsLmdldEF4aWFsQWxpZ25lZEJvdW5kaW5nQm94KFswLCAwLCBncm91cEN0eC5jYW52YXMud2lkdGgsIGdyb3VwQ3R4LmNhbnZhcy5oZWlnaHRdLCBjdXJyZW50TXR4KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LmRyYXdJbWFnZShncm91cEN0eC5jYW52YXMsIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBvc2UoZGlydHlCb3gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYmVnaW5Bbm5vdGF0aW9ucygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5iYXNlVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHguc2V0VHJhbnNmb3JtLmFwcGx5KHRoaXMuY3R4LCB0aGlzLmJhc2VUcmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZW5kQW5ub3RhdGlvbnMoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJlZ2luQW5ub3RhdGlvbihpZCwgcmVjdCwgdHJhbnNmb3JtLCBtYXRyaXgsIGhhc093bkNhbnZhcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlY3QpICYmIHJlY3QubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSByZWN0WzJdIC0gcmVjdFswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWlnaHQgPSByZWN0WzNdIC0gcmVjdFsxXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd25DYW52YXMgJiYgdGhpcy5hbm5vdGF0aW9uQ2FudmFzTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybSA9IHRyYW5zZm9ybS5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1bNF0gLT0gcmVjdFswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtWzVdIC09IHJlY3RbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY3QgPSByZWN0LnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY3RbMF0gPSByZWN0WzFdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjdFsyXSA9IHdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWN0WzNdID0gaGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFtzY2FsZVgsIHNjYWxlWV0gPSBfdXRpbC5VdGlsLnNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKHRoaXMuY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0U2NhbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbnZhc1dpZHRoID0gTWF0aC5jZWlsKHdpZHRoICogdGhpcy5vdXRwdXRTY2FsZVggKiB2aWV3cG9ydFNjYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FudmFzSGVpZ2h0ID0gTWF0aC5jZWlsKGhlaWdodCAqIHRoaXMub3V0cHV0U2NhbGVZICogdmlld3BvcnRTY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW5ub3RhdGlvbkNhbnZhcyA9IHRoaXMuY2FudmFzRmFjdG9yeS5jcmVhdGUoY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA9IHRoaXMuYW5ub3RhdGlvbkNhbnZhcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gYGNhbGMoJHt3aWR0aH1weCAqIHZhcigtLXZpZXdwb3J0LXNjYWxlLWZhY3RvcikpYDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IGBjYWxjKCR7aGVpZ2h0fXB4ICogdmFyKC0tdmlld3BvcnQtc2NhbGUtZmFjdG9yKSlgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFubm90YXRpb25DYW52YXNNYXAuc2V0KGlkLCBjYW52YXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFubm90YXRpb25DYW52YXMuc2F2ZWRDdHggPSB0aGlzLmN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHggPSBjb250ZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5zZXRUcmFuc2Zvcm0oc2NhbGVYLCAwLCAwLCAtc2NhbGVZLCAwLCBoZWlnaHQgKiBzY2FsZVkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRDb250ZXh0Q3VycmVudFRyYW5zZm9ybSh0aGlzLmN0eCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0Q3R4VG9EZWZhdWx0KHRoaXMuY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldEN0eFRvRGVmYXVsdCh0aGlzLmN0eCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LnJlY3QocmVjdFswXSwgcmVjdFsxXSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVuZFBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IG5ldyBDYW52YXNFeHRyYVN0YXRlKHRoaXMuY3R4LmNhbnZhcy53aWR0aCwgdGhpcy5jdHguY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5hcHBseSh0aGlzLCB0cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0uYXBwbHkodGhpcywgbWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGVuZEFubm90YXRpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hbm5vdGF0aW9uQ2FudmFzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHggPSB0aGlzLmFubm90YXRpb25DYW52YXMuc2F2ZWRDdHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuYW5ub3RhdGlvbkNhbnZhcy5zYXZlZEN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5hbm5vdGF0aW9uQ2FudmFzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHBhaW50SW1hZ2VNYXNrWE9iamVjdChpbWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb250ZW50VmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IGltZy53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBpbWcuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2x5cGggPSB0aGlzLnByb2Nlc3NpbmdUeXBlMztcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKENPTVBJTEVfVFlQRTNfR0xZUEhTICYmIGdseXBoICYmIGdseXBoLmNvbXBpbGVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2lkdGggPD0gTUFYX1NJWkVfVE9fQ09NUElMRSAmJiBoZWlnaHQgPD0gTUFYX1NJWkVfVE9fQ09NUElMRSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbHlwaC5jb21waWxlZCA9IGNvbXBpbGVUeXBlM0dseXBoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGltZy5kYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2x5cGguY29tcGlsZWQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdseXBoPy5jb21waWxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdseXBoLmNvbXBpbGVkKGN0eCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXNrID0gdGhpcy5fY3JlYXRlTWFza0NhbnZhcyhpbWcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXNrQ2FudmFzID0gbWFzay5jYW52YXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UobWFza0NhbnZhcywgbWFzay5vZmZzZXRYLCBtYXNrLm9mZnNldFkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcGFpbnRJbWFnZU1hc2tYT2JqZWN0UmVwZWF0KGltZ0RhdGEsIHNjYWxlWCwgc2tld1ggPSAwLCBza2V3WSA9IDAsIHNjYWxlWSwgcG9zaXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGVudFZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRUcmFuc2Zvcm0gPSBjdHgubW96Q3VycmVudFRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2Zvcm0oc2NhbGVYLCBza2V3WCwgc2tld1ksIHNjYWxlWSwgMCwgMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hc2sgPSB0aGlzLl9jcmVhdGVNYXNrQ2FudmFzKGltZ0RhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBwb3NpdGlvbnMubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zID0gX3V0aWwuVXRpbC50cmFuc2Zvcm0oY3VycmVudFRyYW5zZm9ybSwgW3NjYWxlWCwgc2tld1gsIHNrZXdZLCBzY2FsZVksIHBvc2l0aW9uc1tpXSwgcG9zaXRpb25zW2kgKyAxXV0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW3gsIHldID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbMCwgMF0sIHRyYW5zKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UobWFzay5jYW52YXMsIHgsIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBwYWludEltYWdlTWFza1hPYmplY3RHcm91cChpbWFnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb250ZW50VmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxsQ29sb3IgPSB0aGlzLmN1cnJlbnQuZmlsbENvbG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNQYXR0ZXJuRmlsbCA9IHRoaXMuY3VycmVudC5wYXR0ZXJuRmlsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gaW1hZ2VzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWFnZSA9IGltYWdlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IGltYWdlLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFza0NhbnZhcyA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKFwibWFza0NhbnZhc1wiLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXNrQ3R4ID0gbWFza0NhbnZhcy5jb250ZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tDdHguc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dEJpbmFyeUltYWdlTWFzayhtYXNrQ3R4LCBpbWFnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0N0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcInNvdXJjZS1pblwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tDdHguZmlsbFN0eWxlID0gaXNQYXR0ZXJuRmlsbCA/IGZpbGxDb2xvci5nZXRQYXR0ZXJuKG1hc2tDdHgsIHRoaXMsIGN0eC5tb3pDdXJyZW50VHJhbnNmb3JtSW52ZXJzZSwgX3BhdHRlcm5faGVscGVyLlBhdGhUeXBlLkZJTEwpIDogZmlsbENvbG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tDdHguZmlsbFJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0N0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgudHJhbnNmb3JtLmFwcGx5KGN0eCwgaW1hZ2UudHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguc2NhbGUoMSwgLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UobWFza0NhbnZhcy5jYW52YXMsIDAsIDAsIHdpZHRoLCBoZWlnaHQsIDAsIC0xLCAxLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHBhaW50SW1hZ2VYT2JqZWN0KG9iaklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGVudFZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGltZ0RhdGEgPSBvYmpJZC5zdGFydHNXaXRoKFwiZ19cIikgPyB0aGlzLmNvbW1vbk9ianMuZ2V0KG9iaklkKSA6IHRoaXMub2Jqcy5nZXQob2JqSWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWltZ0RhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoXCJEZXBlbmRlbnQgaW1hZ2UgaXNuJ3QgcmVhZHkgeWV0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWludElubGluZUltYWdlWE9iamVjdChpbWdEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHBhaW50SW1hZ2VYT2JqZWN0UmVwZWF0KG9iaklkLCBzY2FsZVgsIHNjYWxlWSwgcG9zaXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGVudFZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGltZ0RhdGEgPSBvYmpJZC5zdGFydHNXaXRoKFwiZ19cIikgPyB0aGlzLmNvbW1vbk9ianMuZ2V0KG9iaklkKSA6IHRoaXMub2Jqcy5nZXQob2JqSWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWltZ0RhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoXCJEZXBlbmRlbnQgaW1hZ2UgaXNuJ3QgcmVhZHkgeWV0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBpbWdEYXRhLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gaW1nRGF0YS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXAgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gcG9zaXRpb25zLmxlbmd0aDsgaSA8IGlpOyBpICs9IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXAucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogW3NjYWxlWCwgMCwgMCwgc2NhbGVZLCBwb3NpdGlvbnNbaV0sIHBvc2l0aW9uc1tpICsgMV1dLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3OiB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaDogaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFpbnRJbmxpbmVJbWFnZVhPYmplY3RHcm91cChpbWdEYXRhLCBtYXApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcGFpbnRJbmxpbmVJbWFnZVhPYmplY3QoaW1nRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRlbnRWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IGltZ0RhdGEud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBpbWdEYXRhLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguc2NhbGUoMSAvIHdpZHRoLCAtMSAvIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW1nVG9QYWludDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBIVE1MRWxlbWVudCA9PT0gXCJmdW5jdGlvblwiICYmIGltZ0RhdGEgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCB8fCAhaW1nRGF0YS5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nVG9QYWludCA9IGltZ0RhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRtcENhbnZhcyA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKFwiaW5saW5lSW1hZ2VcIiwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wQ3R4ID0gdG1wQ2FudmFzLmNvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHV0QmluYXJ5SW1hZ2VEYXRhKHRtcEN0eCwgaW1nRGF0YSwgdGhpcy5jdXJyZW50LnRyYW5zZmVyTWFwcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nVG9QYWludCA9IHRtcENhbnZhcy5jYW52YXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjYWxlZCA9IHRoaXMuX3NjYWxlSW1hZ2UoaW1nVG9QYWludCwgY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm1JbnZlcnNlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGdldEltYWdlU21vb3RoaW5nRW5hYmxlZChjdHgubW96Q3VycmVudFRyYW5zZm9ybSwgaW1nRGF0YS5pbnRlcnBvbGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKHNjYWxlZC5pbWcsIDAsIDAsIHNjYWxlZC5wYWludFdpZHRoLCBzY2FsZWQucGFpbnRIZWlnaHQsIDAsIC1oZWlnaHQsIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbWFnZUxheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLmdldENhbnZhc1Bvc2l0aW9uKDAsIC1oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2VMYXllci5hcHBlbmRJbWFnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZ0RhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IHBvc2l0aW9uWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IHBvc2l0aW9uWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGggLyBjdHgubW96Q3VycmVudFRyYW5zZm9ybUludmVyc2VbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0IC8gY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm1JbnZlcnNlWzNdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBwYWludElubGluZUltYWdlWE9iamVjdEdyb3VwKGltZ0RhdGEsIG1hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRlbnRWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHcgPSBpbWdEYXRhLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaCA9IGltZ0RhdGEuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wQ2FudmFzID0gdGhpcy5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoXCJpbmxpbmVJbWFnZVwiLCB3LCBoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRtcEN0eCA9IHRtcENhbnZhcy5jb250ZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgcHV0QmluYXJ5SW1hZ2VEYXRhKHRtcEN0eCwgaW1nRGF0YSwgdGhpcy5jdXJyZW50LnRyYW5zZmVyTWFwcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IG1hcC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW50cnkgPSBtYXBbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgudHJhbnNmb3JtLmFwcGx5KGN0eCwgZW50cnkudHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguc2NhbGUoMSwgLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UodG1wQ2FudmFzLmNhbnZhcywgZW50cnkueCwgZW50cnkueSwgZW50cnkudywgZW50cnkuaCwgMCwgLTEsIDEsIDEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW1hZ2VMYXllcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZ2V0Q2FudmFzUG9zaXRpb24oZW50cnkueCwgZW50cnkueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2VMYXllci5hcHBlbmRJbWFnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWdEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogcG9zaXRpb25bMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IHBvc2l0aW9uWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBwYWludFNvbGlkQ29sb3JJbWFnZU1hc2soKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGVudFZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3R4LmZpbGxSZWN0KDAsIDAsIDEsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBtYXJrUG9pbnQodGFnKSB7fVxuXG4gICAgICAgICAgICAgICAgICAgIG1hcmtQb2ludFByb3BzKHRhZywgcHJvcGVydGllcykge31cblxuICAgICAgICAgICAgICAgICAgICBiZWdpbk1hcmtlZENvbnRlbnQodGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcmtlZENvbnRlbnRTdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJlZ2luTWFya2VkQ29udGVudFByb3BzKHRhZywgcHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyA9PT0gXCJPQ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXJrZWRDb250ZW50U3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IHRoaXMub3B0aW9uYWxDb250ZW50Q29uZmlnLmlzVmlzaWJsZShwcm9wZXJ0aWVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcmtlZENvbnRlbnRTdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRWaXNpYmxlID0gdGhpcy5pc0NvbnRlbnRWaXNpYmxlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBlbmRNYXJrZWRDb250ZW50KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXJrZWRDb250ZW50U3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRWaXNpYmxlID0gdGhpcy5pc0NvbnRlbnRWaXNpYmxlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBiZWdpbkNvbXBhdCgpIHt9XG5cbiAgICAgICAgICAgICAgICAgICAgZW5kQ29tcGF0KCkge31cblxuICAgICAgICAgICAgICAgICAgICBjb25zdW1lUGF0aChjbGlwQm94KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nQ2xpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC51cGRhdGVDbGlwRnJvbVBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBlbmRpbmdDbGlwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wb3NlKGNsaXBCb3gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGVuZGluZ0NsaXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nQ2xpcCA9PT0gRU9fQ0xJUCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguY2xpcChcImV2ZW5vZGRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmNsaXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdDbGlwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LnN0YXJ0TmV3UGF0aEFuZENsaXBCb3godGhpcy5jdXJyZW50LmNsaXBCb3gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0U2luZ2xlUGl4ZWxXaWR0aCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fY2FjaGVkR2V0U2luZ2xlUGl4ZWxXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG0gPSB0aGlzLmN0eC5tb3pDdXJyZW50VHJhbnNmb3JtO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1bMV0gPT09IDAgJiYgbVsyXSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRHZXRTaW5nbGVQaXhlbFdpZHRoID0gMSAvIE1hdGgubWluKE1hdGguYWJzKG1bMF0pLCBNYXRoLmFicyhtWzNdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWJzRGV0ID0gTWF0aC5hYnMobVswXSAqIG1bM10gLSBtWzJdICogbVsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vcm1YID0gTWF0aC5oeXBvdChtWzBdLCBtWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm9ybVkgPSBNYXRoLmh5cG90KG1bMV0sIG1bM10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRHZXRTaW5nbGVQaXhlbFdpZHRoID0gTWF0aC5tYXgobm9ybVgsIG5vcm1ZKSAvIGFic0RldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRHZXRTaW5nbGVQaXhlbFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0U2NhbGVGb3JTdHJva2luZygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fY2FjaGVkU2NhbGVGb3JTdHJva2luZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtID0gdGhpcy5jdHgubW96Q3VycmVudFRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2NhbGVYLCBzY2FsZVk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobVsxXSA9PT0gMCAmJiBtWzJdID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vcm1YID0gTWF0aC5hYnMobVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vcm1ZID0gTWF0aC5hYnMobVszXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVXaWR0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVYID0gMSAvIG5vcm1YO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVZID0gMSAvIG5vcm1ZO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NhbGVkWExpbmVXaWR0aCA9IG5vcm1YICogbGluZVdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NhbGVkWUxpbmVXaWR0aCA9IG5vcm1ZICogbGluZVdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVYID0gc2NhbGVkWExpbmVXaWR0aCA8IDEgPyAxIC8gc2NhbGVkWExpbmVXaWR0aCA6IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVkgPSBzY2FsZWRZTGluZVdpZHRoIDwgMSA/IDEgLyBzY2FsZWRZTGluZVdpZHRoIDogMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFic0RldCA9IE1hdGguYWJzKG1bMF0gKiBtWzNdIC0gbVsyXSAqIG1bMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBub3JtWCA9IE1hdGguaHlwb3QobVswXSwgbVsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vcm1ZID0gTWF0aC5oeXBvdChtWzJdLCBtWzNdKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluZVdpZHRoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVggPSBub3JtWSAvIGFic0RldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlWSA9IG5vcm1YIC8gYWJzRGV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFzZUFyZWEgPSBsaW5lV2lkdGggKiBhYnNEZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVggPSBub3JtWSA+IGJhc2VBcmVhID8gbm9ybVkgLyBiYXNlQXJlYSA6IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVkgPSBub3JtWCA+IGJhc2VBcmVhID8gbm9ybVggLyBiYXNlQXJlYSA6IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRTY2FsZUZvclN0cm9raW5nID0gW3NjYWxlWCwgc2NhbGVZXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZFNjYWxlRm9yU3Ryb2tpbmc7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXNjYWxlQW5kU3Ryb2tlKHNhdmVSZXN0b3JlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4XG4gICAgICAgICAgICAgICAgICAgICAgICB9ID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lV2lkdGhcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbc2NhbGVYLCBzY2FsZVldID0gdGhpcy5nZXRTY2FsZUZvclN0cm9raW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgubGluZVdpZHRoID0gbGluZVdpZHRoIHx8IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzY2FsZVggPT09IDEgJiYgc2NhbGVZID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNhdmVkTWF0cml4LCBzYXZlZERhc2hlcywgc2F2ZWREYXNoT2Zmc2V0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2F2ZVJlc3RvcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlZE1hdHJpeCA9IGN0eC5tb3pDdXJyZW50VHJhbnNmb3JtLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZWREYXNoZXMgPSBjdHguZ2V0TGluZURhc2goKS5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVkRGFzaE9mZnNldCA9IGN0eC5saW5lRGFzaE9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnNjYWxlKHNjYWxlWCwgc2NhbGVZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjYWxlID0gTWF0aC5tYXgoc2NhbGVYLCBzY2FsZVkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKGN0eC5nZXRMaW5lRGFzaCgpLm1hcCh4ID0+IHggLyBzY2FsZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0IC89IHNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2F2ZVJlc3RvcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguc2V0VHJhbnNmb3JtKC4uLnNhdmVkTWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguc2V0TGluZURhc2goc2F2ZWREYXNoZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IHNhdmVkRGFzaE9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldENhbnZhc1Bvc2l0aW9uKHgsIHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IHRoaXMuY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RyYW5zZm9ybVswXSAqIHggKyB0cmFuc2Zvcm1bMl0gKiB5ICsgdHJhbnNmb3JtWzRdLCB0cmFuc2Zvcm1bMV0gKiB4ICsgdHJhbnNmb3JtWzNdICogeSArIHRyYW5zZm9ybVs1XV07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpc0NvbnRlbnRWaXNpYmxlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMubWFya2VkQ29udGVudFN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1hcmtlZENvbnRlbnRTdGFja1tpXS52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLkNhbnZhc0dyYXBoaWNzID0gQ2FudmFzR3JhcGhpY3M7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9wIGluIF91dGlsLk9QUykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoQ2FudmFzR3JhcGhpY3MucHJvdG90eXBlW29wXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDYW52YXNHcmFwaGljcy5wcm90b3R5cGVbX3V0aWwuT1BTW29wXV0gPSBDYW52YXNHcmFwaGljcy5wcm90b3R5cGVbb3BdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyoqKi8gfSksXG4gICAgICAgICAgICAvKiAxMSAqL1xuICAgICAgICAgICAgLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG5cblxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5UaWxpbmdQYXR0ZXJuID0gZXhwb3J0cy5QYXRoVHlwZSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBleHBvcnRzLmdldFNoYWRpbmdQYXR0ZXJuID0gZ2V0U2hhZGluZ1BhdHRlcm47XG5cbiAgICAgICAgICAgICAgICB2YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgUGF0aFR5cGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIEZJTEw6IFwiRmlsbFwiLFxuICAgICAgICAgICAgICAgICAgICBTVFJPS0U6IFwiU3Ryb2tlXCIsXG4gICAgICAgICAgICAgICAgICAgIFNIQURJTkc6IFwiU2hhZGluZ1wiXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLlBhdGhUeXBlID0gUGF0aFR5cGU7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhcHBseUJvdW5kaW5nQm94KGN0eCwgYmJveCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWJib3ggfHwgdHlwZW9mIFBhdGgyRCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBiYm94WzJdIC0gYmJveFswXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gYmJveFszXSAtIGJib3hbMV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2lvbiA9IG5ldyBQYXRoMkQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVnaW9uLnJlY3QoYmJveFswXSwgYmJveFsxXSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5jbGlwKHJlZ2lvbik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgQmFzZVNoYWRpbmdQYXR0ZXJuIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gQmFzZVNoYWRpbmdQYXR0ZXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIkNhbm5vdCBpbml0aWFsaXplIEJhc2VTaGFkaW5nUGF0dGVybi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRQYXR0ZXJuKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIkFic3RyYWN0IG1ldGhvZCBgZ2V0UGF0dGVybmAgY2FsbGVkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgUmFkaWFsQXhpYWxTaGFkaW5nUGF0dGVybiBleHRlbmRzIEJhc2VTaGFkaW5nUGF0dGVybiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKElSKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHlwZSA9IElSWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmJveCA9IElSWzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29sb3JTdG9wcyA9IElSWzNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcDAgPSBJUls0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3AxID0gSVJbNV07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yMCA9IElSWzZdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcjEgPSBJUls3XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0cml4ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9jcmVhdGVHcmFkaWVudChjdHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBncmFkO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdHlwZSA9PT0gXCJheGlhbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhZCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCh0aGlzLl9wMFswXSwgdGhpcy5fcDBbMV0sIHRoaXMuX3AxWzBdLCB0aGlzLl9wMVsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3R5cGUgPT09IFwicmFkaWFsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmFkID0gY3R4LmNyZWF0ZVJhZGlhbEdyYWRpZW50KHRoaXMuX3AwWzBdLCB0aGlzLl9wMFsxXSwgdGhpcy5fcjAsIHRoaXMuX3AxWzBdLCB0aGlzLl9wMVsxXSwgdGhpcy5fcjEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNvbG9yU3RvcCBvZiB0aGlzLl9jb2xvclN0b3BzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhZC5hZGRDb2xvclN0b3AoY29sb3JTdG9wWzBdLCBjb2xvclN0b3BbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ3JhZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldFBhdHRlcm4oY3R4LCBvd25lciwgaW52ZXJzZSwgcGF0aFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXR0ZXJuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF0aFR5cGUgPT09IFBhdGhUeXBlLlNUUk9LRSB8fCBwYXRoVHlwZSA9PT0gUGF0aFR5cGUuRklMTCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG93bmVyQkJveCA9IG93bmVyLmN1cnJlbnQuZ2V0Q2xpcHBlZFBhdGhCb3VuZGluZ0JveChwYXRoVHlwZSwgY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0pIHx8IFswLCAwLCAwLCAwXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IE1hdGguY2VpbChvd25lckJCb3hbMl0gLSBvd25lckJCb3hbMF0pIHx8IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5jZWlsKG93bmVyQkJveFszXSAtIG93bmVyQkJveFsxXSkgfHwgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0bXBDYW52YXMgPSBvd25lci5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoXCJwYXR0ZXJuXCIsIHdpZHRoLCBoZWlnaHQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRtcEN0eCA9IHRtcENhbnZhcy5jb250ZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcEN0eC5jbGVhclJlY3QoMCwgMCwgdG1wQ3R4LmNhbnZhcy53aWR0aCwgdG1wQ3R4LmNhbnZhcy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcEN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBDdHgucmVjdCgwLCAwLCB0bXBDdHguY2FudmFzLndpZHRoLCB0bXBDdHguY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wQ3R4LnRyYW5zbGF0ZSgtb3duZXJCQm94WzBdLCAtb3duZXJCQm94WzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNlID0gX3V0aWwuVXRpbC50cmFuc2Zvcm0oaW52ZXJzZSwgWzEsIDAsIDAsIDEsIG93bmVyQkJveFswXSwgb3duZXJCQm94WzFdXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wQ3R4LnRyYW5zZm9ybS5hcHBseSh0bXBDdHgsIG93bmVyLmJhc2VUcmFuc2Zvcm0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0cml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcEN0eC50cmFuc2Zvcm0uYXBwbHkodG1wQ3R4LCB0aGlzLm1hdHJpeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwbHlCb3VuZGluZ0JveCh0bXBDdHgsIHRoaXMuX2Jib3gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcEN0eC5maWxsU3R5bGUgPSB0aGlzLl9jcmVhdGVHcmFkaWVudCh0bXBDdHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcEN0eC5maWxsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybiA9IGN0eC5jcmVhdGVQYXR0ZXJuKHRtcENhbnZhcy5jYW52YXMsIFwibm8tcmVwZWF0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvbU1hdHJpeCA9IG5ldyBET01NYXRyaXgoaW52ZXJzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuLnNldFRyYW5zZm9ybShkb21NYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKShgUmFkaWFsQXhpYWxTaGFkaW5nUGF0dGVybi5nZXRQYXR0ZXJuOiBcIiR7ZXg/Lm1lc3NhZ2V9XCIuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBseUJvdW5kaW5nQm94KGN0eCwgdGhpcy5fYmJveCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybiA9IHRoaXMuX2NyZWF0ZUdyYWRpZW50KGN0eCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXR0ZXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkcmF3VHJpYW5nbGUoZGF0YSwgY29udGV4dCwgcDEsIHAyLCBwMywgYzEsIGMyLCBjMykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb29yZHMgPSBjb250ZXh0LmNvb3JkcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9ycyA9IGNvbnRleHQuY29sb3JzO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBieXRlcyA9IGRhdGEuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd1NpemUgPSBkYXRhLndpZHRoICogNDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRtcDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29vcmRzW3AxICsgMV0gPiBjb29yZHNbcDIgKyAxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG1wID0gcDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBwMSA9IHAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcDIgPSB0bXA7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bXAgPSBjMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMxID0gYzI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjMiA9IHRtcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb29yZHNbcDIgKyAxXSA+IGNvb3Jkc1twMyArIDFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bXAgPSBwMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gcDM7XG4gICAgICAgICAgICAgICAgICAgICAgICBwMyA9IHRtcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IGMyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYzIgPSBjMztcbiAgICAgICAgICAgICAgICAgICAgICAgIGMzID0gdG1wO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvb3Jkc1twMSArIDFdID4gY29vcmRzW3AyICsgMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IHAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgcDEgPSBwMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAyID0gdG1wO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG1wID0gYzE7XG4gICAgICAgICAgICAgICAgICAgICAgICBjMSA9IGMyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYzIgPSB0bXA7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zdCB4MSA9IChjb29yZHNbcDFdICsgY29udGV4dC5vZmZzZXRYKSAqIGNvbnRleHQuc2NhbGVYO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB5MSA9IChjb29yZHNbcDEgKyAxXSArIGNvbnRleHQub2Zmc2V0WSkgKiBjb250ZXh0LnNjYWxlWTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeDIgPSAoY29vcmRzW3AyXSArIGNvbnRleHQub2Zmc2V0WCkgKiBjb250ZXh0LnNjYWxlWDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeTIgPSAoY29vcmRzW3AyICsgMV0gKyBjb250ZXh0Lm9mZnNldFkpICogY29udGV4dC5zY2FsZVk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHgzID0gKGNvb3Jkc1twM10gKyBjb250ZXh0Lm9mZnNldFgpICogY29udGV4dC5zY2FsZVg7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHkzID0gKGNvb3Jkc1twMyArIDFdICsgY29udGV4dC5vZmZzZXRZKSAqIGNvbnRleHQuc2NhbGVZO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh5MSA+PSB5Mykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYzFyID0gY29sb3JzW2MxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGMxZyA9IGNvbG9yc1tjMSArIDFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgYzFiID0gY29sb3JzW2MxICsgMl07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGMyciA9IGNvbG9yc1tjMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjMmcgPSBjb2xvcnNbYzIgKyAxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGMyYiA9IGNvbG9yc1tjMiArIDJdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjM3IgPSBjb2xvcnNbYzNdLFxuICAgICAgICAgICAgICAgICAgICAgICAgYzNnID0gY29sb3JzW2MzICsgMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjM2IgPSBjb2xvcnNbYzMgKyAyXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWluWSA9IE1hdGgucm91bmQoeTEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4WSA9IE1hdGgucm91bmQoeTMpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgeGEsIGNhciwgY2FnLCBjYWI7XG4gICAgICAgICAgICAgICAgICAgIGxldCB4YiwgY2JyLCBjYmcsIGNiYjtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB5ID0gbWluWTsgeSA8PSBtYXhZOyB5KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5IDwgeTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5IDwgeTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9ICh5MSAtIHkpIC8gKHkxIC0geTIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhhID0geDEgLSAoeDEgLSB4MikgKiBrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhciA9IGMxciAtIChjMXIgLSBjMnIpICogaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWcgPSBjMWcgLSAoYzFnIC0gYzJnKSAqIGs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FiID0gYzFiIC0gKGMxYiAtIGMyYikgKiBrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5ID4geTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh5MiA9PT0geTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9ICh5MiAtIHkpIC8gKHkyIC0geTMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhhID0geDIgLSAoeDIgLSB4MykgKiBrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhciA9IGMyciAtIChjMnIgLSBjM3IpICogaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWcgPSBjMmcgLSAoYzJnIC0gYzNnKSAqIGs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FiID0gYzJiIC0gKGMyYiAtIGMzYikgKiBrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHkgPCB5MSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh5ID4geTMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9ICh5MSAtIHkpIC8gKHkxIC0geTMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB4YiA9IHgxIC0gKHgxIC0geDMpICogaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiciA9IGMxciAtIChjMXIgLSBjM3IpICogaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiZyA9IGMxZyAtIChjMWcgLSBjM2cpICogaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiYiA9IGMxYiAtIChjMWIgLSBjM2IpICogaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHgxXyA9IE1hdGgucm91bmQoTWF0aC5taW4oeGEsIHhiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB4Ml8gPSBNYXRoLnJvdW5kKE1hdGgubWF4KHhhLCB4YikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGogPSByb3dTaXplICogeSArIHgxXyAqIDQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHggPSB4MV87IHggPD0geDJfOyB4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrID0gKHhhIC0geCkgLyAoeGEgLSB4Yik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoayA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlc1tqKytdID0gY2FyIC0gKGNhciAtIGNicikgKiBrIHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlc1tqKytdID0gY2FnIC0gKGNhZyAtIGNiZykgKiBrIHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlc1tqKytdID0gY2FiIC0gKGNhYiAtIGNiYikgKiBrIHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlc1tqKytdID0gMjU1O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZHJhd0ZpZ3VyZShkYXRhLCBmaWd1cmUsIGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHMgPSBmaWd1cmUuY29vcmRzO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjcyA9IGZpZ3VyZS5jb2xvcnM7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpLCBpaTtcblxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGZpZ3VyZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibGF0dGljZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZlcnRpY2VzUGVyUm93ID0gZmlndXJlLnZlcnRpY2VzUGVyUm93O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvd3MgPSBNYXRoLmZsb29yKHBzLmxlbmd0aCAvIHZlcnRpY2VzUGVyUm93KSAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29scyA9IHZlcnRpY2VzUGVyUm93IC0gMTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHEgPSBpICogdmVydGljZXNQZXJSb3c7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2xzOyBqKyssIHErKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhd1RyaWFuZ2xlKGRhdGEsIGNvbnRleHQsIHBzW3FdLCBwc1txICsgMV0sIHBzW3EgKyB2ZXJ0aWNlc1BlclJvd10sIGNzW3FdLCBjc1txICsgMV0sIGNzW3EgKyB2ZXJ0aWNlc1BlclJvd10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhd1RyaWFuZ2xlKGRhdGEsIGNvbnRleHQsIHBzW3EgKyB2ZXJ0aWNlc1BlclJvdyArIDFdLCBwc1txICsgMV0sIHBzW3EgKyB2ZXJ0aWNlc1BlclJvd10sIGNzW3EgKyB2ZXJ0aWNlc1BlclJvdyArIDFdLCBjc1txICsgMV0sIGNzW3EgKyB2ZXJ0aWNlc1BlclJvd10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ0cmlhbmdsZXNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHBzLmxlbmd0aDsgaSA8IGlpOyBpICs9IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhd1RyaWFuZ2xlKGRhdGEsIGNvbnRleHQsIHBzW2ldLCBwc1tpICsgMV0sIHBzW2kgKyAyXSwgY3NbaV0sIGNzW2kgKyAxXSwgY3NbaSArIDJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGZpZ3VyZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIE1lc2hTaGFkaW5nUGF0dGVybiBleHRlbmRzIEJhc2VTaGFkaW5nUGF0dGVybiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKElSKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29vcmRzID0gSVJbMl07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb2xvcnMgPSBJUlszXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpZ3VyZXMgPSBJUls0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2JvdW5kcyA9IElSWzVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmJveCA9IElSWzddO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmFja2dyb3VuZCA9IElSWzhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRyaXggPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX2NyZWF0ZU1lc2hDYW52YXMoY29tYmluZWRTY2FsZSwgYmFja2dyb3VuZENvbG9yLCBjYWNoZWRDYW52YXNlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgRVhQRUNURURfU0NBTEUgPSAxLjE7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBNQVhfUEFUVEVSTl9TSVpFID0gMzAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IEJPUkRFUl9TSVpFID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldFggPSBNYXRoLmZsb29yKHRoaXMuX2JvdW5kc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRZID0gTWF0aC5mbG9vcih0aGlzLl9ib3VuZHNbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYm91bmRzV2lkdGggPSBNYXRoLmNlaWwodGhpcy5fYm91bmRzWzJdKSAtIG9mZnNldFg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBib3VuZHNIZWlnaHQgPSBNYXRoLmNlaWwodGhpcy5fYm91bmRzWzNdKSAtIG9mZnNldFk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IE1hdGgubWluKE1hdGguY2VpbChNYXRoLmFicyhib3VuZHNXaWR0aCAqIGNvbWJpbmVkU2NhbGVbMF0gKiBFWFBFQ1RFRF9TQ0FMRSkpLCBNQVhfUEFUVEVSTl9TSVpFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IE1hdGgubWluKE1hdGguY2VpbChNYXRoLmFicyhib3VuZHNIZWlnaHQgKiBjb21iaW5lZFNjYWxlWzFdICogRVhQRUNURURfU0NBTEUpKSwgTUFYX1BBVFRFUk5fU0laRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzY2FsZVggPSBib3VuZHNXaWR0aCAvIHdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NhbGVZID0gYm91bmRzSGVpZ2h0IC8gaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29yZHM6IHRoaXMuX2Nvb3JkcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IHRoaXMuX2NvbG9ycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRYOiAtb2Zmc2V0WCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAtb2Zmc2V0WSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVg6IDEgLyBzY2FsZVgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVZOiAxIC8gc2NhbGVZXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFkZGVkV2lkdGggPSB3aWR0aCArIEJPUkRFUl9TSVpFICogMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZGRlZEhlaWdodCA9IGhlaWdodCArIEJPUkRFUl9TSVpFICogMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRtcENhbnZhcyA9IGNhY2hlZENhbnZhc2VzLmdldENhbnZhcyhcIm1lc2hcIiwgcGFkZGVkV2lkdGgsIHBhZGRlZEhlaWdodCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wQ3R4ID0gdG1wQ2FudmFzLmNvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gdG1wQ3R4LmNyZWF0ZUltYWdlRGF0YSh3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJhY2tncm91bmRDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gZGF0YS5kYXRhO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gYnl0ZXMubGVuZ3RoOyBpIDwgaWk7IGkgKz0gNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlc1tpXSA9IGJhY2tncm91bmRDb2xvclswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZXNbaSArIDFdID0gYmFja2dyb3VuZENvbG9yWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlc1tpICsgMl0gPSBiYWNrZ3JvdW5kQ29sb3JbMl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzW2kgKyAzXSA9IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZmlndXJlIG9mIHRoaXMuX2ZpZ3VyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmF3RmlndXJlKGRhdGEsIGZpZ3VyZSwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcEN0eC5wdXRJbWFnZURhdGEoZGF0YSwgQk9SREVSX1NJWkUsIEJPUkRFUl9TSVpFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IHRtcENhbnZhcy5jYW52YXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRYOiBvZmZzZXRYIC0gQk9SREVSX1NJWkUgKiBzY2FsZVgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogb2Zmc2V0WSAtIEJPUkRFUl9TSVpFICogc2NhbGVZLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlWCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVlcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRQYXR0ZXJuKGN0eCwgb3duZXIsIGludmVyc2UsIHBhdGhUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBseUJvdW5kaW5nQm94KGN0eCwgdGhpcy5fYmJveCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2NhbGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXRoVHlwZSA9PT0gUGF0aFR5cGUuU0hBRElORykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlID0gX3V0aWwuVXRpbC5zaW5ndWxhclZhbHVlRGVjb21wb3NlMmRTY2FsZShjdHgubW96Q3VycmVudFRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlID0gX3V0aWwuVXRpbC5zaW5ndWxhclZhbHVlRGVjb21wb3NlMmRTY2FsZShvd25lci5iYXNlVHJhbnNmb3JtKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRyaXhTY2FsZSA9IF91dGlsLlV0aWwuc2luZ3VsYXJWYWx1ZURlY29tcG9zZTJkU2NhbGUodGhpcy5tYXRyaXgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlID0gW3NjYWxlWzBdICogbWF0cml4U2NhbGVbMF0sIHNjYWxlWzFdICogbWF0cml4U2NhbGVbMV1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcG9yYXJ5UGF0dGVybkNhbnZhcyA9IHRoaXMuX2NyZWF0ZU1lc2hDYW52YXMoc2NhbGUsIHBhdGhUeXBlID09PSBQYXRoVHlwZS5TSEFESU5HID8gbnVsbCA6IHRoaXMuX2JhY2tncm91bmQsIG93bmVyLmNhY2hlZENhbnZhc2VzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGhUeXBlICE9PSBQYXRoVHlwZS5TSEFESU5HKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnNldFRyYW5zZm9ybS5hcHBseShjdHgsIG93bmVyLmJhc2VUcmFuc2Zvcm0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0cml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2Zvcm0uYXBwbHkoY3R4LCB0aGlzLm1hdHJpeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHgudHJhbnNsYXRlKHRlbXBvcmFyeVBhdHRlcm5DYW52YXMub2Zmc2V0WCwgdGVtcG9yYXJ5UGF0dGVybkNhbnZhcy5vZmZzZXRZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zY2FsZSh0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzLnNjYWxlWCwgdGVtcG9yYXJ5UGF0dGVybkNhbnZhcy5zY2FsZVkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN0eC5jcmVhdGVQYXR0ZXJuKHRlbXBvcmFyeVBhdHRlcm5DYW52YXMuY2FudmFzLCBcIm5vLXJlcGVhdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgRHVtbXlTaGFkaW5nUGF0dGVybiBleHRlbmRzIEJhc2VTaGFkaW5nUGF0dGVybiB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhdHRlcm4oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJob3RwaW5rXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldFNoYWRpbmdQYXR0ZXJuKElSKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoSVJbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJSYWRpYWxBeGlhbFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmFkaWFsQXhpYWxTaGFkaW5nUGF0dGVybihJUik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJNZXNoXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBNZXNoU2hhZGluZ1BhdHRlcm4oSVIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiRHVtbXlcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IER1bW15U2hhZGluZ1BhdHRlcm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBJUiB0eXBlOiAke0lSWzBdfWApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IFBhaW50VHlwZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgQ09MT1JFRDogMSxcbiAgICAgICAgICAgICAgICAgICAgVU5DT0xPUkVEOiAyXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGNsYXNzIFRpbGluZ1BhdHRlcm4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0aWMgZ2V0IE1BWF9QQVRURVJOX1NJWkUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF91dGlsLnNoYWRvdykodGhpcywgXCJNQVhfUEFUVEVSTl9TSVpFXCIsIDMwMDApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IoSVIsIGNvbG9yLCBjdHgsIGNhbnZhc0dyYXBoaWNzRmFjdG9yeSwgYmFzZVRyYW5zZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVyYXRvckxpc3QgPSBJUlsyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0cml4ID0gSVJbM10gfHwgWzEsIDAsIDAsIDEsIDAsIDBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYm94ID0gSVJbNF07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnhzdGVwID0gSVJbNV07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnlzdGVwID0gSVJbNl07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhaW50VHlwZSA9IElSWzddO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50aWxpbmdUeXBlID0gSVJbOF07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzR3JhcGhpY3NGYWN0b3J5ID0gY2FudmFzR3JhcGhpY3NGYWN0b3J5O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYXNlVHJhbnNmb3JtID0gYmFzZVRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZVBhdHRlcm5DYW52YXMob3duZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wZXJhdG9yTGlzdCA9IHRoaXMub3BlcmF0b3JMaXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmJveCA9IHRoaXMuYmJveDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHhzdGVwID0gdGhpcy54c3RlcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHlzdGVwID0gdGhpcy55c3RlcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhaW50VHlwZSA9IHRoaXMucGFpbnRUeXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGlsaW5nVHlwZSA9IHRoaXMudGlsaW5nVHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gdGhpcy5jb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbnZhc0dyYXBoaWNzRmFjdG9yeSA9IHRoaXMuY2FudmFzR3JhcGhpY3NGYWN0b3J5O1xuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLmluZm8pKFwiVGlsaW5nVHlwZTogXCIgKyB0aWxpbmdUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHgwID0gYmJveFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MCA9IGJib3hbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDEgPSBiYm94WzJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkxID0gYmJveFszXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0cml4U2NhbGUgPSBfdXRpbC5VdGlsLnNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKHRoaXMubWF0cml4KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VyTWF0cml4U2NhbGUgPSBfdXRpbC5VdGlsLnNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKHRoaXMuYmFzZVRyYW5zZm9ybSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbWJpbmVkU2NhbGUgPSBbbWF0cml4U2NhbGVbMF0gKiBjdXJNYXRyaXhTY2FsZVswXSwgbWF0cml4U2NhbGVbMV0gKiBjdXJNYXRyaXhTY2FsZVsxXV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaW14ID0gdGhpcy5nZXRTaXplQW5kU2NhbGUoeHN0ZXAsIHRoaXMuY3R4LmNhbnZhcy53aWR0aCwgY29tYmluZWRTY2FsZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaW15ID0gdGhpcy5nZXRTaXplQW5kU2NhbGUoeXN0ZXAsIHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQsIGNvbWJpbmVkU2NhbGVbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wQ2FudmFzID0gb3duZXIuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKFwicGF0dGVyblwiLCBkaW14LnNpemUsIGRpbXkuc2l6ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0bXBDdHggPSB0bXBDYW52YXMuY29udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdyYXBoaWNzID0gY2FudmFzR3JhcGhpY3NGYWN0b3J5LmNyZWF0ZUNhbnZhc0dyYXBoaWNzKHRtcEN0eCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBncmFwaGljcy5ncm91cExldmVsID0gb3duZXIuZ3JvdXBMZXZlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RmlsbEFuZFN0cm9rZVN0eWxlVG9Db250ZXh0KGdyYXBoaWNzLCBwYWludFR5cGUsIGNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhZGp1c3RlZFgwID0geDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYWRqdXN0ZWRZMCA9IHkwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFkanVzdGVkWDEgPSB4MTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhZGp1c3RlZFkxID0geTE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4MCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGp1c3RlZFgwID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGp1c3RlZFgxICs9IE1hdGguYWJzKHgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHkwIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkanVzdGVkWTAgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkanVzdGVkWTEgKz0gTWF0aC5hYnMoeTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBDdHgudHJhbnNsYXRlKC0oZGlteC5zY2FsZSAqIGFkanVzdGVkWDApLCAtKGRpbXkuc2NhbGUgKiBhZGp1c3RlZFkwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBncmFwaGljcy50cmFuc2Zvcm0oZGlteC5zY2FsZSwgMCwgMCwgZGlteS5zY2FsZSwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBDdHguc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGlwQmJveChncmFwaGljcywgYWRqdXN0ZWRYMCwgYWRqdXN0ZWRZMCwgYWRqdXN0ZWRYMSwgYWRqdXN0ZWRZMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBncmFwaGljcy5iYXNlVHJhbnNmb3JtID0gZ3JhcGhpY3MuY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0uc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBoaWNzLmV4ZWN1dGVPcGVyYXRvckxpc3Qob3BlcmF0b3JMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBoaWNzLmVuZERyYXdpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzOiB0bXBDYW52YXMuY2FudmFzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlWDogZGlteC5zY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVk6IGRpbXkuc2NhbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WDogYWRqdXN0ZWRYMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiBhZGp1c3RlZFkwXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0U2l6ZUFuZFNjYWxlKHN0ZXAsIHJlYWxPdXRwdXRTaXplLCBzY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcCA9IE1hdGguYWJzKHN0ZXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF4U2l6ZSA9IE1hdGgubWF4KFRpbGluZ1BhdHRlcm4uTUFYX1BBVFRFUk5fU0laRSwgcmVhbE91dHB1dFNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNpemUgPSBNYXRoLmNlaWwoc3RlcCAqIHNjYWxlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNpemUgPj0gbWF4U2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemUgPSBtYXhTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZSA9IHNpemUgLyBzdGVwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemVcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjbGlwQmJveChncmFwaGljcywgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJib3hXaWR0aCA9IHgxIC0geDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiYm94SGVpZ2h0ID0geTEgLSB5MDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBoaWNzLmN0eC5yZWN0KHgwLCB5MCwgYmJveFdpZHRoLCBiYm94SGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBoaWNzLmNsaXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYXBoaWNzLmVuZFBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNldEZpbGxBbmRTdHJva2VTdHlsZVRvQ29udGV4dChncmFwaGljcywgcGFpbnRUeXBlLCBjb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IGdyYXBoaWNzLmN0eCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gZ3JhcGhpY3MuY3VycmVudDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChwYWludFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFBhaW50VHlwZS5DT0xPUkVEOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBjdHguZmlsbFN0eWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gY3R4LnN0cm9rZVN0eWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmZpbGxDb2xvciA9IGN0eC5maWxsU3R5bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuc3Ryb2tlQ29sb3IgPSBjdHguc3Ryb2tlU3R5bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBQYWludFR5cGUuVU5DT0xPUkVEOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjc3NDb2xvciA9IF91dGlsLlV0aWwubWFrZUhleENvbG9yKGNvbG9yWzBdLCBjb2xvclsxXSwgY29sb3JbMl0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gY3NzQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBjc3NDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5maWxsQ29sb3IgPSBjc3NDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5zdHJva2VDb2xvciA9IGNzc0NvbG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBfdXRpbC5Gb3JtYXRFcnJvcihgVW5zdXBwb3J0ZWQgcGFpbnQgdHlwZTogJHtwYWludFR5cGV9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRQYXR0ZXJuKGN0eCwgb3duZXIsIGludmVyc2UsIHBhdGhUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWF0cml4ID0gaW52ZXJzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhdGhUeXBlICE9PSBQYXRoVHlwZS5TSEFESU5HKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0cml4ID0gX3V0aWwuVXRpbC50cmFuc2Zvcm0obWF0cml4LCBvd25lci5iYXNlVHJhbnNmb3JtKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdHJpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRyaXggPSBfdXRpbC5VdGlsLnRyYW5zZm9ybShtYXRyaXgsIHRoaXMubWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBvcmFyeVBhdHRlcm5DYW52YXMgPSB0aGlzLmNyZWF0ZVBhdHRlcm5DYW52YXMob3duZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRvbU1hdHJpeCA9IG5ldyBET01NYXRyaXgobWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbU1hdHJpeCA9IGRvbU1hdHJpeC50cmFuc2xhdGUodGVtcG9yYXJ5UGF0dGVybkNhbnZhcy5vZmZzZXRYLCB0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzLm9mZnNldFkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9tTWF0cml4ID0gZG9tTWF0cml4LnNjYWxlKDEgLyB0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzLnNjYWxlWCwgMSAvIHRlbXBvcmFyeVBhdHRlcm5DYW52YXMuc2NhbGVZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhdHRlcm4gPSBjdHguY3JlYXRlUGF0dGVybih0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzLmNhbnZhcywgXCJyZXBlYXRcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybi5zZXRUcmFuc2Zvcm0oZG9tTWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKGBUaWxpbmdQYXR0ZXJuLmdldFBhdHRlcm46IFwiJHtleD8ubWVzc2FnZX1cIi5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhdHRlcm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGV4cG9ydHMuVGlsaW5nUGF0dGVybiA9IFRpbGluZ1BhdHRlcm47XG5cbiAgICAgICAgICAgICAgICAvKioqLyB9KSxcbiAgICAgICAgICAgIC8qIDEyICovXG4gICAgICAgICAgICAvKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cblxuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLkdsb2JhbFdvcmtlck9wdGlvbnMgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgY29uc3QgR2xvYmFsV29ya2VyT3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5HbG9iYWxXb3JrZXJPcHRpb25zID0gR2xvYmFsV29ya2VyT3B0aW9ucztcbiAgICAgICAgICAgICAgICBHbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclBvcnQgPSBHbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclBvcnQgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBHbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclBvcnQ7XG4gICAgICAgICAgICAgICAgR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJTcmMgPSBHbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclNyYyA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IEdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjO1xuXG4gICAgICAgICAgICAgICAgLyoqKi8gfSksXG4gICAgICAgICAgICAvKiAxMyAqL1xuICAgICAgICAgICAgLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG5cblxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5NZXNzYWdlSGFuZGxlciA9IHZvaWQgMDtcblxuICAgICAgICAgICAgICAgIHZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBDYWxsYmFja0tpbmQgPSB7XG4gICAgICAgICAgICAgICAgICAgIFVOS05PV046IDAsXG4gICAgICAgICAgICAgICAgICAgIERBVEE6IDEsXG4gICAgICAgICAgICAgICAgICAgIEVSUk9SOiAyXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBTdHJlYW1LaW5kID0ge1xuICAgICAgICAgICAgICAgICAgICBVTktOT1dOOiAwLFxuICAgICAgICAgICAgICAgICAgICBDQU5DRUw6IDEsXG4gICAgICAgICAgICAgICAgICAgIENBTkNFTF9DT01QTEVURTogMixcbiAgICAgICAgICAgICAgICAgICAgQ0xPU0U6IDMsXG4gICAgICAgICAgICAgICAgICAgIEVOUVVFVUU6IDQsXG4gICAgICAgICAgICAgICAgICAgIEVSUk9SOiA1LFxuICAgICAgICAgICAgICAgICAgICBQVUxMOiA2LFxuICAgICAgICAgICAgICAgICAgICBQVUxMX0NPTVBMRVRFOiA3LFxuICAgICAgICAgICAgICAgICAgICBTVEFSVF9DT01QTEVURTogOFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB3cmFwUmVhc29uKHJlYXNvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShyZWFzb24gaW5zdGFuY2VvZiBFcnJvciB8fCB0eXBlb2YgcmVhc29uID09PSBcIm9iamVjdFwiICYmIHJlYXNvbiAhPT0gbnVsbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoJ3dyYXBSZWFzb246IEV4cGVjdGVkIFwicmVhc29uXCIgdG8gYmUgYSAocG9zc2libHkgY2xvbmVkKSBFcnJvci4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocmVhc29uLm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJBYm9ydEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgX3V0aWwuQWJvcnRFeGNlcHRpb24ocmVhc29uLm1lc3NhZ2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiTWlzc2luZ1BERkV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgX3V0aWwuTWlzc2luZ1BERkV4Y2VwdGlvbihyZWFzb24ubWVzc2FnZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJQYXNzd29yZEV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgX3V0aWwuUGFzc3dvcmRFeGNlcHRpb24ocmVhc29uLm1lc3NhZ2UsIHJlYXNvbi5jb2RlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgX3V0aWwuVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uKHJlYXNvbi5tZXNzYWdlLCByZWFzb24uc3RhdHVzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlVua25vd25FcnJvckV4Y2VwdGlvblwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgX3V0aWwuVW5rbm93bkVycm9yRXhjZXB0aW9uKHJlYXNvbi5tZXNzYWdlLCByZWFzb24uZGV0YWlscyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBfdXRpbC5Vbmtub3duRXJyb3JFeGNlcHRpb24ocmVhc29uLm1lc3NhZ2UsIHJlYXNvbi50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIE1lc3NhZ2VIYW5kbGVyIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3Ioc291cmNlTmFtZSwgdGFyZ2V0TmFtZSwgY29tT2JqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZU5hbWUgPSBzb3VyY2VOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXROYW1lID0gdGFyZ2V0TmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tT2JqID0gY29tT2JqO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFja0lkID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtSWQgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1TaW5rcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tDYXBhYmlsaXRpZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25IYW5kbGVyID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25Db21PYmpPbk1lc3NhZ2UgPSBldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGV2ZW50LmRhdGE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS50YXJnZXROYW1lICE9PSB0aGlzLnNvdXJjZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnN0cmVhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm9jZXNzU3RyZWFtTWVzc2FnZShkYXRhKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2tJZCA9IGRhdGEuY2FsbGJhY2tJZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FwYWJpbGl0eSA9IHRoaXMuY2FsbGJhY2tDYXBhYmlsaXRpZXNbY2FsbGJhY2tJZF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYXBhYmlsaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCByZXNvbHZlIGNhbGxiYWNrICR7Y2FsbGJhY2tJZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNhbGxiYWNrQ2FwYWJpbGl0aWVzW2NhbGxiYWNrSWRdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmNhbGxiYWNrID09PSBDYWxsYmFja0tpbmQuREFUQSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwYWJpbGl0eS5yZXNvbHZlKGRhdGEuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS5jYWxsYmFjayA9PT0gQ2FsbGJhY2tLaW5kLkVSUk9SKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXBhYmlsaXR5LnJlamVjdCh3cmFwUmVhc29uKGRhdGEucmVhc29uKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGNhbGxiYWNrIGNhc2VcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWN0aW9uID0gdGhpcy5hY3Rpb25IYW5kbGVyW2RhdGEuYWN0aW9uXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBhY3Rpb24gZnJvbSB3b3JrZXI6ICR7ZGF0YS5hY3Rpb259YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuY2FsbGJhY2tJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYlNvdXJjZU5hbWUgPSB0aGlzLnNvdXJjZU5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNiVGFyZ2V0TmFtZSA9IGRhdGEuc291cmNlTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYWN0aW9uKGRhdGEuZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlTmFtZTogY2JTb3VyY2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWU6IGNiVGFyZ2V0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogQ2FsbGJhY2tLaW5kLkRBVEEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tJZDogZGF0YS5jYWxsYmFja0lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlc3VsdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlTmFtZTogY2JTb3VyY2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWU6IGNiVGFyZ2V0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogQ2FsbGJhY2tLaW5kLkVSUk9SLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrSWQ6IGRhdGEuY2FsbGJhY2tJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3RyZWFtSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlU3RyZWFtU2luayhkYXRhKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uKGRhdGEuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21PYmouYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy5fb25Db21PYmpPbk1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgb24oYWN0aW9uTmFtZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWggPSB0aGlzLmFjdGlvbkhhbmRsZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhaFthY3Rpb25OYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlcmUgaXMgYWxyZWFkeSBhbiBhY3Rpb25OYW1lIGNhbGxlZCBcIiR7YWN0aW9uTmFtZX1cImApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBhaFthY3Rpb25OYW1lXSA9IGhhbmRsZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzZW5kKGFjdGlvbk5hbWUsIGRhdGEsIHRyYW5zZmVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZU5hbWU6IHRoaXMuc291cmNlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXROYW1lOiB0aGlzLnRhcmdldE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb25OYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRyYW5zZmVycyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzZW5kV2l0aFByb21pc2UoYWN0aW9uTmFtZSwgZGF0YSwgdHJhbnNmZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYWxsYmFja0lkID0gdGhpcy5jYWxsYmFja0lkKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFja0NhcGFiaWxpdGllc1tjYWxsYmFja0lkXSA9IGNhcGFiaWxpdHk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VOYW1lOiB0aGlzLnNvdXJjZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWU6IHRoaXMudGFyZ2V0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb25OYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja0lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdHJhbnNmZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwYWJpbGl0eS5yZWplY3QoZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2VuZFdpdGhTdHJlYW0oYWN0aW9uTmFtZSwgZGF0YSwgcXVldWVpbmdTdHJhdGVneSwgdHJhbnNmZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJlYW1JZCA9IHRoaXMuc3RyZWFtSWQrKyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VOYW1lID0gdGhpcy5zb3VyY2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWUgPSB0aGlzLnRhcmdldE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tT2JqID0gdGhpcy5jb21PYmo7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogY29udHJvbGxlciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0Q2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRDYWxsOiBzdGFydENhcGFiaWxpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWxsQ2FsbDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbENhbGw6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0Nsb3NlZDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb25OYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzaXJlZFNpemU6IGNvbnRyb2xsZXIuZGVzaXJlZFNpemVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdHJhbnNmZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXJ0Q2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVsbDogY29udHJvbGxlciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHB1bGxDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5wdWxsQ2FsbCA9IHB1bGxDYXBhYmlsaXR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuUFVMTCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzaXJlZFNpemU6IGNvbnRyb2xsZXIuZGVzaXJlZFNpemVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwdWxsQ2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsOiByZWFzb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwuYXNzZXJ0KShyZWFzb24gaW5zdGFuY2VvZiBFcnJvciwgXCJjYW5jZWwgbXVzdCBoYXZlIGEgdmFsaWQgcmVhc29uXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW5jZWxDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5jYW5jZWxDYWxsID0gY2FuY2VsQ2FwYWJpbGl0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0uaXNDbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuQ0FOQ0VMLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbmNlbENhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBxdWV1ZWluZ1N0cmF0ZWd5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9jcmVhdGVTdHJlYW1TaW5rKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmVhbUlkID0gZGF0YS5zdHJlYW1JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VOYW1lID0gdGhpcy5zb3VyY2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWUgPSBkYXRhLnNvdXJjZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tT2JqID0gdGhpcy5jb21PYmo7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSB0aGlzLmFjdGlvbkhhbmRsZXJbZGF0YS5hY3Rpb25dO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyZWFtU2luayA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnF1ZXVlKGNodW5rLCBzaXplID0gMSwgdHJhbnNmZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQ2FuY2VsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0RGVzaXJlZFNpemUgPSB0aGlzLmRlc2lyZWRTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc2lyZWRTaXplIC09IHNpemU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3REZXNpcmVkU2l6ZSA+IDAgJiYgdGhpcy5kZXNpcmVkU2l6ZSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNpbmtDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkeSA9IHRoaXMuc2lua0NhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5FTlFVRVVFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVua1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0cmFuc2ZlcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNDYW5jZWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNDYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuQ0xPU0UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1JZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNlbGYuc3RyZWFtU2lua3Nbc3RyZWFtSWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcihyZWFzb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLmFzc2VydCkocmVhc29uIGluc3RhbmNlb2YgRXJyb3IsIFwiZXJyb3IgbXVzdCBoYXZlIGEgdmFsaWQgcmVhc29uXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQ2FuY2VsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLkVSUk9SLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lua0NhcGFiaWxpdHk6ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblB1bGw6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DYW5jZWw6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDYW5jZWxsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2lyZWRTaXplOiBkYXRhLmRlc2lyZWRTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWR5OiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtU2luay5zaW5rQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1TaW5rLnJlYWR5ID0gc3RyZWFtU2luay5zaW5rQ2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1TaW5rc1tzdHJlYW1JZF0gPSBzdHJlYW1TaW5rO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGFjdGlvbihkYXRhLmRhdGEsIHN0cmVhbVNpbmspKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5TVEFSVF9DT01QTEVURSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuU1RBUlRfQ09NUExFVEUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfcHJvY2Vzc1N0cmVhbU1lc3NhZ2UoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyZWFtSWQgPSBkYXRhLnN0cmVhbUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZU5hbWUgPSB0aGlzLnNvdXJjZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TmFtZSA9IGRhdGEuc291cmNlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21PYmogPSB0aGlzLmNvbU9iajtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmVhbUNvbnRyb2xsZXIgPSB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1TaW5rID0gdGhpcy5zdHJlYW1TaW5rc1tzdHJlYW1JZF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZGF0YS5zdHJlYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFN0cmVhbUtpbmQuU1RBUlRfQ09NUExFVEU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbUNvbnRyb2xsZXIuc3RhcnRDYWxsLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbUNvbnRyb2xsZXIuc3RhcnRDYWxsLnJlamVjdCh3cmFwUmVhc29uKGRhdGEucmVhc29uKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU3RyZWFtS2luZC5QVUxMX0NPTVBMRVRFOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1Db250cm9sbGVyLnB1bGxDYWxsLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbUNvbnRyb2xsZXIucHVsbENhbGwucmVqZWN0KHdyYXBSZWFzb24oZGF0YS5yZWFzb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBTdHJlYW1LaW5kLlBVTEw6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RyZWFtU2luaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLlBVTExfQ09NUExFVEUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHJlYW1TaW5rLmRlc2lyZWRTaXplIDw9IDAgJiYgZGF0YS5kZXNpcmVkU2l6ZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbVNpbmsuc2lua0NhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtU2luay5kZXNpcmVkU2l6ZSA9IGRhdGEuZGVzaXJlZFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN0cmVhbVNpbmsub25QdWxsICYmIHN0cmVhbVNpbmsub25QdWxsKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5QVUxMX0NPTVBMRVRFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuUFVMTF9DT01QTEVURSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU3RyZWFtS2luZC5FTlFVRVVFOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwuYXNzZXJ0KShzdHJlYW1Db250cm9sbGVyLCBcImVucXVldWUgc2hvdWxkIGhhdmUgc3RyZWFtIGNvbnRyb2xsZXJcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmVhbUNvbnRyb2xsZXIuaXNDbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtQ29udHJvbGxlci5jb250cm9sbGVyLmVucXVldWUoZGF0YS5jaHVuayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBTdHJlYW1LaW5kLkNMT1NFOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwuYXNzZXJ0KShzdHJlYW1Db250cm9sbGVyLCBcImNsb3NlIHNob3VsZCBoYXZlIHN0cmVhbSBjb250cm9sbGVyXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHJlYW1Db250cm9sbGVyLmlzQ2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbUNvbnRyb2xsZXIuaXNDbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1Db250cm9sbGVyLmNvbnRyb2xsZXIuY2xvc2UoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWxldGVTdHJlYW1Db250cm9sbGVyKHN0cmVhbUNvbnRyb2xsZXIsIHN0cmVhbUlkKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU3RyZWFtS2luZC5FUlJPUjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLmFzc2VydCkoc3RyZWFtQ29udHJvbGxlciwgXCJlcnJvciBzaG91bGQgaGF2ZSBzdHJlYW0gY29udHJvbGxlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtQ29udHJvbGxlci5jb250cm9sbGVyLmVycm9yKHdyYXBSZWFzb24oZGF0YS5yZWFzb24pKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWxldGVTdHJlYW1Db250cm9sbGVyKHN0cmVhbUNvbnRyb2xsZXIsIHN0cmVhbUlkKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU3RyZWFtS2luZC5DQU5DRUxfQ09NUExFVEU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbUNvbnRyb2xsZXIuY2FuY2VsQ2FsbC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1Db250cm9sbGVyLmNhbmNlbENhbGwucmVqZWN0KHdyYXBSZWFzb24oZGF0YS5yZWFzb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlbGV0ZVN0cmVhbUNvbnRyb2xsZXIoc3RyZWFtQ29udHJvbGxlciwgc3RyZWFtSWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBTdHJlYW1LaW5kLkNBTkNFTDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdHJlYW1TaW5rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN0cmVhbVNpbmsub25DYW5jZWwgJiYgc3RyZWFtU2luay5vbkNhbmNlbCh3cmFwUmVhc29uKGRhdGEucmVhc29uKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5DQU5DRUxfQ09NUExFVEUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5DQU5DRUxfQ09NUExFVEUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhc29uOiB3cmFwUmVhc29uKHJlYXNvbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtU2luay5zaW5rQ2FwYWJpbGl0eS5yZWplY3Qod3JhcFJlYXNvbihkYXRhLnJlYXNvbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1TaW5rLmlzQ2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc3RyZWFtU2lua3Nbc3RyZWFtSWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgc3RyZWFtIGNhc2VcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBhc3luYyBfZGVsZXRlU3RyZWFtQ29udHJvbGxlcihzdHJlYW1Db250cm9sbGVyLCBzdHJlYW1JZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKFtzdHJlYW1Db250cm9sbGVyLnN0YXJ0Q2FsbCAmJiBzdHJlYW1Db250cm9sbGVyLnN0YXJ0Q2FsbC5wcm9taXNlLCBzdHJlYW1Db250cm9sbGVyLnB1bGxDYWxsICYmIHN0cmVhbUNvbnRyb2xsZXIucHVsbENhbGwucHJvbWlzZSwgc3RyZWFtQ29udHJvbGxlci5jYW5jZWxDYWxsICYmIHN0cmVhbUNvbnRyb2xsZXIuY2FuY2VsQ2FsbC5wcm9taXNlXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBkZXN0cm95KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21PYmoucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy5fb25Db21PYmpPbk1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLk1lc3NhZ2VIYW5kbGVyID0gTWVzc2FnZUhhbmRsZXI7XG5cbiAgICAgICAgICAgICAgICAvKioqLyB9KSxcbiAgICAgICAgICAgIC8qIDE0ICovXG4gICAgICAgICAgICAvKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblxuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLk1ldGFkYXRhID0gdm9pZCAwO1xuXG4gICAgICAgICAgICAgICAgdmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXygxKTtcblxuICAgICAgICAgICAgICAgIGNsYXNzIE1ldGFkYXRhIHtcbiAgICAgICAgICAgICAgICAgICAgI21ldGFkYXRhTWFwO1xuICAgICAgICAgICAgICAgICAgICAjZGF0YTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWREYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3RGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNtZXRhZGF0YU1hcCA9IHBhcnNlZERhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNkYXRhID0gcmF3RGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldFJhdygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiNkYXRhO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0KG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiNtZXRhZGF0YU1hcC5nZXQobmFtZSkgPz8gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldEFsbCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX3V0aWwub2JqZWN0RnJvbU1hcCkodGhpcy4jbWV0YWRhdGFNYXApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaGFzKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiNtZXRhZGF0YU1hcC5oYXMobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGV4cG9ydHMuTWV0YWRhdGEgPSBNZXRhZGF0YTtcblxuICAgICAgICAgICAgICAgIC8qKiovIH0pLFxuICAgICAgICAgICAgLyogMTUgKi9cbiAgICAgICAgICAgIC8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXG5cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuT3B0aW9uYWxDb250ZW50Q29uZmlnID0gdm9pZCAwO1xuXG4gICAgICAgICAgICAgICAgdmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXygxKTtcblxuICAgICAgICAgICAgICAgIGNsYXNzIE9wdGlvbmFsQ29udGVudEdyb3VwIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IobmFtZSwgaW50ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZW50ID0gaW50ZW50O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBPcHRpb25hbENvbnRlbnRDb25maWcge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdG9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29yZGVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2dyb3VwcyA9IG5ldyBNYXAoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmFtZSA9IGRhdGEubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRvciA9IGRhdGEuY3JlYXRvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29yZGVyID0gZGF0YS5vcmRlcjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBncm91cCBvZiBkYXRhLmdyb3Vwcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2dyb3Vwcy5zZXQoZ3JvdXAuaWQsIG5ldyBPcHRpb25hbENvbnRlbnRHcm91cChncm91cC5uYW1lLCBncm91cC5pbnRlbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuYmFzZVN0YXRlID09PSBcIk9GRlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBncm91cCBvZiB0aGlzLl9ncm91cHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvbiBvZiBkYXRhLm9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ3JvdXBzLmdldChvbikudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb2ZmIG9mIGRhdGEub2ZmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ3JvdXBzLmdldChvZmYpLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9ldmFsdWF0ZVZpc2liaWxpdHlFeHByZXNzaW9uKGFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZW5ndGggPCAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wZXJhdG9yID0gYXJyYXlbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gYXJyYXlbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXRlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzLl9ldmFsdWF0ZVZpc2liaWxpdHlFeHByZXNzaW9uKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fZ3JvdXBzLmhhcyhlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXMuX2dyb3Vwcy5nZXQoZWxlbWVudCkudmlzaWJsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoYE9wdGlvbmFsIGNvbnRlbnQgZ3JvdXAgbm90IGZvdW5kOiAke2VsZW1lbnR9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAob3BlcmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkFuZFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIk9yXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIk5vdFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFzdGF0ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3BlcmF0b3IgPT09IFwiQW5kXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpc1Zpc2libGUoZ3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9ncm91cHMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiT3B0aW9uYWwgY29udGVudCBncm91cCBub3QgZGVmaW5lZC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChncm91cC50eXBlID09PSBcIk9DR1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9ncm91cHMuaGFzKGdyb3VwLmlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoYE9wdGlvbmFsIGNvbnRlbnQgZ3JvdXAgbm90IGZvdW5kOiAke2dyb3VwLmlkfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ3JvdXBzLmdldChncm91cC5pZCkudmlzaWJsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZ3JvdXAudHlwZSA9PT0gXCJPQ01EXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXAuZXhwcmVzc2lvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXZhbHVhdGVWaXNpYmlsaXR5RXhwcmVzc2lvbihncm91cC5leHByZXNzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWdyb3VwLnBvbGljeSB8fCBncm91cC5wb2xpY3kgPT09IFwiQW55T25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGlkIG9mIGdyb3VwLmlkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9ncm91cHMuaGFzKGlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKShgT3B0aW9uYWwgY29udGVudCBncm91cCBub3QgZm91bmQ6ICR7aWR9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9ncm91cHMuZ2V0KGlkKS52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChncm91cC5wb2xpY3kgPT09IFwiQWxsT25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGlkIG9mIGdyb3VwLmlkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9ncm91cHMuaGFzKGlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKShgT3B0aW9uYWwgY29udGVudCBncm91cCBub3QgZm91bmQ6ICR7aWR9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZ3JvdXBzLmdldChpZCkudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZ3JvdXAucG9saWN5ID09PSBcIkFueU9mZlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaWQgb2YgZ3JvdXAuaWRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2dyb3Vwcy5oYXMoaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKGBPcHRpb25hbCBjb250ZW50IGdyb3VwIG5vdCBmb3VuZDogJHtpZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9ncm91cHMuZ2V0KGlkKS52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChncm91cC5wb2xpY3kgPT09IFwiQWxsT2ZmXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpZCBvZiBncm91cC5pZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZ3JvdXBzLmhhcyhpZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoYE9wdGlvbmFsIGNvbnRlbnQgZ3JvdXAgbm90IGZvdW5kOiAke2lkfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZ3JvdXBzLmdldChpZCkudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKShgVW5rbm93biBvcHRpb25hbCBjb250ZW50IHBvbGljeSAke2dyb3VwLnBvbGljeX0uYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKShgVW5rbm93biBncm91cCB0eXBlICR7Z3JvdXAudHlwZX0uYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNldFZpc2liaWxpdHkoaWQsIHZpc2libGUgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2dyb3Vwcy5oYXMoaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKGBPcHRpb25hbCBjb250ZW50IGdyb3VwIG5vdCBmb3VuZDogJHtpZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2dyb3Vwcy5nZXQoaWQpLnZpc2libGUgPSAhIXZpc2libGU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRPcmRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZ3JvdXBzLnNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX29yZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29yZGVyLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuX2dyb3Vwcy5rZXlzKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0R3JvdXBzKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dyb3Vwcy5zaXplID4gMCA/ICgwLCBfdXRpbC5vYmplY3RGcm9tTWFwKSh0aGlzLl9ncm91cHMpIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldEdyb3VwKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ3JvdXBzLmdldChpZCkgfHwgbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXhwb3J0cy5PcHRpb25hbENvbnRlbnRDb25maWcgPSBPcHRpb25hbENvbnRlbnRDb25maWc7XG5cbiAgICAgICAgICAgICAgICAvKioqLyB9KSxcbiAgICAgICAgICAgIC8qIDE2ICovXG4gICAgICAgICAgICAvKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblxuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLlBERkRhdGFUcmFuc3BvcnRTdHJlYW0gPSB2b2lkIDA7XG5cbiAgICAgICAgICAgICAgICB2YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEpO1xuXG4gICAgICAgICAgICAgICAgdmFyIF9kaXNwbGF5X3V0aWxzID0gX193X3BkZmpzX3JlcXVpcmVfXyg1KTtcblxuICAgICAgICAgICAgICAgIGNsYXNzIFBERkRhdGFUcmFuc3BvcnRTdHJlYW0ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihwYXJhbXMsIHBkZkRhdGFSYW5nZVRyYW5zcG9ydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLmFzc2VydCkocGRmRGF0YVJhbmdlVHJhbnNwb3J0LCAnUERGRGF0YVRyYW5zcG9ydFN0cmVhbSAtIG1pc3NpbmcgcmVxdWlyZWQgXCJwZGZEYXRhUmFuZ2VUcmFuc3BvcnRcIiBhcmd1bWVudC4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3F1ZXVlZENodW5rcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvZ3Jlc3NpdmVEb25lID0gcGFyYW1zLnByb2dyZXNzaXZlRG9uZSB8fCBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRlbnREaXNwb3NpdGlvbkZpbGVuYW1lID0gcGFyYW1zLmNvbnRlbnREaXNwb3NpdGlvbkZpbGVuYW1lIHx8IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbml0aWFsRGF0YSA9IHBhcmFtcy5pbml0aWFsRGF0YTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWxEYXRhPy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoaW5pdGlhbERhdGEpLmJ1ZmZlcjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3F1ZXVlZENodW5rcy5wdXNoKGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BkZkRhdGFSYW5nZVRyYW5zcG9ydCA9IHBkZkRhdGFSYW5nZVRyYW5zcG9ydDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkID0gIXBhcmFtcy5kaXNhYmxlU3RyZWFtO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNSYW5nZVN1cHBvcnRlZCA9ICFwYXJhbXMuZGlzYWJsZVJhbmdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29udGVudExlbmd0aCA9IHBhcmFtcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYW5nZVJlYWRlcnMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGRmRGF0YVJhbmdlVHJhbnNwb3J0LmFkZFJhbmdlTGlzdGVuZXIoKGJlZ2luLCBjaHVuaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29uUmVjZWl2ZURhdGEoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQuYWRkUHJvZ3Jlc3NMaXN0ZW5lcigobG9hZGVkLCB0b3RhbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29uUHJvZ3Jlc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGRmRGF0YVJhbmdlVHJhbnNwb3J0LmFkZFByb2dyZXNzaXZlUmVhZExpc3RlbmVyKGNodW5rID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vblJlY2VpdmVEYXRhKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQuYWRkUHJvZ3Jlc3NpdmVEb25lTGlzdGVuZXIoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29uUHJvZ3Jlc3NpdmVEb25lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGRmRGF0YVJhbmdlVHJhbnNwb3J0LnRyYW5zcG9ydFJlYWR5KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfb25SZWNlaXZlRGF0YShhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheShhcmdzLmNodW5rKS5idWZmZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmdzLmJlZ2luID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIuX2VucXVldWUoYnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9xdWV1ZWRDaHVua3MucHVzaChidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm91bmQgPSB0aGlzLl9yYW5nZVJlYWRlcnMuc29tZShmdW5jdGlvbiAocmFuZ2VSZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlUmVhZGVyLl9iZWdpbiAhPT0gYXJncy5iZWdpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VSZWFkZXIuX2VucXVldWUoYnVmZmVyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC5hc3NlcnQpKGZvdW5kLCBcIl9vblJlY2VpdmVEYXRhIC0gbm8gYFBERkRhdGFUcmFuc3BvcnRTdHJlYW1SYW5nZVJlYWRlcmAgaW5zdGFuY2UgZm91bmQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0IF9wcm9ncmVzc2l2ZURhdGFMZW5ndGgoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXI/Ll9sb2FkZWQgPz8gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9vblByb2dyZXNzKGV2dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2dC50b3RhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlyc3RSZWFkZXIgPSB0aGlzLl9yYW5nZVJlYWRlcnNbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3RSZWFkZXI/Lm9uUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RSZWFkZXIub25Qcm9ncmVzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkZWQ6IGV2dC5sb2FkZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmdWxsUmVhZGVyID0gdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnVsbFJlYWRlcj8ub25Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxsUmVhZGVyLm9uUHJvZ3Jlc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVkOiBldnQubG9hZGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWw6IGV2dC50b3RhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfb25Qcm9ncmVzc2l2ZURvbmUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlci5wcm9ncmVzc2l2ZURvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvZ3Jlc3NpdmVEb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9yZW1vdmVSYW5nZVJlYWRlcihyZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9yYW5nZVJlYWRlcnMuaW5kZXhPZihyZWFkZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2VSZWFkZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldEZ1bGxSZWFkZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwuYXNzZXJ0KSghdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIsIFwiUERGRGF0YVRyYW5zcG9ydFN0cmVhbS5nZXRGdWxsUmVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHF1ZXVlZENodW5rcyA9IHRoaXMuX3F1ZXVlZENodW5rcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3F1ZXVlZENodW5rcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBERkRhdGFUcmFuc3BvcnRTdHJlYW1SZWFkZXIodGhpcywgcXVldWVkQ2h1bmtzLCB0aGlzLl9wcm9ncmVzc2l2ZURvbmUsIHRoaXMuX2NvbnRlbnREaXNwb3NpdGlvbkZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldFJhbmdlUmVhZGVyKGJlZ2luLCBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmQgPD0gdGhpcy5fcHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBQREZEYXRhVHJhbnNwb3J0U3RyZWFtUmFuZ2VSZWFkZXIodGhpcywgYmVnaW4sIGVuZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BkZkRhdGFSYW5nZVRyYW5zcG9ydC5yZXF1ZXN0RGF0YVJhbmdlKGJlZ2luLCBlbmQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYW5nZVJlYWRlcnMucHVzaChyZWFkZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVhZGVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQWxsUmVxdWVzdHMocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlci5jYW5jZWwocmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCByZWFkZXIgb2YgdGhpcy5fcmFuZ2VSZWFkZXJzLnNsaWNlKDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyLmNhbmNlbChyZWFzb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXhwb3J0cy5QREZEYXRhVHJhbnNwb3J0U3RyZWFtID0gUERGRGF0YVRyYW5zcG9ydFN0cmVhbTtcblxuICAgICAgICAgICAgICAgIGNsYXNzIFBERkRhdGFUcmFuc3BvcnRTdHJlYW1SZWFkZXIge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihzdHJlYW0sIHF1ZXVlZENodW5rcywgcHJvZ3Jlc3NpdmVEb25lID0gZmFsc2UsIGNvbnRlbnREaXNwb3NpdGlvbkZpbGVuYW1lID0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RyZWFtID0gc3RyZWFtO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG9uZSA9IHByb2dyZXNzaXZlRG9uZSB8fCBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGVuYW1lID0gKDAsIF9kaXNwbGF5X3V0aWxzLmlzUGRmRmlsZSkoY29udGVudERpc3Bvc2l0aW9uRmlsZW5hbWUpID8gY29udGVudERpc3Bvc2l0aW9uRmlsZW5hbWUgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcXVldWVkQ2h1bmtzID0gcXVldWVkQ2h1bmtzIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9hZGVkID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjaHVuayBvZiB0aGlzLl9xdWV1ZWRDaHVua3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2FkZWQgKz0gY2h1bmsuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlYWRlcnNSZWFkeSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtLl9mdWxsUmVxdWVzdFJlYWRlciA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX2VucXVldWUoY2h1bmspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVxdWVzdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RDYXBhYmlsaXR5ID0gdGhpcy5fcmVxdWVzdHMuc2hpZnQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY2h1bmssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3F1ZXVlZENodW5rcy5wdXNoKGNodW5rKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9hZGVkICs9IGNodW5rLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgaGVhZGVyc1JlYWR5KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hlYWRlcnNSZWFkeTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBmaWxlbmFtZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9maWxlbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBpc1JhbmdlU3VwcG9ydGVkKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0cmVhbS5faXNSYW5nZVN1cHBvcnRlZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBpc1N0cmVhbWluZ1N1cHBvcnRlZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdHJlYW0uX2lzU3RyZWFtaW5nU3VwcG9ydGVkO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0IGNvbnRlbnRMZW5ndGgoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RyZWFtLl9jb250ZW50TGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYXN5bmMgcmVhZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9xdWV1ZWRDaHVua3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNodW5rID0gdGhpcy5fcXVldWVkQ2h1bmtzLnNoaWZ0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY2h1bmssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2RvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RzLnB1c2gocmVxdWVzdENhcGFiaWxpdHkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdENhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJlcXVlc3RDYXBhYmlsaXR5IG9mIHRoaXMuX3JlcXVlc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdHMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzaXZlRG9uZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgUERGRGF0YVRyYW5zcG9ydFN0cmVhbVJhbmdlUmVhZGVyIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3Ioc3RyZWFtLCBiZWdpbiwgZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHJlYW0gPSBzdHJlYW07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9iZWdpbiA9IGJlZ2luO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5kID0gZW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcXVldWVkQ2h1bmsgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25Qcm9ncmVzcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfZW5xdWV1ZShjaHVuaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2RvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yZXF1ZXN0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9xdWV1ZWRDaHVuayA9IGNodW5rO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0c0NhcGFiaWxpdHkgPSB0aGlzLl9yZXF1ZXN0cy5zaGlmdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdHNDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY2h1bmssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJlcXVlc3RDYXBhYmlsaXR5IG9mIHRoaXMuX3JlcXVlc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdHMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmVhbS5fcmVtb3ZlUmFuZ2VSZWFkZXIodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgaXNTdHJlYW1pbmdTdXBwb3J0ZWQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBhc3luYyByZWFkKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3F1ZXVlZENodW5rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2h1bmsgPSB0aGlzLl9xdWV1ZWRDaHVuaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9xdWV1ZWRDaHVuayA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXF1ZXN0cy5wdXNoKHJlcXVlc3RDYXBhYmlsaXR5KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3RDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjYW5jZWwocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kb25lID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCByZXF1ZXN0Q2FwYWJpbGl0eSBvZiB0aGlzLl9yZXF1ZXN0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmVhbS5fcmVtb3ZlUmFuZ2VSZWFkZXIodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKiovIH0pLFxuICAgICAgICAgICAgLyogMTcgKi9cbiAgICAgICAgICAgIC8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMpID0+IHtcblxuXG5cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuWGZhVGV4dCA9IHZvaWQgMDtcblxuICAgICAgICAgICAgICAgIGNsYXNzIFhmYVRleHQge1xuICAgICAgICAgICAgICAgICAgICBzdGF0aWMgdGV4dENvbnRlbnQoeGZhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlczogT2JqZWN0LmNyZWF0ZShudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gd2Fsayhub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gbm9kZS5uYW1lO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09IFwiI3RleHRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgPSBub2RlLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIVhmYVRleHQuc2hvdWxkQnVpbGRUZXh0KG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGU/LmF0dHJpYnV0ZXM/LnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciA9IG5vZGUuYXR0cmlidXRlcy50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gbm9kZS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhbGsoY2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgd2Fsayh4ZmEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN0YXRpYyBzaG91bGRCdWlsZFRleHQobmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEobmFtZSA9PT0gXCJ0ZXh0YXJlYVwiIHx8IG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcIm9wdGlvblwiIHx8IG5hbWUgPT09IFwic2VsZWN0XCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLlhmYVRleHQgPSBYZmFUZXh0O1xuXG4gICAgICAgICAgICAgICAgLyoqKi8gfSksXG4gICAgICAgICAgICAvKiAxOCAqL1xuICAgICAgICAgICAgLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG5cblxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5Bbm5vdGF0aW9uTGF5ZXIgPSB2b2lkIDA7XG5cbiAgICAgICAgICAgICAgICB2YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEpO1xuXG4gICAgICAgICAgICAgICAgdmFyIF9kaXNwbGF5X3V0aWxzID0gX193X3BkZmpzX3JlcXVpcmVfXyg1KTtcblxuICAgICAgICAgICAgICAgIHZhciBfYW5ub3RhdGlvbl9zdG9yYWdlID0gX193X3BkZmpzX3JlcXVpcmVfXyg5KTtcblxuICAgICAgICAgICAgICAgIHZhciBfc2NyaXB0aW5nX3V0aWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxOSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgX3hmYV9sYXllciA9IF9fd19wZGZqc19yZXF1aXJlX18oMjApO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgREVGQVVMVF9UQUJfSU5ERVggPSAxMDAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IEdldEVsZW1lbnRzQnlOYW1lU2V0ID0gbmV3IFdlYWtTZXQoKTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldFJlY3REaW1zKHJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiByZWN0WzJdIC0gcmVjdFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogcmVjdFszXSAtIHJlY3RbMV1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBBbm5vdGF0aW9uRWxlbWVudEZhY3Rvcnkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0aWMgY3JlYXRlKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1YnR5cGUgPSBwYXJhbWV0ZXJzLmRhdGEuYW5ub3RhdGlvblR5cGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc3VidHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuTElOSzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBMaW5rQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLlRFWFQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVGV4dEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5XSURHRVQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkVHlwZSA9IHBhcmFtZXRlcnMuZGF0YS5maWVsZFR5cGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChmaWVsZFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJUeFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVGV4dFdpZGdldEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQnRuXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMuZGF0YS5yYWRpb0J1dHRvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJhZGlvQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJhbWV0ZXJzLmRhdGEuY2hlY2tCb3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDaGVja2JveFdpZGdldEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHVzaEJ1dHRvbldpZGdldEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQ2hcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENob2ljZVdpZGdldEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBXaWRnZXRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuUE9QVVA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUG9wdXBBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuRlJFRVRFWFQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRnJlZVRleHRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuTElORTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBMaW5lQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLlNRVUFSRTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTcXVhcmVBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuQ0lSQ0xFOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENpcmNsZUFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5QT0xZTElORTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2x5bGluZUFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5DQVJFVDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDYXJldEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5JTks6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSW5rQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLlBPTFlHT046XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUG9seWdvbkFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5ISUdITElHSFQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSGlnaGxpZ2h0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLlVOREVSTElORTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVbmRlcmxpbmVBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuU1FVSUdHTFk6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU3F1aWdnbHlBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuU1RSSUtFT1VUOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFN0cmlrZU91dEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5TVEFNUDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdGFtcEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5GSUxFQVRUQUNITUVOVDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGaWxlQXR0YWNobWVudEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgQW5ub3RhdGlvbkVsZW1lbnQge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1JlbmRlcmFibGUgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZUJvcmRlciA9IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlUXVhZHJpbGF0ZXJhbHMgPSBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9ID0ge30pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNSZW5kZXJhYmxlID0gaXNSZW5kZXJhYmxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gcGFyYW1ldGVycy5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXllciA9IHBhcmFtZXRlcnMubGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2UgPSBwYXJhbWV0ZXJzLnBhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdwb3J0ID0gcGFyYW1ldGVycy52aWV3cG9ydDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlua1NlcnZpY2UgPSBwYXJhbWV0ZXJzLmxpbmtTZXJ2aWNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZE1hbmFnZXIgPSBwYXJhbWV0ZXJzLmRvd25sb2FkTWFuYWdlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2VSZXNvdXJjZXNQYXRoID0gcGFyYW1ldGVycy5pbWFnZVJlc291cmNlc1BhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckZvcm1zID0gcGFyYW1ldGVycy5yZW5kZXJGb3JtcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ZnRmFjdG9yeSA9IHBhcmFtZXRlcnMuc3ZnRmFjdG9yeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYW5ub3RhdGlvblN0b3JhZ2UgPSBwYXJhbWV0ZXJzLmFubm90YXRpb25TdG9yYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmFibGVTY3JpcHRpbmcgPSBwYXJhbWV0ZXJzLmVuYWJsZVNjcmlwdGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFzSlNBY3Rpb25zID0gcGFyYW1ldGVycy5oYXNKU0FjdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9maWVsZE9iamVjdHMgPSBwYXJhbWV0ZXJzLmZpZWxkT2JqZWN0cztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdXNlU3RhdGUgPSBwYXJhbWV0ZXJzLm1vdXNlU3RhdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1JlbmRlcmFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuX2NyZWF0ZUNvbnRhaW5lcihpZ25vcmVCb3JkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlUXVhZHJpbGF0ZXJhbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1YWRyaWxhdGVyYWxzID0gdGhpcy5fY3JlYXRlUXVhZHJpbGF0ZXJhbHMoaWdub3JlQm9yZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9jcmVhdGVDb250YWluZXIoaWdub3JlQm9yZGVyID0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZSA9IHRoaXMucGFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydCA9IHRoaXMudmlld3BvcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VjdGlvblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICB9ID0gZ2V0UmVjdERpbXMoZGF0YS5yZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJkYXRhLWFubm90YXRpb24taWRcIiwgZGF0YS5pZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlY3QgPSBfdXRpbC5VdGlsLm5vcm1hbGl6ZVJlY3QoW2RhdGEucmVjdFswXSwgcGFnZS52aWV3WzNdIC0gZGF0YS5yZWN0WzFdICsgcGFnZS52aWV3WzFdLCBkYXRhLnJlY3RbMl0sIHBhZ2Uudmlld1szXSAtIGRhdGEucmVjdFszXSArIHBhZ2Uudmlld1sxXV0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25DYW52YXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSB2aWV3cG9ydC50cmFuc2Zvcm0uc2xpY2UoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFtzY2FsZVgsIHNjYWxlWV0gPSBfdXRpbC5VdGlsLnNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKHRyYW5zZm9ybSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IE1hdGguY2VpbCh3aWR0aCAqIHNjYWxlWCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5jZWlsKGhlaWdodCAqIHNjYWxlWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjdFswXSAqPSBzY2FsZVg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjdFsxXSAqPSBzY2FsZVk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1baV0gPSBNYXRoLnNpZ24odHJhbnNmb3JtW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuc3R5bGUudHJhbnNmb3JtID0gYG1hdHJpeCgke3RyYW5zZm9ybS5qb2luKFwiLFwiKX0pYDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybSA9IGBtYXRyaXgoJHt2aWV3cG9ydC50cmFuc2Zvcm0uam9pbihcIixcIil9KWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBgJHstcmVjdFswXX1weCAkey1yZWN0WzFdfXB4YDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpZ25vcmVCb3JkZXIgJiYgZGF0YS5ib3JkZXJTdHlsZS53aWR0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuc3R5bGUuYm9yZGVyV2lkdGggPSBgJHtkYXRhLmJvcmRlclN0eWxlLndpZHRofXB4YDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmJvcmRlclN0eWxlLnN0eWxlICE9PSBfdXRpbC5Bbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlLlVOREVSTElORSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCAtPSAyICogZGF0YS5ib3JkZXJTdHlsZS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0IC09IDIgKiBkYXRhLmJvcmRlclN0eWxlLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhvcml6b250YWxSYWRpdXMgPSBkYXRhLmJvcmRlclN0eWxlLmhvcml6b250YWxDb3JuZXJSYWRpdXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmVydGljYWxSYWRpdXMgPSBkYXRhLmJvcmRlclN0eWxlLnZlcnRpY2FsQ29ybmVyUmFkaXVzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhvcml6b250YWxSYWRpdXMgPiAwIHx8IHZlcnRpY2FsUmFkaXVzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByYWRpdXMgPSBgJHtob3Jpem9udGFsUmFkaXVzfXB4IC8gJHt2ZXJ0aWNhbFJhZGl1c31weGA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5ib3JkZXJSYWRpdXMgPSByYWRpdXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChkYXRhLmJvcmRlclN0eWxlLnN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZS5TT0xJRDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5ib3JkZXJTdHlsZSA9IFwic29saWRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZS5EQVNIRUQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuc3R5bGUuYm9yZGVyU3R5bGUgPSBcImRhc2hlZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlLkJFVkVMRUQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoXCJVbmltcGxlbWVudGVkIGJvcmRlciBzdHlsZTogYmV2ZWxlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZS5JTlNFVDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKShcIlVuaW1wbGVtZW50ZWQgYm9yZGVyIHN0eWxlOiBpbnNldFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZS5VTkRFUkxJTkU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuc3R5bGUuYm9yZGVyQm90dG9tU3R5bGUgPSBcInNvbGlkXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9yZGVyQ29sb3IgPSBkYXRhLmJvcmRlckNvbG9yIHx8IGRhdGEuY29sb3IgfHwgbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChib3JkZXJDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuc3R5bGUuYm9yZGVyQ29sb3IgPSBfdXRpbC5VdGlsLm1ha2VIZXhDb2xvcihkYXRhLmNvbG9yWzBdIHwgMCwgZGF0YS5jb2xvclsxXSB8IDAsIGRhdGEuY29sb3JbMl0gfCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuc3R5bGUuYm9yZGVyV2lkdGggPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLmxlZnQgPSBgJHtyZWN0WzBdfXB4YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS50b3AgPSBgJHtyZWN0WzFdfXB4YDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duQ2FudmFzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gY29udGFpbmVyLnN0eWxlLmhlaWdodCA9IFwiYXV0b1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuc3R5bGUud2lkdGggPSBgJHt3aWR0aH1weGA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLmhlaWdodCA9IGAke2hlaWdodH1weGA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfY3JlYXRlUXVhZHJpbGF0ZXJhbHMoaWdub3JlQm9yZGVyID0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kYXRhLnF1YWRQb2ludHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcXVhZHJpbGF0ZXJhbHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNhdmVkUmVjdCA9IHRoaXMuZGF0YS5yZWN0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHF1YWRQb2ludCBvZiB0aGlzLmRhdGEucXVhZFBvaW50cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5yZWN0ID0gW3F1YWRQb2ludFsyXS54LCBxdWFkUG9pbnRbMl0ueSwgcXVhZFBvaW50WzFdLngsIHF1YWRQb2ludFsxXS55XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWFkcmlsYXRlcmFscy5wdXNoKHRoaXMuX2NyZWF0ZUNvbnRhaW5lcihpZ25vcmVCb3JkZXIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLnJlY3QgPSBzYXZlZFJlY3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVhZHJpbGF0ZXJhbHM7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfY3JlYXRlUG9wdXAodHJpZ2dlciwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5xdWFkcmlsYXRlcmFscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyIHx8IHRoaXMucXVhZHJpbGF0ZXJhbHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gdGhpcy5xdWFkcmlsYXRlcmFsc1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlci5zdHlsZS5oZWlnaHQgPSBjb250YWluZXIuc3R5bGUuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXIuc3R5bGUud2lkdGggPSBjb250YWluZXIuc3R5bGUud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRyaWdnZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3B1cEVsZW1lbnQgPSBuZXcgUG9wdXBFbGVtZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogZGF0YS5jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZU9iajogZGF0YS50aXRsZU9iaixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmljYXRpb25EYXRlOiBkYXRhLm1vZGlmaWNhdGlvbkRhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHNPYmo6IGRhdGEuY29udGVudHNPYmosXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmljaFRleHQ6IGRhdGEucmljaFRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZVdyYXBwZXI6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9wdXAgPSBwb3B1cEVsZW1lbnQucmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1cC5zdHlsZS5sZWZ0ID0gY29udGFpbmVyLnN0eWxlLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHBvcHVwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9yZW5kZXJRdWFkcmlsYXRlcmFscyhjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcXVhZHJpbGF0ZXJhbCBvZiB0aGlzLnF1YWRyaWxhdGVyYWxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVhZHJpbGF0ZXJhbC5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnF1YWRyaWxhdGVyYWxzO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIkFic3RyYWN0IG1ldGhvZCBgQW5ub3RhdGlvbkVsZW1lbnQucmVuZGVyYCBjYWxsZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfZ2V0RWxlbWVudHNCeU5hbWUobmFtZSwgc2tpcElkID0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRzID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9maWVsZE9iamVjdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWVsZE9iaiA9IHRoaXMuX2ZpZWxkT2JqZWN0c1tuYW1lXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZE9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cG9ydFZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IG9mIGZpZWxkT2JqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFnZSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlkID09PSBza2lwSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhwb3J0VmFsdWUgPSB0eXBlb2YgZXhwb3J0VmFsdWVzID09PSBcInN0cmluZ1wiID8gZXhwb3J0VmFsdWVzIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvbUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb21FbGVtZW50ICYmICFHZXRFbGVtZW50c0J5TmFtZVNldC5oYXMoZG9tRWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoYF9nZXRFbGVtZW50c0J5TmFtZSAtIGVsZW1lbnQgbm90IGFsbG93ZWQ6ICR7aWR9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBvcnRWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21FbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWVsZHM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZG9tRWxlbWVudCBvZiBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cG9ydFZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA9IGRvbUVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWQgPT09IHNraXBJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUdldEVsZW1lbnRzQnlOYW1lU2V0Lmhhcyhkb21FbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBvcnRWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tRWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmllbGRzO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhdGljIGdldCBwbGF0Zm9ybSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBsYXRmb3JtID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiA/IG5hdmlnYXRvci5wbGF0Zm9ybSA6IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF91dGlsLnNoYWRvdykodGhpcywgXCJwbGF0Zm9ybVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNXaW46IHBsYXRmb3JtLmluY2x1ZGVzKFwiV2luXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTWFjOiBwbGF0Zm9ybS5pbmNsdWRlcyhcIk1hY1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIExpbmtBbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIEFubm90YXRpb25FbGVtZW50IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IocGFyYW1ldGVycywgb3B0aW9ucyA9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzUmVuZGVyYWJsZSA9ICEhKHBhcmFtZXRlcnMuZGF0YS51cmwgfHwgcGFyYW1ldGVycy5kYXRhLmRlc3QgfHwgcGFyYW1ldGVycy5kYXRhLmFjdGlvbiB8fCBwYXJhbWV0ZXJzLmRhdGEuaXNUb29sdGlwT25seSB8fCBwYXJhbWV0ZXJzLmRhdGEucmVzZXRGb3JtIHx8IHBhcmFtZXRlcnMuZGF0YS5hY3Rpb25zICYmIChwYXJhbWV0ZXJzLmRhdGEuYWN0aW9ucy5BY3Rpb24gfHwgcGFyYW1ldGVycy5kYXRhLmFjdGlvbnNbXCJNb3VzZSBVcFwiXSB8fCBwYXJhbWV0ZXJzLmRhdGEuYWN0aW9uc1tcIk1vdXNlIERvd25cIl0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1JlbmRlcmFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlQm9yZGVyOiAhIW9wdGlvbnM/Lmlnbm9yZUJvcmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVRdWFkcmlsYXRlcmFsczogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZW5kZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rU2VydmljZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmtTZXJ2aWNlLmFkZExpbmtBdHRyaWJ1dGVzKGxpbmssIGRhdGEudXJsLCBkYXRhLm5ld1dpbmRvdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmluZE5hbWVkQWN0aW9uKGxpbmssIGRhdGEuYWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS5kZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmluZExpbmsobGluaywgZGF0YS5kZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhhc0NsaWNrQWN0aW9uID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5hY3Rpb25zICYmIChkYXRhLmFjdGlvbnMuQWN0aW9uIHx8IGRhdGEuYWN0aW9uc1tcIk1vdXNlIFVwXCJdIHx8IGRhdGEuYWN0aW9uc1tcIk1vdXNlIERvd25cIl0pICYmIHRoaXMuZW5hYmxlU2NyaXB0aW5nICYmIHRoaXMuaGFzSlNBY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0NsaWNrQWN0aW9uID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9iaW5kSlNBY3Rpb24obGluaywgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEucmVzZXRGb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRSZXNldEZvcm1BY3Rpb24obGluaywgZGF0YS5yZXNldEZvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWhhc0NsaWNrQWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRMaW5rKGxpbmssIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucXVhZHJpbGF0ZXJhbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyUXVhZHJpbGF0ZXJhbHMoXCJsaW5rQW5ub3RhdGlvblwiKS5tYXAoKHF1YWRyaWxhdGVyYWwsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtFbGVtZW50ID0gaW5kZXggPT09IDAgPyBsaW5rIDogbGluay5jbG9uZU5vZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVhZHJpbGF0ZXJhbC5hcHBlbmRDaGlsZChsaW5rRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWFkcmlsYXRlcmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSBcImxpbmtBbm5vdGF0aW9uXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChsaW5rKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9iaW5kTGluayhsaW5rLCBkZXN0aW5hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluay5ocmVmID0gdGhpcy5saW5rU2VydmljZS5nZXREZXN0aW5hdGlvbkhhc2goZGVzdGluYXRpb24pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5rLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlua1NlcnZpY2UuZ29Ub0Rlc3RpbmF0aW9uKGRlc3RpbmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVzdGluYXRpb24gfHwgZGVzdGluYXRpb24gPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rLmNsYXNzTmFtZSA9IFwiaW50ZXJuYWxMaW5rXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfYmluZE5hbWVkQWN0aW9uKGxpbmssIGFjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluay5ocmVmID0gdGhpcy5saW5rU2VydmljZS5nZXRBbmNob3JVcmwoXCJcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmtTZXJ2aWNlLmV4ZWN1dGVOYW1lZEFjdGlvbihhY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsuY2xhc3NOYW1lID0gXCJpbnRlcm5hbExpbmtcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9iaW5kSlNBY3Rpb24obGluaywgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluay5ocmVmID0gdGhpcy5saW5rU2VydmljZS5nZXRBbmNob3JVcmwoXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXAgPSBuZXcgTWFwKFtbXCJBY3Rpb25cIiwgXCJvbmNsaWNrXCJdLCBbXCJNb3VzZSBVcFwiLCBcIm9ubW91c2V1cFwiXSwgW1wiTW91c2UgRG93blwiLCBcIm9ubW91c2Vkb3duXCJdXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3Qua2V5cyhkYXRhLmFjdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QganNOYW1lID0gbWFwLmdldChuYW1lKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghanNOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmtbanNOYW1lXSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saW5rU2VydmljZS5ldmVudEJ1cz8uZGlzcGF0Y2goXCJkaXNwYXRjaGV2ZW50aW5zYW5kYm94XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxpbmsub25jbGljaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsub25jbGljayA9ICgpID0+IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5rLmNsYXNzTmFtZSA9IFwiaW50ZXJuYWxMaW5rXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfYmluZFJlc2V0Rm9ybUFjdGlvbihsaW5rLCByZXNldEZvcm0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG90aGVyQ2xpY2tBY3Rpb24gPSBsaW5rLm9uY2xpY2s7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3RoZXJDbGlja0FjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsuaHJlZiA9IHRoaXMubGlua1NlcnZpY2UuZ2V0QW5jaG9yVXJsKFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5rLmNsYXNzTmFtZSA9IFwiaW50ZXJuYWxMaW5rXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZmllbGRPYmplY3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKGBfYmluZFJlc2V0Rm9ybUFjdGlvbiAtIFwicmVzZXRGb3JtXCIgYWN0aW9uIG5vdCBzdXBwb3J0ZWQsIGAgKyBcImVuc3VyZSB0aGF0IHRoZSBgZmllbGRPYmplY3RzYCBwYXJhbWV0ZXIgaXMgcHJvdmlkZWQuXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvdGhlckNsaWNrQWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsub25jbGljayA9ICgpID0+IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbGluay5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvdGhlckNsaWNrQWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyQ2xpY2tBY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkczogcmVzZXRGb3JtRmllbGRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZzOiByZXNldEZvcm1SZWZzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNsdWRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA9IHJlc2V0Rm9ybTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGxGaWVsZHMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNldEZvcm1GaWVsZHMubGVuZ3RoICE9PSAwIHx8IHJlc2V0Rm9ybVJlZnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkSWRzID0gbmV3IFNldChyZXNldEZvcm1SZWZzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZpZWxkTmFtZSBvZiByZXNldEZvcm1GaWVsZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMuX2ZpZWxkT2JqZWN0c1tmaWVsZE5hbWVdIHx8IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBvZiBmaWVsZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZElkcy5hZGQoaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZHMgb2YgT2JqZWN0LnZhbHVlcyh0aGlzLl9maWVsZE9iamVjdHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIGZpZWxkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZElkcy5oYXMoZmllbGQuaWQpID09PSBpbmNsdWRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbEZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZpZWxkcyBvZiBPYmplY3QudmFsdWVzKHRoaXMuX2ZpZWxkT2JqZWN0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbEZpZWxkcy5wdXNoKC4uLmZpZWxkcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdG9yYWdlID0gdGhpcy5hbm5vdGF0aW9uU3RvcmFnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGxJZHMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgYWxsRmllbGRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gPSBmaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsSWRzLnB1c2goaWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZmllbGQudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInRleHRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGZpZWxkLmRlZmF1bHRWYWx1ZSB8fCBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlQXNTdHJpbmc6IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjaGVja2JveFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJhZGlvYnV0dG9uXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBmaWVsZC5kZWZhdWx0VmFsdWUgPT09IGZpZWxkLmV4cG9ydFZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjb21ib2JveFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImxpc3Rib3hcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGZpZWxkLmRlZmF1bHRWYWx1ZSB8fCBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvbUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkb21FbGVtZW50IHx8ICFHZXRFbGVtZW50c0J5TmFtZVNldC5oYXMoZG9tRWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tRWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInJlc2V0Zm9ybVwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlU2NyaXB0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlua1NlcnZpY2UuZXZlbnRCdXM/LmRpc3BhdGNoKFwiZGlzcGF0Y2hldmVudGluc2FuZGJveFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogXCJhcHBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHM6IGFsbElkcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlJlc2V0Rm9ybVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIFRleHRBbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIEFubm90YXRpb25FbGVtZW50IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZU9iaj8uc3RyIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50c09iaj8uc3RyIHx8IHBhcmFtZXRlcnMuZGF0YS5yaWNoVGV4dD8uc3RyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1JlbmRlcmFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJ0ZXh0QW5ub3RhdGlvblwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2Uuc3R5bGUuaGVpZ2h0ID0gdGhpcy5jb250YWluZXIuc3R5bGUuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2Uuc3R5bGUud2lkdGggPSB0aGlzLmNvbnRhaW5lci5zdHlsZS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlLnNyYyA9IHRoaXMuaW1hZ2VSZXNvdXJjZXNQYXRoICsgXCJhbm5vdGF0aW9uLVwiICsgdGhpcy5kYXRhLm5hbWUudG9Mb3dlckNhc2UoKSArIFwiLnN2Z1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2UuYWx0ID0gXCJbe3t0eXBlfX0gQW5ub3RhdGlvbl1cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlLmRhdGFzZXQubDEwbklkID0gXCJ0ZXh0X2Fubm90YXRpb25fdHlwZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2UuZGF0YXNldC5sMTBuQXJncyA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLmRhdGEubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kYXRhLmhhc1BvcHVwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlUG9wdXAoaW1hZ2UsIHRoaXMuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGltYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBBbm5vdGF0aW9uRWxlbWVudCB7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuYWx0ZXJuYXRpdmVUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIudGl0bGUgPSB0aGlzLmRhdGEuYWx0ZXJuYXRpdmVUZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfZ2V0S2V5TW9kaWZpZXIoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1dpbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc01hY1xuICAgICAgICAgICAgICAgICAgICAgICAgfSA9IEFubm90YXRpb25FbGVtZW50LnBsYXRmb3JtO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzV2luICYmIGV2ZW50LmN0cmxLZXkgfHwgaXNNYWMgJiYgZXZlbnQubWV0YUtleTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9zZXRFdmVudExpc3RlbmVyKGVsZW1lbnQsIGJhc2VOYW1lLCBldmVudE5hbWUsIHZhbHVlR2V0dGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmFzZU5hbWUuaW5jbHVkZXMoXCJtb3VzZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihiYXNlTmFtZSwgZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmtTZXJ2aWNlLmV2ZW50QnVzPy5kaXNwYXRjaChcImRpc3BhdGNoZXZlbnRpbnNhbmRib3hcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMuZGF0YS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBldmVudE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlR2V0dGVyKGV2ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGlmdDogZXZlbnQuc2hpZnRLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZXI6IHRoaXMuX2dldEtleU1vZGlmaWVyKGV2ZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGJhc2VOYW1lLCBldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlua1NlcnZpY2UuZXZlbnRCdXM/LmRpc3BhdGNoKFwiZGlzcGF0Y2hldmVudGluc2FuZGJveFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogdGhpcy5kYXRhLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGV2ZW50TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVHZXR0ZXIoZXZlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX3NldEV2ZW50TGlzdGVuZXJzKGVsZW1lbnQsIG5hbWVzLCBnZXR0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2Jhc2VOYW1lLCBldmVudE5hbWVdIG9mIG5hbWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gXCJBY3Rpb25cIiB8fCB0aGlzLmRhdGEuYWN0aW9ucz8uW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcihlbGVtZW50LCBiYXNlTmFtZSwgZXZlbnROYW1lLCBnZXR0ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9zZXRCYWNrZ3JvdW5kQ29sb3IoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sb3IgPSB0aGlzLmRhdGEuYmFja2dyb3VuZENvbG9yIHx8IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yID09PSBudWxsID8gXCJ0cmFuc3BhcmVudFwiIDogX3V0aWwuVXRpbC5tYWtlSGV4Q29sb3IoY29sb3JbMF0sIGNvbG9yWzFdLCBjb2xvclsyXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfZGlzcGF0Y2hFdmVudEZyb21TYW5kYm94KGFjdGlvbnMsIGpzRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNldENvbG9yID0gKGpzTmFtZSwgc3R5bGVOYW1lLCBldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gZXZlbnQuZGV0YWlsW2pzTmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnN0eWxlW3N0eWxlTmFtZV0gPSBfc2NyaXB0aW5nX3V0aWxzLkNvbG9yQ29udmVydGVyc1tgJHtjb2xvclswXX1fSFRNTGBdKGNvbG9yLnNsaWNlKDEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1vbkFjdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoaWRkZW4gPSBldmVudC5kZXRhaWwuZGlzcGxheSAlIDIgPT09IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5zdHlsZS52aXNpYmlsaXR5ID0gaGlkZGVuID8gXCJoaWRkZW5cIiA6IFwidmlzaWJsZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFubm90YXRpb25TdG9yYWdlLnNldFZhbHVlKHRoaXMuZGF0YS5pZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQ6IGV2ZW50LmRldGFpbC5kaXNwbGF5ID09PSAwIHx8IGV2ZW50LmRldGFpbC5kaXNwbGF5ID09PSAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQ6IGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbm5vdGF0aW9uU3RvcmFnZS5zZXRWYWx1ZSh0aGlzLmRhdGEuaWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50OiBldmVudC5kZXRhaWwucHJpbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW46IGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnN0eWxlLnZpc2liaWxpdHkgPSBldmVudC5kZXRhaWwuaGlkZGVuID8gXCJoaWRkZW5cIiA6IFwidmlzaWJsZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFubm90YXRpb25TdG9yYWdlLnNldFZhbHVlKHRoaXMuZGF0YS5pZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuOiBldmVudC5kZXRhaWwuaGlkZGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXM6IGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBldmVudC50YXJnZXQuZm9jdXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmVudFNjcm9sbDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlck5hbWU6IGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnRpdGxlID0gZXZlbnQuZGV0YWlsLnVzZXJOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZG9ubHk6IGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmRldGFpbC5yZWFkb25seSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnNldEF0dHJpYnV0ZShcInJlYWRvbmx5XCIsIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcInJlYWRvbmx5XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZGV0YWlsLnJlcXVpcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQuc2V0QXR0cmlidXRlKFwicmVxdWlyZWRcIiwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQucmVtb3ZlQXR0cmlidXRlKFwicmVxdWlyZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJnQ29sb3I6IGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q29sb3IoXCJiZ0NvbG9yXCIsIFwiYmFja2dyb3VuZENvbG9yXCIsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDb2xvcihcImZpbGxDb2xvclwiLCBcImJhY2tncm91bmRDb2xvclwiLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZ0NvbG9yOiBldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldENvbG9yKFwiZmdDb2xvclwiLCBcImNvbG9yXCIsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRDb2xvcjogZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDb2xvcihcInRleHRDb2xvclwiLCBcImNvbG9yXCIsIGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldENvbG9yKFwiYm9yZGVyQ29sb3JcIiwgXCJib3JkZXJDb2xvclwiLCBldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDb2xvcihcInN0cm9rZUNvbG9yXCIsIFwiYm9yZGVyQ29sb3JcIiwgZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3Qua2V5cyhqc0V2ZW50LmRldGFpbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb24gPSBhY3Rpb25zW25hbWVdIHx8IGNvbW1vbkFjdGlvbnNbbmFtZV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbihqc0V2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIFRleHRXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIFdpZGdldEFubm90YXRpb25FbGVtZW50IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNSZW5kZXJhYmxlID0gcGFyYW1ldGVycy5yZW5kZXJGb3JtcyB8fCAhcGFyYW1ldGVycy5kYXRhLmhhc0FwcGVhcmFuY2UgJiYgISFwYXJhbWV0ZXJzLmRhdGEuZmllbGRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1JlbmRlcmFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0UHJvcGVydHlPblNpYmxpbmdzKGJhc2UsIGtleSwgdmFsdWUsIGtleUluU3RvcmFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RvcmFnZSA9IHRoaXMuYW5ub3RhdGlvblN0b3JhZ2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiB0aGlzLl9nZXRFbGVtZW50c0J5TmFtZShiYXNlLm5hbWUsIGJhc2UuaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuZG9tRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmRvbUVsZW1lbnRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoZWxlbWVudC5pZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBba2V5SW5TdG9yYWdlXTogdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0b3JhZ2UgPSB0aGlzLmFubm90YXRpb25TdG9yYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaWQgPSB0aGlzLmRhdGEuaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSBcInRleHRXaWRnZXRBbm5vdGF0aW9uXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZWxlbWVudCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlbmRlckZvcm1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RvcmVkRGF0YSA9IHN0b3JhZ2UuZ2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuZGF0YS5maWVsZFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUFzU3RyaW5nOiB0aGlzLmRhdGEuZmllbGRWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHRDb250ZW50ID0gc3RvcmVkRGF0YS52YWx1ZUFzU3RyaW5nIHx8IHN0b3JlZERhdGEudmFsdWUgfHwgXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50RGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlclZhbHVlOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWRWYWx1ZTogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhLm11bHRpTGluZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC50eXBlID0gXCJ0ZXh0XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgdGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdldEVsZW1lbnRzQnlOYW1lU2V0LmFkZChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmRpc2FibGVkID0gdGhpcy5kYXRhLnJlYWRPbmx5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQubmFtZSA9IHRoaXMuZGF0YS5maWVsZE5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC50YWJJbmRleCA9IERFRkFVTFRfVEFCX0lOREVYO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnREYXRhLnVzZXJWYWx1ZSA9IHRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRQcm9wZXJ0eU9uU2libGluZ3MoZWxlbWVudCwgXCJ2YWx1ZVwiLCBldmVudC50YXJnZXQudmFsdWUsIFwidmFsdWVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicmVzZXRmb3JtXCIsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gdGhpcy5kYXRhLmRlZmF1bHRGaWVsZFZhbHVlIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudmFsdWUgPSBlbGVtZW50RGF0YS51c2VyVmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBlbGVtZW50RGF0YS5mb3JtYXR0ZWRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBibHVyTGlzdGVuZXIgPSBldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50RGF0YS5mb3JtYXR0ZWRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gZWxlbWVudERhdGEuZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQuc2Nyb2xsTGVmdCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZVNjcmlwdGluZyAmJiB0aGlzLmhhc0pTQWN0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCBldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudERhdGEudXNlclZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gZWxlbWVudERhdGEudXNlclZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidXBkYXRlZnJvbXNhbmRib3hcIiwganNFdmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnREYXRhLnVzZXJWYWx1ZSA9IGV2ZW50LmRldGFpbC52YWx1ZSB8fCBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZWxlbWVudERhdGEudXNlclZhbHVlLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlbGVtZW50RGF0YS5mb3JtYXR0ZWRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnZhbHVlID0gZWxlbWVudERhdGEudXNlclZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlQXNTdHJpbmcoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudERhdGEuZm9ybWF0dGVkVmFsdWUgPSBldmVudC5kZXRhaWwudmFsdWVBc1N0cmluZyB8fCBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQgIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9IGVsZW1lbnREYXRhLmZvcm1hdHRlZFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkVmFsdWU6IGVsZW1lbnREYXRhLmZvcm1hdHRlZFZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxSYW5nZShldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbc2VsU3RhcnQsIHNlbEVuZF0gPSBldmVudC5kZXRhaWwuc2VsUmFuZ2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbFN0YXJ0ID49IDAgJiYgc2VsRW5kIDwgZXZlbnQudGFyZ2V0LnZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnNldFNlbGVjdGlvblJhbmdlKHNlbFN0YXJ0LCBzZWxFbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNwYXRjaEV2ZW50RnJvbVNhbmRib3goYWN0aW9ucywganNFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb21taXRLZXkgPSAtMTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gXCJFc2NhcGVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1pdEtleSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWl0S2V5ID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSBcIlRhYlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWl0S2V5ID0gMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1pdEtleSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnREYXRhLnVzZXJWYWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlua1NlcnZpY2UuZXZlbnRCdXM/LmRpc3BhdGNoKFwiZGlzcGF0Y2hldmVudGluc2FuZGJveFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJLZXlzdHJva2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbENvbW1pdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWl0S2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxTdGFydDogZXZlbnQudGFyZ2V0LnNlbGVjdGlvblN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxFbmQ6IGV2ZW50LnRhcmdldC5zZWxlY3Rpb25FbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IF9ibHVyTGlzdGVuZXIgPSBibHVyTGlzdGVuZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsdXJMaXN0ZW5lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudERhdGEudXNlclZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fbW91c2VTdGF0ZS5pc0Rvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmtTZXJ2aWNlLmV2ZW50QnVzPy5kaXNwYXRjaChcImRpc3BhdGNoZXZlbnRpbnNhbmRib3hcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIktleXN0cm9rZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGxDb21taXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21taXRLZXk6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxTdGFydDogZXZlbnQudGFyZ2V0LnNlbGVjdGlvblN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsRW5kOiBldmVudC50YXJnZXQuc2VsZWN0aW9uRW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2JsdXJMaXN0ZW5lcihldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuYWN0aW9ucz8uS2V5c3Ryb2tlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmVpbnB1dFwiLCBldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudERhdGEuZm9ybWF0dGVkVmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA9IGV2ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvblN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25FbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ID0gdGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlua1NlcnZpY2UuZXZlbnRCdXM/LmRpc3BhdGNoKFwiZGlzcGF0Y2hldmVudGluc2FuZGJveFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiS2V5c3Ryb2tlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZTogZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGxDb21taXQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsU3RhcnQ6IHNlbGVjdGlvblN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsRW5kOiBzZWxlY3Rpb25FbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycyhlbGVtZW50LCBbW1wiZm9jdXNcIiwgXCJGb2N1c1wiXSwgW1wiYmx1clwiLCBcIkJsdXJcIl0sIFtcIm1vdXNlZG93blwiLCBcIk1vdXNlIERvd25cIl0sIFtcIm1vdXNlZW50ZXJcIiwgXCJNb3VzZSBFbnRlclwiXSwgW1wibW91c2VsZWF2ZVwiLCBcIk1vdXNlIEV4aXRcIl0sIFtcIm1vdXNldXBcIiwgXCJNb3VzZSBVcFwiXV0sIGV2ZW50ID0+IGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJsdXJMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGJsdXJMaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5tYXhMZW4gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5tYXhMZW5ndGggPSB0aGlzLmRhdGEubWF4TGVuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuY29tYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWVsZFdpZHRoID0gdGhpcy5kYXRhLnJlY3RbMl0gLSB0aGlzLmRhdGEucmVjdFswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tYldpZHRoID0gZmllbGRXaWR0aCAvIHRoaXMuZGF0YS5tYXhMZW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImNvbWJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUubGV0dGVyU3BhY2luZyA9IGBjYWxjKCR7Y29tYldpZHRofXB4IC0gMWNoKWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdGhpcy5kYXRhLmZpZWxkVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS52ZXJ0aWNhbEFsaWduID0gXCJtaWRkbGVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcInRhYmxlLWNlbGxcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0VGV4dFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRCYWNrZ3JvdW5kQ29sb3IoZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX3NldFRleHRTdHlsZShlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBURVhUX0FMSUdOTUVOVCA9IFtcImxlZnRcIiwgXCJjZW50ZXJcIiwgXCJyaWdodFwiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250Q29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gPSB0aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBlbGVtZW50LnN0eWxlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9udFNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZS5mb250U2l6ZSA9IGAke2ZvbnRTaXplfXB4YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUuY29sb3IgPSBfdXRpbC5VdGlsLm1ha2VIZXhDb2xvcihmb250Q29sb3JbMF0sIGZvbnRDb2xvclsxXSwgZm9udENvbG9yWzJdKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS50ZXh0QWxpZ25tZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUudGV4dEFsaWduID0gVEVYVF9BTElHTk1FTlRbdGhpcy5kYXRhLnRleHRBbGlnbm1lbnRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBDaGVja2JveFdpZGdldEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlcihwYXJhbWV0ZXJzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNSZW5kZXJhYmxlOiBwYXJhbWV0ZXJzLnJlbmRlckZvcm1zXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0b3JhZ2UgPSB0aGlzLmFubm90YXRpb25TdG9yYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gZGF0YS5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHN0b3JhZ2UuZ2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YS5leHBvcnRWYWx1ZSA9PT0gZGF0YS5maWVsZFZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgIT09IFwiT2ZmXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSBcImJ1dHRvbldpZGdldEFubm90YXRpb24gY2hlY2tCb3hcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBHZXRFbGVtZW50c0J5TmFtZVNldC5hZGQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmRpc2FibGVkID0gZGF0YS5yZWFkT25seTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudHlwZSA9IFwiY2hlY2tib3hcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQubmFtZSA9IGRhdGEuZmllbGROYW1lO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImNoZWNrZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJleHBvcnRWYWx1ZVwiLCBkYXRhLmV4cG9ydFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudGFiSW5kZXggPSBERUZBVUxUX1RBQl9JTkRFWDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA9IGV2ZW50LnRhcmdldDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2hlY2tib3ggb2YgdGhpcy5fZ2V0RWxlbWVudHNCeU5hbWUobmFtZSwgaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1ckNoZWNrZWQgPSBjaGVja2VkICYmIGNoZWNrYm94LmV4cG9ydFZhbHVlID09PSBkYXRhLmV4cG9ydFZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGVja2JveC5kb21FbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveC5kb21FbGVtZW50LmNoZWNrZWQgPSBjdXJDaGVja2VkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShjaGVja2JveC5pZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN1ckNoZWNrZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY2hlY2tlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNldGZvcm1cIiwgZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IGRhdGEuZGVmYXVsdEZpZWxkVmFsdWUgfHwgXCJPZmZcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQuY2hlY2tlZCA9IGRlZmF1bHRWYWx1ZSA9PT0gZGF0YS5leHBvcnRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lbmFibGVTY3JpcHRpbmcgJiYgdGhpcy5oYXNKU0FjdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVmcm9tc2FuZGJveFwiLCBqc0V2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWN0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LmNoZWNrZWQgPSBldmVudC5kZXRhaWwudmFsdWUgIT09IFwiT2ZmXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZXZlbnQudGFyZ2V0LmNoZWNrZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3BhdGNoRXZlbnRGcm9tU2FuZGJveChhY3Rpb25zLCBqc0V2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKGVsZW1lbnQsIFtbXCJjaGFuZ2VcIiwgXCJWYWxpZGF0ZVwiXSwgW1wiY2hhbmdlXCIsIFwiQWN0aW9uXCJdLCBbXCJmb2N1c1wiLCBcIkZvY3VzXCJdLCBbXCJibHVyXCIsIFwiQmx1clwiXSwgW1wibW91c2Vkb3duXCIsIFwiTW91c2UgRG93blwiXSwgW1wibW91c2VlbnRlclwiLCBcIk1vdXNlIEVudGVyXCJdLCBbXCJtb3VzZWxlYXZlXCIsIFwiTW91c2UgRXhpdFwiXSwgW1wibW91c2V1cFwiLCBcIk1vdXNlIFVwXCJdXSwgZXZlbnQgPT4gZXZlbnQudGFyZ2V0LmNoZWNrZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRCYWNrZ3JvdW5kQ29sb3IoZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBSYWRpb0J1dHRvbldpZGdldEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlcihwYXJhbWV0ZXJzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNSZW5kZXJhYmxlOiBwYXJhbWV0ZXJzLnJlbmRlckZvcm1zXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IFwiYnV0dG9uV2lkZ2V0QW5ub3RhdGlvbiByYWRpb0J1dHRvblwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RvcmFnZSA9IHRoaXMuYW5ub3RhdGlvblN0b3JhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaWQgPSBkYXRhLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gc3RvcmFnZS5nZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLmZpZWxkVmFsdWUgPT09IGRhdGEuYnV0dG9uVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSAhPT0gZGF0YS5idXR0b25WYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBHZXRFbGVtZW50c0J5TmFtZVNldC5hZGQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmRpc2FibGVkID0gZGF0YS5yZWFkT25seTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudHlwZSA9IFwicmFkaW9cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQubmFtZSA9IGRhdGEuZmllbGROYW1lO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImNoZWNrZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC50YWJJbmRleCA9IERFRkFVTFRfVEFCX0lOREVYO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCByYWRpbyBvZiB0aGlzLl9nZXRFbGVtZW50c0J5TmFtZShuYW1lLCBpZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShyYWRpby5pZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNoZWNrZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicmVzZXRmb3JtXCIsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSBkYXRhLmRlZmF1bHRGaWVsZFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC5jaGVja2VkID0gZGVmYXVsdFZhbHVlICE9PSBudWxsICYmIGRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIGRlZmF1bHRWYWx1ZSA9PT0gZGF0YS5idXR0b25WYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lbmFibGVTY3JpcHRpbmcgJiYgdGhpcy5oYXNKU0FjdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwZGZCdXR0b25WYWx1ZSA9IGRhdGEuYnV0dG9uVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidXBkYXRlZnJvbXNhbmRib3hcIiwganNFdmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrZWQgPSBwZGZCdXR0b25WYWx1ZSA9PT0gZXZlbnQuZGV0YWlsLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCByYWRpbyBvZiB0aGlzLl9nZXRFbGVtZW50c0J5TmFtZShldmVudC50YXJnZXQubmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VyQ2hlY2tlZCA9IGNoZWNrZWQgJiYgcmFkaW8uaWQgPT09IGlkO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYWRpby5kb21FbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpby5kb21FbGVtZW50LmNoZWNrZWQgPSBjdXJDaGVja2VkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShyYWRpby5pZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGN1ckNoZWNrZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3BhdGNoRXZlbnRGcm9tU2FuZGJveChhY3Rpb25zLCBqc0V2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKGVsZW1lbnQsIFtbXCJjaGFuZ2VcIiwgXCJWYWxpZGF0ZVwiXSwgW1wiY2hhbmdlXCIsIFwiQWN0aW9uXCJdLCBbXCJmb2N1c1wiLCBcIkZvY3VzXCJdLCBbXCJibHVyXCIsIFwiQmx1clwiXSwgW1wibW91c2Vkb3duXCIsIFwiTW91c2UgRG93blwiXSwgW1wibW91c2VlbnRlclwiLCBcIk1vdXNlIEVudGVyXCJdLCBbXCJtb3VzZWxlYXZlXCIsIFwiTW91c2UgRXhpdFwiXSwgW1wibW91c2V1cFwiLCBcIk1vdXNlIFVwXCJdXSwgZXZlbnQgPT4gZXZlbnQudGFyZ2V0LmNoZWNrZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRCYWNrZ3JvdW5kQ29sb3IoZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBQdXNoQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBMaW5rQW5ub3RhdGlvbkVsZW1lbnQge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlcihwYXJhbWV0ZXJzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlQm9yZGVyOiBwYXJhbWV0ZXJzLmRhdGEuaGFzQXBwZWFyYW5jZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZW5kZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBzdXBlci5yZW5kZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSBcImJ1dHRvbldpZGdldEFubm90YXRpb24gcHVzaEJ1dHRvblwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhLmFsdGVybmF0aXZlVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci50aXRsZSA9IHRoaXMuZGF0YS5hbHRlcm5hdGl2ZVRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIENob2ljZVdpZGdldEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlcihwYXJhbWV0ZXJzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNSZW5kZXJhYmxlOiBwYXJhbWV0ZXJzLnJlbmRlckZvcm1zXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IFwiY2hvaWNlV2lkZ2V0QW5ub3RhdGlvblwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RvcmFnZSA9IHRoaXMuYW5ub3RhdGlvblN0b3JhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpZCA9IHRoaXMuZGF0YS5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2UuZ2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5kYXRhLmZpZWxkVmFsdWUubGVuZ3RoID4gMCA/IHRoaXMuZGF0YS5maWVsZFZhbHVlWzBdIDogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gPSB0aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZvbnRTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemUgPSA5O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb250U2l6ZVN0eWxlID0gYGNhbGMoJHtmb250U2l6ZX1weCAqIHZhcigtLXpvb20tZmFjdG9yKSlgO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBHZXRFbGVtZW50c0J5TmFtZVNldC5hZGQoc2VsZWN0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50LmRpc2FibGVkID0gdGhpcy5kYXRhLnJlYWRPbmx5O1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudC5uYW1lID0gdGhpcy5kYXRhLmZpZWxkTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudC50YWJJbmRleCA9IERFRkFVTFRfVEFCX0lOREVYO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudC5zdHlsZS5mb250U2l6ZSA9IGAke2ZvbnRTaXplfXB4YDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRhdGEuY29tYm8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50LnNpemUgPSB0aGlzLmRhdGEub3B0aW9ucy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhLm11bHRpU2VsZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQubXVsdGlwbGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicmVzZXRmb3JtXCIsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSB0aGlzLmRhdGEuZGVmYXVsdEZpZWxkVmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9wdGlvbiBvZiBzZWxlY3RFbGVtZW50Lm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gb3B0aW9uLnZhbHVlID09PSBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIHRoaXMuZGF0YS5vcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uRWxlbWVudC50ZXh0Q29udGVudCA9IG9wdGlvbi5kaXNwbGF5VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uRWxlbWVudC52YWx1ZSA9IG9wdGlvbi5leHBvcnRWYWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuY29tYm8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uRWxlbWVudC5zdHlsZS5mb250U2l6ZSA9IGZvbnRTaXplU3R5bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5maWVsZFZhbHVlLmluY2x1ZGVzKG9wdGlvbi5leHBvcnRWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJzZWxlY3RlZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50LmFwcGVuZENoaWxkKG9wdGlvbkVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnZXRWYWx1ZSA9IChldmVudCwgaXNFeHBvcnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gaXNFeHBvcnQgPyBcInZhbHVlXCIgOiBcInRleHRDb250ZW50XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGV2ZW50LnRhcmdldC5vcHRpb25zO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFldmVudC50YXJnZXQubXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuc2VsZWN0ZWRJbmRleCA9PT0gLTEgPyBudWxsIDogb3B0aW9uc1tvcHRpb25zLnNlbGVjdGVkSW5kZXhdW25hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwob3B0aW9ucywgb3B0aW9uID0+IG9wdGlvbi5zZWxlY3RlZCkubWFwKG9wdGlvbiA9PiBvcHRpb25bbmFtZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2V0SXRlbXMgPSBldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGV2ZW50LnRhcmdldC5vcHRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwob3B0aW9ucywgb3B0aW9uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlWYWx1ZTogb3B0aW9uLnRleHRDb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwb3J0VmFsdWU6IG9wdGlvbi52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlU2NyaXB0aW5nICYmIHRoaXMuaGFzSlNBY3Rpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidXBkYXRlZnJvbXNhbmRib3hcIiwganNFdmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZShldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZXZlbnQuZGV0YWlsLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IG5ldyBTZXQoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvcHRpb24gb2Ygc2VsZWN0RWxlbWVudC5vcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHZhbHVlcy5oYXMob3B0aW9uLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBnZXRWYWx1ZShldmVudCwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlU2VsZWN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudC5tdWx0aXBsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb25zID0gc2VsZWN0RWxlbWVudC5vcHRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gZXZlbnQuZGV0YWlsLnJlbW92ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zW2luZGV4XS5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQucmVtb3ZlKGluZGV4KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXguY2FsbChvcHRpb25zLCBvcHRpb24gPT4gb3B0aW9uLnNlbGVjdGVkKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnNbMF0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZ2V0VmFsdWUoZXZlbnQsIHRydWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogZ2V0SXRlbXMoZXZlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChzZWxlY3RFbGVtZW50Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50LnJlbW92ZSgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogW11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwb3J0VmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ID0gZXZlbnQuZGV0YWlsLmluc2VydDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25FbGVtZW50LnRleHRDb250ZW50ID0gZGlzcGxheVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkVsZW1lbnQudmFsdWUgPSBleHBvcnRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50Lmluc2VydEJlZm9yZShvcHRpb25FbGVtZW50LCBzZWxlY3RFbGVtZW50LmNoaWxkcmVuW2luZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZ2V0VmFsdWUoZXZlbnQsIHRydWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogZ2V0SXRlbXMoZXZlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcyhldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ID0gZXZlbnQuZGV0YWlsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHNlbGVjdEVsZW1lbnQubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQucmVtb3ZlKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBvcnRWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ID0gaXRlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkVsZW1lbnQudGV4dENvbnRlbnQgPSBkaXNwbGF5VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkVsZW1lbnQudmFsdWUgPSBleHBvcnRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudC5hcHBlbmRDaGlsZChvcHRpb25FbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0RWxlbWVudC5vcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudC5vcHRpb25zWzBdLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBnZXRWYWx1ZShldmVudCwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBnZXRJdGVtcyhldmVudClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGljZXMoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRpY2VzID0gbmV3IFNldChldmVudC5kZXRhaWwuaW5kaWNlcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9wdGlvbiBvZiBldmVudC50YXJnZXQub3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBpbmRpY2VzLmhhcyhvcHRpb24uaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGdldFZhbHVlKGV2ZW50LCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdGFibGUoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQuZGlzYWJsZWQgPSAhZXZlbnQuZGV0YWlsLmVkaXRhYmxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzcGF0Y2hFdmVudEZyb21TYW5kYm94KGFjdGlvbnMsIGpzRXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhwb3J0VmFsdWUgPSBnZXRWYWx1ZShldmVudCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZ2V0VmFsdWUoZXZlbnQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGV4cG9ydFZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmtTZXJ2aWNlLmV2ZW50QnVzPy5kaXNwYXRjaChcImRpc3BhdGNoZXZlbnRpbnNhbmRib3hcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJLZXlzdHJva2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VFeDogZXhwb3J0VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbENvbW1pdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21taXRLZXk6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5RG93bjogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycyhzZWxlY3RFbGVtZW50LCBbW1wiZm9jdXNcIiwgXCJGb2N1c1wiXSwgW1wiYmx1clwiLCBcIkJsdXJcIl0sIFtcIm1vdXNlZG93blwiLCBcIk1vdXNlIERvd25cIl0sIFtcIm1vdXNlZW50ZXJcIiwgXCJNb3VzZSBFbnRlclwiXSwgW1wibW91c2VsZWF2ZVwiLCBcIk1vdXNlIEV4aXRcIl0sIFtcIm1vdXNldXBcIiwgXCJNb3VzZSBVcFwiXSwgW1wiaW5wdXRcIiwgXCJBY3Rpb25cIl1dLCBldmVudCA9PiBldmVudC50YXJnZXQuY2hlY2tlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZ2V0VmFsdWUoZXZlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRCYWNrZ3JvdW5kQ29sb3Ioc2VsZWN0RWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHNlbGVjdEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBQb3B1cEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEudGl0bGVPYmo/LnN0ciB8fCBwYXJhbWV0ZXJzLmRhdGEuY29udGVudHNPYmo/LnN0ciB8fCBwYXJhbWV0ZXJzLmRhdGEucmljaFRleHQ/LnN0cik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlcihwYXJhbWV0ZXJzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNSZW5kZXJhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IElHTk9SRV9UWVBFUyA9IFtcIkxpbmVcIiwgXCJTcXVhcmVcIiwgXCJDaXJjbGVcIiwgXCJQb2x5TGluZVwiLCBcIlBvbHlnb25cIiwgXCJJbmtcIl07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSBcInBvcHVwQW5ub3RhdGlvblwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoSUdOT1JFX1RZUEVTLmluY2x1ZGVzKHRoaXMuZGF0YS5wYXJlbnRUeXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSBgW2RhdGEtYW5ub3RhdGlvbi1pZD1cIiR7dGhpcy5kYXRhLnBhcmVudElkfVwiXWA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRFbGVtZW50cyA9IHRoaXMubGF5ZXIucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnRFbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvcHVwID0gbmV3IFBvcHVwRWxlbWVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyOiB0aGlzLmNvbnRhaW5lcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiBBcnJheS5mcm9tKHBhcmVudEVsZW1lbnRzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogdGhpcy5kYXRhLmNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlT2JqOiB0aGlzLmRhdGEudGl0bGVPYmosXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpY2F0aW9uRGF0ZTogdGhpcy5kYXRhLm1vZGlmaWNhdGlvbkRhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHNPYmo6IHRoaXMuZGF0YS5jb250ZW50c09iaixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWNoVGV4dDogdGhpcy5kYXRhLnJpY2hUZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2UgPSB0aGlzLnBhZ2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlY3QgPSBfdXRpbC5VdGlsLm5vcm1hbGl6ZVJlY3QoW3RoaXMuZGF0YS5wYXJlbnRSZWN0WzBdLCBwYWdlLnZpZXdbM10gLSB0aGlzLmRhdGEucGFyZW50UmVjdFsxXSArIHBhZ2Uudmlld1sxXSwgdGhpcy5kYXRhLnBhcmVudFJlY3RbMl0sIHBhZ2Uudmlld1szXSAtIHRoaXMuZGF0YS5wYXJlbnRSZWN0WzNdICsgcGFnZS52aWV3WzFdXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvcHVwTGVmdCA9IHJlY3RbMF0gKyB0aGlzLmRhdGEucGFyZW50UmVjdFsyXSAtIHRoaXMuZGF0YS5wYXJlbnRSZWN0WzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9wdXBUb3AgPSByZWN0WzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gYCR7LXBvcHVwTGVmdH1weCAkey1wb3B1cFRvcH1weGA7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gYCR7cG9wdXBMZWZ0fXB4YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnRvcCA9IGAke3BvcHVwVG9wfXB4YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHBvcHVwLnJlbmRlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgUG9wdXBFbGVtZW50IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIgPSBwYXJhbWV0ZXJzLmNvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlciA9IHBhcmFtZXRlcnMudHJpZ2dlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPSBwYXJhbWV0ZXJzLmNvbG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50aXRsZU9iaiA9IHBhcmFtZXRlcnMudGl0bGVPYmo7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGlmaWNhdGlvbkRhdGUgPSBwYXJhbWV0ZXJzLm1vZGlmaWNhdGlvbkRhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRzT2JqID0gcGFyYW1ldGVycy5jb250ZW50c09iajtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmljaFRleHQgPSBwYXJhbWV0ZXJzLnJpY2hUZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlV3JhcHBlciA9IHBhcmFtZXRlcnMuaGlkZVdyYXBwZXIgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBpbm5lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgQkFDS0dST1VORF9FTkxJR0hUID0gMC43O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVyLmNsYXNzTmFtZSA9IFwicG9wdXBXcmFwcGVyXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGVFbGVtZW50ID0gdGhpcy5oaWRlV3JhcHBlciA/IHdyYXBwZXIgOiB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZUVsZW1lbnQuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvcHVwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwLmNsYXNzTmFtZSA9IFwicG9wdXBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gdGhpcy5jb2xvcjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IEJBQ0tHUk9VTkRfRU5MSUdIVCAqICgyNTUgLSBjb2xvclswXSkgKyBjb2xvclswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnID0gQkFDS0dST1VORF9FTkxJR0hUICogKDI1NSAtIGNvbG9yWzFdKSArIGNvbG9yWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGIgPSBCQUNLR1JPVU5EX0VOTElHSFQgKiAoMjU1IC0gY29sb3JbMl0pICsgY29sb3JbMl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXAuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gX3V0aWwuVXRpbC5tYWtlSGV4Q29sb3IociB8IDAsIGcgfCAwLCBiIHwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgxXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUuZGlyID0gdGhpcy50aXRsZU9iai5kaXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZS50ZXh0Q29udGVudCA9IHRoaXMudGl0bGVPYmouc3RyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXAuYXBwZW5kQ2hpbGQodGl0bGUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRlT2JqZWN0ID0gX2Rpc3BsYXlfdXRpbHMuUERGRGF0ZVN0cmluZy50b0RhdGVPYmplY3QodGhpcy5tb2RpZmljYXRpb25EYXRlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGVPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RpZmljYXRpb25EYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpY2F0aW9uRGF0ZS5jbGFzc05hbWUgPSBcInBvcHVwRGF0ZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWNhdGlvbkRhdGUudGV4dENvbnRlbnQgPSBcInt7ZGF0ZX19LCB7e3RpbWV9fVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWNhdGlvbkRhdGUuZGF0YXNldC5sMTBuSWQgPSBcImFubm90YXRpb25fZGF0ZV9zdHJpbmdcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmljYXRpb25EYXRlLmRhdGFzZXQubDEwbkFyZ3MgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IGRhdGVPYmplY3QudG9Mb2NhbGVEYXRlU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IGRhdGVPYmplY3QudG9Mb2NhbGVUaW1lU3RyaW5nKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B1cC5hcHBlbmRDaGlsZChtb2RpZmljYXRpb25EYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmljaFRleHQ/LnN0ciAmJiAoIXRoaXMuY29udGVudHNPYmo/LnN0ciB8fCB0aGlzLmNvbnRlbnRzT2JqLnN0ciA9PT0gdGhpcy5yaWNoVGV4dC5zdHIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3hmYV9sYXllci5YZmFMYXllci5yZW5kZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ZmFIdG1sOiB0aGlzLnJpY2hUZXh0Lmh0bWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVudDogXCJyaWNoVGV4dFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXY6IHBvcHVwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B1cC5sYXN0Q2hpbGQuY2xhc3NOYW1lID0gXCJyaWNoVGV4dCBwb3B1cENvbnRlbnRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudHMgPSB0aGlzLl9mb3JtYXRDb250ZW50cyh0aGlzLmNvbnRlbnRzT2JqKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwLmFwcGVuZENoaWxkKGNvbnRlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMudHJpZ2dlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIgPSBbdGhpcy50cmlnZ2VyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIHRoaXMudHJpZ2dlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuX3RvZ2dsZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgdGhpcy5fc2hvdy5iaW5kKHRoaXMsIGZhbHNlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIiwgdGhpcy5faGlkZS5iaW5kKHRoaXMsIGZhbHNlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9oaWRlLmJpbmQodGhpcywgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChwb3B1cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9mb3JtYXRDb250ZW50cyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcC5jbGFzc05hbWUgPSBcInBvcHVwQ29udGVudFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgcC5kaXIgPSBkaXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lcyA9IHN0ci5zcGxpdCgvKD86XFxyXFxuP3xcXG4pLyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGxpbmVzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gbGluZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShsaW5lKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA8IGlpIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF90b2dnbGUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5waW5uZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaWRlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaG93KHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX3Nob3cocGluID0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBpbm5lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhpZGVFbGVtZW50LmhpZGRlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZUVsZW1lbnQuaGlkZGVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuekluZGV4ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfaGlkZSh1bnBpbiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bnBpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGlubmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5oaWRlRWxlbWVudC5oaWRkZW4gJiYgIXRoaXMucGlubmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlRWxlbWVudC5oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnpJbmRleCAtPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBGcmVlVGV4dEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEuaGFzUG9wdXAgfHwgcGFyYW1ldGVycy5kYXRhLnRpdGxlT2JqPy5zdHIgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzT2JqPy5zdHIgfHwgcGFyYW1ldGVycy5kYXRhLnJpY2hUZXh0Py5zdHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VwZXIocGFyYW1ldGVycywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUmVuZGVyYWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmVCb3JkZXI6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJmcmVlVGV4dEFubm90YXRpb25cIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRhdGEuaGFzUG9wdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVQb3B1cChudWxsLCB0aGlzLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIExpbmVBbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIEFubm90YXRpb25FbGVtZW50IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZU9iaj8uc3RyIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50c09iaj8uc3RyIHx8IHBhcmFtZXRlcnMuZGF0YS5yaWNoVGV4dD8uc3RyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1JlbmRlcmFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlQm9yZGVyOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IFwibGluZUFubm90YXRpb25cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICB9ID0gZ2V0UmVjdERpbXMoZGF0YS5yZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN2ZyA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6bGluZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUuc2V0QXR0cmlidXRlKFwieDFcIiwgZGF0YS5yZWN0WzJdIC0gZGF0YS5saW5lQ29vcmRpbmF0ZXNbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5zZXRBdHRyaWJ1dGUoXCJ5MVwiLCBkYXRhLnJlY3RbM10gLSBkYXRhLmxpbmVDb29yZGluYXRlc1sxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLnNldEF0dHJpYnV0ZShcIngyXCIsIGRhdGEucmVjdFsyXSAtIGRhdGEubGluZUNvb3JkaW5hdGVzWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUuc2V0QXR0cmlidXRlKFwieTJcIiwgZGF0YS5yZWN0WzNdIC0gZGF0YS5saW5lQ29vcmRpbmF0ZXNbM10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utd2lkdGhcIiwgZGF0YS5ib3JkZXJTdHlsZS53aWR0aCB8fCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlXCIsIFwidHJhbnNwYXJlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lLnNldEF0dHJpYnV0ZShcImZpbGxcIiwgXCJ0cmFuc3BhcmVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN2Zy5hcHBlbmRDaGlsZChsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZChzdmcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVQb3B1cChsaW5lLCBkYXRhKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBTcXVhcmVBbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIEFubm90YXRpb25FbGVtZW50IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZU9iaj8uc3RyIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50c09iaj8uc3RyIHx8IHBhcmFtZXRlcnMuZGF0YS5yaWNoVGV4dD8uc3RyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1JlbmRlcmFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlQm9yZGVyOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IFwic3F1YXJlQW5ub3RhdGlvblwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gPSBnZXRSZWN0RGltcyhkYXRhLnJlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ZnID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvcmRlcldpZHRoID0gZGF0YS5ib3JkZXJTdHlsZS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNxdWFyZSA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnJlY3RcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwieFwiLCBib3JkZXJXaWR0aCAvIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcInlcIiwgYm9yZGVyV2lkdGggLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCB3aWR0aCAtIGJvcmRlcldpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgaGVpZ2h0IC0gYm9yZGVyV2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcInN0cm9rZS13aWR0aFwiLCBib3JkZXJXaWR0aCB8fCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJzdHJva2VcIiwgXCJ0cmFuc3BhcmVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwidHJhbnNwYXJlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdmcuYXBwZW5kQ2hpbGQoc3F1YXJlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZChzdmcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVQb3B1cChzcXVhcmUsIGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIENpcmNsZUFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEuaGFzUG9wdXAgfHwgcGFyYW1ldGVycy5kYXRhLnRpdGxlT2JqPy5zdHIgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzT2JqPy5zdHIgfHwgcGFyYW1ldGVycy5kYXRhLnJpY2hUZXh0Py5zdHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VwZXIocGFyYW1ldGVycywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUmVuZGVyYWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmVCb3JkZXI6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJjaXJjbGVBbm5vdGF0aW9uXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgfSA9IGdldFJlY3REaW1zKGRhdGEucmVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdmcgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9yZGVyV2lkdGggPSBkYXRhLmJvcmRlclN0eWxlLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2lyY2xlID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6ZWxsaXBzZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZS5zZXRBdHRyaWJ1dGUoXCJjeFwiLCB3aWR0aCAvIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlLnNldEF0dHJpYnV0ZShcImN5XCIsIGhlaWdodCAvIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlLnNldEF0dHJpYnV0ZShcInJ4XCIsIHdpZHRoIC8gMiAtIGJvcmRlcldpZHRoIC8gMik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaXJjbGUuc2V0QXR0cmlidXRlKFwicnlcIiwgaGVpZ2h0IC8gMiAtIGJvcmRlcldpZHRoIC8gMik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaXJjbGUuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIGJvcmRlcldpZHRoIHx8IDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBcInRyYW5zcGFyZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlLnNldEF0dHJpYnV0ZShcImZpbGxcIiwgXCJ0cmFuc3BhcmVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN2Zy5hcHBlbmRDaGlsZChjaXJjbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kKHN2Zyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwKGNpcmNsZSwgZGF0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgUG9seWxpbmVBbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIEFubm90YXRpb25FbGVtZW50IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZU9iaj8uc3RyIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50c09iaj8uc3RyIHx8IHBhcmFtZXRlcnMuZGF0YS5yaWNoVGV4dD8uc3RyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1JlbmRlcmFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlQm9yZGVyOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyQ2xhc3NOYW1lID0gXCJwb2x5bGluZUFubm90YXRpb25cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ZnRWxlbWVudE5hbWUgPSBcInN2Zzpwb2x5bGluZVwiO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gdGhpcy5jb250YWluZXJDbGFzc05hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgfSA9IGdldFJlY3REaW1zKGRhdGEucmVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdmcgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBvaW50cyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNvb3JkaW5hdGUgb2YgZGF0YS52ZXJ0aWNlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHggPSBjb29yZGluYXRlLnggLSBkYXRhLnJlY3RbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeSA9IGRhdGEucmVjdFszXSAtIGNvb3JkaW5hdGUueTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaCh4ICsgXCIsXCIgKyB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gcG9pbnRzLmpvaW4oXCIgXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9seWxpbmUgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudCh0aGlzLnN2Z0VsZW1lbnROYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbHlsaW5lLnNldEF0dHJpYnV0ZShcInBvaW50c1wiLCBwb2ludHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIGRhdGEuYm9yZGVyU3R5bGUud2lkdGggfHwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2x5bGluZS5zZXRBdHRyaWJ1dGUoXCJzdHJva2VcIiwgXCJ0cmFuc3BhcmVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbHlsaW5lLnNldEF0dHJpYnV0ZShcImZpbGxcIiwgXCJ0cmFuc3BhcmVudFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN2Zy5hcHBlbmRDaGlsZChwb2x5bGluZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoc3ZnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlUG9wdXAocG9seWxpbmUsIGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIFBvbHlnb25Bbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIFBvbHlsaW5lQW5ub3RhdGlvbkVsZW1lbnQge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyQ2xhc3NOYW1lID0gXCJwb2x5Z29uQW5ub3RhdGlvblwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdmdFbGVtZW50TmFtZSA9IFwic3ZnOnBvbHlnb25cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgQ2FyZXRBbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIEFubm90YXRpb25FbGVtZW50IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZU9iaj8uc3RyIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50c09iaj8uc3RyIHx8IHBhcmFtZXRlcnMuZGF0YS5yaWNoVGV4dD8uc3RyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1JlbmRlcmFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlQm9yZGVyOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IFwiY2FyZXRBbm5vdGF0aW9uXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kYXRhLmhhc1BvcHVwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlUG9wdXAobnVsbCwgdGhpcy5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBJbmtBbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIEFubm90YXRpb25FbGVtZW50IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZU9iaj8uc3RyIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50c09iaj8uc3RyIHx8IHBhcmFtZXRlcnMuZGF0YS5yaWNoVGV4dD8uc3RyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1JlbmRlcmFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlQm9yZGVyOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyQ2xhc3NOYW1lID0gXCJpbmtBbm5vdGF0aW9uXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN2Z0VsZW1lbnROYW1lID0gXCJzdmc6cG9seWxpbmVcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IHRoaXMuY29udGFpbmVyQ2xhc3NOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gPSBnZXRSZWN0RGltcyhkYXRhLnJlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ZnID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZSh3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpbmtMaXN0IG9mIGRhdGEuaW5rTGlzdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcG9pbnRzID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNvb3JkaW5hdGUgb2YgaW5rTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB4ID0gY29vcmRpbmF0ZS54IC0gZGF0YS5yZWN0WzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB5ID0gZGF0YS5yZWN0WzNdIC0gY29vcmRpbmF0ZS55O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChgJHt4fSwke3l9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzID0gcG9pbnRzLmpvaW4oXCIgXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvbHlsaW5lID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQodGhpcy5zdmdFbGVtZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwicG9pbnRzXCIsIHBvaW50cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIGRhdGEuYm9yZGVyU3R5bGUud2lkdGggfHwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlXCIsIFwidHJhbnNwYXJlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBcInRyYW5zcGFyZW50XCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlUG9wdXAocG9seWxpbmUsIGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ZnLmFwcGVuZENoaWxkKHBvbHlsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kKHN2Zyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIEhpZ2hsaWdodEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEuaGFzUG9wdXAgfHwgcGFyYW1ldGVycy5kYXRhLnRpdGxlT2JqPy5zdHIgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzT2JqPy5zdHIgfHwgcGFyYW1ldGVycy5kYXRhLnJpY2hUZXh0Py5zdHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VwZXIocGFyYW1ldGVycywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUmVuZGVyYWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmVCb3JkZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlUXVhZHJpbGF0ZXJhbHM6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRhdGEuaGFzUG9wdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVQb3B1cChudWxsLCB0aGlzLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5xdWFkcmlsYXRlcmFscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJRdWFkcmlsYXRlcmFscyhcImhpZ2hsaWdodEFubm90YXRpb25cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IFwiaGlnaGxpZ2h0QW5ub3RhdGlvblwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBVbmRlcmxpbmVBbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIEFubm90YXRpb25FbGVtZW50IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZU9iaj8uc3RyIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50c09iaj8uc3RyIHx8IHBhcmFtZXRlcnMuZGF0YS5yaWNoVGV4dD8uc3RyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1JlbmRlcmFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlQm9yZGVyOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVF1YWRyaWxhdGVyYWxzOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kYXRhLmhhc1BvcHVwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlUG9wdXAobnVsbCwgdGhpcy5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucXVhZHJpbGF0ZXJhbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyUXVhZHJpbGF0ZXJhbHMoXCJ1bmRlcmxpbmVBbm5vdGF0aW9uXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSBcInVuZGVybGluZUFubm90YXRpb25cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgU3F1aWdnbHlBbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIEFubm90YXRpb25FbGVtZW50IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZU9iaj8uc3RyIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50c09iaj8uc3RyIHx8IHBhcmFtZXRlcnMuZGF0YS5yaWNoVGV4dD8uc3RyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1JlbmRlcmFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlQm9yZGVyOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVF1YWRyaWxhdGVyYWxzOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kYXRhLmhhc1BvcHVwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlUG9wdXAobnVsbCwgdGhpcy5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucXVhZHJpbGF0ZXJhbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyUXVhZHJpbGF0ZXJhbHMoXCJzcXVpZ2dseUFubm90YXRpb25cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IFwic3F1aWdnbHlBbm5vdGF0aW9uXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIFN0cmlrZU91dEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEuaGFzUG9wdXAgfHwgcGFyYW1ldGVycy5kYXRhLnRpdGxlT2JqPy5zdHIgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzT2JqPy5zdHIgfHwgcGFyYW1ldGVycy5kYXRhLnJpY2hUZXh0Py5zdHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VwZXIocGFyYW1ldGVycywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUmVuZGVyYWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmVCb3JkZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlUXVhZHJpbGF0ZXJhbHM6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRhdGEuaGFzUG9wdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVQb3B1cChudWxsLCB0aGlzLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5xdWFkcmlsYXRlcmFscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJRdWFkcmlsYXRlcmFscyhcInN0cmlrZW91dEFubm90YXRpb25cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IFwic3RyaWtlb3V0QW5ub3RhdGlvblwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBTdGFtcEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEuaGFzUG9wdXAgfHwgcGFyYW1ldGVycy5kYXRhLnRpdGxlT2JqPy5zdHIgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzT2JqPy5zdHIgfHwgcGFyYW1ldGVycy5kYXRhLnJpY2hUZXh0Py5zdHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VwZXIocGFyYW1ldGVycywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUmVuZGVyYWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmVCb3JkZXI6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gXCJzdGFtcEFubm90YXRpb25cIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRhdGEuaGFzUG9wdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVQb3B1cChudWxsLCB0aGlzLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIEZpbGVBdHRhY2htZW50QW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBBbm5vdGF0aW9uRWxlbWVudCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1JlbmRlcmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gPSB0aGlzLmRhdGEuZmlsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsZW5hbWUgPSAoMCwgX2Rpc3BsYXlfdXRpbHMuZ2V0RmlsZW5hbWVGcm9tVXJsKShmaWxlbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saW5rU2VydmljZS5ldmVudEJ1cz8uZGlzcGF0Y2goXCJmaWxlYXR0YWNobWVudGFubm90YXRpb25cIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogKDAsIF91dGlsLnN0cmluZ1RvUERGU3RyaW5nKShmaWxlbmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZW5kZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSBcImZpbGVBdHRhY2htZW50QW5ub3RhdGlvblwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJpZ2dlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyLnN0eWxlLmhlaWdodCA9IHRoaXMuY29udGFpbmVyLnN0eWxlLmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXIuc3R5bGUud2lkdGggPSB0aGlzLmNvbnRhaW5lci5zdHlsZS53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcihcImRibGNsaWNrXCIsIHRoaXMuX2Rvd25sb2FkLmJpbmQodGhpcykpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZGF0YS5oYXNQb3B1cCAmJiAodGhpcy5kYXRhLnRpdGxlT2JqPy5zdHIgfHwgdGhpcy5kYXRhLmNvbnRlbnRzT2JqPy5zdHIgfHwgdGhpcy5kYXRhLnJpY2hUZXh0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwKHRyaWdnZXIsIHRoaXMuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRyaWdnZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX2Rvd25sb2FkKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZE1hbmFnZXI/Lm9wZW5PckRvd25sb2FkRGF0YSh0aGlzLmNvbnRhaW5lciwgdGhpcy5jb250ZW50LCB0aGlzLmZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgQW5ub3RhdGlvbkxheWVyIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljIHJlbmRlcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3J0ZWRBbm5vdGF0aW9ucyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwQW5ub3RhdGlvbnMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBkYXRhIG9mIHBhcmFtZXRlcnMuYW5ub3RhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA9IGdldFJlY3REaW1zKGRhdGEucmVjdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2lkdGggPD0gMCB8fCBoZWlnaHQgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5hbm5vdGF0aW9uVHlwZSA9PT0gX3V0aWwuQW5ub3RhdGlvblR5cGUuUE9QVVApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXBBbm5vdGF0aW9ucy5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0ZWRBbm5vdGF0aW9ucy5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9wdXBBbm5vdGF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0ZWRBbm5vdGF0aW9ucy5wdXNoKC4uLnBvcHVwQW5ub3RhdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXYgPSBwYXJhbWV0ZXJzLmRpdjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBkYXRhIG9mIHNvcnRlZEFubm90YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IEFubm90YXRpb25FbGVtZW50RmFjdG9yeS5jcmVhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogZGl2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlOiBwYXJhbWV0ZXJzLnBhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0OiBwYXJhbWV0ZXJzLnZpZXdwb3J0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rU2VydmljZTogcGFyYW1ldGVycy5saW5rU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRNYW5hZ2VyOiBwYXJhbWV0ZXJzLmRvd25sb2FkTWFuYWdlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VSZXNvdXJjZXNQYXRoOiBwYXJhbWV0ZXJzLmltYWdlUmVzb3VyY2VzUGF0aCB8fCBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJGb3JtczogcGFyYW1ldGVycy5yZW5kZXJGb3JtcyAhPT0gZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN2Z0ZhY3Rvcnk6IG5ldyBfZGlzcGxheV91dGlscy5ET01TVkdGYWN0b3J5KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFubm90YXRpb25TdG9yYWdlOiBwYXJhbWV0ZXJzLmFubm90YXRpb25TdG9yYWdlIHx8IG5ldyBfYW5ub3RhdGlvbl9zdG9yYWdlLkFubm90YXRpb25TdG9yYWdlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZVNjcmlwdGluZzogcGFyYW1ldGVycy5lbmFibGVTY3JpcHRpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0pTQWN0aW9uczogcGFyYW1ldGVycy5oYXNKU0FjdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkT2JqZWN0czogcGFyYW1ldGVycy5maWVsZE9iamVjdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNlU3RhdGU6IHBhcmFtZXRlcnMubW91c2VTdGF0ZSB8fCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0Rvd246IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmlzUmVuZGVyYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZW5kZXJlZCA9IGVsZW1lbnQucmVuZGVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJlZC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlbmRlcmVkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCByZW5kZXJlZEVsZW1lbnQgb2YgcmVuZGVyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQocmVuZGVyZWRFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgUG9wdXBBbm5vdGF0aW9uRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5wcmVwZW5kKHJlbmRlcmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGl2LmFwcGVuZENoaWxkKHJlbmRlcmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jc2V0QW5ub3RhdGlvbkNhbnZhc01hcChkaXYsIHBhcmFtZXRlcnMuYW5ub3RhdGlvbkNhbnZhc01hcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzdGF0aWMgdXBkYXRlKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFubm90YXRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFubm90YXRpb25DYW52YXNNYXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICB9ID0gcGFyYW1ldGVycztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IHZpZXdwb3J0LnRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdHJpeCA9IGBtYXRyaXgoJHt0cmFuc2Zvcm0uam9pbihcIixcIil9KWA7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2NhbGUsIG93bk1hdHJpeDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBkYXRhIG9mIGFubm90YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudHMgPSBkaXYucXVlcnlTZWxlY3RvckFsbChgW2RhdGEtYW5ub3RhdGlvbi1pZD1cIiR7ZGF0YS5pZH1cIl1gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmhhc093bkNhbnZhcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlY3QgPSBfdXRpbC5VdGlsLm5vcm1hbGl6ZVJlY3QoW2RhdGEucmVjdFswXSwgcGFnZS52aWV3WzNdIC0gZGF0YS5yZWN0WzFdICsgcGFnZS52aWV3WzFdLCBkYXRhLnJlY3RbMl0sIHBhZ2Uudmlld1szXSAtIGRhdGEucmVjdFszXSArIHBhZ2Uudmlld1sxXV0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvd25NYXRyaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUgPSBNYXRoLmFicyh0cmFuc2Zvcm1bMF0gfHwgdHJhbnNmb3JtWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3duVHJhbnNmb3JtID0gdHJhbnNmb3JtLnNsaWNlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG93blRyYW5zZm9ybVtpXSA9IE1hdGguc2lnbihvd25UcmFuc2Zvcm1baV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3duTWF0cml4ID0gYG1hdHJpeCgke293blRyYW5zZm9ybS5qb2luKFwiLFwiKX0pYDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZWZ0ID0gcmVjdFswXSAqIHNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvcCA9IHJlY3RbMV0gKiBzY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSBgJHtsZWZ0fXB4YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLnRvcCA9IGAke3RvcH1weGA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBgJHstbGVmdH1weCAkey10b3B9cHhgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gb3duTWF0cml4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IG1hdHJpeDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jc2V0QW5ub3RhdGlvbkNhbnZhc01hcChkaXYsIGFubm90YXRpb25DYW52YXNNYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGl2LmhpZGRlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhdGljICNzZXRBbm5vdGF0aW9uQ2FudmFzTWFwKGRpdiwgYW5ub3RhdGlvbkNhbnZhc01hcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbm5vdGF0aW9uQ2FudmFzTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtpZCwgY2FudmFzXSBvZiBhbm5vdGF0aW9uQ2FudmFzTWFwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGRpdi5xdWVyeVNlbGVjdG9yKGBbZGF0YS1hbm5vdGF0aW9uLWlkPVwiJHtpZH1cIl1gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0Q2hpbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ID0gZWxlbWVudDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdENoaWxkLm5vZGVOYW1lID09PSBcIkNBTlZBU1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucmVwbGFjZUNoaWxkKGNhbnZhcywgZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5pbnNlcnRCZWZvcmUoY2FudmFzLCBmaXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFubm90YXRpb25DYW52YXNNYXAuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXhwb3J0cy5Bbm5vdGF0aW9uTGF5ZXIgPSBBbm5vdGF0aW9uTGF5ZXI7XG5cbiAgICAgICAgICAgICAgICAvKioqLyB9KSxcbiAgICAgICAgICAgIC8qIDE5ICovXG4gICAgICAgICAgICAvKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cblxuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLkNvbG9yQ29udmVydGVycyA9IHZvaWQgMDtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG1ha2VDb2xvckNvbXAobikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBuKSkgKiAyNTUpLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgQ29sb3JDb252ZXJ0ZXJzIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljIENNWUtfRyhbYywgeSwgbSwga10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXCJHXCIsIDEgLSBNYXRoLm1pbigxLCAwLjMgKiBjICsgMC41OSAqIG0gKyAwLjExICogeSArIGspXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN0YXRpYyBHX0NNWUsoW2ddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1wiQ01ZS1wiLCAwLCAwLCAwLCAxIC0gZ107XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzdGF0aWMgR19SR0IoW2ddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1wiUkdCXCIsIGcsIGcsIGddO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhdGljIEdfSFRNTChbZ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IEcgPSBtYWtlQ29sb3JDb21wKGcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAjJHtHfSR7R30ke0d9YDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN0YXRpYyBSR0JfRyhbciwgZywgYl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXCJHXCIsIDAuMyAqIHIgKyAwLjU5ICogZyArIDAuMTEgKiBiXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN0YXRpYyBSR0JfSFRNTChbciwgZywgYl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFIgPSBtYWtlQ29sb3JDb21wKHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgRyA9IG1ha2VDb2xvckNvbXAoZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBCID0gbWFrZUNvbG9yQ29tcChiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgIyR7Un0ke0d9JHtCfWA7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzdGF0aWMgVF9IVE1MKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiIzAwMDAwMDAwXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzdGF0aWMgQ01ZS19SR0IoW2MsIHksIG0sIGtdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1wiUkdCXCIsIDEgLSBNYXRoLm1pbigxLCBjICsgayksIDEgLSBNYXRoLm1pbigxLCBtICsgayksIDEgLSBNYXRoLm1pbigxLCB5ICsgayldO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhdGljIENNWUtfSFRNTChjb21wb25lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5SR0JfSFRNTCh0aGlzLkNNWUtfUkdCKGNvbXBvbmVudHMpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN0YXRpYyBSR0JfQ01ZSyhbciwgZywgYl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGMgPSAxIC0gcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG0gPSAxIC0gZztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHkgPSAxIC0gYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGsgPSBNYXRoLm1pbihjLCBtLCB5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXCJDTVlLXCIsIGMsIG0sIHksIGtdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLkNvbG9yQ29udmVydGVycyA9IENvbG9yQ29udmVydGVycztcblxuICAgICAgICAgICAgICAgIC8qKiovIH0pLFxuICAgICAgICAgICAgLyogMjAgKi9cbiAgICAgICAgICAgIC8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXG5cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuWGZhTGF5ZXIgPSB2b2lkIDA7XG5cbiAgICAgICAgICAgICAgICB2YXIgX3hmYV90ZXh0ID0gX193X3BkZmpzX3JlcXVpcmVfXygxNyk7XG5cbiAgICAgICAgICAgICAgICBjbGFzcyBYZmFMYXllciB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRpYyBzZXR1cFN0b3JhZ2UoaHRtbCwgaWQsIGVsZW1lbnQsIHN0b3JhZ2UsIGludGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RvcmVkRGF0YSA9IHN0b3JhZ2UuZ2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZWxlbWVudC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdG9yZWREYXRhLnZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sLnRleHRDb250ZW50ID0gc3RvcmVkRGF0YS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnRlbnQgPT09IFwicHJpbnRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBldmVudCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5hdHRyaWJ1dGVzLnR5cGUgPT09IFwicmFkaW9cIiB8fCBlbGVtZW50LmF0dHJpYnV0ZXMudHlwZSA9PT0gXCJjaGVja2JveFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RvcmVkRGF0YS52YWx1ZSA9PT0gZWxlbWVudC5hdHRyaWJ1dGVzLnhmYU9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbC5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdG9yZWREYXRhLnZhbHVlID09PSBlbGVtZW50LmF0dHJpYnV0ZXMueGZhT2ZmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVBdHRyaWJ1dGUoXCJjaGVja2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZW50ID09PSBcInByaW50XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBldmVudC50YXJnZXQuY2hlY2tlZCA/IGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ4ZmFPblwiKSA6IGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ4ZmFPZmZcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0b3JlZERhdGEudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIHN0b3JlZERhdGEudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZW50ID09PSBcInByaW50XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0b3JlZERhdGEudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIGVsZW1lbnQuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmF0dHJpYnV0ZXMudmFsdWUgPT09IHN0b3JlZERhdGEudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uLmF0dHJpYnV0ZXMuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBldmVudC50YXJnZXQub3B0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9ucy5zZWxlY3RlZEluZGV4ID09PSAtMSA/IFwiXCIgOiBvcHRpb25zW29wdGlvbnMuc2VsZWN0ZWRJbmRleF0udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzdGF0aWMgc2V0QXR0cmlidXRlcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2UgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua1NlcnZpY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gPSBlbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNIVE1MQW5jaG9yRWxlbWVudCA9IGh0bWwgaW5zdGFuY2VvZiBIVE1MQW5jaG9yRWxlbWVudDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMudHlwZSA9PT0gXCJyYWRpb1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcy5uYW1lID0gYCR7YXR0cmlidXRlcy5uYW1lfS0ke2ludGVudH1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhhdHRyaWJ1dGVzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IGtleSA9PT0gXCJkYXRhSWRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSBcInN0eWxlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gXCJ0ZXh0Q29udGVudFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sLnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcImNsYXNzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlLmpvaW4oXCIgXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0hUTUxBbmNob3JFbGVtZW50ICYmIChrZXkgPT09IFwiaHJlZlwiIHx8IGtleSA9PT0gXCJuZXdXaW5kb3dcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGh0bWwuc3R5bGUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0hUTUxBbmNob3JFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua1NlcnZpY2UuYWRkTGlua0F0dHJpYnV0ZXMoaHRtbCwgYXR0cmlidXRlcy5ocmVmLCBhdHRyaWJ1dGVzLm5ld1dpbmRvdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdG9yYWdlICYmIGF0dHJpYnV0ZXMuZGF0YUlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR1cFN0b3JhZ2UoaHRtbCwgYXR0cmlidXRlcy5kYXRhSWQsIGVsZW1lbnQsIHN0b3JhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhdGljIHJlbmRlcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdG9yYWdlID0gcGFyYW1ldGVycy5hbm5vdGF0aW9uU3RvcmFnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtTZXJ2aWNlID0gcGFyYW1ldGVycy5saW5rU2VydmljZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvb3QgPSBwYXJhbWV0ZXJzLnhmYUh0bWw7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnRlbnQgPSBwYXJhbWV0ZXJzLmludGVudCB8fCBcImRpc3BsYXlcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvb3RIdG1sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChyb290Lm5hbWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocm9vdC5hdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDogcm9vdEh0bWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHJvb3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlua1NlcnZpY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhY2sgPSBbW3Jvb3QsIC0xLCByb290SHRtbF1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm9vdERpdiA9IHBhcmFtZXRlcnMuZGl2O1xuICAgICAgICAgICAgICAgICAgICAgICAgcm9vdERpdi5hcHBlbmRDaGlsZChyb290SHRtbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLnZpZXdwb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gYG1hdHJpeCgke3BhcmFtZXRlcnMudmlld3BvcnQudHJhbnNmb3JtLmpvaW4oXCIsXCIpfSlgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3REaXYuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZW50ICE9PSBcInJpY2hUZXh0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290RGl2LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwieGZhTGF5ZXIgeGZhRm9udFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dERpdnMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbcGFyZW50LCBpLCBodG1sXSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgKyAxID09PSBwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IHBhcmVudC5jaGlsZHJlblsrK3N0YWNrW3N0YWNrLmxlbmd0aCAtIDFdWzFdXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ID0gY2hpbGQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gXCIjdGV4dFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjaGlsZC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHREaXZzLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGlsZEh0bWw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQ/LmF0dHJpYnV0ZXM/LnhtbG5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkSHRtbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhjaGlsZC5hdHRyaWJ1dGVzLnhtbG5zLCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEh0bWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2hpbGRIdG1sKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5hdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sOiBjaGlsZEh0bWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBjaGlsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rU2VydmljZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQuY2hpbGRyZW4gJiYgY2hpbGQuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKFtjaGlsZCwgLTEsIGNoaWxkSHRtbF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNoaWxkLnZhbHVlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3hmYV90ZXh0LlhmYVRleHQuc2hvdWxkQnVpbGRUZXh0KG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0RGl2cy5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRIdG1sLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbCBvZiByb290RGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCIueGZhTm9uSW50ZXJhY3RpdmUgaW5wdXQsIC54ZmFOb25JbnRlcmFjdGl2ZSB0ZXh0YXJlYVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShcInJlYWRPbmx5XCIsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHREaXZzXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhdGljIHVwZGF0ZShwYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBgbWF0cml4KCR7cGFyYW1ldGVycy52aWV3cG9ydC50cmFuc2Zvcm0uam9pbihcIixcIil9KWA7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLmRpdi5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLmRpdi5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXhwb3J0cy5YZmFMYXllciA9IFhmYUxheWVyO1xuXG4gICAgICAgICAgICAgICAgLyoqKi8gfSksXG4gICAgICAgICAgICAvKiAyMSAqL1xuICAgICAgICAgICAgLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgPT4ge1xuXG5cblxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5yZW5kZXJUZXh0TGF5ZXIgPSByZW5kZXJUZXh0TGF5ZXI7XG5cbiAgICAgICAgICAgICAgICB2YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgTUFYX1RFWFRfRElWU19UT19SRU5ERVIgPSAxMDAwMDA7XG4gICAgICAgICAgICAgICAgY29uc3QgREVGQVVMVF9GT05UX1NJWkUgPSAzMDtcbiAgICAgICAgICAgICAgICBjb25zdCBERUZBVUxUX0ZPTlRfQVNDRU5UID0gMC44O1xuICAgICAgICAgICAgICAgIGNvbnN0IGFzY2VudENhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IEFsbFdoaXRlc3BhY2VSZWdleHAgPSAvXlxccyskL2c7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRBc2NlbnQoZm9udEZhbWlseSwgY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlZEFzY2VudCA9IGFzY2VudENhY2hlLmdldChmb250RmFtaWx5KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FjaGVkQXNjZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkQXNjZW50O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmZvbnQgPSBgJHtERUZBVUxUX0ZPTlRfU0laRX1weCAke2ZvbnRGYW1pbHl9YDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWV0cmljcyA9IGN0eC5tZWFzdXJlVGV4dChcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFzY2VudCA9IG1ldHJpY3MuZm9udEJvdW5kaW5nQm94QXNjZW50O1xuICAgICAgICAgICAgICAgICAgICBsZXQgZGVzY2VudCA9IE1hdGguYWJzKG1ldHJpY3MuZm9udEJvdW5kaW5nQm94RGVzY2VudCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFzY2VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhdGlvID0gYXNjZW50IC8gKGFzY2VudCArIGRlc2NlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNjZW50Q2FjaGUuc2V0KGZvbnRGYW1pbHksIHJhdGlvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByYXRpbztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwicmVkXCI7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgREVGQVVMVF9GT05UX1NJWkUsIERFRkFVTFRfRk9OVF9TSVpFKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZVRleHQoXCJnXCIsIDAsIDApO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcGl4ZWxzID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCBERUZBVUxUX0ZPTlRfU0laRSwgREVGQVVMVF9GT05UX1NJWkUpLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGRlc2NlbnQgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBwaXhlbHMubGVuZ3RoIC0gMSAtIDM7IGkgPj0gMDsgaSAtPSA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGl4ZWxzW2ldID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NlbnQgPSBNYXRoLmNlaWwoaSAvIDQgLyBERUZBVUxUX0ZPTlRfU0laRSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIERFRkFVTFRfRk9OVF9TSVpFLCBERUZBVUxUX0ZPTlRfU0laRSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2VUZXh0KFwiQVwiLCAwLCBERUZBVUxUX0ZPTlRfU0laRSk7XG4gICAgICAgICAgICAgICAgICAgIHBpeGVscyA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgREVGQVVMVF9GT05UX1NJWkUsIERFRkFVTFRfRk9OVF9TSVpFKS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICBhc2NlbnQgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHBpeGVscy5sZW5ndGg7IGkgPCBpaTsgaSArPSA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGl4ZWxzW2ldID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzY2VudCA9IERFRkFVTFRfRk9OVF9TSVpFIC0gTWF0aC5mbG9vcihpIC8gNCAvIERFRkFVTFRfRk9OVF9TSVpFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFzY2VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmF0aW8gPSBhc2NlbnQgLyAoYXNjZW50ICsgZGVzY2VudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc2NlbnRDYWNoZS5zZXQoZm9udEZhbWlseSwgcmF0aW8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJhdGlvO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYXNjZW50Q2FjaGUuc2V0KGZvbnRGYW1pbHksIERFRkFVTFRfRk9OVF9BU0NFTlQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gREVGQVVMVF9GT05UX0FTQ0VOVDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhcHBlbmRUZXh0KHRhc2ssIGdlb20sIHN0eWxlcywgY3R4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dERpdlByb3BlcnRpZXMgPSB0YXNrLl9lbmhhbmNlVGV4dFNlbGVjdGlvbiA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ2xlOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzV2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNUZXh0OiBnZW9tLnN0ciAhPT0gXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0VPTDogZ2VvbS5oYXNFT0wsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbFRyYW5zZm9ybTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmdCb3R0b206IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmdUb3A6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2FsZTogMVxuICAgICAgICAgICAgICAgICAgICB9IDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5nbGU6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW52YXNXaWR0aDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc1RleHQ6IGdlb20uc3RyICE9PSBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzRU9MOiBnZW9tLmhhc0VPTFxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHRhc2suX3RleHREaXZzLnB1c2godGV4dERpdik7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHggPSBfdXRpbC5VdGlsLnRyYW5zZm9ybSh0YXNrLl92aWV3cG9ydC50cmFuc2Zvcm0sIGdlb20udHJhbnNmb3JtKTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgYW5nbGUgPSBNYXRoLmF0YW4yKHR4WzFdLCB0eFswXSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gc3R5bGVzW2dlb20uZm9udE5hbWVdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHlsZS52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5nbGUgKz0gTWF0aC5QSSAvIDI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmb250SGVpZ2h0ID0gTWF0aC5oeXBvdCh0eFsyXSwgdHhbM10pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmb250QXNjZW50ID0gZm9udEhlaWdodCAqIGdldEFzY2VudChzdHlsZS5mb250RmFtaWx5LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGVmdCwgdG9wO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmdsZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCA9IHR4WzRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wID0gdHhbNV0gLSBmb250QXNjZW50O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCA9IHR4WzRdICsgZm9udEFzY2VudCAqIE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcCA9IHR4WzVdIC0gZm9udEFzY2VudCAqIE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRleHREaXYuc3R5bGUubGVmdCA9IGAke2xlZnR9cHhgO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0RGl2LnN0eWxlLnRvcCA9IGAke3RvcH1weGA7XG4gICAgICAgICAgICAgICAgICAgIHRleHREaXYuc3R5bGUuZm9udFNpemUgPSBgJHtmb250SGVpZ2h0fXB4YDtcbiAgICAgICAgICAgICAgICAgICAgdGV4dERpdi5zdHlsZS5mb250RmFtaWx5ID0gc3R5bGUuZm9udEZhbWlseTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dERpdi5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwicHJlc2VudGF0aW9uXCIpO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0RGl2LnRleHRDb250ZW50ID0gZ2VvbS5zdHI7XG4gICAgICAgICAgICAgICAgICAgIHRleHREaXYuZGlyID0gZ2VvbS5kaXI7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhc2suX2ZvbnRJbnNwZWN0b3JFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0RGl2LmRhdGFzZXQuZm9udE5hbWUgPSBnZW9tLmZvbnROYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ2xlICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0RGl2UHJvcGVydGllcy5hbmdsZSA9IGFuZ2xlICogKDE4MCAvIE1hdGguUEkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHNob3VsZFNjYWxlVGV4dCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChnZW9tLnN0ci5sZW5ndGggPiAxIHx8IHRhc2suX2VuaGFuY2VUZXh0U2VsZWN0aW9uICYmIEFsbFdoaXRlc3BhY2VSZWdleHAudGVzdChnZW9tLnN0cikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFNjYWxlVGV4dCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZ2VvbS5zdHIgIT09IFwiIFwiICYmIGdlb20udHJhbnNmb3JtWzBdICE9PSBnZW9tLnRyYW5zZm9ybVszXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWJzU2NhbGVYID0gTWF0aC5hYnMoZ2VvbS50cmFuc2Zvcm1bMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFic1NjYWxlWSA9IE1hdGguYWJzKGdlb20udHJhbnNmb3JtWzNdKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFic1NjYWxlWCAhPT0gYWJzU2NhbGVZICYmIE1hdGgubWF4KGFic1NjYWxlWCwgYWJzU2NhbGVZKSAvIE1hdGgubWluKGFic1NjYWxlWCwgYWJzU2NhbGVZKSA+IDEuNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFNjYWxlVGV4dCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hvdWxkU2NhbGVUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGUudmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0RGl2UHJvcGVydGllcy5jYW52YXNXaWR0aCA9IGdlb20uaGVpZ2h0ICogdGFzay5fdmlld3BvcnQuc2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHREaXZQcm9wZXJ0aWVzLmNhbnZhc1dpZHRoID0gZ2VvbS53aWR0aCAqIHRhc2suX3ZpZXdwb3J0LnNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGFzay5fdGV4dERpdlByb3BlcnRpZXMuc2V0KHRleHREaXYsIHRleHREaXZQcm9wZXJ0aWVzKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGFzay5fdGV4dENvbnRlbnRTdHJlYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2suX2xheW91dFRleHQodGV4dERpdik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGFzay5fZW5oYW5jZVRleHRTZWxlY3Rpb24gJiYgdGV4dERpdlByb3BlcnRpZXMuaGFzVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFuZ2xlQ29zID0gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmdsZVNpbiA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmdsZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ2xlQ29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ2xlU2luID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXZXaWR0aCA9IChzdHlsZS52ZXJ0aWNhbCA/IGdlb20uaGVpZ2h0IDogZ2VvbS53aWR0aCkgKiB0YXNrLl92aWV3cG9ydC5zY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpdkhlaWdodCA9IGZvbnRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbSwgYjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuZ2xlICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSA9IFthbmdsZUNvcywgYW5nbGVTaW4sIC1hbmdsZVNpbiwgYW5nbGVDb3MsIGxlZnQsIHRvcF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYiA9IF91dGlsLlV0aWwuZ2V0QXhpYWxBbGlnbmVkQm91bmRpbmdCb3goWzAsIDAsIGRpdldpZHRoLCBkaXZIZWlnaHRdLCBtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYiA9IFtsZWZ0LCB0b3AsIGxlZnQgKyBkaXZXaWR0aCwgdG9wICsgZGl2SGVpZ2h0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGFzay5fYm91bmRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGJbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBiWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBiWzJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogYlszXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXY6IHRleHREaXYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogW2RpdldpZHRoLCBkaXZIZWlnaHRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVuZGVyKHRhc2spIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhc2suX2NhbmNlbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0RGl2cyA9IHRhc2suX3RleHREaXZzO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYXBhYmlsaXR5ID0gdGFzay5fY2FwYWJpbGl0eTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dERpdnNMZW5ndGggPSB0ZXh0RGl2cy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRleHREaXZzTGVuZ3RoID4gTUFYX1RFWFRfRElWU19UT19SRU5ERVIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2suX3JlbmRlcmluZ0RvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRhc2suX3RleHRDb250ZW50U3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHREaXZzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrLl9sYXlvdXRUZXh0KHRleHREaXZzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRhc2suX3JlbmRlcmluZ0RvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBmaW5kUG9zaXRpdmVNaW4odHMsIG9mZnNldCwgY291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gdHNbb2Zmc2V0KytdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQgPyBNYXRoLm1pbih0LCByZXN1bHQpIDogdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZXhwYW5kKHRhc2spIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm91bmRzID0gdGFzay5fYm91bmRzO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2aWV3cG9ydCA9IHRhc2suX3ZpZXdwb3J0O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBleHBhbmRlZCA9IGV4cGFuZEJvdW5kcyh2aWV3cG9ydC53aWR0aCwgdmlld3BvcnQuaGVpZ2h0LCBib3VuZHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXhwYW5kZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpdiA9IGJvdW5kc1tpXS5kaXY7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpdlByb3BlcnRpZXMgPSB0YXNrLl90ZXh0RGl2UHJvcGVydGllcy5nZXQoZGl2KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpdlByb3BlcnRpZXMuYW5nbGUgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXZQcm9wZXJ0aWVzLnBhZGRpbmdMZWZ0ID0gYm91bmRzW2ldLmxlZnQgLSBleHBhbmRlZFtpXS5sZWZ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpdlByb3BlcnRpZXMucGFkZGluZ1RvcCA9IGJvdW5kc1tpXS50b3AgLSBleHBhbmRlZFtpXS50b3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGl2UHJvcGVydGllcy5wYWRkaW5nUmlnaHQgPSBleHBhbmRlZFtpXS5yaWdodCAtIGJvdW5kc1tpXS5yaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXZQcm9wZXJ0aWVzLnBhZGRpbmdCb3R0b20gPSBleHBhbmRlZFtpXS5ib3R0b20gLSBib3VuZHNbaV0uYm90dG9tO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFzay5fdGV4dERpdlByb3BlcnRpZXMuc2V0KGRpdiwgZGl2UHJvcGVydGllcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IGV4cGFuZGVkW2ldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBib3VuZHNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtID0gYi5tLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBtWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBtWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9pbnRzID0gW1swLCAwXSwgWzAsIGIuc2l6ZVsxXV0sIFtiLnNpemVbMF0sIDBdLCBiLnNpemVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHMgPSBuZXcgRmxvYXQ2NEFycmF5KDY0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGpqID0gcG9pbnRzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShwb2ludHNbal0sIG0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHNbaiArIDBdID0gYyAmJiAoZS5sZWZ0IC0gdFswXSkgLyBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRzW2ogKyA0XSA9IHMgJiYgKGUudG9wIC0gdFsxXSkgLyBzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRzW2ogKyA4XSA9IGMgJiYgKGUucmlnaHQgLSB0WzBdKSAvIGM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHNbaiArIDEyXSA9IHMgJiYgKGUuYm90dG9tIC0gdFsxXSkgLyBzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRzW2ogKyAxNl0gPSBzICYmIChlLmxlZnQgLSB0WzBdKSAvIC1zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRzW2ogKyAyMF0gPSBjICYmIChlLnRvcCAtIHRbMV0pIC8gYztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0c1tqICsgMjRdID0gcyAmJiAoZS5yaWdodCAtIHRbMF0pIC8gLXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHNbaiArIDI4XSA9IGMgJiYgKGUuYm90dG9tIC0gdFsxXSkgLyBjO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRzW2ogKyAzMl0gPSBjICYmIChlLmxlZnQgLSB0WzBdKSAvIC1jO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRzW2ogKyAzNl0gPSBzICYmIChlLnRvcCAtIHRbMV0pIC8gLXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHNbaiArIDQwXSA9IGMgJiYgKGUucmlnaHQgLSB0WzBdKSAvIC1jO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRzW2ogKyA0NF0gPSBzICYmIChlLmJvdHRvbSAtIHRbMV0pIC8gLXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHNbaiArIDQ4XSA9IHMgJiYgKGUubGVmdCAtIHRbMF0pIC8gcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0c1tqICsgNTJdID0gYyAmJiAoZS50b3AgLSB0WzFdKSAvIC1jO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRzW2ogKyA1Nl0gPSBzICYmIChlLnJpZ2h0IC0gdFswXSkgLyBzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRzW2ogKyA2MF0gPSBjICYmIChlLmJvdHRvbSAtIHRbMV0pIC8gLWM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJveFNjYWxlID0gMSArIE1hdGgubWluKE1hdGguYWJzKGMpLCBNYXRoLmFicyhzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXZQcm9wZXJ0aWVzLnBhZGRpbmdMZWZ0ID0gZmluZFBvc2l0aXZlTWluKHRzLCAzMiwgMTYpIC8gYm94U2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXZQcm9wZXJ0aWVzLnBhZGRpbmdUb3AgPSBmaW5kUG9zaXRpdmVNaW4odHMsIDQ4LCAxNikgLyBib3hTY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpdlByb3BlcnRpZXMucGFkZGluZ1JpZ2h0ID0gZmluZFBvc2l0aXZlTWluKHRzLCAwLCAxNikgLyBib3hTY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpdlByb3BlcnRpZXMucGFkZGluZ0JvdHRvbSA9IGZpbmRQb3NpdGl2ZU1pbih0cywgMTYsIDE2KSAvIGJveFNjYWxlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrLl90ZXh0RGl2UHJvcGVydGllcy5zZXQoZGl2LCBkaXZQcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGV4cGFuZEJvdW5kcyh3aWR0aCwgaGVpZ2h0LCBib3hlcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBib3VuZHMgPSBib3hlcy5tYXAoZnVuY3Rpb24gKGJveCwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MTogYm94LmxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTE6IGJveC50b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDI6IGJveC5yaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MjogYm94LmJvdHRvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MU5ldzogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyTmV3OiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBleHBhbmRCb3VuZHNMVFIod2lkdGgsIGJvdW5kcyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4cGFuZGVkID0gbmV3IEFycmF5KGJveGVzLmxlbmd0aCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBiIG9mIGJvdW5kcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IGIuaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZFtpXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBiLngxTmV3LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodDogYi54Mk5ldyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3R0b206IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBib3hlcy5tYXAoZnVuY3Rpb24gKGJveCwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IGV4cGFuZGVkW2ldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBib3VuZHNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBiLngxID0gYm94LnRvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGIueTEgPSB3aWR0aCAtIGUucmlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBiLngyID0gYm94LmJvdHRvbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGIueTIgPSB3aWR0aCAtIGUubGVmdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGIuaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYi54MU5ldyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGIueDJOZXcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBleHBhbmRCb3VuZHNMVFIoaGVpZ2h0LCBib3VuZHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYiBvZiBib3VuZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBiLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kZWRbaV0udG9wID0gYi54MU5ldztcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkW2ldLmJvdHRvbSA9IGIueDJOZXc7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhwYW5kZWQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZXhwYW5kQm91bmRzTFRSKHdpZHRoLCBib3VuZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgYm91bmRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLngxIC0gYi54MSB8fCBhLmluZGV4IC0gYi5pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZha2VCb3VuZGFyeSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxOiAtSW5maW5pdHksXG4gICAgICAgICAgICAgICAgICAgICAgICB5MTogLUluZmluaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgeDI6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB5MjogSW5maW5pdHksXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogLTEsXG4gICAgICAgICAgICAgICAgICAgICAgICB4MU5ldzogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyTmV3OiAwXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhvcml6b24gPSBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IC1JbmZpbml0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogSW5maW5pdHksXG4gICAgICAgICAgICAgICAgICAgICAgICBib3VuZGFyeTogZmFrZUJvdW5kYXJ5XG4gICAgICAgICAgICAgICAgICAgIH1dO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYm91bmRhcnkgb2YgYm91bmRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaSA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChpIDwgaG9yaXpvbi5sZW5ndGggJiYgaG9yaXpvbltpXS5lbmQgPD0gYm91bmRhcnkueTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqID0gaG9yaXpvbi5sZW5ndGggLSAxO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaiA+PSAwICYmIGhvcml6b25bal0uc3RhcnQgPj0gYm91bmRhcnkueTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqLS07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBob3Jpem9uUGFydCwgYWZmZWN0ZWRCb3VuZGFyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4WE5ldyA9IC1JbmZpbml0eTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChxID0gaTsgcSA8PSBqOyBxKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3Jpem9uUGFydCA9IGhvcml6b25bcV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZmZWN0ZWRCb3VuZGFyeSA9IGhvcml6b25QYXJ0LmJvdW5kYXJ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4TmV3O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFmZmVjdGVkQm91bmRhcnkueDIgPiBib3VuZGFyeS54MSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4TmV3ID0gYWZmZWN0ZWRCb3VuZGFyeS5pbmRleCA+IGJvdW5kYXJ5LmluZGV4ID8gYWZmZWN0ZWRCb3VuZGFyeS54MU5ldyA6IGJvdW5kYXJ5LngxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWZmZWN0ZWRCb3VuZGFyeS54Mk5ldyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhOZXcgPSAoYWZmZWN0ZWRCb3VuZGFyeS54MiArIGJvdW5kYXJ5LngxKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeE5ldyA9IGFmZmVjdGVkQm91bmRhcnkueDJOZXc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhOZXcgPiBtYXhYTmV3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFhOZXcgPSB4TmV3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRhcnkueDFOZXcgPSBtYXhYTmV3O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHEgPSBpOyBxIDw9IGo7IHErKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvcml6b25QYXJ0ID0gaG9yaXpvbltxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZmZlY3RlZEJvdW5kYXJ5ID0gaG9yaXpvblBhcnQuYm91bmRhcnk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWZmZWN0ZWRCb3VuZGFyeS54Mk5ldyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZmZlY3RlZEJvdW5kYXJ5LngyID4gYm91bmRhcnkueDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZmZlY3RlZEJvdW5kYXJ5LmluZGV4ID4gYm91bmRhcnkuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZmZlY3RlZEJvdW5kYXJ5LngyTmV3ID0gYWZmZWN0ZWRCb3VuZGFyeS54MjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmZmVjdGVkQm91bmRhcnkueDJOZXcgPSBtYXhYTmV3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhZmZlY3RlZEJvdW5kYXJ5LngyTmV3ID4gbWF4WE5ldykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZmZlY3RlZEJvdW5kYXJ5LngyTmV3ID0gTWF0aC5tYXgobWF4WE5ldywgYWZmZWN0ZWRCb3VuZGFyeS54Mik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2VkSG9yaXpvbiA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxhc3RCb3VuZGFyeSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocSA9IGk7IHEgPD0gajsgcSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9yaXpvblBhcnQgPSBob3Jpem9uW3FdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmZmVjdGVkQm91bmRhcnkgPSBob3Jpem9uUGFydC5ib3VuZGFyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1c2VCb3VuZGFyeSA9IGFmZmVjdGVkQm91bmRhcnkueDIgPiBib3VuZGFyeS54MiA/IGFmZmVjdGVkQm91bmRhcnkgOiBib3VuZGFyeTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXN0Qm91bmRhcnkgPT09IHVzZUJvdW5kYXJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZWRIb3Jpem9uW2NoYW5nZWRIb3Jpem9uLmxlbmd0aCAtIDFdLmVuZCA9IGhvcml6b25QYXJ0LmVuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkSG9yaXpvbi5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBob3Jpem9uUGFydC5zdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogaG9yaXpvblBhcnQuZW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRhcnk6IHVzZUJvdW5kYXJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0Qm91bmRhcnkgPSB1c2VCb3VuZGFyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob3Jpem9uW2ldLnN0YXJ0IDwgYm91bmRhcnkueTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkSG9yaXpvblswXS5zdGFydCA9IGJvdW5kYXJ5LnkxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZWRIb3Jpem9uLnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogaG9yaXpvbltpXS5zdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBib3VuZGFyeS55MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRhcnk6IGhvcml6b25baV0uYm91bmRhcnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJvdW5kYXJ5LnkyIDwgaG9yaXpvbltqXS5lbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkSG9yaXpvbltjaGFuZ2VkSG9yaXpvbi5sZW5ndGggLSAxXS5lbmQgPSBib3VuZGFyeS55MjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkSG9yaXpvbi5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGJvdW5kYXJ5LnkyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGhvcml6b25bal0uZW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3VuZGFyeTogaG9yaXpvbltqXS5ib3VuZGFyeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHEgPSBpOyBxIDw9IGo7IHErKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvcml6b25QYXJ0ID0gaG9yaXpvbltxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZmZlY3RlZEJvdW5kYXJ5ID0gaG9yaXpvblBhcnQuYm91bmRhcnk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWZmZWN0ZWRCb3VuZGFyeS54Mk5ldyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1c2VkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSBpIC0gMTsgIXVzZWQgJiYgayA+PSAwICYmIGhvcml6b25ba10uc3RhcnQgPj0gYWZmZWN0ZWRCb3VuZGFyeS55MTsgay0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgPSBob3Jpem9uW2tdLmJvdW5kYXJ5ID09PSBhZmZlY3RlZEJvdW5kYXJ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoayA9IGogKyAxOyAhdXNlZCAmJiBrIDwgaG9yaXpvbi5sZW5ndGggJiYgaG9yaXpvbltrXS5lbmQgPD0gYWZmZWN0ZWRCb3VuZGFyeS55MjsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgPSBob3Jpem9uW2tdLmJvdW5kYXJ5ID09PSBhZmZlY3RlZEJvdW5kYXJ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoayA9IDA7ICF1c2VkICYmIGsgPCBjaGFuZ2VkSG9yaXpvbi5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkID0gY2hhbmdlZEhvcml6b25ba10uYm91bmRhcnkgPT09IGFmZmVjdGVkQm91bmRhcnk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1c2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmZmVjdGVkQm91bmRhcnkueDJOZXcgPSBtYXhYTmV3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNwbGljZS5hcHBseShob3Jpem9uLCBbaSwgaiAtIGkgKyAxXS5jb25jYXQoY2hhbmdlZEhvcml6b24pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaG9yaXpvblBhcnQgb2YgaG9yaXpvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWZmZWN0ZWRCb3VuZGFyeSA9IGhvcml6b25QYXJ0LmJvdW5kYXJ5O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWZmZWN0ZWRCb3VuZGFyeS54Mk5ldyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZmZWN0ZWRCb3VuZGFyeS54Mk5ldyA9IE1hdGgubWF4KHdpZHRoLCBhZmZlY3RlZEJvdW5kYXJ5LngyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIFRleHRMYXllclJlbmRlclRhc2sge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Q29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRDb250ZW50U3RyZWFtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0RGl2cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRDb250ZW50SXRlbXNTdHIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmhhbmNlVGV4dFNlbGVjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXh0Q29udGVudCA9IHRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGV4dENvbnRlbnRTdHJlYW0gPSB0ZXh0Q29udGVudFN0cmVhbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RvY3VtZW50ID0gY29udGFpbmVyLm93bmVyRG9jdW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92aWV3cG9ydCA9IHZpZXdwb3J0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGV4dERpdnMgPSB0ZXh0RGl2cyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RleHRDb250ZW50SXRlbXNTdHIgPSB0ZXh0Q29udGVudEl0ZW1zU3RyIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5oYW5jZVRleHRTZWxlY3Rpb24gPSAhIWVuaGFuY2VUZXh0U2VsZWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZm9udEluc3BlY3RvckVuYWJsZWQgPSAhIWdsb2JhbFRoaXMuRm9udEluc3BlY3Rvcj8uZW5hYmxlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXlvdXRUZXh0TGFzdEZvbnRTaXplID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xheW91dFRleHRMYXN0Rm9udEZhbWlseSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXlvdXRUZXh0Q3R4ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RleHREaXZQcm9wZXJ0aWVzID0gbmV3IFdlYWtNYXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmluZ0RvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbmNlbGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyVGltZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYm91bmRzID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhcGFiaWxpdHkucHJvbWlzZS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2VuaGFuY2VUZXh0U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RleHREaXZQcm9wZXJ0aWVzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fbGF5b3V0VGV4dEN0eCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXlvdXRUZXh0Q3R4LmNhbnZhcy53aWR0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xheW91dFRleHRDdHguY2FudmFzLmhlaWdodCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xheW91dFRleHRDdHggPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKCgpID0+IHt9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBwcm9taXNlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbmNlbGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3JlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRlci5jYW5jZWwobmV3IF91dGlsLkFib3J0RXhjZXB0aW9uKFwiVGV4dExheWVyIHRhc2sgY2FuY2VsbGVkLlwiKSkuY2F0Y2goKCkgPT4ge30pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZGVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3JlbmRlclRpbWVyICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3JlbmRlclRpbWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJUaW1lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhcGFiaWxpdHkucmVqZWN0KG5ldyBFcnJvcihcIlRleHRMYXllciB0YXNrIGNhbmNlbGxlZC5cIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX3Byb2Nlc3NJdGVtcyhpdGVtcywgc3R5bGVDYWNoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1zW2ldLnN0ciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtc1tpXS50eXBlID09PSBcImJlZ2luTWFya2VkQ29udGVudFByb3BzXCIgfHwgaXRlbXNbaV0udHlwZSA9PT0gXCJiZWdpbk1hcmtlZENvbnRlbnRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5fY29udGFpbmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwibWFya2VkQ29udGVudFwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1zW2ldLmlkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29udGFpbmVyLnNldEF0dHJpYnV0ZShcImlkXCIsIGAke2l0ZW1zW2ldLmlkfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5fY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtc1tpXS50eXBlID09PSBcImVuZE1hcmtlZENvbnRlbnRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29udGFpbmVyID0gdGhpcy5fY29udGFpbmVyLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXh0Q29udGVudEl0ZW1zU3RyLnB1c2goaXRlbXNbaV0uc3RyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZFRleHQodGhpcywgaXRlbXNbaV0sIHN0eWxlQ2FjaGUsIHRoaXMuX2xheW91dFRleHRDdHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX2xheW91dFRleHQodGV4dERpdikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dERpdlByb3BlcnRpZXMgPSB0aGlzLl90ZXh0RGl2UHJvcGVydGllcy5nZXQodGV4dERpdik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0cmFuc2Zvcm0gPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dERpdlByb3BlcnRpZXMuY2FudmFzV2lkdGggIT09IDAgJiYgdGV4dERpdlByb3BlcnRpZXMuaGFzVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ID0gdGV4dERpdi5zdHlsZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb250U2l6ZSAhPT0gdGhpcy5fbGF5b3V0VGV4dExhc3RGb250U2l6ZSB8fCBmb250RmFtaWx5ICE9PSB0aGlzLl9sYXlvdXRUZXh0TGFzdEZvbnRGYW1pbHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGF5b3V0VGV4dEN0eC5mb250ID0gYCR7Zm9udFNpemV9ICR7Zm9udEZhbWlseX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXlvdXRUZXh0TGFzdEZvbnRTaXplID0gZm9udFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xheW91dFRleHRMYXN0Rm9udEZhbWlseSA9IGZvbnRGYW1pbHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gPSB0aGlzLl9sYXlvdXRUZXh0Q3R4Lm1lYXN1cmVUZXh0KHRleHREaXYudGV4dENvbnRlbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzY2FsZSA9IHRleHREaXZQcm9wZXJ0aWVzLmNhbnZhc1dpZHRoIC8gd2lkdGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2VuaGFuY2VUZXh0U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0RGl2UHJvcGVydGllcy5zY2FsZSA9IHNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtID0gYHNjYWxlWCgke3NjYWxlfSlgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHREaXZQcm9wZXJ0aWVzLmFuZ2xlICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtID0gYHJvdGF0ZSgke3RleHREaXZQcm9wZXJ0aWVzLmFuZ2xlfWRlZykgJHt0cmFuc2Zvcm19YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZm9ybS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2VuaGFuY2VUZXh0U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHREaXZQcm9wZXJ0aWVzLm9yaWdpbmFsVHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHREaXYuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dERpdlByb3BlcnRpZXMuaGFzVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5hcHBlbmRDaGlsZCh0ZXh0RGl2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHREaXZQcm9wZXJ0aWVzLmhhc0VPTCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJwcmVzZW50YXRpb25cIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb250YWluZXIuYXBwZW5kQ2hpbGQoYnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX3JlbmRlcih0aW1lb3V0ID0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdHlsZUNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FudmFzID0gdGhpcy5fZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGNhbnZhcy53aWR0aCA9IERFRkFVTFRfRk9OVF9TSVpFO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLm1vek9wYXF1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXlvdXRUZXh0Q3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxwaGE6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RleHRDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dEl0ZW1zID0gdGhpcy5fdGV4dENvbnRlbnQuaXRlbXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dFN0eWxlcyA9IHRoaXMuX3RleHRDb250ZW50LnN0eWxlcztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3NJdGVtcyh0ZXh0SXRlbXMsIHRleHRTdHlsZXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3RleHRDb250ZW50U3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHVtcCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZGVyLnJlYWQoKS50aGVuKCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3R5bGVDYWNoZSwgdmFsdWUuc3R5bGVzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvY2Vzc0l0ZW1zKHZhbHVlLml0ZW1zLCBzdHlsZUNhY2hlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVtcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBjYXBhYmlsaXR5LnJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRlciA9IHRoaXMuX3RleHRDb250ZW50U3RyZWFtLmdldFJlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1bXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOZWl0aGVyIFwidGV4dENvbnRlbnRcIiBub3IgXCJ0ZXh0Q29udGVudFN0cmVhbVwiIHBhcmFtZXRlcnMgc3BlY2lmaWVkLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXBhYmlsaXR5LnByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVDYWNoZSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlclRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXIodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJUaW1lciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMuX2NhcGFiaWxpdHkucmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGV4cGFuZFRleHREaXZzKGV4cGFuZERpdnMgPSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9lbmhhbmNlVGV4dFNlbGVjdGlvbiB8fCAhdGhpcy5fcmVuZGVyaW5nRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2JvdW5kcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ib3VuZHMgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1CdWYgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nQnVmID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHRoaXMuX3RleHREaXZzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXYgPSB0aGlzLl90ZXh0RGl2c1tpXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpdlByb3BzID0gdGhpcy5fdGV4dERpdlByb3BlcnRpZXMuZ2V0KGRpdik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRpdlByb3BzLmhhc1RleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4cGFuZERpdnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtQnVmLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmdCdWYubGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGl2UHJvcHMub3JpZ2luYWxUcmFuc2Zvcm0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybUJ1Zi5wdXNoKGRpdlByb3BzLm9yaWdpbmFsVHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXZQcm9wcy5wYWRkaW5nVG9wID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZ0J1Zi5wdXNoKGAke2RpdlByb3BzLnBhZGRpbmdUb3B9cHhgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybUJ1Zi5wdXNoKGB0cmFuc2xhdGVZKCR7LWRpdlByb3BzLnBhZGRpbmdUb3B9cHgpYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nQnVmLnB1c2goMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGl2UHJvcHMucGFkZGluZ1JpZ2h0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZ0J1Zi5wdXNoKGAke2RpdlByb3BzLnBhZGRpbmdSaWdodCAvIGRpdlByb3BzLnNjYWxlfXB4YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nQnVmLnB1c2goMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGl2UHJvcHMucGFkZGluZ0JvdHRvbSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmdCdWYucHVzaChgJHtkaXZQcm9wcy5wYWRkaW5nQm90dG9tfXB4YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nQnVmLnB1c2goMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGl2UHJvcHMucGFkZGluZ0xlZnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nQnVmLnB1c2goYCR7ZGl2UHJvcHMucGFkZGluZ0xlZnQgLyBkaXZQcm9wcy5zY2FsZX1weGApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtQnVmLnB1c2goYHRyYW5zbGF0ZVgoJHstZGl2UHJvcHMucGFkZGluZ0xlZnQgLyBkaXZQcm9wcy5zY2FsZX1weClgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmdCdWYucHVzaCgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5zdHlsZS5wYWRkaW5nID0gcGFkZGluZ0J1Zi5qb2luKFwiIFwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNmb3JtQnVmLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGl2LnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybUJ1Zi5qb2luKFwiIFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5zdHlsZS5wYWRkaW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGl2LnN0eWxlLnRyYW5zZm9ybSA9IGRpdlByb3BzLm9yaWdpbmFsVHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVuZGVyVGV4dExheWVyKHJlbmRlclBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFzayA9IG5ldyBUZXh0TGF5ZXJSZW5kZXJUYXNrKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRDb250ZW50OiByZW5kZXJQYXJhbWV0ZXJzLnRleHRDb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dENvbnRlbnRTdHJlYW06IHJlbmRlclBhcmFtZXRlcnMudGV4dENvbnRlbnRTdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IHJlbmRlclBhcmFtZXRlcnMuY29udGFpbmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlld3BvcnQ6IHJlbmRlclBhcmFtZXRlcnMudmlld3BvcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0RGl2czogcmVuZGVyUGFyYW1ldGVycy50ZXh0RGl2cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRDb250ZW50SXRlbXNTdHI6IHJlbmRlclBhcmFtZXRlcnMudGV4dENvbnRlbnRJdGVtc1N0cixcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuaGFuY2VUZXh0U2VsZWN0aW9uOiByZW5kZXJQYXJhbWV0ZXJzLmVuaGFuY2VUZXh0U2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHRhc2suX3JlbmRlcihyZW5kZXJQYXJhbWV0ZXJzLnRpbWVvdXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXNrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKiovIH0pLFxuICAgICAgICAgICAgLyogMjIgKi9cbiAgICAgICAgICAgIC8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXG5cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuU1ZHR3JhcGhpY3MgPSB2b2lkIDA7XG5cbiAgICAgICAgICAgICAgICB2YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEpO1xuXG4gICAgICAgICAgICAgICAgdmFyIF9kaXNwbGF5X3V0aWxzID0gX193X3BkZmpzX3JlcXVpcmVfXyg1KTtcblxuICAgICAgICAgICAgICAgIHZhciBfaXNfbm9kZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMyk7XG5cbiAgICAgICAgICAgICAgICBsZXQgU1ZHR3JhcGhpY3MgPSBjbGFzcyB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKShcIk5vdCBpbXBsZW1lbnRlZDogU1ZHR3JhcGhpY3NcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZXhwb3J0cy5TVkdHcmFwaGljcyA9IFNWR0dyYXBoaWNzO1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgU1ZHX0RFRkFVTFRTID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFN0eWxlOiBcIm5vcm1hbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogXCJub3JtYWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogXCIjMDAwMDAwXCJcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgWE1MX05TID0gXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgWExJTktfTlMgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgTElORV9DQVBfU1RZTEVTID0gW1wiYnV0dFwiLCBcInJvdW5kXCIsIFwic3F1YXJlXCJdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBMSU5FX0pPSU5fU1RZTEVTID0gW1wibWl0ZXJcIiwgXCJyb3VuZFwiLCBcImJldmVsXCJdO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0ZU9iamVjdFVSTCA9IGZ1bmN0aW9uIChkYXRhLCBjb250ZW50VHlwZSA9IFwiXCIsIGZvcmNlRGF0YVNjaGVtYSA9IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoVVJMLmNyZWF0ZU9iamVjdFVSTCAmJiB0eXBlb2YgQmxvYiAhPT0gXCJ1bmRlZmluZWRcIiAmJiAhZm9yY2VEYXRhU2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoW2RhdGFdLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGNvbnRlbnRUeXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaWdpdHMgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYnVmZmVyID0gYGRhdGE6JHtjb250ZW50VHlwZX07YmFzZTY0LGA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGRhdGEubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGIxID0gZGF0YVtpXSAmIDB4ZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYjIgPSBkYXRhW2kgKyAxXSAmIDB4ZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYjMgPSBkYXRhW2kgKyAyXSAmIDB4ZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZDEgPSBiMSA+PiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkMiA9IChiMSAmIDMpIDw8IDQgfCBiMiA+PiA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGQzID0gaSArIDEgPCBpaSA/IChiMiAmIDB4ZikgPDwgMiB8IGIzID4+IDYgOiA2NDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkNCA9IGkgKyAyIDwgaWkgPyBiMyAmIDB4M2YgOiA2NDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgKz0gZGlnaXRzW2QxXSArIGRpZ2l0c1tkMl0gKyBkaWdpdHNbZDNdICsgZGlnaXRzW2Q0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb252ZXJ0SW1nRGF0YVRvUG5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgUE5HX0hFQURFUiA9IG5ldyBVaW50OEFycmF5KFsweDg5LCAweDUwLCAweDRlLCAweDQ3LCAweDBkLCAweDBhLCAweDFhLCAweDBhXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBDSFVOS19XUkFQUEVSX1NJWkUgPSAxMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNyY1RhYmxlID0gbmV3IEludDMyQXJyYXkoMjU2KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjID0gaTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGggPSAwOyBoIDwgODsgaCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjICYgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IDB4ZWRiODgzMjAgXiBjID4+IDEgJiAweDdmZmZmZmZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IGMgPj4gMSAmIDB4N2ZmZmZmZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmNUYWJsZVtpXSA9IGM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNyYzMyKGRhdGEsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3JjID0gLTE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gKGNyYyBeIGRhdGFbaV0pICYgMHhmZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYiA9IGNyY1RhYmxlW2FdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmMgPSBjcmMgPj4+IDggXiBiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmMgXiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gd3JpdGVQbmdDaHVuayh0eXBlLCBib2R5LCBkYXRhLCBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcCA9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW4gPSBib2R5Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW3BdID0gbGVuID4+IDI0ICYgMHhmZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW3AgKyAxXSA9IGxlbiA+PiAxNiAmIDB4ZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtwICsgMl0gPSBsZW4gPj4gOCAmIDB4ZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtwICsgM10gPSBsZW4gJiAweGZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgKz0gNDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW3BdID0gdHlwZS5jaGFyQ29kZUF0KDApICYgMHhmZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW3AgKyAxXSA9IHR5cGUuY2hhckNvZGVBdCgxKSAmIDB4ZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtwICsgMl0gPSB0eXBlLmNoYXJDb2RlQXQoMikgJiAweGZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbcCArIDNdID0gdHlwZS5jaGFyQ29kZUF0KDMpICYgMHhmZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwICs9IDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zZXQoYm9keSwgcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcCArPSBib2R5Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjcmMgPSBjcmMzMihkYXRhLCBvZmZzZXQgKyA0LCBwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW3BdID0gY3JjID4+IDI0ICYgMHhmZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW3AgKyAxXSA9IGNyYyA+PiAxNiAmIDB4ZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtwICsgMl0gPSBjcmMgPj4gOCAmIDB4ZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtwICsgM10gPSBjcmMgJiAweGZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBhZGxlcjMyKGRhdGEsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGIgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IChhICsgKGRhdGFbaV0gJiAweGZmKSkgJSA2NTUyMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYiA9IChiICsgYSkgJSA2NTUyMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYiA8PCAxNiB8IGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRlZmxhdGVTeW5jKGxpdGVyYWxzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXNfbm9kZS5pc05vZGVKUykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVmbGF0ZVN5bmNVbmNvbXByZXNzZWQobGl0ZXJhbHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbnB1dDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQocHJvY2Vzcy52ZXJzaW9ucy5ub2RlKSA+PSA4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCA9IGxpdGVyYWxzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSBCdWZmZXIuZnJvbShsaXRlcmFscyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvdXRwdXQgPSByZXF1aXJlKFwiemxpYlwiKS5kZWZsYXRlU3luYyhpbnB1dCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWw6IDlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG91dHB1dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBvdXRwdXQgOiBuZXcgVWludDhBcnJheShvdXRwdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiTm90IGNvbXByZXNzaW5nIFBORyBiZWNhdXNlIHpsaWIuZGVmbGF0ZVN5bmMgaXMgdW5hdmFpbGFibGU6IFwiICsgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmxhdGVTeW5jVW5jb21wcmVzc2VkKGxpdGVyYWxzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZGVmbGF0ZVN5bmNVbmNvbXByZXNzZWQobGl0ZXJhbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGVuID0gbGl0ZXJhbHMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heEJsb2NrTGVuZ3RoID0gMHhmZmZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZmxhdGVCbG9ja3MgPSBNYXRoLmNlaWwobGVuIC8gbWF4QmxvY2tMZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkYXQgPSBuZXcgVWludDhBcnJheSgyICsgbGVuICsgZGVmbGF0ZUJsb2NrcyAqIDUgKyA0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGkgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkYXRbcGkrK10gPSAweDc4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkYXRbcGkrK10gPSAweDljO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwb3MgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGxlbiA+IG1heEJsb2NrTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkYXRbcGkrK10gPSAweDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZGF0W3BpKytdID0gMHhmZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRhdFtwaSsrXSA9IDB4ZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkYXRbcGkrK10gPSAweDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZGF0W3BpKytdID0gMHgwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRhdC5zZXQobGl0ZXJhbHMuc3ViYXJyYXkocG9zLCBwb3MgKyBtYXhCbG9ja0xlbmd0aCksIHBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGkgKz0gbWF4QmxvY2tMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcyArPSBtYXhCbG9ja0xlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuIC09IG1heEJsb2NrTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkYXRbcGkrK10gPSAweDAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkYXRbcGkrK10gPSBsZW4gJiAweGZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkYXRbcGkrK10gPSBsZW4gPj4gOCAmIDB4ZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRhdFtwaSsrXSA9IH5sZW4gJiAweGZmZmYgJiAweGZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkYXRbcGkrK10gPSAofmxlbiAmIDB4ZmZmZikgPj4gOCAmIDB4ZmY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRhdC5zZXQobGl0ZXJhbHMuc3ViYXJyYXkocG9zKSwgcGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpICs9IGxpdGVyYWxzLmxlbmd0aCAtIHBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhZGxlciA9IGFkbGVyMzIobGl0ZXJhbHMsIDAsIGxpdGVyYWxzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRhdFtwaSsrXSA9IGFkbGVyID4+IDI0ICYgMHhmZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZGF0W3BpKytdID0gYWRsZXIgPj4gMTYgJiAweGZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkYXRbcGkrK10gPSBhZGxlciA+PiA4ICYgMHhmZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZGF0W3BpKytdID0gYWRsZXIgJiAweGZmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZGF0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBlbmNvZGUoaW1nRGF0YSwga2luZCwgZm9yY2VEYXRhU2NoZW1hLCBpc01hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IGltZ0RhdGEud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gaW1nRGF0YS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGJpdERlcHRoLCBjb2xvclR5cGUsIGxpbmVTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gaW1nRGF0YS5kYXRhO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChraW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuSW1hZ2VLaW5kLkdSQVlTQ0FMRV8xQlBQOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JUeXBlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpdERlcHRoID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVTaXplID0gd2lkdGggKyA3ID4+IDM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLkltYWdlS2luZC5SR0JfMjRCUFA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvclR5cGUgPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYml0RGVwdGggPSA4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVNpemUgPSB3aWR0aCAqIDM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLkltYWdlS2luZC5SR0JBXzMyQlBQOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JUeXBlID0gNjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpdERlcHRoID0gODtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVTaXplID0gd2lkdGggKiA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZm9ybWF0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpdGVyYWxzID0gbmV3IFVpbnQ4QXJyYXkoKDEgKyBsaW5lU2l6ZSkgKiBoZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvZmZzZXRMaXRlcmFscyA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldEJ5dGVzID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyArK3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGl0ZXJhbHNbb2Zmc2V0TGl0ZXJhbHMrK10gPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXRlcmFscy5zZXQoYnl0ZXMuc3ViYXJyYXkob2Zmc2V0Qnl0ZXMsIG9mZnNldEJ5dGVzICsgbGluZVNpemUpLCBvZmZzZXRMaXRlcmFscyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldEJ5dGVzICs9IGxpbmVTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRMaXRlcmFscyArPSBsaW5lU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2luZCA9PT0gX3V0aWwuSW1hZ2VLaW5kLkdSQVlTQ0FMRV8xQlBQICYmIGlzTWFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRMaXRlcmFscyA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0TGl0ZXJhbHMrKztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lU2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGl0ZXJhbHNbb2Zmc2V0TGl0ZXJhbHMrK10gXj0gMHhmZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGloZHIgPSBuZXcgVWludDhBcnJheShbd2lkdGggPj4gMjQgJiAweGZmLCB3aWR0aCA+PiAxNiAmIDB4ZmYsIHdpZHRoID4+IDggJiAweGZmLCB3aWR0aCAmIDB4ZmYsIGhlaWdodCA+PiAyNCAmIDB4ZmYsIGhlaWdodCA+PiAxNiAmIDB4ZmYsIGhlaWdodCA+PiA4ICYgMHhmZiwgaGVpZ2h0ICYgMHhmZiwgYml0RGVwdGgsIGNvbG9yVHlwZSwgMHgwMCwgMHgwMCwgMHgwMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkYXQgPSBkZWZsYXRlU3luYyhsaXRlcmFscyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG5nTGVuZ3RoID0gUE5HX0hFQURFUi5sZW5ndGggKyBDSFVOS19XUkFQUEVSX1NJWkUgKiAzICsgaWhkci5sZW5ndGggKyBpZGF0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkocG5nTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnNldChQTkdfSEVBREVSLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSBQTkdfSEVBREVSLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZVBuZ0NodW5rKFwiSUhEUlwiLCBpaGRyLCBkYXRhLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSBDSFVOS19XUkFQUEVSX1NJWkUgKyBpaGRyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZVBuZ0NodW5rKFwiSURBVEFcIiwgaWRhdCwgZGF0YSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gQ0hVTktfV1JBUFBFUl9TSVpFICsgaWRhdC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVQbmdDaHVuayhcIklFTkRcIiwgbmV3IFVpbnQ4QXJyYXkoMCksIGRhdGEsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU9iamVjdFVSTChkYXRhLCBcImltYWdlL3BuZ1wiLCBmb3JjZURhdGFTY2hlbWEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gY29udmVydEltZ0RhdGFUb1BuZyhpbWdEYXRhLCBmb3JjZURhdGFTY2hlbWEsIGlzTWFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtpbmQgPSBpbWdEYXRhLmtpbmQgPT09IHVuZGVmaW5lZCA/IF91dGlsLkltYWdlS2luZC5HUkFZU0NBTEVfMUJQUCA6IGltZ0RhdGEua2luZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW5jb2RlKGltZ0RhdGEsIGtpbmQsIGZvcmNlRGF0YVNjaGVtYSwgaXNNYXNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0oKTtcblxuICAgICAgICAgICAgICAgICAgICBjbGFzcyBTVkdFeHRyYVN0YXRlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9udFNpemVTY2FsZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb250V2VpZ2h0ID0gU1ZHX0RFRkFVTFRTLmZvbnRXZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb250U2l6ZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0TWF0cml4ID0gX3V0aWwuSURFTlRJVFlfTUFUUklYO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9udE1hdHJpeCA9IF91dGlsLkZPTlRfSURFTlRJVFlfTUFUUklYO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGVhZGluZyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0UmVuZGVyaW5nTW9kZSA9IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTEw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0TWF0cml4U2NhbGUgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVYID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVZID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJTcGFjaW5nID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmRTcGFjaW5nID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHRIU2NhbGUgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dFJpc2UgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsbENvbG9yID0gU1ZHX0RFRkFVTFRTLmZpbGxDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cm9rZUNvbG9yID0gXCIjMDAwMDAwXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxsQWxwaGEgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3Ryb2tlQWxwaGEgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGluZVdpZHRoID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVKb2luID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVDYXAgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWl0ZXJMaW1pdCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXNoQXJyYXkgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhc2hQaGFzZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXBlbmRlbmNpZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZUNsaXBVcmwgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpcEdyb3VwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hc2tJZCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW50UG9pbnQoeCwgeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gb3BMaXN0VG9UcmVlKG9wTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9wVHJlZSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb3BMaXN0RWxlbWVudCBvZiBvcExpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BMaXN0RWxlbWVudC5mbiA9PT0gXCJzYXZlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BUcmVlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm5JZDogOTIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbjogXCJncm91cFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFtdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXAucHVzaChvcFRyZWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcFRyZWUgPSBvcFRyZWVbb3BUcmVlLmxlbmd0aCAtIDFdLml0ZW1zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3BMaXN0RWxlbWVudC5mbiA9PT0gXCJyZXN0b3JlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BUcmVlID0gdG1wLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wVHJlZS5wdXNoKG9wTGlzdEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wVHJlZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHBmKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IHZhbHVlLnRvRml4ZWQoMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGkgPSBzLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzW2ldICE9PSBcIjBcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoc1tpXSA9PT0gXCIwXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5zdWJzdHJpbmcoMCwgc1tpXSA9PT0gXCIuXCIgPyBpIDogaSArIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcG0obSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1bNF0gPT09IDAgJiYgbVs1XSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtWzFdID09PSAwICYmIG1bMl0gPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1bMF0gPT09IDEgJiYgbVszXSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYHNjYWxlKCR7cGYobVswXSl9ICR7cGYobVszXSl9KWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1bMF0gPT09IG1bM10gJiYgbVsxXSA9PT0gLW1bMl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IE1hdGguYWNvcyhtWzBdKSAqIDE4MCAvIE1hdGguUEk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgcm90YXRlKCR7cGYoYSl9KWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobVswXSA9PT0gMSAmJiBtWzFdID09PSAwICYmIG1bMl0gPT09IDAgJiYgbVszXSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke3BmKG1bNF0pfSAke3BmKG1bNV0pfSlgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBtYXRyaXgoJHtwZihtWzBdKX0gJHtwZihtWzFdKX0gJHtwZihtWzJdKX0gJHtwZihtWzNdKX0gJHtwZihtWzRdKX0gYCArIGAke3BmKG1bNV0pfSlgO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGNsaXBDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXNrQ291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2hhZGluZ0NvdW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgZXhwb3J0cy5TVkdHcmFwaGljcyA9IFNWR0dyYXBoaWNzID0gY2xhc3Mge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IoY29tbW9uT2Jqcywgb2JqcywgZm9yY2VEYXRhU2NoZW1hID0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN2Z0ZhY3RvcnkgPSBuZXcgX2Rpc3BsYXlfdXRpbHMuRE9NU1ZHRmFjdG9yeSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IG5ldyBTVkdFeHRyYVN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1NYXRyaXggPSBfdXRpbC5JREVOVElUWV9NQVRSSVg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1TdGFjayA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXh0cmFTdGFjayA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tbW9uT2JqcyA9IGNvbW1vbk9ianM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vYmpzID0gb2JqcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdDbGlwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdFT0ZpbGwgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtYmVkRm9udHMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtYmVkZGVkRm9udHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3NzU3R5bGUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VEYXRhU2NoZW1hID0gISFmb3JjZURhdGFTY2hlbWE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3BlcmF0b3JJZE1hcHBpbmcgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb3AgaW4gX3V0aWwuT1BTKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29wZXJhdG9ySWRNYXBwaW5nW191dGlsLk9QU1tvcF1dID0gb3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzYXZlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtU3RhY2sucHVzaCh0aGlzLnRyYW5zZm9ybU1hdHJpeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2xkID0gdGhpcy5jdXJyZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXh0cmFTdGFjay5wdXNoKG9sZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gb2xkLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3RvcmUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1NYXRyaXggPSB0aGlzLnRyYW5zZm9ybVN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMuZXh0cmFTdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdDbGlwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRncnAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cChpdGVtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhlY3V0ZU9wVHJlZShpdGVtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWREZXBlbmRlbmNpZXMob3BlcmF0b3JMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm5BcnJheSA9IG9wZXJhdG9yTGlzdC5mbkFycmF5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyZ3NBcnJheSA9IG9wZXJhdG9yTGlzdC5hcmdzQXJyYXk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBmbkFycmF5Lmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZuQXJyYXlbaV0gIT09IF91dGlsLk9QUy5kZXBlbmRlbmN5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb2JqIG9mIGFyZ3NBcnJheVtpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2Jqc1Bvb2wgPSBvYmouc3RhcnRzV2l0aChcImdfXCIpID8gdGhpcy5jb21tb25PYmpzIDogdGhpcy5vYmpzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ianNQb29sLmdldChvYmosIHJlc29sdmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQuZGVwZW5kZW5jaWVzLnB1c2gocHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwodGhpcy5jdXJyZW50LmRlcGVuZGVuY2llcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtTWF0cml4ID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtTWF0cml4ID0gX3V0aWwuVXRpbC50cmFuc2Zvcm0odGhpcy50cmFuc2Zvcm1NYXRyaXgsIHRyYW5zZm9ybU1hdHJpeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50Z3JwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U1ZHKG9wZXJhdG9yTGlzdCwgdmlld3BvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdwb3J0ID0gdmlld3BvcnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdmdFbGVtZW50ID0gdGhpcy5faW5pdGlhbGl6ZSh2aWV3cG9ydCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkRGVwZW5kZW5jaWVzKG9wZXJhdG9yTGlzdCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtTWF0cml4ID0gX3V0aWwuSURFTlRJVFlfTUFUUklYO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV4ZWN1dGVPcFRyZWUodGhpcy5jb252ZXJ0T3BMaXN0KG9wZXJhdG9yTGlzdCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3ZnRWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydE9wTGlzdChvcGVyYXRvckxpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcGVyYXRvcklkTWFwcGluZyA9IHRoaXMuX29wZXJhdG9ySWRNYXBwaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyZ3NBcnJheSA9IG9wZXJhdG9yTGlzdC5hcmdzQXJyYXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm5BcnJheSA9IG9wZXJhdG9yTGlzdC5mbkFycmF5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wTGlzdCA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gZm5BcnJheS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZuSWQgPSBmbkFycmF5W2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcExpc3QucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IG9wZXJhdG9ySWRNYXBwaW5nW2ZuSWRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogYXJnc0FycmF5W2ldXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcExpc3RUb1RyZWUob3BMaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZU9wVHJlZShvcFRyZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG9wVHJlZUVsZW1lbnQgb2Ygb3BUcmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZuID0gb3BUcmVlRWxlbWVudC5mbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm5JZCA9IG9wVHJlZUVsZW1lbnQuZm5JZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJncyA9IG9wVHJlZUVsZW1lbnQuYXJncztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGZuSWQgfCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5iZWdpblRleHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iZWdpblRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuZGVwZW5kZW5jeTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0TGVhZGluZzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldExlYWRpbmcoYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldExlYWRpbmdNb3ZlVGV4dDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldExlYWRpbmdNb3ZlVGV4dChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0Rm9udDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEZvbnQoYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNob3dUZXh0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd1RleHQoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNob3dTcGFjZWRUZXh0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd1RleHQoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmVuZFRleHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmRUZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLm1vdmVUZXh0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZVRleHQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldENoYXJTcGFjaW5nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2hhclNwYWNpbmcoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldFdvcmRTcGFjaW5nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0V29yZFNwYWNpbmcoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldEhTY2FsZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEhTY2FsZShhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0VGV4dE1hdHJpeDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFRleHRNYXRyaXgoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldFRleHRSaXNlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VGV4dFJpc2UoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldFRleHRSZW5kZXJpbmdNb2RlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VGV4dFJlbmRlcmluZ01vZGUoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldExpbmVXaWR0aDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldExpbmVXaWR0aChhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0TGluZUpvaW46XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRMaW5lSm9pbihhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0TGluZUNhcDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldExpbmVDYXAoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldE1pdGVyTGltaXQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRNaXRlckxpbWl0KGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRGaWxsUkdCQ29sb3I6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRGaWxsUkdCQ29sb3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldFN0cm9rZVJHQkNvbG9yOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3Ryb2tlUkdCQ29sb3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldFN0cm9rZUNvbG9yTjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0cm9rZUNvbG9yTihhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0RmlsbENvbG9yTjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEZpbGxDb2xvck4oYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNoYWRpbmdGaWxsOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hhZGluZ0ZpbGwoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldERhc2g6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXREYXNoKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRSZW5kZXJpbmdJbnRlbnQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRSZW5kZXJpbmdJbnRlbnQoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldEZsYXRuZXNzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RmxhdG5lc3MoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldEdTdGF0ZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEdTdGF0ZShhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuZmlsbDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuZW9GaWxsOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW9GaWxsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnN0cm9rZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5maWxsU3Ryb2tlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsbFN0cm9rZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5lb0ZpbGxTdHJva2U6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lb0ZpbGxTdHJva2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY2xpcDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaXAoXCJub256ZXJvXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5lb0NsaXA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGlwKFwiZXZlbm9kZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMucGFpbnRTb2xpZENvbG9ySW1hZ2VNYXNrOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFpbnRTb2xpZENvbG9ySW1hZ2VNYXNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnBhaW50SW1hZ2VYT2JqZWN0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFpbnRJbWFnZVhPYmplY3QoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnBhaW50SW5saW5lSW1hZ2VYT2JqZWN0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFpbnRJbmxpbmVJbWFnZVhPYmplY3QoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnBhaW50SW1hZ2VNYXNrWE9iamVjdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhaW50SW1hZ2VNYXNrWE9iamVjdChhcmdzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMucGFpbnRGb3JtWE9iamVjdEJlZ2luOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFpbnRGb3JtWE9iamVjdEJlZ2luKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5wYWludEZvcm1YT2JqZWN0RW5kOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFpbnRGb3JtWE9iamVjdEVuZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5jbG9zZVBhdGg6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY2xvc2VTdHJva2U6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZVN0cm9rZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5jbG9zZUZpbGxTdHJva2U6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZUZpbGxTdHJva2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY2xvc2VFT0ZpbGxTdHJva2U6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZUVPRmlsbFN0cm9rZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5uZXh0TGluZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRMaW5lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnRyYW5zZm9ybTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybShhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY29uc3RydWN0UGF0aDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cnVjdFBhdGgoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmVuZFBhdGg6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmRQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOTI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ncm91cChvcFRyZWVFbGVtZW50Lml0ZW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoYFVuaW1wbGVtZW50ZWQgb3BlcmF0b3IgJHtmbn1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0V29yZFNwYWNpbmcod29yZFNwYWNpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQud29yZFNwYWNpbmcgPSB3b3JkU3BhY2luZztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q2hhclNwYWNpbmcoY2hhclNwYWNpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQuY2hhclNwYWNpbmcgPSBjaGFyU3BhY2luZztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dExpbmUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZlVGV4dCgwLCB0aGlzLmN1cnJlbnQubGVhZGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRleHRNYXRyaXgoYSwgYiwgYywgZCwgZSwgZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC50ZXh0TWF0cml4ID0gY3VycmVudC5saW5lTWF0cml4ID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQudGV4dE1hdHJpeFNjYWxlID0gTWF0aC5oeXBvdChhLCBiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnggPSBjdXJyZW50LmxpbmVYID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnkgPSBjdXJyZW50LmxpbmVZID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Lnhjb29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Lnljb29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnRzcGFuID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6dHNwYW5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZvbnQtZmFtaWx5XCIsIGN1cnJlbnQuZm9udEZhbWlseSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZvbnQtc2l6ZVwiLCBgJHtwZihjdXJyZW50LmZvbnRTaXplKX1weGApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIHBmKC1jdXJyZW50LnkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnR4dEVsZW1lbnQgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2Zzp0ZXh0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQudHh0RWxlbWVudC5hcHBlbmRDaGlsZChjdXJyZW50LnRzcGFuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW5UZXh0KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC54ID0gY3VycmVudC5saW5lWCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC55ID0gY3VycmVudC5saW5lWSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC50ZXh0TWF0cml4ID0gX3V0aWwuSURFTlRJVFlfTUFUUklYO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQubGluZU1hdHJpeCA9IF91dGlsLklERU5USVRZX01BVFJJWDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnRleHRNYXRyaXhTY2FsZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC50c3BhbiA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnRzcGFuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQudHh0RWxlbWVudCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnRleHRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC50eHRncnAgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2ZzpnXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQueGNvb3JkcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQueWNvb3JkcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlVGV4dCh4LCB5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnggPSBjdXJyZW50LmxpbmVYICs9IHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC55ID0gY3VycmVudC5saW5lWSArPSB5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQueGNvb3JkcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQueWNvb3JkcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQudHNwYW4gPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2Zzp0c3BhblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZm9udC1mYW1pbHlcIiwgY3VycmVudC5mb250RmFtaWx5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZm9udC1zaXplXCIsIGAke3BmKGN1cnJlbnQuZm9udFNpemUpfXB4YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInlcIiwgcGYoLWN1cnJlbnQueSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93VGV4dChnbHlwaHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvbnQgPSBjdXJyZW50LmZvbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9udFNpemUgPSBjdXJyZW50LmZvbnRTaXplO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvbnRTaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb250U2l6ZVNjYWxlID0gY3VycmVudC5mb250U2l6ZVNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYXJTcGFjaW5nID0gY3VycmVudC5jaGFyU3BhY2luZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3JkU3BhY2luZyA9IGN1cnJlbnQud29yZFNwYWNpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9udERpcmVjdGlvbiA9IGN1cnJlbnQuZm9udERpcmVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0SFNjYWxlID0gY3VycmVudC50ZXh0SFNjYWxlICogZm9udERpcmVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IGZvbnQudmVydGljYWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BhY2luZ0RpciA9IHZlcnRpY2FsID8gMSA6IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRWTWV0cmljcyA9IGZvbnQuZGVmYXVsdFZNZXRyaWNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdpZHRoQWR2YW5jZVNjYWxlID0gZm9udFNpemUgKiBjdXJyZW50LmZvbnRNYXRyaXhbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHggPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBnbHlwaCBvZiBnbHlwaHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdseXBoID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ICs9IGZvbnREaXJlY3Rpb24gKiB3b3JkU3BhY2luZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBnbHlwaCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCArPSBzcGFjaW5nRGlyICogZ2x5cGggKiBmb250U2l6ZSAvIDEwMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwYWNpbmcgPSAoZ2x5cGguaXNTcGFjZSA/IHdvcmRTcGFjaW5nIDogMCkgKyBjaGFyU3BhY2luZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhcmFjdGVyID0gZ2x5cGguZm9udENoYXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzY2FsZWRYLCBzY2FsZWRZO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgd2lkdGggPSBnbHlwaC53aWR0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2eDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZtZXRyaWMgPSBnbHlwaC52bWV0cmljIHx8IGRlZmF1bHRWTWV0cmljcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZ4ID0gZ2x5cGgudm1ldHJpYyA/IHZtZXRyaWNbMV0gOiB3aWR0aCAqIDAuNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZ4ID0gLXZ4ICogd2lkdGhBZHZhbmNlU2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2eSA9IHZtZXRyaWNbMl0gKiB3aWR0aEFkdmFuY2VTY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gdm1ldHJpYyA/IC12bWV0cmljWzBdIDogd2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZWRYID0gdnggLyBmb250U2l6ZVNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVkWSA9ICh4ICsgdnkpIC8gZm9udFNpemVTY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlZFggPSB4IC8gZm9udFNpemVTY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlZFkgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdseXBoLmlzSW5Gb250IHx8IGZvbnQubWlzc2luZ0ZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQueGNvb3Jkcy5wdXNoKGN1cnJlbnQueCArIHNjYWxlZFgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Lnljb29yZHMucHVzaCgtY3VycmVudC55ICsgc2NhbGVkWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQudHNwYW4udGV4dENvbnRlbnQgKz0gY2hhcmFjdGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge31cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcldpZHRoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcldpZHRoID0gd2lkdGggKiB3aWR0aEFkdmFuY2VTY2FsZSAtIHNwYWNpbmcgKiBmb250RGlyZWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcldpZHRoID0gd2lkdGggKiB3aWR0aEFkdmFuY2VTY2FsZSArIHNwYWNpbmcgKiBmb250RGlyZWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCArPSBjaGFyV2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInhcIiwgY3VycmVudC54Y29vcmRzLm1hcChwZikuam9pbihcIiBcIikpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIGN1cnJlbnQueWNvb3Jkcy5tYXAocGYpLmpvaW4oXCIgXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieVwiLCBwZigtY3VycmVudC55KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQueSAtPSB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQueCArPSB4ICogdGV4dEhTY2FsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZm9udC1mYW1pbHlcIiwgY3VycmVudC5mb250RmFtaWx5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZm9udC1zaXplXCIsIGAke3BmKGN1cnJlbnQuZm9udFNpemUpfXB4YCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5mb250U3R5bGUgIT09IFNWR19ERUZBVUxUUy5mb250U3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZvbnQtc3R5bGVcIiwgY3VycmVudC5mb250U3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LmZvbnRXZWlnaHQgIT09IFNWR19ERUZBVUxUUy5mb250V2VpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmb250LXdlaWdodFwiLCBjdXJyZW50LmZvbnRXZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGxTdHJva2VNb2RlID0gY3VycmVudC50ZXh0UmVuZGVyaW5nTW9kZSAmIF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFX01BU0s7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsbFN0cm9rZU1vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTEwgfHwgZmlsbFN0cm9rZU1vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LmZpbGxDb2xvciAhPT0gU1ZHX0RFRkFVTFRTLmZpbGxDb2xvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZpbGxcIiwgY3VycmVudC5maWxsQ29sb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQuZmlsbEFscGhhIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZpbGwtb3BhY2l0eVwiLCBjdXJyZW50LmZpbGxBbHBoYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnQudGV4dFJlbmRlcmluZ01vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkFERF9UT19QQVRIKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmaWxsXCIsIFwidHJhbnNwYXJlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZpbGxcIiwgXCJub25lXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuU1RST0tFIHx8IGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMX1NUUk9LRSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lV2lkdGhTY2FsZSA9IDEgLyAoY3VycmVudC50ZXh0TWF0cml4U2NhbGUgfHwgMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0U3Ryb2tlQXR0cmlidXRlcyhjdXJyZW50LnRzcGFuLCBsaW5lV2lkdGhTY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRleHRNYXRyaXggPSBjdXJyZW50LnRleHRNYXRyaXg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudC50ZXh0UmlzZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0TWF0cml4ID0gdGV4dE1hdHJpeC5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0TWF0cml4WzVdICs9IGN1cnJlbnQudGV4dFJpc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC50eHRFbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwidHJhbnNmb3JtXCIsIGAke3BtKHRleHRNYXRyaXgpfSBzY2FsZSgke3BmKHRleHRIU2NhbGUpfSwgLTEpYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC50eHRFbGVtZW50LnNldEF0dHJpYnV0ZU5TKFhNTF9OUywgXCJ4bWw6c3BhY2VcIiwgXCJwcmVzZXJ2ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnR4dEVsZW1lbnQuYXBwZW5kQ2hpbGQoY3VycmVudC50c3Bhbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC50eHRncnAuYXBwZW5kQ2hpbGQoY3VycmVudC50eHRFbGVtZW50KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Vuc3VyZVRyYW5zZm9ybUdyb3VwKCkuYXBwZW5kQ2hpbGQoY3VycmVudC50eHRFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGVhZGluZ01vdmVUZXh0KHgsIHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldExlYWRpbmcoLXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZVRleHQoeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEZvbnRTdHlsZShmb250T2JqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmb250T2JqLmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWRkRm9udFN0eWxlOiBObyBmb250IGRhdGEgYXZhaWxhYmxlLCBcIiArICdlbnN1cmUgdGhhdCB0aGUgXCJmb250RXh0cmFQcm9wZXJ0aWVzXCIgQVBJIHBhcmFtZXRlciBpcyBzZXQuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNzc1N0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3NzU3R5bGUgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2ZzpzdHlsZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jc3NTdHlsZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInR5cGVcIiwgXCJ0ZXh0L2Nzc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZzLmFwcGVuZENoaWxkKHRoaXMuY3NzU3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IGNyZWF0ZU9iamVjdFVSTChmb250T2JqLmRhdGEsIGZvbnRPYmoubWltZXR5cGUsIHRoaXMuZm9yY2VEYXRhU2NoZW1hKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNzc1N0eWxlLnRleHRDb250ZW50ICs9IGBAZm9udC1mYWNlIHsgZm9udC1mYW1pbHk6IFwiJHtmb250T2JqLmxvYWRlZE5hbWV9XCI7YCArIGAgc3JjOiB1cmwoJHt1cmx9KTsgfVxcbmA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEZvbnQoZGV0YWlscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9udE9iaiA9IHRoaXMuY29tbW9uT2Jqcy5nZXQoZGV0YWlsc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNpemUgPSBkZXRhaWxzWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuZm9udCA9IGZvbnRPYmo7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lbWJlZEZvbnRzICYmICFmb250T2JqLm1pc3NpbmdGaWxlICYmICF0aGlzLmVtYmVkZGVkRm9udHNbZm9udE9iai5sb2FkZWROYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEZvbnRTdHlsZShmb250T2JqKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWJlZGRlZEZvbnRzW2ZvbnRPYmoubG9hZGVkTmFtZV0gPSBmb250T2JqO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuZm9udE1hdHJpeCA9IGZvbnRPYmouZm9udE1hdHJpeCB8fCBfdXRpbC5GT05UX0lERU5USVRZX01BVFJJWDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYm9sZCA9IFwibm9ybWFsXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm9udE9iai5ibGFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2xkID0gXCI5MDBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZvbnRPYmouYm9sZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2xkID0gXCJib2xkXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRhbGljID0gZm9udE9iai5pdGFsaWMgPyBcIml0YWxpY1wiIDogXCJub3JtYWxcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaXplIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplID0gLXNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuZm9udERpcmVjdGlvbiA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuZm9udERpcmVjdGlvbiA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5mb250U2l6ZSA9IHNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5mb250RmFtaWx5ID0gZm9udE9iai5sb2FkZWROYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuZm9udFdlaWdodCA9IGJvbGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5mb250U3R5bGUgPSBpdGFsaWM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC50c3BhbiA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnRzcGFuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIHBmKC1jdXJyZW50LnkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Lnhjb29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Lnljb29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kVGV4dCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQudGV4dFJlbmRlcmluZ01vZGUgJiBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5BRERfVE9fUEFUSF9GTEFHICYmIGN1cnJlbnQudHh0RWxlbWVudD8uaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuZWxlbWVudCA9IGN1cnJlbnQudHh0RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGlwKFwibm9uemVyb1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmRQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRMaW5lV2lkdGgod2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2lkdGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5saW5lV2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExpbmVDYXAoc3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQubGluZUNhcCA9IExJTkVfQ0FQX1NUWUxFU1tzdHlsZV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExpbmVKb2luKHN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LmxpbmVKb2luID0gTElORV9KT0lOX1NUWUxFU1tzdHlsZV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldE1pdGVyTGltaXQobGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQubWl0ZXJMaW1pdCA9IGxpbWl0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRTdHJva2VBbHBoYShzdHJva2VBbHBoYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5zdHJva2VBbHBoYSA9IHN0cm9rZUFscGhhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRTdHJva2VSR0JDb2xvcihyLCBnLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LnN0cm9rZUNvbG9yID0gX3V0aWwuVXRpbC5tYWtlSGV4Q29sb3IociwgZywgYik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEZpbGxBbHBoYShmaWxsQWxwaGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQuZmlsbEFscGhhID0gZmlsbEFscGhhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRGaWxsUkdCQ29sb3IociwgZywgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5maWxsQ29sb3IgPSBfdXRpbC5VdGlsLm1ha2VIZXhDb2xvcihyLCBnLCBiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQudHNwYW4gPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2Zzp0c3BhblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQueGNvb3JkcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC55Y29vcmRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFN0cm9rZUNvbG9yTihhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LnN0cm9rZUNvbG9yID0gdGhpcy5fbWFrZUNvbG9yTl9QYXR0ZXJuKGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRGaWxsQ29sb3JOKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQuZmlsbENvbG9yID0gdGhpcy5fbWFrZUNvbG9yTl9QYXR0ZXJuKGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFkaW5nRmlsbChhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLnZpZXdwb3J0LndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMudmlld3BvcnQuaGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW52ID0gX3V0aWwuVXRpbC5pbnZlcnNlVHJhbnNmb3JtKHRoaXMudHJhbnNmb3JtTWF0cml4KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbMCwgMF0sIGludik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiciA9IF91dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oWzAsIGhlaWdodF0sIGludik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1bCA9IF91dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oW3dpZHRoLCAwXSwgaW52KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVyID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbd2lkdGgsIGhlaWdodF0sIGludik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB4MCA9IE1hdGgubWluKGJsWzBdLCBiclswXSwgdWxbMF0sIHVyWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB5MCA9IE1hdGgubWluKGJsWzFdLCBiclsxXSwgdWxbMV0sIHVyWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB4MSA9IE1hdGgubWF4KGJsWzBdLCBiclswXSwgdWxbMF0sIHVyWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB5MSA9IE1hdGgubWF4KGJsWzFdLCBiclsxXSwgdWxbMV0sIHVyWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6cmVjdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieFwiLCB4MCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInlcIiwgeTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ3aWR0aFwiLCB4MSAtIHgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiaGVpZ2h0XCIsIHkxIC0geTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmaWxsXCIsIHRoaXMuX21ha2VTaGFkaW5nUGF0dGVybihhcmdzKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50LmZpbGxBbHBoYSA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZpbGwtb3BhY2l0eVwiLCB0aGlzLmN1cnJlbnQuZmlsbEFscGhhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbnN1cmVUcmFuc2Zvcm1Hcm91cCgpLmFwcGVuZENoaWxkKHJlY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBfbWFrZUNvbG9yTl9QYXR0ZXJuKGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJnc1swXSA9PT0gXCJUaWxpbmdQYXR0ZXJuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21ha2VUaWxpbmdQYXR0ZXJuKGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYWtlU2hhZGluZ1BhdHRlcm4oYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9tYWtlVGlsaW5nUGF0dGVybihhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sb3IgPSBhcmdzWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wZXJhdG9yTGlzdCA9IGFyZ3NbMl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0cml4ID0gYXJnc1szXSB8fCBfdXRpbC5JREVOVElUWV9NQVRSSVg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW3gwLCB5MCwgeDEsIHkxXSA9IGFyZ3NbNF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeHN0ZXAgPSBhcmdzWzVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHlzdGVwID0gYXJnc1s2XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWludFR5cGUgPSBhcmdzWzddO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbGluZ0lkID0gYHNoYWRpbmcke3NoYWRpbmdDb3VudCsrfWA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBbdHgwLCB0eTAsIHR4MSwgdHkxXSA9IF91dGlsLlV0aWwubm9ybWFsaXplUmVjdChbLi4uX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbeDAsIHkwXSwgbWF0cml4KSwgLi4uX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbeDEsIHkxXSwgbWF0cml4KV0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW3hzY2FsZSwgeXNjYWxlXSA9IF91dGlsLlV0aWwuc2luZ3VsYXJWYWx1ZURlY29tcG9zZTJkU2NhbGUobWF0cml4KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR4c3RlcCA9IHhzdGVwICogeHNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5c3RlcCA9IHlzdGVwICogeXNjYWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRpbGluZyA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOnBhdHRlcm5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlsaW5nLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiaWRcIiwgdGlsaW5nSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbGluZy5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInBhdHRlcm5Vbml0c1wiLCBcInVzZXJTcGFjZU9uVXNlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbGluZy5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcIndpZHRoXCIsIHR4c3RlcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlsaW5nLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiaGVpZ2h0XCIsIHR5c3RlcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlsaW5nLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieFwiLCBgJHt0eDB9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlsaW5nLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieVwiLCBgJHt0eTB9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ZnID0gdGhpcy5zdmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtTWF0cml4ID0gdGhpcy50cmFuc2Zvcm1NYXRyaXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsbENvbG9yID0gdGhpcy5jdXJyZW50LmZpbGxDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJva2VDb2xvciA9IHRoaXMuY3VycmVudC5zdHJva2VDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiYm94ID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZSh0eDEgLSB0eDAsIHR5MSAtIHR5MCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdmcgPSBiYm94O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtTWF0cml4ID0gbWF0cml4O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhaW50VHlwZSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjc3NDb2xvciA9IF91dGlsLlV0aWwubWFrZUhleENvbG9yKC4uLmNvbG9yKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQuZmlsbENvbG9yID0gY3NzQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5zdHJva2VDb2xvciA9IGNzc0NvbG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhlY3V0ZU9wVHJlZSh0aGlzLmNvbnZlcnRPcExpc3Qob3BlcmF0b3JMaXN0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdmcgPSBzdmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1NYXRyaXggPSB0cmFuc2Zvcm1NYXRyaXg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LmZpbGxDb2xvciA9IGZpbGxDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQuc3Ryb2tlQ29sb3IgPSBzdHJva2VDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWxpbmcuYXBwZW5kQ2hpbGQoYmJveC5jaGlsZE5vZGVzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZnMuYXBwZW5kQ2hpbGQodGlsaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYHVybCgjJHt0aWxpbmdJZH0pYDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgX21ha2VTaGFkaW5nUGF0dGVybihhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MgPSB0aGlzLm9ianMuZ2V0KGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoYXJnc1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiUmFkaWFsQXhpYWxcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNoYWRpbmdJZCA9IGBzaGFkaW5nJHtzaGFkaW5nQ291bnQrK31gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sb3JTdG9wcyA9IGFyZ3NbM107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZ3JhZGllbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoYXJnc1sxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJheGlhbFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwb2ludDAgPSBhcmdzWzRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwb2ludDEgPSBhcmdzWzVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmFkaWVudCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOmxpbmVhckdyYWRpZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImlkXCIsIHNoYWRpbmdJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZ3JhZGllbnRVbml0c1wiLCBcInVzZXJTcGFjZU9uVXNlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcIngxXCIsIHBvaW50MFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieTFcIiwgcG9pbnQwWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ4MlwiLCBwb2ludDFbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInkyXCIsIHBvaW50MVsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJhZGlhbFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb2NhbFBvaW50ID0gYXJnc1s0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2lyY2xlUG9pbnQgPSBhcmdzWzVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb2NhbFJhZGl1cyA9IGFyZ3NbNl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNpcmNsZVJhZGl1cyA9IGFyZ3NbN107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYWRpZW50ID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6cmFkaWFsR3JhZGllbnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiaWRcIiwgc2hhZGluZ0lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJncmFkaWVudFVuaXRzXCIsIFwidXNlclNwYWNlT25Vc2VcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiY3hcIiwgY2lyY2xlUG9pbnRbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImN5XCIsIGNpcmNsZVBvaW50WzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJyXCIsIGNpcmNsZVJhZGl1cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZnhcIiwgZm9jYWxQb2ludFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZnlcIiwgZm9jYWxQb2ludFsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZnJcIiwgZm9jYWxSYWRpdXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBSYWRpYWxBeGlhbCB0eXBlOiAke2FyZ3NbMV19YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY29sb3JTdG9wIG9mIGNvbG9yU3RvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdG9wID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6c3RvcFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9wLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwib2Zmc2V0XCIsIGNvbG9yU3RvcFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInN0b3AtY29sb3JcIiwgY29sb3JTdG9wWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmFkaWVudC5hcHBlbmRDaGlsZChzdG9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZzLmFwcGVuZENoaWxkKGdyYWRpZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgdXJsKCMke3NoYWRpbmdJZH0pYDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiTWVzaFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKFwiVW5pbXBsZW1lbnRlZCBwYXR0ZXJuIE1lc2hcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiRHVtbXlcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImhvdHBpbmtcIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIElSIHR5cGU6ICR7YXJnc1swXX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldERhc2goZGFzaEFycmF5LCBkYXNoUGhhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQuZGFzaEFycmF5ID0gZGFzaEFycmF5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5kYXNoUGhhc2UgPSBkYXNoUGhhc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdFBhdGgob3BzLCBhcmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgeCA9IGN1cnJlbnQueCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGN1cnJlbnQueTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb3Agb2Ygb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAob3AgfCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5yZWN0YW5nbGU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gYXJnc1tqKytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gYXJnc1tqKytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB4dyA9IHggKyB3aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB5aCA9IHkgKyBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKFwiTVwiLCBwZih4KSwgcGYoeSksIFwiTFwiLCBwZih4dyksIHBmKHkpLCBcIkxcIiwgcGYoeHcpLCBwZih5aCksIFwiTFwiLCBwZih4KSwgcGYoeWgpLCBcIlpcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLm1vdmVUbzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gYXJnc1tqKytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBhcmdzW2orK107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKFwiTVwiLCBwZih4KSwgcGYoeSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5saW5lVG86XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IGFyZ3NbaisrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gYXJnc1tqKytdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaChcIkxcIiwgcGYoeCksIHBmKHkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY3VydmVUbzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gYXJnc1tqICsgNF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGFyZ3NbaiArIDVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaChcIkNcIiwgcGYoYXJnc1tqXSksIHBmKGFyZ3NbaiArIDFdKSwgcGYoYXJnc1tqICsgMl0pLCBwZihhcmdzW2ogKyAzXSksIHBmKHgpLCBwZih5KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaiArPSA2O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5jdXJ2ZVRvMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goXCJDXCIsIHBmKHgpLCBwZih5KSwgcGYoYXJnc1tqXSksIHBmKGFyZ3NbaiArIDFdKSwgcGYoYXJnc1tqICsgMl0pLCBwZihhcmdzW2ogKyAzXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSBhcmdzW2ogKyAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gYXJnc1tqICsgM107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaiArPSA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5jdXJ2ZVRvMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gYXJnc1tqICsgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IGFyZ3NbaiArIDNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaChcIkNcIiwgcGYoYXJnc1tqXSksIHBmKGFyZ3NbaiArIDFdKSwgcGYoeCksIHBmKHkpLCBwZih4KSwgcGYoeSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGogKz0gNDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY2xvc2VQYXRoOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaChcIlpcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gZC5qb2luKFwiIFwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LnBhdGggJiYgb3BzLmxlbmd0aCA+IDAgJiYgb3BzWzBdICE9PSBfdXRpbC5PUFMucmVjdGFuZ2xlICYmIG9wc1swXSAhPT0gX3V0aWwuT1BTLm1vdmVUbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gY3VycmVudC5wYXRoLmdldEF0dHJpYnV0ZU5TKG51bGwsIFwiZFwiKSArIGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5wYXRoID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6cGF0aFwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbnN1cmVUcmFuc2Zvcm1Hcm91cCgpLmFwcGVuZENoaWxkKGN1cnJlbnQucGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5wYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZFwiLCBkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmVsZW1lbnQgPSBjdXJyZW50LnBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5zZXRDdXJyZW50UG9pbnQoeCwgeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZFBhdGgoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnBhdGggPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBlbmRpbmdDbGlwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnQuZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdDbGlwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsaXBJZCA9IGBjbGlwcGF0aCR7Y2xpcENvdW50Kyt9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjbGlwUGF0aCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOmNsaXBQYXRoXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaXBQYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiaWRcIiwgY2xpcElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlwUGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInRyYW5zZm9ybVwiLCBwbSh0aGlzLnRyYW5zZm9ybU1hdHJpeCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsaXBFbGVtZW50ID0gY3VycmVudC5lbGVtZW50LmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBlbmRpbmdDbGlwID09PSBcImV2ZW5vZGRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlwRWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImNsaXAtcnVsZVwiLCBcImV2ZW5vZGRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpcEVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJjbGlwLXJ1bGVcIiwgXCJub256ZXJvXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ0NsaXAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaXBQYXRoLmFwcGVuZENoaWxkKGNsaXBFbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZnMuYXBwZW5kQ2hpbGQoY2xpcFBhdGgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQuYWN0aXZlQ2xpcFVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmNsaXBHcm91cCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBwcmV2IG9mIHRoaXMuZXh0cmFTdGFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldi5jbGlwR3JvdXAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpcFBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgXCJjbGlwLXBhdGhcIiwgY3VycmVudC5hY3RpdmVDbGlwVXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmFjdGl2ZUNsaXBVcmwgPSBgdXJsKCMke2NsaXBJZH0pYDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRncnAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlwKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdDbGlwID0gdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VQYXRoKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5wYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGQgPSBgJHtjdXJyZW50LnBhdGguZ2V0QXR0cmlidXRlTlMobnVsbCwgXCJkXCIpfVpgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgXCJkXCIsIGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGVhZGluZyhsZWFkaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LmxlYWRpbmcgPSAtbGVhZGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGV4dFJpc2UodGV4dFJpc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQudGV4dFJpc2UgPSB0ZXh0UmlzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGV4dFJlbmRlcmluZ01vZGUodGV4dFJlbmRlcmluZ01vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnQudGV4dFJlbmRlcmluZ01vZGUgPSB0ZXh0UmVuZGVyaW5nTW9kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SFNjYWxlKHNjYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LnRleHRIU2NhbGUgPSBzY2FsZSAvIDEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVuZGVyaW5nSW50ZW50KGludGVudCkge31cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0RmxhdG5lc3MoZmxhdG5lc3MpIHt9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEdTdGF0ZShzdGF0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBzdGF0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJMV1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0TGluZVdpZHRoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkxDXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRMaW5lQ2FwKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkxKXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRMaW5lSm9pbih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJNTFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0TWl0ZXJMaW1pdCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJEXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXREYXNoKHZhbHVlWzBdLCB2YWx1ZVsxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJSSVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UmVuZGVyaW5nSW50ZW50KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkZMXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRGbGF0bmVzcyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJGb250XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRGb250KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkNBXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdHJva2VBbHBoYSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjYVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RmlsbEFscGhhKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoYFVuaW1wbGVtZW50ZWQgZ3JhcGhpYyBzdGF0ZSBvcGVyYXRvciAke2tleX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsbCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQuZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LmVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmaWxsXCIsIGN1cnJlbnQuZmlsbENvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5lbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiZmlsbC1vcGFjaXR5XCIsIGN1cnJlbnQuZmlsbEFscGhhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmRQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2UoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHRoaXMuY3VycmVudDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0U3Ryb2tlQXR0cmlidXRlcyhjdXJyZW50LmVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZpbGxcIiwgXCJub25lXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVuZFBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRTdHJva2VBdHRyaWJ1dGVzKGVsZW1lbnQsIGxpbmVXaWR0aFNjYWxlID0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhc2hBcnJheSA9IGN1cnJlbnQuZGFzaEFycmF5O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVXaWR0aFNjYWxlICE9PSAxICYmIGRhc2hBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hBcnJheSA9IGRhc2hBcnJheS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGluZVdpZHRoU2NhbGUgKiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInN0cm9rZVwiLCBjdXJyZW50LnN0cm9rZUNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwic3Ryb2tlLW9wYWNpdHlcIiwgY3VycmVudC5zdHJva2VBbHBoYSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInN0cm9rZS1taXRlcmxpbWl0XCIsIHBmKGN1cnJlbnQubWl0ZXJMaW1pdCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJzdHJva2UtbGluZWNhcFwiLCBjdXJyZW50LmxpbmVDYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJzdHJva2UtbGluZWpvaW5cIiwgY3VycmVudC5saW5lSm9pbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInN0cm9rZS13aWR0aFwiLCBwZihsaW5lV2lkdGhTY2FsZSAqIGN1cnJlbnQubGluZVdpZHRoKSArIFwicHhcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInN0cm9rZS1kYXNoYXJyYXlcIiwgZGFzaEFycmF5Lm1hcChwZikuam9pbihcIiBcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJzdHJva2UtZGFzaG9mZnNldFwiLCBwZihsaW5lV2lkdGhTY2FsZSAqIGN1cnJlbnQuZGFzaFBoYXNlKSArIFwicHhcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGVvRmlsbCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50LmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LmVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmaWxsLXJ1bGVcIiwgXCJldmVub2RkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsU3Ryb2tlKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGVvRmlsbFN0cm9rZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50LmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LmVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmaWxsLXJ1bGVcIiwgXCJldmVub2RkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsbFN0cm9rZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZVN0cm9rZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlRmlsbFN0cm9rZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsbFN0cm9rZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZUVPRmlsbFN0cm9rZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW9GaWxsU3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBhaW50U29saWRDb2xvckltYWdlTWFzaygpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6cmVjdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieFwiLCBcIjBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInlcIiwgXCIwXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ3aWR0aFwiLCBcIjFweFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiaGVpZ2h0XCIsIFwiMXB4XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJmaWxsXCIsIHRoaXMuY3VycmVudC5maWxsQ29sb3IpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5zdXJlVHJhbnNmb3JtR3JvdXAoKS5hcHBlbmRDaGlsZChyZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcGFpbnRJbWFnZVhPYmplY3Qob2JqSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWdEYXRhID0gb2JqSWQuc3RhcnRzV2l0aChcImdfXCIpID8gdGhpcy5jb21tb25PYmpzLmdldChvYmpJZCkgOiB0aGlzLm9ianMuZ2V0KG9iaklkKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW1nRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoYERlcGVuZGVudCBpbWFnZSB3aXRoIG9iamVjdCBJRCAke29iaklkfSBpcyBub3QgcmVhZHkgeWV0YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhaW50SW5saW5lSW1hZ2VYT2JqZWN0KGltZ0RhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWludElubGluZUltYWdlWE9iamVjdChpbWdEYXRhLCBtYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBpbWdEYXRhLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGltZ0RhdGEuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGltZ1NyYyA9IGNvbnZlcnRJbWdEYXRhVG9QbmcoaW1nRGF0YSwgdGhpcy5mb3JjZURhdGFTY2hlbWEsICEhbWFzayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xpcHJlY3QgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2ZzpyZWN0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaXByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieFwiLCBcIjBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpcHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIFwiMFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlwcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcIndpZHRoXCIsIHBmKHdpZHRoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpcHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJoZWlnaHRcIiwgcGYoaGVpZ2h0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LmVsZW1lbnQgPSBjbGlwcmVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaXAoXCJub256ZXJvXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGltZ0VsID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6aW1hZ2VcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nRWwuc2V0QXR0cmlidXRlTlMoWExJTktfTlMsIFwieGxpbms6aHJlZlwiLCBpbWdTcmMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZ0VsLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieFwiLCBcIjBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nRWwuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ5XCIsIHBmKC1oZWlnaHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWdFbC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcIndpZHRoXCIsIHBmKHdpZHRoKSArIFwicHhcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nRWwuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJoZWlnaHRcIiwgcGYoaGVpZ2h0KSArIFwicHhcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nRWwuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ0cmFuc2Zvcm1cIiwgYHNjYWxlKCR7cGYoMSAvIHdpZHRoKX0gJHtwZigtMSAvIGhlaWdodCl9KWApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFzay5hcHBlbmRDaGlsZChpbWdFbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5zdXJlVHJhbnNmb3JtR3JvdXAoKS5hcHBlbmRDaGlsZChpbWdFbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWludEltYWdlTWFza1hPYmplY3QoaW1nRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBpbWdEYXRhLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGltZ0RhdGEuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGxDb2xvciA9IGN1cnJlbnQuZmlsbENvbG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQubWFza0lkID0gYG1hc2ske21hc2tDb3VudCsrfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFzayA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOm1hc2tcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFzay5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImlkXCIsIGN1cnJlbnQubWFza0lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6cmVjdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieFwiLCBcIjBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInlcIiwgXCIwXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ3aWR0aFwiLCBwZih3aWR0aCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJoZWlnaHRcIiwgcGYoaGVpZ2h0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImZpbGxcIiwgZmlsbENvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwibWFza1wiLCBgdXJsKCMke2N1cnJlbnQubWFza0lkfSlgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZnMuYXBwZW5kQ2hpbGQobWFzayk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbnN1cmVUcmFuc2Zvcm1Hcm91cCgpLmFwcGVuZENoaWxkKHJlY3QpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWludElubGluZUltYWdlWE9iamVjdChpbWdEYXRhLCBtYXNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcGFpbnRGb3JtWE9iamVjdEJlZ2luKG1hdHJpeCwgYmJveCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG1hdHJpeCkgJiYgbWF0cml4Lmxlbmd0aCA9PT0gNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybShtYXRyaXhbMF0sIG1hdHJpeFsxXSwgbWF0cml4WzJdLCBtYXRyaXhbM10sIG1hdHJpeFs0XSwgbWF0cml4WzVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmJveCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IGJib3hbMl0gLSBiYm94WzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBiYm94WzNdIC0gYmJveFsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xpcHJlY3QgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2ZzpyZWN0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlwcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInhcIiwgYmJveFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaXByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsIFwieVwiLCBiYm94WzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpcHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ3aWR0aFwiLCBwZih3aWR0aCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGlwcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImhlaWdodFwiLCBwZihoZWlnaHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50LmVsZW1lbnQgPSBjbGlwcmVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGlwKFwibm9uemVyb1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmRQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWludEZvcm1YT2JqZWN0RW5kKCkge31cblxuICAgICAgICAgICAgICAgICAgICAgICAgX2luaXRpYWxpemUodmlld3BvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdmcgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlKHZpZXdwb3J0LndpZHRoLCB2aWV3cG9ydC5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZmluaXRpb25zID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6ZGVmc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdmcuYXBwZW5kQ2hpbGQoZGVmaW5pdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVmcyA9IGRlZmluaXRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvb3RHcm91cCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOmdcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdEdyb3VwLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwidHJhbnNmb3JtXCIsIHBtKHZpZXdwb3J0LnRyYW5zZm9ybSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN2Zy5hcHBlbmRDaGlsZChyb290R3JvdXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ZnID0gcm9vdEdyb3VwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdmc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9lbnN1cmVDbGlwR3JvdXAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmN1cnJlbnQuY2xpcEdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsaXBHcm91cCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwic3ZnOmdcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaXBHcm91cC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcImNsaXAtcGF0aFwiLCB0aGlzLmN1cnJlbnQuYWN0aXZlQ2xpcFVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3ZnLmFwcGVuZENoaWxkKGNsaXBHcm91cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudC5jbGlwR3JvdXAgPSBjbGlwR3JvdXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudC5jbGlwR3JvdXA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9lbnN1cmVUcmFuc2Zvcm1Hcm91cCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMudGdycCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRncnAgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2ZzpnXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRncnAuc2V0QXR0cmlidXRlTlMobnVsbCwgXCJ0cmFuc2Zvcm1cIiwgcG0odGhpcy50cmFuc2Zvcm1NYXRyaXgpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50LmFjdGl2ZUNsaXBVcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Vuc3VyZUNsaXBHcm91cCgpLmFwcGVuZENoaWxkKHRoaXMudGdycCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN2Zy5hcHBlbmRDaGlsZCh0aGlzLnRncnApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGdycDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKiovIH0pLFxuICAgICAgICAgICAgLyogMjMgKi9cbiAgICAgICAgICAgIC8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXG5cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuUERGTm9kZVN0cmVhbSA9IHZvaWQgMDtcblxuICAgICAgICAgICAgICAgIHZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgX25ldHdvcmtfdXRpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI0KTtcblxuICAgICAgICAgICAgICAgIDtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgaHR0cCA9IHJlcXVpcmUoXCJodHRwXCIpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgaHR0cHMgPSByZXF1aXJlKFwiaHR0cHNcIik7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSByZXF1aXJlKFwidXJsXCIpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZVVyaVJlZ2V4ID0gL15maWxlOlxcL1xcL1xcL1thLXpBLVpdOlxcLy87XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwYXJzZVVybChzb3VyY2VVcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkVXJsID0gdXJsLnBhcnNlKHNvdXJjZVVybCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlZFVybC5wcm90b2NvbCA9PT0gXCJmaWxlOlwiIHx8IHBhcnNlZFVybC5ob3N0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VkVXJsO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKC9eW2Etel06Wy9cXFxcXS9pLnRlc3Qoc291cmNlVXJsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVybC5wYXJzZShgZmlsZTovLy8ke3NvdXJjZVVybH1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFyc2VkVXJsLmhvc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZFVybC5wcm90b2NvbCA9IFwiZmlsZTpcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWRVcmw7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgUERGTm9kZVN0cmVhbSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVybCA9IHBhcnNlVXJsKHNvdXJjZS51cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0h0dHAgPSB0aGlzLnVybC5wcm90b2NvbCA9PT0gXCJodHRwOlwiIHx8IHRoaXMudXJsLnByb3RvY29sID09PSBcImh0dHBzOlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0ZzVXJsID0gdGhpcy51cmwucHJvdG9jb2wgPT09IFwiZmlsZTpcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaHR0cEhlYWRlcnMgPSB0aGlzLmlzSHR0cCAmJiBzb3VyY2UuaHR0cEhlYWRlcnMgfHwge307XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgX3Byb2dyZXNzaXZlRGF0YUxlbmd0aCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcj8uX2xvYWRlZCA/PyAwO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0RnVsbFJlYWRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC5hc3NlcnQpKCF0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciwgXCJQREZOb2RlU3RyZWFtLmdldEZ1bGxSZWFkZXIgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIgPSB0aGlzLmlzRnNVcmwgPyBuZXcgUERGTm9kZVN0cmVhbUZzRnVsbFJlYWRlcih0aGlzKSA6IG5ldyBQREZOb2RlU3RyZWFtRnVsbFJlYWRlcih0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldFJhbmdlUmVhZGVyKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmQgPD0gdGhpcy5fcHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlUmVhZGVyID0gdGhpcy5pc0ZzVXJsID8gbmV3IFBERk5vZGVTdHJlYW1Gc1JhbmdlUmVhZGVyKHRoaXMsIHN0YXJ0LCBlbmQpIDogbmV3IFBERk5vZGVTdHJlYW1SYW5nZVJlYWRlcih0aGlzLCBzdGFydCwgZW5kKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycy5wdXNoKHJhbmdlUmVhZGVyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlUmVhZGVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQWxsUmVxdWVzdHMocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlci5jYW5jZWwocmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCByZWFkZXIgb2YgdGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycy5zbGljZSgwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5jYW5jZWwocmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXhwb3J0cy5QREZOb2RlU3RyZWFtID0gUERGTm9kZVN0cmVhbTtcblxuICAgICAgICAgICAgICAgIGNsYXNzIEJhc2VGdWxsUmVhZGVyIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3Ioc3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91cmwgPSBzdHJlYW0udXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RvcmVkRXJyb3IgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IHN0cmVhbS5zb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb250ZW50TGVuZ3RoID0gc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRlZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9maWxlbmFtZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNhYmxlUmFuZ2UgPSBzb3VyY2UuZGlzYWJsZVJhbmdlIHx8IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2VDaHVua1NpemUgPSBzb3VyY2UucmFuZ2VDaHVua1NpemU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fcmFuZ2VDaHVua1NpemUgJiYgIXRoaXMuX2Rpc2FibGVSYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc2FibGVSYW5nZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkID0gIXNvdXJjZS5kaXNhYmxlU3RyZWFtO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNSYW5nZVN1cHBvcnRlZCA9ICFzb3VyY2UuZGlzYWJsZVJhbmdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZGFibGVTdHJlYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oZWFkZXJzQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBoZWFkZXJzUmVhZHkoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faGVhZGVyc0NhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBmaWxlbmFtZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9maWxlbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBjb250ZW50TGVuZ3RoKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnRMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgaXNSYW5nZVN1cHBvcnRlZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1JhbmdlU3VwcG9ydGVkO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0IGlzU3RyZWFtaW5nU3VwcG9ydGVkKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYXN5bmMgcmVhZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3JlYWRDYXBhYmlsaXR5LnByb21pc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdG9yZWRFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IHRoaXMuX3N0b3JlZEVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaHVuayA9IHRoaXMuX3JlYWRhYmxlU3RyZWFtLnJlYWQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVhZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2FkZWQgKz0gY2h1bmsubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblByb2dyZXNzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVkOiB0aGlzLl9sb2FkZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsOiB0aGlzLl9jb250ZW50TGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGNodW5rKS5idWZmZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBidWZmZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjYW5jZWwocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3JlYWRhYmxlU3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXJyb3IocmVhc29uKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZGFibGVTdHJlYW0uZGVzdHJveShyZWFzb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX2Vycm9yKHJlYXNvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RvcmVkRXJyb3IgPSByZWFzb247XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRDYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9zZXRSZWFkYWJsZVN0cmVhbShyZWFkYWJsZVN0cmVhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZGFibGVTdHJlYW0gPSByZWFkYWJsZVN0cmVhbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRhYmxlU3RyZWFtLm9uKFwicmVhZGFibGVcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRDYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGFibGVTdHJlYW0ub24oXCJlbmRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRhYmxlU3RyZWFtLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kb25lID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRDYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGFibGVTdHJlYW0ub24oXCJlcnJvclwiLCByZWFzb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yKHJlYXNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZCAmJiB0aGlzLl9pc1JhbmdlU3VwcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXJyb3IobmV3IF91dGlsLkFib3J0RXhjZXB0aW9uKFwic3RyZWFtaW5nIGlzIGRpc2FibGVkXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0b3JlZEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZGFibGVTdHJlYW0uZGVzdHJveSh0aGlzLl9zdG9yZWRFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIEJhc2VSYW5nZVJlYWRlciB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKHN0cmVhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXJsID0gc3RyZWFtLnVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0b3JlZEVycm9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25Qcm9ncmVzcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2FkZWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZGFibGVTdHJlYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBzdHJlYW0uc291cmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQgPSAhc291cmNlLmRpc2FibGVTdHJlYW07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgaXNTdHJlYW1pbmdTdXBwb3J0ZWQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBhc3luYyByZWFkKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fcmVhZENhcGFiaWxpdHkucHJvbWlzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2RvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0b3JlZEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgdGhpcy5fc3RvcmVkRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNodW5rID0gdGhpcy5fcmVhZGFibGVTdHJlYW0ucmVhZCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWFkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRlZCArPSBjaHVuay5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUHJvZ3Jlc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkZWQ6IHRoaXMuX2xvYWRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheShjaHVuaykuYnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsKHJlYXNvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9yZWFkYWJsZVN0cmVhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yKHJlYXNvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtLmRlc3Ryb3kocmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9lcnJvcihyZWFzb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0b3JlZEVycm9yID0gcmVhc29uO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfc2V0UmVhZGFibGVTdHJlYW0ocmVhZGFibGVTdHJlYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtID0gcmVhZGFibGVTdHJlYW07XG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkYWJsZVN0cmVhbS5vbihcInJlYWRhYmxlXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRhYmxlU3RyZWFtLm9uKFwiZW5kXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkYWJsZVN0cmVhbS5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRhYmxlU3RyZWFtLm9uKFwiZXJyb3JcIiwgcmVhc29uID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcnJvcihyZWFzb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdG9yZWRFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtLmRlc3Ryb3kodGhpcy5fc3RvcmVkRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVSZXF1ZXN0T3B0aW9ucyhwYXJzZWRVcmwsIGhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3RvY29sOiBwYXJzZWRVcmwucHJvdG9jb2wsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRoOiBwYXJzZWRVcmwuYXV0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3Q6IHBhcnNlZFVybC5ob3N0bmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQ6IHBhcnNlZFVybC5wb3J0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogcGFyc2VkVXJsLnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgUERGTm9kZVN0cmVhbUZ1bGxSZWFkZXIgZXh0ZW5kcyBCYXNlRnVsbFJlYWRlciB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKHN0cmVhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VwZXIoc3RyZWFtKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlUmVzcG9uc2UgPSByZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDQwNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBfdXRpbC5NaXNzaW5nUERGRXhjZXB0aW9uKGBNaXNzaW5nIFBERiBcIiR7dGhpcy5fdXJsfVwiLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdG9yZWRFcnJvciA9IGVycm9yO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlYWRlcnNDYXBhYmlsaXR5LnJlamVjdChlcnJvcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlYWRlcnNDYXBhYmlsaXR5LnJlc29sdmUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldFJlYWRhYmxlU3RyZWFtKHJlc3BvbnNlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdldFJlc3BvbnNlSGVhZGVyID0gbmFtZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0cmVhbS5oZWFkZXJzW25hbWUudG9Mb3dlckNhc2UoKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dSYW5nZVJlcXVlc3RzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0ZWRMZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ID0gKDAsIF9uZXR3b3JrX3V0aWxzLnZhbGlkYXRlUmFuZ2VSZXF1ZXN0Q2FwYWJpbGl0aWVzKSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldFJlc3BvbnNlSGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0h0dHA6IHN0cmVhbS5pc0h0dHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlQ2h1bmtTaXplOiB0aGlzLl9yYW5nZUNodW5rU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZVJhbmdlOiB0aGlzLl9kaXNhYmxlUmFuZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc1JhbmdlU3VwcG9ydGVkID0gYWxsb3dSYW5nZVJlcXVlc3RzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSBzdWdnZXN0ZWRMZW5ndGggfHwgdGhpcy5fY29udGVudExlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9maWxlbmFtZSA9ICgwLCBfbmV0d29ya191dGlscy5leHRyYWN0RmlsZW5hbWVGcm9tSGVhZGVyKShnZXRSZXNwb25zZUhlYWRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXF1ZXN0ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VybC5wcm90b2NvbCA9PT0gXCJodHRwOlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdCA9IGh0dHAucmVxdWVzdChjcmVhdGVSZXF1ZXN0T3B0aW9ucyh0aGlzLl91cmwsIHN0cmVhbS5odHRwSGVhZGVycyksIGhhbmRsZVJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdCA9IGh0dHBzLnJlcXVlc3QoY3JlYXRlUmVxdWVzdE9wdGlvbnModGhpcy5fdXJsLCBzdHJlYW0uaHR0cEhlYWRlcnMpLCBoYW5kbGVSZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3Qub24oXCJlcnJvclwiLCByZWFzb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0b3JlZEVycm9yID0gcmVhc29uO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGVhZGVyc0NhcGFiaWxpdHkucmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdC5lbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgUERGTm9kZVN0cmVhbVJhbmdlUmVhZGVyIGV4dGVuZHMgQmFzZVJhbmdlUmVhZGVyIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3Ioc3RyZWFtLCBzdGFydCwgZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlcihzdHJlYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faHR0cEhlYWRlcnMgPSB7fTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiBzdHJlYW0uaHR0cEhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHN0cmVhbS5odHRwSGVhZGVyc1twcm9wZXJ0eV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2h0dHBIZWFkZXJzW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9odHRwSGVhZGVycy5SYW5nZSA9IGBieXRlcz0ke3N0YXJ0fS0ke2VuZCAtIDF9YDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlUmVzcG9uc2UgPSByZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDQwNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBfdXRpbC5NaXNzaW5nUERGRXhjZXB0aW9uKGBNaXNzaW5nIFBERiBcIiR7dGhpcy5fdXJsfVwiLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdG9yZWRFcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0UmVhZGFibGVTdHJlYW0ocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91cmwucHJvdG9jb2wgPT09IFwiaHR0cDpcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3QgPSBodHRwLnJlcXVlc3QoY3JlYXRlUmVxdWVzdE9wdGlvbnModGhpcy5fdXJsLCB0aGlzLl9odHRwSGVhZGVycyksIGhhbmRsZVJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdCA9IGh0dHBzLnJlcXVlc3QoY3JlYXRlUmVxdWVzdE9wdGlvbnModGhpcy5fdXJsLCB0aGlzLl9odHRwSGVhZGVycyksIGhhbmRsZVJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdC5vbihcImVycm9yXCIsIHJlYXNvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RvcmVkRXJyb3IgPSByZWFzb247XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdC5lbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgUERGTm9kZVN0cmVhbUZzRnVsbFJlYWRlciBleHRlbmRzIEJhc2VGdWxsUmVhZGVyIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3Ioc3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlcihzdHJlYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhdGggPSBkZWNvZGVVUklDb21wb25lbnQodGhpcy5fdXJsLnBhdGgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZVVyaVJlZ2V4LnRlc3QodGhpcy5fdXJsLmhyZWYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXlxcLy8sIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBmcy5sc3RhdChwYXRoLCAoZXJyb3IsIHN0YXQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IFwiRU5PRU5UXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gbmV3IF91dGlsLk1pc3NpbmdQREZFeGNlcHRpb24oYE1pc3NpbmcgUERGIFwiJHtwYXRofVwiLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RvcmVkRXJyb3IgPSBlcnJvcjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oZWFkZXJzQ2FwYWJpbGl0eS5yZWplY3QoZXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb250ZW50TGVuZ3RoID0gc3RhdC5zaXplO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0UmVhZGFibGVTdHJlYW0oZnMuY3JlYXRlUmVhZFN0cmVhbShwYXRoKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oZWFkZXJzQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgUERGTm9kZVN0cmVhbUZzUmFuZ2VSZWFkZXIgZXh0ZW5kcyBCYXNlUmFuZ2VSZWFkZXIge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihzdHJlYW0sIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyKHN0cmVhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGF0aCA9IGRlY29kZVVSSUNvbXBvbmVudCh0aGlzLl91cmwucGF0aCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlVXJpUmVnZXgudGVzdCh0aGlzLl91cmwuaHJlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9eXFwvLywgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldFJlYWRhYmxlU3RyZWFtKGZzLmNyZWF0ZVJlYWRTdHJlYW0ocGF0aCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogZW5kIC0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKioqLyB9KSxcbiAgICAgICAgICAgIC8qIDI0ICovXG4gICAgICAgICAgICAvKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblxuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLmNyZWF0ZVJlc3BvbnNlU3RhdHVzRXJyb3IgPSBjcmVhdGVSZXNwb25zZVN0YXR1c0Vycm9yO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuZXh0cmFjdEZpbGVuYW1lRnJvbUhlYWRlciA9IGV4dHJhY3RGaWxlbmFtZUZyb21IZWFkZXI7XG4gICAgICAgICAgICAgICAgZXhwb3J0cy52YWxpZGF0ZVJhbmdlUmVxdWVzdENhcGFiaWxpdGllcyA9IHZhbGlkYXRlUmFuZ2VSZXF1ZXN0Q2FwYWJpbGl0aWVzO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMudmFsaWRhdGVSZXNwb25zZVN0YXR1cyA9IHZhbGlkYXRlUmVzcG9uc2VTdGF0dXM7XG5cbiAgICAgICAgICAgICAgICB2YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEpO1xuXG4gICAgICAgICAgICAgICAgdmFyIF9jb250ZW50X2Rpc3Bvc2l0aW9uID0gX193X3BkZmpzX3JlcXVpcmVfXygyNSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgX2Rpc3BsYXlfdXRpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDUpO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVSYW5nZVJlcXVlc3RDYXBhYmlsaXRpZXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRSZXNwb25zZUhlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNIdHRwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZUNodW5rU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZVJhbmdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXR1cm5WYWx1ZXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxvd1JhbmdlUmVxdWVzdHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdGVkTGVuZ3RoOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gcGFyc2VJbnQoZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LUxlbmd0aFwiKSwgMTApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihsZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWVzO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVmFsdWVzLnN1Z2dlc3RlZExlbmd0aCA9IGxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobGVuZ3RoIDw9IDIgKiByYW5nZUNodW5rU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXNhYmxlUmFuZ2UgfHwgIWlzSHR0cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChnZXRSZXNwb25zZUhlYWRlcihcIkFjY2VwdC1SYW5nZXNcIikgIT09IFwiYnl0ZXNcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlcztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRFbmNvZGluZyA9IGdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1FbmNvZGluZ1wiKSB8fCBcImlkZW50aXR5XCI7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRFbmNvZGluZyAhPT0gXCJpZGVudGl0eVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWVzO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVmFsdWVzLmFsbG93UmFuZ2VSZXF1ZXN0cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cm5WYWx1ZXM7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZXh0cmFjdEZpbGVuYW1lRnJvbUhlYWRlcihnZXRSZXNwb25zZUhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50RGlzcG9zaXRpb24gPSBnZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtRGlzcG9zaXRpb25cIik7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnREaXNwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGVuYW1lID0gKDAsIF9jb250ZW50X2Rpc3Bvc2l0aW9uLmdldEZpbGVuYW1lRnJvbUNvbnRlbnREaXNwb3NpdGlvbkhlYWRlcikoY29udGVudERpc3Bvc2l0aW9uKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVuYW1lLmluY2x1ZGVzKFwiJVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KGZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge31cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCgwLCBfZGlzcGxheV91dGlscy5pc1BkZkZpbGUpKGZpbGVuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVJlc3BvbnNlU3RhdHVzRXJyb3Ioc3RhdHVzLCB1cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gNDA0IHx8IHN0YXR1cyA9PT0gMCAmJiB1cmwuc3RhcnRzV2l0aChcImZpbGU6XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IF91dGlsLk1pc3NpbmdQREZFeGNlcHRpb24oJ01pc3NpbmcgUERGIFwiJyArIHVybCArICdcIi4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgX3V0aWwuVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uKGBVbmV4cGVjdGVkIHNlcnZlciByZXNwb25zZSAoJHtzdGF0dXN9KSB3aGlsZSByZXRyaWV2aW5nIFBERiBcIiR7dXJsfVwiLmAsIHN0YXR1cyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVSZXNwb25zZVN0YXR1cyhzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXR1cyA9PT0gMjAwIHx8IHN0YXR1cyA9PT0gMjA2O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKiovIH0pLFxuICAgICAgICAgICAgLyogMjUgKi9cbiAgICAgICAgICAgIC8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXG5cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuZ2V0RmlsZW5hbWVGcm9tQ29udGVudERpc3Bvc2l0aW9uSGVhZGVyID0gZ2V0RmlsZW5hbWVGcm9tQ29udGVudERpc3Bvc2l0aW9uSGVhZGVyO1xuXG4gICAgICAgICAgICAgICAgdmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXygxKTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldEZpbGVuYW1lRnJvbUNvbnRlbnREaXNwb3NpdGlvbkhlYWRlcihjb250ZW50RGlzcG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5lZWRzRW5jb2RpbmdGaXh1cCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0bXAgPSB0b1BhcmFtUmVnRXhwKFwiZmlsZW5hbWVcXFxcKlwiLCBcImlcIikuZXhlYyhjb250ZW50RGlzcG9zaXRpb24pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0bXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IHRtcFsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaWxlbmFtZSA9IHJmYzI2MTZ1bnF1b3RlKHRtcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IHVuZXNjYXBlKGZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gcmZjNTk4N2RlY29kZShmaWxlbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IHJmYzIwNDdkZWNvZGUoZmlsZW5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpeHVwRW5jb2RpbmcoZmlsZW5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdG1wID0gcmZjMjIzMWdldHBhcmFtKGNvbnRlbnREaXNwb3NpdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRtcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZW5hbWUgPSByZmMyMDQ3ZGVjb2RlKHRtcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZml4dXBFbmNvZGluZyhmaWxlbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0bXAgPSB0b1BhcmFtUmVnRXhwKFwiZmlsZW5hbWVcIiwgXCJpXCIpLmV4ZWMoY29udGVudERpc3Bvc2l0aW9uKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodG1wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bXAgPSB0bXBbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmlsZW5hbWUgPSByZmMyNjE2dW5xdW90ZSh0bXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWUgPSByZmMyMDQ3ZGVjb2RlKGZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaXh1cEVuY29kaW5nKGZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRvUGFyYW1SZWdFeHAoYXR0cmlidXRlUGF0dGVybiwgZmxhZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiKD86Xnw7KVxcXFxzKlwiICsgYXR0cmlidXRlUGF0dGVybiArIFwiXFxcXHMqPVxcXFxzKlwiICsgXCIoXCIgKyAnW15cIjtcXFxcc11bXjtcXFxcc10qJyArIFwifFwiICsgJ1wiKD86W15cIlxcXFxcXFxcXXxcXFxcXFxcXFwiPykrXCI/JyArIFwiKVwiLCBmbGFncyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB0ZXh0ZGVjb2RlKGVuY29kaW5nLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuY29kaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEvXltcXHgwMC1cXHhGRl0rJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoZW5jb2RpbmcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhdGFsOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBidWZmZXIgPSAoMCwgX3V0aWwuc3RyaW5nVG9CeXRlcykodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRzRW5jb2RpbmdGaXh1cCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZpeHVwRW5jb2RpbmcodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWVkc0VuY29kaW5nRml4dXAgJiYgL1tcXHg4MC1cXHhmZl0vLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB0ZXh0ZGVjb2RlKFwidXRmLThcIiwgdmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5lZWRzRW5jb2RpbmdGaXh1cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRleHRkZWNvZGUoXCJpc28tODg1OS0xXCIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJmYzIyMzFnZXRwYXJhbShjb250ZW50RGlzcG9zaXRpb25TdHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZXIgPSB0b1BhcmFtUmVnRXhwKFwiZmlsZW5hbWVcXFxcKigoPyEwXFxcXGQpXFxcXGQrKShcXFxcKj8pXCIsIFwiaWdcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBpdGVyLmV4ZWMoY29udGVudERpc3Bvc2l0aW9uU3RyKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgWywgbiwgcXVvdCwgcGFydF0gPSBtYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gcGFyc2VJbnQobiwgMTApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gaW4gbWF0Y2hlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzW25dID0gW3F1b3QsIHBhcnRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0cyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IG1hdGNoZXMubGVuZ3RoOyArK24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShuIGluIG1hdGNoZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBbcXVvdCwgcGFydF0gPSBtYXRjaGVzW25dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnQgPSByZmMyNjE2dW5xdW90ZShwYXJ0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxdW90KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnQgPSB1bmVzY2FwZShwYXJ0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydCA9IHJmYzU5ODdkZWNvZGUocGFydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHBhcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFydHMuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJmYzI2MTZ1bnF1b3RlKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUuc3RhcnRzV2l0aCgnXCInKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gdmFsdWUuc2xpY2UoMSkuc3BsaXQoJ1xcXFxcIicpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBxdW90aW5kZXggPSBwYXJ0c1tpXS5pbmRleE9mKCdcIicpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxdW90aW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0c1tpXSA9IHBhcnRzW2ldLnNsaWNlKDAsIHF1b3RpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0cy5sZW5ndGggPSBpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzW2ldID0gcGFydHNbaV0ucmVwbGFjZSgvXFxcXCguKS9nLCBcIiQxXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcGFydHMuam9pbignXCInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcmZjNTk4N2RlY29kZShleHR2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5jb2RpbmdlbmQgPSBleHR2YWx1ZS5pbmRleE9mKFwiJ1wiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuY29kaW5nZW5kID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBleHR2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5jb2RpbmcgPSBleHR2YWx1ZS5zbGljZSgwLCBlbmNvZGluZ2VuZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsYW5ndmFsdWUgPSBleHR2YWx1ZS5zbGljZShlbmNvZGluZ2VuZCArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBsYW5ndmFsdWUucmVwbGFjZSgvXlteJ10qJy8sIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHRkZWNvZGUoZW5jb2RpbmcsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJmYzIwNDdkZWNvZGUodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmFsdWUuc3RhcnRzV2l0aChcIj0/XCIpIHx8IC9bXFx4MDAtXFx4MTlcXHg4MC1cXHhmZl0vLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvPVxcPyhbXFx3LV0qKVxcPyhbUXFCYl0pXFw/KCg/OlteP118XFw/KD8hPSkpKilcXD89L2csIGZ1bmN0aW9uIChtYXRjaGVzLCBjaGFyc2V0LCBlbmNvZGluZywgdGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmNvZGluZyA9PT0gXCJxXCIgfHwgZW5jb2RpbmcgPT09IFwiUVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL18vZywgXCIgXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC89KFswLTlhLWZBLUZdezJ9KS9nLCBmdW5jdGlvbiAobWF0Y2gsIGhleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoaGV4LCAxNikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHRkZWNvZGUoY2hhcnNldCwgdGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IGF0b2IodGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0ZGVjb2RlKGNoYXJzZXQsIHRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKioqLyB9KSxcbiAgICAgICAgICAgIC8qIDI2ICovXG4gICAgICAgICAgICAvKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSA9PiB7XG5cblxuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoe1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBleHBvcnRzLlBERk5ldHdvcmtTdHJlYW0gPSB2b2lkIDA7XG5cbiAgICAgICAgICAgICAgICB2YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEpO1xuXG4gICAgICAgICAgICAgICAgdmFyIF9uZXR3b3JrX3V0aWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygyNCk7XG5cbiAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgY29uc3QgT0tfUkVTUE9OU0UgPSAyMDA7XG4gICAgICAgICAgICAgICAgY29uc3QgUEFSVElBTF9DT05URU5UX1JFU1BPTlNFID0gMjA2O1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0QXJyYXlCdWZmZXIoeGhyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB4aHIucmVzcG9uc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFycmF5ID0gKDAsIF91dGlsLnN0cmluZ1RvQnl0ZXMpKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXkuYnVmZmVyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIE5ldHdvcmtNYW5hZ2VyIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IodXJsLCBhcmdzID0ge30pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0h0dHAgPSAvXmh0dHBzPzovaS50ZXN0KHVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmh0dHBIZWFkZXJzID0gdGhpcy5pc0h0dHAgJiYgYXJncy5odHRwSGVhZGVycyB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53aXRoQ3JlZGVudGlhbHMgPSBhcmdzLndpdGhDcmVkZW50aWFscyB8fCBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRYaHIgPSBhcmdzLmdldFhociB8fCBmdW5jdGlvbiBOZXR3b3JrTWFuYWdlcl9nZXRYaHIoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyWGhySWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nUmVxdWVzdHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFJhbmdlKGJlZ2luLCBlbmQsIGxpc3RlbmVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJncyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcHJvcCBpbiBsaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzW3Byb3BdID0gbGlzdGVuZXJzW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEZ1bGwobGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KGxpc3RlbmVycyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0KGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHhociA9IHRoaXMuZ2V0WGhyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB4aHJJZCA9IHRoaXMuY3VyclhocklkKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwZW5kaW5nUmVxdWVzdCA9IHRoaXMucGVuZGluZ1JlcXVlc3RzW3hocklkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB4aHIub3BlbihcIkdFVFwiLCB0aGlzLnVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdGhpcy53aXRoQ3JlZGVudGlhbHM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcHJvcGVydHkgaW4gdGhpcy5odHRwSGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5odHRwSGVhZGVyc1twcm9wZXJ0eV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKHByb3BlcnR5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzSHR0cCAmJiBcImJlZ2luXCIgaW4gYXJncyAmJiBcImVuZFwiIGluIGFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIlJhbmdlXCIsIGBieXRlcz0ke2FyZ3MuYmVnaW59LSR7YXJncy5lbmQgLSAxfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdSZXF1ZXN0LmV4cGVjdGVkU3RhdHVzID0gUEFSVElBTF9DT05URU5UX1JFU1BPTlNFO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nUmVxdWVzdC5leHBlY3RlZFN0YXR1cyA9IE9LX1JFU1BPTlNFO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5vbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3Mub25FcnJvcih4aHIuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gdGhpcy5vblN0YXRlQ2hhbmdlLmJpbmQodGhpcywgeGhySWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeGhyLm9ucHJvZ3Jlc3MgPSB0aGlzLm9uUHJvZ3Jlc3MuYmluZCh0aGlzLCB4aHJJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nUmVxdWVzdC5vbkhlYWRlcnNSZWNlaXZlZCA9IGFyZ3Mub25IZWFkZXJzUmVjZWl2ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nUmVxdWVzdC5vbkRvbmUgPSBhcmdzLm9uRG9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdSZXF1ZXN0Lm9uRXJyb3IgPSBhcmdzLm9uRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nUmVxdWVzdC5vblByb2dyZXNzID0gYXJncy5vblByb2dyZXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnNlbmQobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geGhySWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBvblByb2dyZXNzKHhocklkLCBldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBlbmRpbmdSZXF1ZXN0ID0gdGhpcy5wZW5kaW5nUmVxdWVzdHNbeGhySWRdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBlbmRpbmdSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nUmVxdWVzdC5vblByb2dyZXNzPy4oZXZ0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG9uU3RhdGVDaGFuZ2UoeGhySWQsIGV2dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGVuZGluZ1JlcXVlc3QgPSB0aGlzLnBlbmRpbmdSZXF1ZXN0c1t4aHJJZF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGVuZGluZ1JlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHhociA9IHBlbmRpbmdSZXF1ZXN0LnhocjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID49IDIgJiYgcGVuZGluZ1JlcXVlc3Qub25IZWFkZXJzUmVjZWl2ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nUmVxdWVzdC5vbkhlYWRlcnNSZWNlaXZlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBwZW5kaW5nUmVxdWVzdC5vbkhlYWRlcnNSZWNlaXZlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh4aHJJZCBpbiB0aGlzLnBlbmRpbmdSZXF1ZXN0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnBlbmRpbmdSZXF1ZXN0c1t4aHJJZF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAwICYmIHRoaXMuaXNIdHRwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZ1JlcXVlc3Qub25FcnJvcj8uKHhoci5zdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeGhyU3RhdHVzID0geGhyLnN0YXR1cyB8fCBPS19SRVNQT05TRTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9rX3Jlc3BvbnNlX29uX3JhbmdlX3JlcXVlc3QgPSB4aHJTdGF0dXMgPT09IE9LX1JFU1BPTlNFICYmIHBlbmRpbmdSZXF1ZXN0LmV4cGVjdGVkU3RhdHVzID09PSBQQVJUSUFMX0NPTlRFTlRfUkVTUE9OU0U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb2tfcmVzcG9uc2Vfb25fcmFuZ2VfcmVxdWVzdCAmJiB4aHJTdGF0dXMgIT09IHBlbmRpbmdSZXF1ZXN0LmV4cGVjdGVkU3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZ1JlcXVlc3Qub25FcnJvcj8uKHhoci5zdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2h1bmsgPSBnZXRBcnJheUJ1ZmZlcih4aHIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGhyU3RhdHVzID09PSBQQVJUSUFMX0NPTlRFTlRfUkVTUE9OU0UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByYW5nZUhlYWRlciA9IHhoci5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtUmFuZ2VcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hlcyA9IC9ieXRlcyAoXFxkKyktKFxcZCspXFwvKFxcZCspLy5leGVjKHJhbmdlSGVhZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nUmVxdWVzdC5vbkRvbmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbjogcGFyc2VJbnQobWF0Y2hlc1sxXSwgMTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVua1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaHVuaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmdSZXF1ZXN0Lm9uRG9uZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVua1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nUmVxdWVzdC5vbkVycm9yPy4oeGhyLnN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXRSZXF1ZXN0WGhyKHhocklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wZW5kaW5nUmVxdWVzdHNbeGhySWRdLnhocjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlzUGVuZGluZ1JlcXVlc3QoeGhySWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4aHJJZCBpbiB0aGlzLnBlbmRpbmdSZXF1ZXN0cztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGFib3J0UmVxdWVzdCh4aHJJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeGhyID0gdGhpcy5wZW5kaW5nUmVxdWVzdHNbeGhySWRdLnhocjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnBlbmRpbmdSZXF1ZXN0c1t4aHJJZF07XG4gICAgICAgICAgICAgICAgICAgICAgICB4aHIuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgUERGTmV0d29ya1N0cmVhbSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFuYWdlciA9IG5ldyBOZXR3b3JrTWFuYWdlcihzb3VyY2UudXJsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHR0cEhlYWRlcnM6IHNvdXJjZS5odHRwSGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHNvdXJjZS53aXRoQ3JlZGVudGlhbHNcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2VDaHVua1NpemUgPSBzb3VyY2UucmFuZ2VDaHVua1NpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfb25SYW5nZVJlcXVlc3RSZWFkZXJDbG9zZWQocmVhZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycy5pbmRleE9mKHJlYWRlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldEZ1bGxSZWFkZXIoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3V0aWwuYXNzZXJ0KSghdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIsIFwiUERGTmV0d29ya1N0cmVhbS5nZXRGdWxsUmVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyID0gbmV3IFBERk5ldHdvcmtTdHJlYW1GdWxsUmVxdWVzdFJlYWRlcih0aGlzLl9tYW5hZ2VyLCB0aGlzLl9zb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0UmFuZ2VSZWFkZXIoYmVnaW4sIGVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IFBERk5ldHdvcmtTdHJlYW1SYW5nZVJlcXVlc3RSZWFkZXIodGhpcy5fbWFuYWdlciwgYmVnaW4sIGVuZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIub25DbG9zZWQgPSB0aGlzLl9vblJhbmdlUmVxdWVzdFJlYWRlckNsb3NlZC5iaW5kKHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzLnB1c2gocmVhZGVyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEFsbFJlcXVlc3RzKHJlYXNvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXI/LmNhbmNlbChyZWFzb24pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJlYWRlciBvZiB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzLnNsaWNlKDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyLmNhbmNlbChyZWFzb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleHBvcnRzLlBERk5ldHdvcmtTdHJlYW0gPSBQREZOZXR3b3JrU3RyZWFtO1xuXG4gICAgICAgICAgICAgICAgY2xhc3MgUERGTmV0d29ya1N0cmVhbUZ1bGxSZXF1ZXN0UmVhZGVyIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3IobWFuYWdlciwgc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYW5hZ2VyID0gbWFuYWdlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25IZWFkZXJzUmVjZWl2ZWQ6IHRoaXMuX29uSGVhZGVyc1JlY2VpdmVkLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Eb25lOiB0aGlzLl9vbkRvbmUuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yOiB0aGlzLl9vbkVycm9yLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Qcm9ncmVzczogdGhpcy5fb25Qcm9ncmVzcy5iaW5kKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXJsID0gc291cmNlLnVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxSZXF1ZXN0SWQgPSBtYW5hZ2VyLnJlcXVlc3RGdWxsKGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGVhZGVyc1JlY2VpdmVkQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc2FibGVSYW5nZSA9IHNvdXJjZS5kaXNhYmxlUmFuZ2UgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb250ZW50TGVuZ3RoID0gc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JhbmdlQ2h1bmtTaXplID0gc291cmNlLnJhbmdlQ2h1bmtTaXplO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3JhbmdlQ2h1bmtTaXplICYmICF0aGlzLl9kaXNhYmxlUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNhYmxlUmFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNSYW5nZVN1cHBvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkQ2h1bmtzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXF1ZXN0cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RvcmVkRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9maWxlbmFtZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX29uSGVhZGVyc1JlY2VpdmVkKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZnVsbFJlcXVlc3RYaHJJZCA9IHRoaXMuX2Z1bGxSZXF1ZXN0SWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZ1bGxSZXF1ZXN0WGhyID0gdGhpcy5fbWFuYWdlci5nZXRSZXF1ZXN0WGhyKGZ1bGxSZXF1ZXN0WGhySWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnZXRSZXNwb25zZUhlYWRlciA9IG5hbWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdWxsUmVxdWVzdFhoci5nZXRSZXNwb25zZUhlYWRlcihuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxvd1JhbmdlUmVxdWVzdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdGVkTGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICB9ID0gKDAsIF9uZXR3b3JrX3V0aWxzLnZhbGlkYXRlUmFuZ2VSZXF1ZXN0Q2FwYWJpbGl0aWVzKSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UmVzcG9uc2VIZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNIdHRwOiB0aGlzLl9tYW5hZ2VyLmlzSHR0cCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZUNodW5rU2l6ZTogdGhpcy5fcmFuZ2VDaHVua1NpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZVJhbmdlOiB0aGlzLl9kaXNhYmxlUmFuZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxsb3dSYW5nZVJlcXVlc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNSYW5nZVN1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSBzdWdnZXN0ZWRMZW5ndGggfHwgdGhpcy5fY29udGVudExlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGVuYW1lID0gKDAsIF9uZXR3b3JrX3V0aWxzLmV4dHJhY3RGaWxlbmFtZUZyb21IZWFkZXIpKGdldFJlc3BvbnNlSGVhZGVyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYW5hZ2VyLmFib3J0UmVxdWVzdChmdWxsUmVxdWVzdFhocklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGVhZGVyc1JlY2VpdmVkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfb25Eb25lKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdENhcGFiaWxpdHkgPSB0aGlzLl9yZXF1ZXN0cy5zaGlmdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEuY2h1bmssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRDaHVua3MucHVzaChkYXRhLmNodW5rKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY2FjaGVkQ2h1bmtzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcmVxdWVzdENhcGFiaWxpdHkgb2YgdGhpcy5fcmVxdWVzdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0Q2FwYWJpbGl0eS5yZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXF1ZXN0cy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX29uRXJyb3Ioc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdG9yZWRFcnJvciA9ICgwLCBfbmV0d29ya191dGlscy5jcmVhdGVSZXNwb25zZVN0YXR1c0Vycm9yKShzdGF0dXMsIHRoaXMuX3VybCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlYWRlcnNSZWNlaXZlZENhcGFiaWxpdHkucmVqZWN0KHRoaXMuX3N0b3JlZEVycm9yKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCByZXF1ZXN0Q2FwYWJpbGl0eSBvZiB0aGlzLl9yZXF1ZXN0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlamVjdCh0aGlzLl9zdG9yZWRFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRDaHVua3MubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9vblByb2dyZXNzKGV2dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblByb2dyZXNzPy4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRlZDogZXZ0LmxvYWRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbDogZXZ0Lmxlbmd0aENvbXB1dGFibGUgPyBldnQudG90YWwgOiB0aGlzLl9jb250ZW50TGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBmaWxlbmFtZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9maWxlbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBpc1JhbmdlU3VwcG9ydGVkKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgaXNTdHJlYW1pbmdTdXBwb3J0ZWQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgY29udGVudExlbmd0aCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50TGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0IGhlYWRlcnNSZWFkeSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9oZWFkZXJzUmVjZWl2ZWRDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBhc3luYyByZWFkKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0b3JlZEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgdGhpcy5fc3RvcmVkRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jYWNoZWRDaHVua3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNodW5rID0gdGhpcy5fY2FjaGVkQ2h1bmtzLnNoaWZ0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY2h1bmssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2RvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RzLnB1c2gocmVxdWVzdENhcGFiaWxpdHkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWVzdENhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oZWFkZXJzUmVjZWl2ZWRDYXBhYmlsaXR5LnJlamVjdChyZWFzb24pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJlcXVlc3RDYXBhYmlsaXR5IG9mIHRoaXMuX3JlcXVlc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdHMubGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX21hbmFnZXIuaXNQZW5kaW5nUmVxdWVzdCh0aGlzLl9mdWxsUmVxdWVzdElkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21hbmFnZXIuYWJvcnRSZXF1ZXN0KHRoaXMuX2Z1bGxSZXF1ZXN0SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIFBERk5ldHdvcmtTdHJlYW1SYW5nZVJlcXVlc3RSZWFkZXIge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihtYW5hZ2VyLCBiZWdpbiwgZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYW5hZ2VyID0gbWFuYWdlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Eb25lOiB0aGlzLl9vbkRvbmUuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yOiB0aGlzLl9vbkVycm9yLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Qcm9ncmVzczogdGhpcy5fb25Qcm9ncmVzcy5iaW5kKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXJsID0gbWFuYWdlci51cmw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXF1ZXN0SWQgPSBtYW5hZ2VyLnJlcXVlc3RSYW5nZShiZWdpbiwgZW5kLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9xdWV1ZWRDaHVuayA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdG9yZWRFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25Qcm9ncmVzcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ2xvc2VkID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9jbG9zZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25DbG9zZWQ/Lih0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9vbkRvbmUoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2h1bmsgPSBkYXRhLmNodW5rO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVxdWVzdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RDYXBhYmlsaXR5ID0gdGhpcy5fcmVxdWVzdHMuc2hpZnQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY2h1bmssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3F1ZXVlZENodW5rID0gY2h1bms7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJlcXVlc3RDYXBhYmlsaXR5IG9mIHRoaXMuX3JlcXVlc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdHMubGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9vbkVycm9yKHN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RvcmVkRXJyb3IgPSAoMCwgX25ldHdvcmtfdXRpbHMuY3JlYXRlUmVzcG9uc2VTdGF0dXNFcnJvcikoc3RhdHVzLCB0aGlzLl91cmwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJlcXVlc3RDYXBhYmlsaXR5IG9mIHRoaXMuX3JlcXVlc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVqZWN0KHRoaXMuX3N0b3JlZEVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdHMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3F1ZXVlZENodW5rID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF9vblByb2dyZXNzKGV2dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzU3RyZWFtaW5nU3VwcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblByb2dyZXNzPy4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkZWQ6IGV2dC5sb2FkZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBpc1N0cmVhbWluZ1N1cHBvcnRlZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGFzeW5jIHJlYWQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3RvcmVkRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyB0aGlzLl9zdG9yZWRFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3F1ZXVlZENodW5rICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2h1bmsgPSB0aGlzLl9xdWV1ZWRDaHVuaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9xdWV1ZWRDaHVuayA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNodW5rLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXF1ZXN0cy5wdXNoKHJlcXVlc3RDYXBhYmlsaXR5KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3RDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjYW5jZWwocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kb25lID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCByZXF1ZXN0Q2FwYWJpbGl0eSBvZiB0aGlzLl9yZXF1ZXN0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tYW5hZ2VyLmlzUGVuZGluZ1JlcXVlc3QodGhpcy5fcmVxdWVzdElkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21hbmFnZXIuYWJvcnRSZXF1ZXN0KHRoaXMuX3JlcXVlc3RJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKiovIH0pLFxuICAgICAgICAgICAgLyogMjcgKi9cbiAgICAgICAgICAgIC8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pID0+IHtcblxuXG5cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGV4cG9ydHMuUERGRmV0Y2hTdHJlYW0gPSB2b2lkIDA7XG5cbiAgICAgICAgICAgICAgICB2YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEpO1xuXG4gICAgICAgICAgICAgICAgdmFyIF9uZXR3b3JrX3V0aWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygyNCk7XG5cbiAgICAgICAgICAgICAgICA7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVGZXRjaE9wdGlvbnMoaGVhZGVycywgd2l0aENyZWRlbnRpYWxzLCBhYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlcj8uc2lnbmFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJjb3JzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVkZW50aWFsczogd2l0aENyZWRlbnRpYWxzID8gXCJpbmNsdWRlXCIgOiBcInNhbWUtb3JpZ2luXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdDogXCJmb2xsb3dcIlxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUhlYWRlcnMoaHR0cEhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiBodHRwSGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBodHRwSGVhZGVyc1twcm9wZXJ0eV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycy5hcHBlbmQocHJvcGVydHksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoZWFkZXJzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsYXNzIFBERkZldGNoU3RyZWFtIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0b3Ioc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNIdHRwID0gL15odHRwcz86L2kudGVzdChzb3VyY2UudXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaHR0cEhlYWRlcnMgPSB0aGlzLmlzSHR0cCAmJiBzb3VyY2UuaHR0cEhlYWRlcnMgfHwge307XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzID0gW107XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgX3Byb2dyZXNzaXZlRGF0YUxlbmd0aCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcj8uX2xvYWRlZCA/PyAwO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0RnVsbFJlYWRlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdXRpbC5hc3NlcnQpKCF0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciwgXCJQREZGZXRjaFN0cmVhbS5nZXRGdWxsUmVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyID0gbmV3IFBERkZldGNoU3RyZWFtUmVhZGVyKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0UmFuZ2VSZWFkZXIoYmVnaW4sIGVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVuZCA8PSB0aGlzLl9wcm9ncmVzc2l2ZURhdGFMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IFBERkZldGNoU3RyZWFtUmFuZ2VSZWFkZXIodGhpcywgYmVnaW4sIGVuZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMucHVzaChyZWFkZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVhZGVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQWxsUmVxdWVzdHMocmVhc29uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlci5jYW5jZWwocmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCByZWFkZXIgb2YgdGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycy5zbGljZSgwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5jYW5jZWwocmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXhwb3J0cy5QREZGZXRjaFN0cmVhbSA9IFBERkZldGNoU3RyZWFtO1xuXG4gICAgICAgICAgICAgICAgY2xhc3MgUERGRmV0Y2hTdHJlYW1SZWFkZXIge1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihzdHJlYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2FkZWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmlsZW5hbWUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gc3RyZWFtLnNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3dpdGhDcmVkZW50aWFscyA9IHNvdXJjZS53aXRoQ3JlZGVudGlhbHMgfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb250ZW50TGVuZ3RoID0gc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlYWRlcnNDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzYWJsZVJhbmdlID0gc291cmNlLmRpc2FibGVSYW5nZSB8fCBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JhbmdlQ2h1bmtTaXplID0gc291cmNlLnJhbmdlQ2h1bmtTaXplO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3JhbmdlQ2h1bmtTaXplICYmICF0aGlzLl9kaXNhYmxlUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNhYmxlUmFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEFib3J0Q29udHJvbGxlciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Fib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQgPSAhc291cmNlLmRpc2FibGVTdHJlYW07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc1JhbmdlU3VwcG9ydGVkID0gIXNvdXJjZS5kaXNhYmxlUmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oZWFkZXJzID0gY3JlYXRlSGVhZGVycyh0aGlzLl9zdHJlYW0uaHR0cEhlYWRlcnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJsID0gc291cmNlLnVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoKHVybCwgY3JlYXRlRmV0Y2hPcHRpb25zKHRoaXMuX2hlYWRlcnMsIHRoaXMuX3dpdGhDcmVkZW50aWFscywgdGhpcy5fYWJvcnRDb250cm9sbGVyKSkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoMCwgX25ldHdvcmtfdXRpbHMudmFsaWRhdGVSZXNwb25zZVN0YXR1cykocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyAoMCwgX25ldHdvcmtfdXRpbHMuY3JlYXRlUmVzcG9uc2VTdGF0dXNFcnJvcikocmVzcG9uc2Uuc3RhdHVzLCB1cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRlciA9IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oZWFkZXJzQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnZXRSZXNwb25zZUhlYWRlciA9IG5hbWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuaGVhZGVycy5nZXQobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dSYW5nZVJlcXVlc3RzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0ZWRMZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ID0gKDAsIF9uZXR3b3JrX3V0aWxzLnZhbGlkYXRlUmFuZ2VSZXF1ZXN0Q2FwYWJpbGl0aWVzKSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldFJlc3BvbnNlSGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0h0dHA6IHRoaXMuX3N0cmVhbS5pc0h0dHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlQ2h1bmtTaXplOiB0aGlzLl9yYW5nZUNodW5rU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZVJhbmdlOiB0aGlzLl9kaXNhYmxlUmFuZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc1JhbmdlU3VwcG9ydGVkID0gYWxsb3dSYW5nZVJlcXVlc3RzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSBzdWdnZXN0ZWRMZW5ndGggfHwgdGhpcy5fY29udGVudExlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9maWxlbmFtZSA9ICgwLCBfbmV0d29ya191dGlscy5leHRyYWN0RmlsZW5hbWVGcm9tSGVhZGVyKShnZXRSZXNwb25zZUhlYWRlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkICYmIHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW5jZWwobmV3IF91dGlsLkFib3J0RXhjZXB0aW9uKFwiU3RyZWFtaW5nIGlzIGRpc2FibGVkLlwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2godGhpcy5faGVhZGVyc0NhcGFiaWxpdHkucmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25Qcm9ncmVzcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgaGVhZGVyc1JlYWR5KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hlYWRlcnNDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgZmlsZW5hbWUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZmlsZW5hbWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgY29udGVudExlbmd0aCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50TGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0IGlzUmFuZ2VTdXBwb3J0ZWQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXNSYW5nZVN1cHBvcnRlZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGdldCBpc1N0cmVhbWluZ1N1cHBvcnRlZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGFzeW5jIHJlYWQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9oZWFkZXJzQ2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gPSBhd2FpdCB0aGlzLl9yZWFkZXIucmVhZCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9hZGVkICs9IHZhbHVlLmJ5dGVMZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUHJvZ3Jlc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkZWQ6IHRoaXMuX2xvYWRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWw6IHRoaXMuX2NvbnRlbnRMZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkodmFsdWUpLmJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkZXIuY2FuY2VsKHJlYXNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hYm9ydENvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xhc3MgUERGRmV0Y2hTdHJlYW1SYW5nZVJlYWRlciB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKHN0cmVhbSwgYmVnaW4sIGVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RyZWFtID0gc3RyZWFtO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZGVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRlZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBzdHJlYW0uc291cmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fd2l0aENyZWRlbnRpYWxzID0gc291cmNlLndpdGhDcmVkZW50aWFscyB8fCBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQgPSAhc291cmNlLmRpc2FibGVTdHJlYW07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgQWJvcnRDb250cm9sbGVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oZWFkZXJzID0gY3JlYXRlSGVhZGVycyh0aGlzLl9zdHJlYW0uaHR0cEhlYWRlcnMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oZWFkZXJzLmFwcGVuZChcIlJhbmdlXCIsIGBieXRlcz0ke2JlZ2lufS0ke2VuZCAtIDF9YCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IHNvdXJjZS51cmw7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZXRjaCh1cmwsIGNyZWF0ZUZldGNoT3B0aW9ucyh0aGlzLl9oZWFkZXJzLCB0aGlzLl93aXRoQ3JlZGVudGlhbHMsIHRoaXMuX2Fib3J0Q29udHJvbGxlcikpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKDAsIF9uZXR3b3JrX3V0aWxzLnZhbGlkYXRlUmVzcG9uc2VTdGF0dXMpKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgKDAsIF9uZXR3b3JrX3V0aWxzLmNyZWF0ZVJlc3BvbnNlU3RhdHVzRXJyb3IpKHJlc3BvbnNlLnN0YXR1cywgdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkZXIgPSByZXNwb25zZS5ib2R5LmdldFJlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2godGhpcy5fcmVhZENhcGFiaWxpdHkucmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25Qcm9ncmVzcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBnZXQgaXNTdHJlYW1pbmdTdXBwb3J0ZWQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBhc3luYyByZWFkKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fcmVhZENhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lXG4gICAgICAgICAgICAgICAgICAgICAgICB9ID0gYXdhaXQgdGhpcy5fcmVhZGVyLnJlYWQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRlZCArPSB2YWx1ZS5ieXRlTGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblByb2dyZXNzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVkOiB0aGlzLl9sb2FkZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkodmFsdWUpLmJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkZXIuY2FuY2VsKHJlYXNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hYm9ydENvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyoqKi8gfSlcbiAgICAgICAgICAgIC8qKioqKiovIFx0XSk7XG4gICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgICAgIC8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuICAgICAgICAvKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcbiAgICAgICAgLyoqKioqKi9cbiAgICAgICAgLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuICAgICAgICAvKioqKioqLyBcdGZ1bmN0aW9uIF9fd19wZGZqc19yZXF1aXJlX18obW9kdWxlSWQpIHtcbiAgICAgICAgICAgIC8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiAgICAgICAgICAgIC8qKioqKiovIFx0XHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcbiAgICAgICAgICAgIC8qKioqKiovIFx0XHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvKioqKioqLyBcdFx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG4gICAgICAgICAgICAgICAgLyoqKioqKi8gXHRcdH1cbiAgICAgICAgICAgIC8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuICAgICAgICAgICAgLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuICAgICAgICAgICAgICAgIC8qKioqKiovIFx0XHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcbiAgICAgICAgICAgICAgICAvKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuICAgICAgICAgICAgICAgIC8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4gICAgICAgICAgICAgICAgLyoqKioqKi8gXHRcdH07XG4gICAgICAgICAgICAvKioqKioqL1xuICAgICAgICAgICAgLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuICAgICAgICAgICAgLyoqKioqKi8gXHRcdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pO1xuICAgICAgICAgICAgLyoqKioqKi9cbiAgICAgICAgICAgIC8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuICAgICAgICAgICAgLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiAgICAgICAgICAgIC8qKioqKiovIFx0fVxuICAgICAgICAvKioqKioqL1xuICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgICAgICB2YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IHt9O1xuLy8gVGhpcyBlbnRyeSBuZWVkIHRvIGJlIHdyYXBwZWQgaW4gYW4gSUlGRSBiZWNhdXNlIGl0IG5lZWQgdG8gYmUgaXNvbGF0ZWQgYWdhaW5zdCBvdGhlciBtb2R1bGVzIGluIHRoZSBjaHVuay5cbiAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICAgIHZhciBleHBvcnRzID0gX193ZWJwYWNrX2V4cG9ydHNfXztcblxuXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFubm90YXRpb25MYXllclwiLCAoe1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfYW5ub3RhdGlvbl9sYXllci5Bbm5vdGF0aW9uTGF5ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQW5ub3RhdGlvbk1vZGVcIiwgKHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3V0aWwuQW5ub3RhdGlvbk1vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ01hcENvbXByZXNzaW9uVHlwZVwiLCAoe1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdXRpbC5DTWFwQ29tcHJlc3Npb25UeXBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkdsb2JhbFdvcmtlck9wdGlvbnNcIiwgKHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3dvcmtlcl9vcHRpb25zLkdsb2JhbFdvcmtlck9wdGlvbnM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW52YWxpZFBERkV4Y2VwdGlvblwiLCAoe1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdXRpbC5JbnZhbGlkUERGRXhjZXB0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkxvb3BiYWNrUG9ydFwiLCAoe1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfYXBpLkxvb3BiYWNrUG9ydDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNaXNzaW5nUERGRXhjZXB0aW9uXCIsICh7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF91dGlsLk1pc3NpbmdQREZFeGNlcHRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiT1BTXCIsICh7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF91dGlsLk9QUztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQREZEYXRhUmFuZ2VUcmFuc3BvcnRcIiwgKHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2FwaS5QREZEYXRhUmFuZ2VUcmFuc3BvcnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUERGRGF0ZVN0cmluZ1wiLCAoe1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfZGlzcGxheV91dGlscy5QREZEYXRlU3RyaW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBERldvcmtlclwiLCAoe1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfYXBpLlBERldvcmtlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQYXNzd29yZFJlc3BvbnNlc1wiLCAoe1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdXRpbC5QYXNzd29yZFJlc3BvbnNlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQZXJtaXNzaW9uRmxhZ1wiLCAoe1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdXRpbC5QZXJtaXNzaW9uRmxhZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQaXhlbHNQZXJJbmNoXCIsICh7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9kaXNwbGF5X3V0aWxzLlBpeGVsc1BlckluY2g7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmVuZGVyaW5nQ2FuY2VsbGVkRXhjZXB0aW9uXCIsICh7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9kaXNwbGF5X3V0aWxzLlJlbmRlcmluZ0NhbmNlbGxlZEV4Y2VwdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTVkdHcmFwaGljc1wiLCAoe1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfc3ZnLlNWR0dyYXBoaWNzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlVOU1VQUE9SVEVEX0ZFQVRVUkVTXCIsICh7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF91dGlsLlVOU1VQUE9SVEVEX0ZFQVRVUkVTO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvblwiLCAoe1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdXRpbC5VbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVXRpbFwiLCAoe1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdXRpbC5VdGlsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlZlcmJvc2l0eUxldmVsXCIsICh7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF91dGlsLlZlcmJvc2l0eUxldmVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlhmYUxheWVyXCIsICh7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF94ZmFfbGF5ZXIuWGZhTGF5ZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYnVpbGRcIiwgKHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2FwaS5idWlsZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVQcm9taXNlQ2FwYWJpbGl0eVwiLCAoe1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVWYWxpZEFic29sdXRlVXJsXCIsICh7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF91dGlsLmNyZWF0ZVZhbGlkQWJzb2x1dGVVcmw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0RG9jdW1lbnRcIiwgKHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2FwaS5nZXREb2N1bWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRGaWxlbmFtZUZyb21VcmxcIiwgKHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2Rpc3BsYXlfdXRpbHMuZ2V0RmlsZW5hbWVGcm9tVXJsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFBkZkZpbGVuYW1lRnJvbVVybFwiLCAoe1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfZGlzcGxheV91dGlscy5nZXRQZGZGaWxlbmFtZUZyb21Vcmw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0WGZhUGFnZVZpZXdwb3J0XCIsICh7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9kaXNwbGF5X3V0aWxzLmdldFhmYVBhZ2VWaWV3cG9ydDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1BkZkZpbGVcIiwgKHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2Rpc3BsYXlfdXRpbHMuaXNQZGZGaWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImxvYWRTY3JpcHRcIiwgKHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2Rpc3BsYXlfdXRpbHMubG9hZFNjcmlwdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZW5kZXJUZXh0TGF5ZXJcIiwgKHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RleHRfbGF5ZXIucmVuZGVyVGV4dExheWVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNoYWRvd1wiLCAoe1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdXRpbC5zaGFkb3c7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidmVyc2lvblwiLCAoe1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfYXBpLnZlcnNpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICB2YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEpO1xuXG4gICAgICAgICAgICB2YXIgX2FwaSA9IF9fd19wZGZqc19yZXF1aXJlX18oNCk7XG5cbiAgICAgICAgICAgIHZhciBfZGlzcGxheV91dGlscyA9IF9fd19wZGZqc19yZXF1aXJlX18oNSk7XG5cbiAgICAgICAgICAgIHZhciBfYW5ub3RhdGlvbl9sYXllciA9IF9fd19wZGZqc19yZXF1aXJlX18oMTgpO1xuXG4gICAgICAgICAgICB2YXIgX3dvcmtlcl9vcHRpb25zID0gX193X3BkZmpzX3JlcXVpcmVfXygxMik7XG5cbiAgICAgICAgICAgIHZhciBfaXNfbm9kZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMyk7XG5cbiAgICAgICAgICAgIHZhciBfdGV4dF9sYXllciA9IF9fd19wZGZqc19yZXF1aXJlX18oMjEpO1xuXG4gICAgICAgICAgICB2YXIgX3N2ZyA9IF9fd19wZGZqc19yZXF1aXJlX18oMjIpO1xuXG4gICAgICAgICAgICB2YXIgX3hmYV9sYXllciA9IF9fd19wZGZqc19yZXF1aXJlX18oMjApO1xuXG4gICAgICAgICAgICBjb25zdCBwZGZqc1ZlcnNpb24gPSAnMi4xNC4xMDInO1xuICAgICAgICAgICAgY29uc3QgcGRmanNCdWlsZCA9ICdkYjRmM2FkYzUnO1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmIChfaXNfbm9kZS5pc05vZGVKUykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBQREZOb2RlU3RyZWFtXG4gICAgICAgICAgICAgICAgICAgIH0gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIzKTtcblxuICAgICAgICAgICAgICAgICAgICAoMCwgX2FwaS5zZXRQREZOZXR3b3JrU3RyZWFtRmFjdG9yeSkocGFyYW1zID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUERGTm9kZVN0cmVhbShwYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBQREZOZXR3b3JrU3RyZWFtXG4gICAgICAgICAgICAgICAgICAgIH0gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI2KTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBQREZGZXRjaFN0cmVhbVxuICAgICAgICAgICAgICAgICAgICB9ID0gX193X3BkZmpzX3JlcXVpcmVfXygyNyk7XG5cbiAgICAgICAgICAgICAgICAgICAgKDAsIF9hcGkuc2V0UERGTmV0d29ya1N0cmVhbUZhY3RvcnkpKHBhcmFtcyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKDAsIF9kaXNwbGF5X3V0aWxzLmlzVmFsaWRGZXRjaFVybCkocGFyYW1zLnVybCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBERkZldGNoU3RyZWFtKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUERGTmV0d29ya1N0cmVhbShwYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX2V4cG9ydHNfXztcbiAgICAgICAgLyoqKioqKi8gfSkoKVxuICAgICAgICA7XG59KTtcbiJdLCJuYW1lcyI6WyJ3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInBkZmpzTGliIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIl9fdW51c2VkX3dlYnBhY2tfbW9kdWxlIiwiX193X3BkZmpzX3JlcXVpcmVfXyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJWZXJib3NpdHlMZXZlbCIsIlV0aWwiLCJVbmtub3duRXJyb3JFeGNlcHRpb24iLCJVbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb24iLCJVTlNVUFBPUlRFRF9GRUFUVVJFUyIsIlRleHRSZW5kZXJpbmdNb2RlIiwiU3RyZWFtVHlwZSIsIlJlbmRlcmluZ0ludGVudEZsYWciLCJQZXJtaXNzaW9uRmxhZyIsIlBhc3N3b3JkUmVzcG9uc2VzIiwiUGFzc3dvcmRFeGNlcHRpb24iLCJQYWdlQWN0aW9uRXZlbnRUeXBlIiwiT1BTIiwiTWlzc2luZ1BERkV4Y2VwdGlvbiIsIklzTGl0dGxlRW5kaWFuQ2FjaGVkIiwiSXNFdmFsU3VwcG9ydGVkQ2FjaGVkIiwiSW52YWxpZFBERkV4Y2VwdGlvbiIsIkltYWdlS2luZCIsIklERU5USVRZX01BVFJJWCIsIkZvcm1hdEVycm9yIiwiRm9udFR5cGUiLCJGT05UX0lERU5USVRZX01BVFJJWCIsIkRvY3VtZW50QWN0aW9uRXZlbnRUeXBlIiwiQ01hcENvbXByZXNzaW9uVHlwZSIsIkJhc2VFeGNlcHRpb24iLCJBbm5vdGF0aW9uVHlwZSIsIkFubm90YXRpb25TdGF0ZU1vZGVsVHlwZSIsIkFubm90YXRpb25SZXZpZXdTdGF0ZSIsIkFubm90YXRpb25SZXBseVR5cGUiLCJBbm5vdGF0aW9uTW9kZSIsIkFubm90YXRpb25NYXJrZWRTdGF0ZSIsIkFubm90YXRpb25GbGFnIiwiQW5ub3RhdGlvbkZpZWxkRmxhZyIsIkFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUiLCJBbm5vdGF0aW9uQWN0aW9uRXZlbnRUeXBlIiwiQWJvcnRFeGNlcHRpb24iLCJhcnJheUJ5dGVMZW5ndGgiLCJhcnJheXNUb0J5dGVzIiwiYXNzZXJ0IiwiYnl0ZXNUb1N0cmluZyIsImNyZWF0ZVByb21pc2VDYXBhYmlsaXR5IiwiY3JlYXRlVmFsaWRBYnNvbHV0ZVVybCIsImVzY2FwZVN0cmluZyIsImdldE1vZGlmaWNhdGlvbkRhdGUiLCJnZXRWZXJib3NpdHlMZXZlbCIsImluZm8iLCJpc0FycmF5QnVmZmVyIiwiaXNBcnJheUVxdWFsIiwiaXNBc2NpaSIsIm9iamVjdEZyb21NYXAiLCJvYmplY3RTaXplIiwic2V0VmVyYm9zaXR5TGV2ZWwiLCJzaGFkb3ciLCJzdHJpbmczMiIsInN0cmluZ1RvQnl0ZXMiLCJzdHJpbmdUb1BERlN0cmluZyIsInN0cmluZ1RvVVRGMTZCRVN0cmluZyIsInN0cmluZ1RvVVRGOFN0cmluZyIsInVucmVhY2hhYmxlIiwidXRmOFN0cmluZ1RvU3RyaW5nIiwid2FybiIsIkFOWSIsIkRJU1BMQVkiLCJQUklOVCIsIkFOTk9UQVRJT05TX0ZPUk1TIiwiQU5OT1RBVElPTlNfU1RPUkFHRSIsIkFOTk9UQVRJT05TX0RJU0FCTEUiLCJPUExJU1QiLCJESVNBQkxFIiwiRU5BQkxFIiwiRU5BQkxFX0ZPUk1TIiwiRU5BQkxFX1NUT1JBR0UiLCJNT0RJRllfQ09OVEVOVFMiLCJDT1BZIiwiTU9ESUZZX0FOTk9UQVRJT05TIiwiRklMTF9JTlRFUkFDVElWRV9GT1JNUyIsIkNPUFlfRk9SX0FDQ0VTU0lCSUxJVFkiLCJBU1NFTUJMRSIsIlBSSU5UX0hJR0hfUVVBTElUWSIsIkZJTEwiLCJTVFJPS0UiLCJGSUxMX1NUUk9LRSIsIklOVklTSUJMRSIsIkZJTExfQUREX1RPX1BBVEgiLCJTVFJPS0VfQUREX1RPX1BBVEgiLCJGSUxMX1NUUk9LRV9BRERfVE9fUEFUSCIsIkFERF9UT19QQVRIIiwiRklMTF9TVFJPS0VfTUFTSyIsIkFERF9UT19QQVRIX0ZMQUciLCJHUkFZU0NBTEVfMUJQUCIsIlJHQl8yNEJQUCIsIlJHQkFfMzJCUFAiLCJURVhUIiwiTElOSyIsIkZSRUVURVhUIiwiTElORSIsIlNRVUFSRSIsIkNJUkNMRSIsIlBPTFlHT04iLCJQT0xZTElORSIsIkhJR0hMSUdIVCIsIlVOREVSTElORSIsIlNRVUlHR0xZIiwiU1RSSUtFT1VUIiwiU1RBTVAiLCJDQVJFVCIsIklOSyIsIlBPUFVQIiwiRklMRUFUVEFDSE1FTlQiLCJTT1VORCIsIk1PVklFIiwiV0lER0VUIiwiU0NSRUVOIiwiUFJJTlRFUk1BUksiLCJUUkFQTkVUIiwiV0FURVJNQVJLIiwiVEhSRUVEIiwiUkVEQUNUIiwiTUFSS0VEIiwiUkVWSUVXIiwiVU5NQVJLRUQiLCJBQ0NFUFRFRCIsIlJFSkVDVEVEIiwiQ0FOQ0VMTEVEIiwiQ09NUExFVEVEIiwiTk9ORSIsIkdST1VQIiwiUkVQTFkiLCJISURERU4iLCJOT1pPT00iLCJOT1JPVEFURSIsIk5PVklFVyIsIlJFQURPTkxZIiwiTE9DS0VEIiwiVE9HR0xFTk9WSUVXIiwiTE9DS0VEQ09OVEVOVFMiLCJSRVFVSVJFRCIsIk5PRVhQT1JUIiwiTVVMVElMSU5FIiwiUEFTU1dPUkQiLCJOT1RPR0dMRVRPT0ZGIiwiUkFESU8iLCJQVVNIQlVUVE9OIiwiQ09NQk8iLCJFRElUIiwiU09SVCIsIkZJTEVTRUxFQ1QiLCJNVUxUSVNFTEVDVCIsIkRPTk9UU1BFTExDSEVDSyIsIkRPTk9UU0NST0xMIiwiQ09NQiIsIlJJQ0hURVhUIiwiUkFESU9TSU5VTklTT04iLCJDT01NSVRPTlNFTENIQU5HRSIsIlNPTElEIiwiREFTSEVEIiwiQkVWRUxFRCIsIklOU0VUIiwiRSIsIlgiLCJEIiwiVSIsIkZvIiwiQmwiLCJQTyIsIlBDIiwiUFYiLCJQSSIsIksiLCJGIiwiViIsIkMiLCJXQyIsIldTIiwiRFMiLCJXUCIsIkRQIiwiTyIsIlVOS05PV04iLCJGTEFURSIsIkxaVyIsIkRDVCIsIkpQWCIsIkpCSUciLCJBODUiLCJBSFgiLCJDQ0YiLCJSTFgiLCJUWVBFMSIsIlRZUEUxU1RBTkRBUkQiLCJUWVBFMUMiLCJDSURGT05UVFlQRTAiLCJDSURGT05UVFlQRTBDIiwiVFJVRVRZUEUiLCJDSURGT05UVFlQRTIiLCJUWVBFMyIsIk9QRU5UWVBFIiwiVFlQRTAiLCJNTVRZUEUxIiwiRVJST1JTIiwiV0FSTklOR1MiLCJJTkZPUyIsIkJJTkFSWSIsIlNUUkVBTSIsImRlcGVuZGVuY3kiLCJzZXRMaW5lV2lkdGgiLCJzZXRMaW5lQ2FwIiwic2V0TGluZUpvaW4iLCJzZXRNaXRlckxpbWl0Iiwic2V0RGFzaCIsInNldFJlbmRlcmluZ0ludGVudCIsInNldEZsYXRuZXNzIiwic2V0R1N0YXRlIiwic2F2ZSIsInJlc3RvcmUiLCJ0cmFuc2Zvcm0iLCJtb3ZlVG8iLCJsaW5lVG8iLCJjdXJ2ZVRvIiwiY3VydmVUbzIiLCJjdXJ2ZVRvMyIsImNsb3NlUGF0aCIsInJlY3RhbmdsZSIsInN0cm9rZSIsImNsb3NlU3Ryb2tlIiwiZmlsbCIsImVvRmlsbCIsImZpbGxTdHJva2UiLCJlb0ZpbGxTdHJva2UiLCJjbG9zZUZpbGxTdHJva2UiLCJjbG9zZUVPRmlsbFN0cm9rZSIsImVuZFBhdGgiLCJjbGlwIiwiZW9DbGlwIiwiYmVnaW5UZXh0IiwiZW5kVGV4dCIsInNldENoYXJTcGFjaW5nIiwic2V0V29yZFNwYWNpbmciLCJzZXRIU2NhbGUiLCJzZXRMZWFkaW5nIiwic2V0Rm9udCIsInNldFRleHRSZW5kZXJpbmdNb2RlIiwic2V0VGV4dFJpc2UiLCJtb3ZlVGV4dCIsInNldExlYWRpbmdNb3ZlVGV4dCIsInNldFRleHRNYXRyaXgiLCJuZXh0TGluZSIsInNob3dUZXh0Iiwic2hvd1NwYWNlZFRleHQiLCJuZXh0TGluZVNob3dUZXh0IiwibmV4dExpbmVTZXRTcGFjaW5nU2hvd1RleHQiLCJzZXRDaGFyV2lkdGgiLCJzZXRDaGFyV2lkdGhBbmRCb3VuZHMiLCJzZXRTdHJva2VDb2xvclNwYWNlIiwic2V0RmlsbENvbG9yU3BhY2UiLCJzZXRTdHJva2VDb2xvciIsInNldFN0cm9rZUNvbG9yTiIsInNldEZpbGxDb2xvciIsInNldEZpbGxDb2xvck4iLCJzZXRTdHJva2VHcmF5Iiwic2V0RmlsbEdyYXkiLCJzZXRTdHJva2VSR0JDb2xvciIsInNldEZpbGxSR0JDb2xvciIsInNldFN0cm9rZUNNWUtDb2xvciIsInNldEZpbGxDTVlLQ29sb3IiLCJzaGFkaW5nRmlsbCIsImJlZ2luSW5saW5lSW1hZ2UiLCJiZWdpbkltYWdlRGF0YSIsImVuZElubGluZUltYWdlIiwicGFpbnRYT2JqZWN0IiwibWFya1BvaW50IiwibWFya1BvaW50UHJvcHMiLCJiZWdpbk1hcmtlZENvbnRlbnQiLCJiZWdpbk1hcmtlZENvbnRlbnRQcm9wcyIsImVuZE1hcmtlZENvbnRlbnQiLCJiZWdpbkNvbXBhdCIsImVuZENvbXBhdCIsInBhaW50Rm9ybVhPYmplY3RCZWdpbiIsInBhaW50Rm9ybVhPYmplY3RFbmQiLCJiZWdpbkdyb3VwIiwiZW5kR3JvdXAiLCJiZWdpbkFubm90YXRpb25zIiwiZW5kQW5ub3RhdGlvbnMiLCJiZWdpbkFubm90YXRpb24iLCJlbmRBbm5vdGF0aW9uIiwicGFpbnRKcGVnWE9iamVjdCIsInBhaW50SW1hZ2VNYXNrWE9iamVjdCIsInBhaW50SW1hZ2VNYXNrWE9iamVjdEdyb3VwIiwicGFpbnRJbWFnZVhPYmplY3QiLCJwYWludElubGluZUltYWdlWE9iamVjdCIsInBhaW50SW5saW5lSW1hZ2VYT2JqZWN0R3JvdXAiLCJwYWludEltYWdlWE9iamVjdFJlcGVhdCIsInBhaW50SW1hZ2VNYXNrWE9iamVjdFJlcGVhdCIsInBhaW50U29saWRDb2xvckltYWdlTWFzayIsImNvbnN0cnVjdFBhdGgiLCJ1bmtub3duIiwiZm9ybXMiLCJqYXZhU2NyaXB0Iiwic2lnbmF0dXJlcyIsInNtYXNrIiwic2hhZGluZ1BhdHRlcm4iLCJmb250IiwiZXJyb3JUaWxpbmdQYXR0ZXJuIiwiZXJyb3JFeHRHU3RhdGUiLCJlcnJvclhPYmplY3QiLCJlcnJvckZvbnRMb2FkVHlwZTMiLCJlcnJvckZvbnRTdGF0ZSIsImVycm9yRm9udE1pc3NpbmciLCJlcnJvckZvbnRUcmFuc2xhdGUiLCJlcnJvckNvbG9yU3BhY2UiLCJlcnJvck9wZXJhdG9yTGlzdCIsImVycm9yRm9udFRvVW5pY29kZSIsImVycm9yRm9udExvYWROYXRpdmUiLCJlcnJvckZvbnRCdWlsZFBhdGgiLCJlcnJvckZvbnRHZXRQYXRoIiwiZXJyb3JNYXJrZWRDb250ZW50IiwiZXJyb3JDb250ZW50U3ViU3RyZWFtIiwiTkVFRF9QQVNTV09SRCIsIklOQ09SUkVDVF9QQVNTV09SRCIsInZlcmJvc2l0eSIsImxldmVsIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwibXNnIiwiY29uc29sZSIsImxvZyIsIkVycm9yIiwiY29uZCIsIl9pc1ZhbGlkUHJvdG9jb2wiLCJ1cmwiLCJwcm90b2NvbCIsImJhc2VVcmwiLCJvcHRpb25zIiwiYWRkRGVmYXVsdFByb3RvY29sIiwic3RhcnRzV2l0aCIsImRvdHMiLCJtYXRjaCIsImxlbmd0aCIsInRyeUNvbnZlcnRFbmNvZGluZyIsImV4IiwiYWJzb2x1dGVVcmwiLCJVUkwiLCJvYmoiLCJwcm9wIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiQmFzZUV4Y2VwdGlvbkNsb3N1cmUiLCJtZXNzYWdlIiwibmFtZSIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiY29kZSIsImRldGFpbHMiLCJzdGF0dXMiLCJieXRlcyIsInVuZGVmaW5lZCIsIk1BWF9BUkdVTUVOVF9DT1VOVCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFwcGx5Iiwic3RyQnVmIiwiaSIsImNodW5rRW5kIiwiTWF0aCIsIm1pbiIsImNodW5rIiwic3ViYXJyYXkiLCJwdXNoIiwiam9pbiIsInN0ciIsIlVpbnQ4QXJyYXkiLCJjaGFyQ29kZUF0IiwiYXJyIiwiYnl0ZUxlbmd0aCIsInJlc3VsdExlbmd0aCIsInBvcyIsImRhdGEiLCJpdGVtIiwiaXRlbUxlbmd0aCIsInNldCIsImtleXMiLCJtYXAiLCJjcmVhdGUiLCJrZXkiLCJpc0xpdHRsZUVuZGlhbiIsImJ1ZmZlcjgiLCJ2aWV3MzIiLCJVaW50MzJBcnJheSIsImJ1ZmZlciIsImlzRXZhbFN1cHBvcnRlZCIsIkZ1bmN0aW9uIiwiZSIsImhleE51bWJlcnMiLCJBcnJheSIsIm4iLCJ0b1N0cmluZyIsInBhZFN0YXJ0IiwiciIsImciLCJiIiwibTEiLCJtMiIsInAiLCJtIiwieHQiLCJ5dCIsImQiLCJwMSIsImFwcGx5VHJhbnNmb3JtIiwicDIiLCJzbGljZSIsInAzIiwicDQiLCJtYXgiLCJ2IiwidHJhbnNwb3NlIiwiYSIsImMiLCJmaXJzdCIsInNlY29uZCIsInNxcnQiLCJzeCIsInN5IiwicmVjdCIsInJlY3QxIiwicmVjdDIiLCJjb21wYXJlIiwib3JkZXJlZFgiLCJzb3J0Iiwib3JkZXJlZFkiLCJyZXN1bHQiLCJub3JtYWxpemVSZWN0IiwieDAiLCJ5MCIsIngxIiwieTEiLCJ4MiIsInkyIiwieDMiLCJ5MyIsInR2YWx1ZXMiLCJib3VuZHMiLCJ0IiwidDEiLCJ0MiIsImIyYWMiLCJzcXJ0YjJhYyIsImFicyIsImoiLCJtdCIsImpsZW4iLCJQREZTdHJpbmdUcmFuc2xhdGVUYWJsZSIsImVuY29kaW5nIiwiZGVjb2RlciIsIlRleHREZWNvZGVyIiwiZmF0YWwiLCJkZWNvZGUiLCJpaSIsImNoYXJBdCIsInJlcGxhY2UiLCJ0ZXN0IiwiYnVmIiwiY2hhciIsImRlY29kZVVSSUNvbXBvbmVudCIsImVzY2FwZSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiYXJyMSIsImFycjIiLCJkYXRlIiwiRGF0ZSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImNhcGFiaWxpdHkiLCJpc1NldHRsZWQiLCJnZXQiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZWFzb24iLCJfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMiLCJfaXNfbm9kZSIsImlzTm9kZUpTIiwicHJvY2VzcyIsInZlcnNpb25zIiwibnciLCJlbGVjdHJvbiIsInR5cGUiLCJidWlsZCIsIlJlbmRlclRhc2siLCJQREZXb3JrZXJVdGlsIiwiUERGV29ya2VyIiwiUERGUGFnZVByb3h5IiwiUERGRG9jdW1lbnRQcm94eSIsIlBERkRvY3VtZW50TG9hZGluZ1Rhc2siLCJQREZEYXRhUmFuZ2VUcmFuc3BvcnQiLCJMb29wYmFja1BvcnQiLCJEZWZhdWx0U3RhbmRhcmRGb250RGF0YUZhY3RvcnkiLCJEZWZhdWx0Q2FudmFzRmFjdG9yeSIsIkRlZmF1bHRDTWFwUmVhZGVyRmFjdG9yeSIsImdldERvY3VtZW50Iiwic2V0UERGTmV0d29ya1N0cmVhbUZhY3RvcnkiLCJ2ZXJzaW9uIiwiX3V0aWwiLCJfZGlzcGxheV91dGlscyIsIl9mb250X2xvYWRlciIsIl9ub2RlX3V0aWxzIiwiX2Fubm90YXRpb25fc3RvcmFnZSIsIl9jYW52YXMiLCJfd29ya2VyX29wdGlvbnMiLCJfbWVzc2FnZV9oYW5kbGVyIiwiX21ldGFkYXRhIiwiX29wdGlvbmFsX2NvbnRlbnRfY29uZmlnIiwiX3RyYW5zcG9ydF9zdHJlYW0iLCJfeGZhX3RleHQiLCJERUZBVUxUX1JBTkdFX0NIVU5LX1NJWkUiLCJSRU5ERVJJTkdfQ0FOQ0VMTEVEX1RJTUVPVVQiLCJOb2RlQ2FudmFzRmFjdG9yeSIsIkRPTUNhbnZhc0ZhY3RvcnkiLCJOb2RlQ01hcFJlYWRlckZhY3RvcnkiLCJET01DTWFwUmVhZGVyRmFjdG9yeSIsIk5vZGVTdGFuZGFyZEZvbnREYXRhRmFjdG9yeSIsIkRPTVN0YW5kYXJkRm9udERhdGFGYWN0b3J5IiwiY3JlYXRlUERGTmV0d29ya1N0cmVhbSIsInBkZk5ldHdvcmtTdHJlYW1GYWN0b3J5Iiwic3JjIiwidGFzayIsInNvdXJjZSIsInJhbmdlIiwicGFyYW1zIiwicmFuZ2VUcmFuc3BvcnQiLCJ3b3JrZXIiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJCdWZmZXIiLCJpc05hTiIsIkNNYXBSZWFkZXJGYWN0b3J5IiwiU3RhbmRhcmRGb250RGF0YUZhY3RvcnkiLCJpZ25vcmVFcnJvcnMiLCJzdG9wQXRFcnJvcnMiLCJmb250RXh0cmFQcm9wZXJ0aWVzIiwicGRmQnVnIiwiZW5hYmxlWGZhIiwicmFuZ2VDaHVua1NpemUiLCJkb2NCYXNlVXJsIiwiaXNEYXRhU2NoZW1lIiwibWF4SW1hZ2VTaXplIiwiY01hcFVybCIsInN0YW5kYXJkRm9udERhdGFVcmwiLCJ1c2VXb3JrZXJGZXRjaCIsImRpc2FibGVGb250RmFjZSIsInVzZVN5c3RlbUZvbnRzIiwib3duZXJEb2N1bWVudCIsImdsb2JhbFRoaXMiLCJkb2N1bWVudCIsImRpc2FibGVSYW5nZSIsImRpc2FibGVTdHJlYW0iLCJkaXNhYmxlQXV0b0ZldGNoIiwid29ya2VyUGFyYW1zIiwicG9ydCIsIkdsb2JhbFdvcmtlck9wdGlvbnMiLCJ3b3JrZXJQb3J0IiwiZnJvbVBvcnQiLCJfd29ya2VyIiwiZG9jSWQiLCJ0aGVuIiwiZGVzdHJveWVkIiwid29ya2VySWRQcm9taXNlIiwiX2ZldGNoRG9jdW1lbnQiLCJuZXR3b3JrU3RyZWFtUHJvbWlzZSIsIm5ldHdvcmtTdHJlYW0iLCJQREZEYXRhVHJhbnNwb3J0U3RyZWFtIiwiaW5pdGlhbERhdGEiLCJwcm9ncmVzc2l2ZURvbmUiLCJjb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZSIsImh0dHBIZWFkZXJzIiwid2l0aENyZWRlbnRpYWxzIiwiYWxsIiwid29ya2VySWQiLCJtZXNzYWdlSGFuZGxlciIsIk1lc3NhZ2VIYW5kbGVyIiwidHJhbnNwb3J0IiwiV29ya2VyVHJhbnNwb3J0IiwiX3RyYW5zcG9ydCIsInNlbmQiLCJfY2FwYWJpbGl0eSIsInBkZkRhdGFSYW5nZVRyYW5zcG9ydCIsInNlbmRXaXRoUHJvbWlzZSIsImFwaVZlcnNpb24iLCJwYXNzd29yZCIsIm9uUGFzc3dvcmQiLCJvblByb2dyZXNzIiwib25VbnN1cHBvcnRlZEZlYXR1cmUiLCJkZXN0cm95IiwiX3JhbmdlTGlzdGVuZXJzIiwiX3Byb2dyZXNzTGlzdGVuZXJzIiwiX3Byb2dyZXNzaXZlUmVhZExpc3RlbmVycyIsIl9wcm9ncmVzc2l2ZURvbmVMaXN0ZW5lcnMiLCJfcmVhZHlDYXBhYmlsaXR5IiwibGlzdGVuZXIiLCJiZWdpbiIsImxvYWRlZCIsInRvdGFsIiwiZW5kIiwicGRmSW5mbyIsIl9wZGZJbmZvIiwiZGVwcmVjYXRlZCIsImZpbmdlcnByaW50cyIsInN0YXRzIiwic3RyZWFtVHlwZXMiLCJmb250VHlwZXMiLCJhbm5vdGF0aW9uU3RvcmFnZSIsIm51bVBhZ2VzIiwiX2h0bWxGb3JYZmEiLCJwYWdlTnVtYmVyIiwiZ2V0UGFnZSIsInJlZiIsImdldFBhZ2VJbmRleCIsImdldERlc3RpbmF0aW9ucyIsImlkIiwiZ2V0RGVzdGluYXRpb24iLCJnZXRQYWdlTGFiZWxzIiwiZ2V0UGFnZUxheW91dCIsImdldFBhZ2VNb2RlIiwiZ2V0Vmlld2VyUHJlZmVyZW5jZXMiLCJnZXRPcGVuQWN0aW9uIiwiZ2V0QXR0YWNobWVudHMiLCJnZXRKYXZhU2NyaXB0IiwiZ2V0RG9jSlNBY3Rpb25zIiwiZ2V0T3V0bGluZSIsImdldE9wdGlvbmFsQ29udGVudENvbmZpZyIsImdldFBlcm1pc3Npb25zIiwiZ2V0TWV0YWRhdGEiLCJnZXRNYXJrSW5mbyIsImdldERhdGEiLCJkb3dubG9hZEluZm9DYXBhYmlsaXR5Iiwia2VlcExvYWRlZEZvbnRzIiwic3RhcnRDbGVhbnVwIiwiaXNQdXJlWGZhIiwibG9hZGluZ1Rhc2siLCJsb2FkaW5nUGFyYW1zIiwic2l6ZSIsInNhdmVEb2N1bWVudCIsImdldEZpZWxkT2JqZWN0cyIsImhhc0pTQWN0aW9ucyIsImdldENhbGN1bGF0aW9uT3JkZXJJZHMiLCJwYWdlSW5kZXgiLCJwYWdlSW5mbyIsIl9wYWdlSW5kZXgiLCJfcGFnZUluZm8iLCJfb3duZXJEb2N1bWVudCIsIl9zdGF0cyIsIlN0YXRUaW1lciIsIl9wZGZCdWciLCJjb21tb25PYmpzIiwib2JqcyIsIlBERk9iamVjdHMiLCJjbGVhbnVwQWZ0ZXJSZW5kZXIiLCJwZW5kaW5nQ2xlYW51cCIsIl9pbnRlbnRTdGF0ZXMiLCJNYXAiLCJfYW5ub3RhdGlvblByb21pc2VzIiwicm90YXRlIiwidXNlclVuaXQiLCJ2aWV3Iiwic2NhbGUiLCJyb3RhdGlvbiIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZG9udEZsaXAiLCJQYWdlVmlld3BvcnQiLCJ2aWV3Qm94IiwiaW50ZW50IiwiaW50ZW50QXJncyIsImdldFJlbmRlcmluZ0ludGVudCIsImNhY2hlS2V5IiwiZ2V0QW5ub3RhdGlvbnMiLCJyZW5kZXJpbmdJbnRlbnQiLCJhbm5vdGF0aW9ucyIsImFubm90YXRpb24iLCJ0aXRsZU9iaiIsImNvbnRlbnRzT2JqIiwiX2pzQWN0aW9uc1Byb21pc2UiLCJnZXRQYWdlSlNBY3Rpb25zIiwiY2hpbGRyZW4iLCJjYW52YXNDb250ZXh0Iiwidmlld3BvcnQiLCJhbm5vdGF0aW9uTW9kZSIsImltYWdlTGF5ZXIiLCJjYW52YXNGYWN0b3J5IiwiYmFja2dyb3VuZCIsIm9wdGlvbmFsQ29udGVudENvbmZpZ1Byb21pc2UiLCJhbm5vdGF0aW9uQ2FudmFzTWFwIiwiYXJndW1lbnRzIiwicmVuZGVySW50ZXJhY3RpdmVGb3JtcyIsImluY2x1ZGVBbm5vdGF0aW9uU3RvcmFnZSIsInRpbWUiLCJpbnRlbnRTdGF0ZSIsInN0cmVhbVJlYWRlckNhbmNlbFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjYW52YXNGYWN0b3J5SW5zdGFuY2UiLCJpbnRlbnRQcmludCIsImRpc3BsYXlSZWFkeUNhcGFiaWxpdHkiLCJvcGVyYXRvckxpc3QiLCJmbkFycmF5IiwiYXJnc0FycmF5IiwibGFzdENodW5rIiwiX3B1bXBPcGVyYXRvckxpc3QiLCJjb21wbGV0ZSIsImVycm9yIiwicmVuZGVyVGFza3MiLCJpbnRlcm5hbFJlbmRlclRhc2siLCJfdHJ5Q2xlYW51cCIsIl9hYm9ydE9wZXJhdG9yTGlzdCIsInRpbWVFbmQiLCJJbnRlcm5hbFJlbmRlclRhc2siLCJjYWxsYmFjayIsInVzZVJlcXVlc3RBbmltYXRpb25GcmFtZSIsIlNldCIsImFkZCIsInJlbmRlclRhc2siLCJ0cmFuc3BhcmVuY3kiLCJvcHRpb25hbENvbnRlbnRDb25maWciLCJpbml0aWFsaXplR3JhcGhpY3MiLCJvcGVyYXRvckxpc3RDaGFuZ2VkIiwib3BMaXN0UmVhZENhcGFiaWxpdHkiLCJvcExpc3RUYXNrIiwiZGlzYWJsZUNvbWJpbmVUZXh0SXRlbXMiLCJpbmNsdWRlTWFya2VkQ29udGVudCIsIlRFWFRfQ09OVEVOVF9DSFVOS19TSVpFIiwic2VuZFdpdGhTdHJlYW0iLCJjb21iaW5lVGV4dEl0ZW1zIiwiaGlnaFdhdGVyTWFyayIsInRleHRDb250ZW50IiwiaXRlbXMiLCJnZXRYZmEiLCJ4ZmEiLCJYZmFUZXh0IiwicmVhZGFibGVTdHJlYW0iLCJzdHJlYW1UZXh0Q29udGVudCIsInB1bXAiLCJyZWFkZXIiLCJyZWFkIiwiZG9uZSIsImFzc2lnbiIsInN0eWxlcyIsImdldFJlYWRlciIsIl9zdHJ1Y3RUcmVlUHJvbWlzZSIsImdldFN0cnVjdFRyZWUiLCJ3YWl0T24iLCJ2YWx1ZXMiLCJmb3JjZSIsImNvbXBsZXRlZCIsImNhbmNlbCIsImNsZWFyIiwicmVzZXRTdGF0cyIsIm9wZXJhdG9yTGlzdENodW5rIiwic2VyaWFsaXphYmxlIiwic3RyZWFtUmVhZGVyIiwiX3JlbmRlclBhZ2VDaHVuayIsIlJlbmRlcmluZ0NhbmNlbGxlZEV4Y2VwdGlvbiIsInNldFRpbWVvdXQiLCJjdXJDYWNoZUtleSIsImN1ckludGVudFN0YXRlIiwiY2xlYW51cCIsIl9saXN0ZW5lcnMiLCJfZGVmZXJyZWQiLCJ0cmFuc2ZlcnMiLCJldmVudCIsInN0cnVjdHVyZWRDbG9uZSIsImNhbGwiLCJpbmRleE9mIiwic3BsaWNlIiwiaXNXb3JrZXJEaXNhYmxlZCIsImZhbGxiYWNrV29ya2VyU3JjIiwiZmFrZVdvcmtlcklkIiwicmVxdWlyZSIsInBkZmpzRmlsZVBhdGgiLCJjdXJyZW50U2NyaXB0IiwiaXNTYW1lT3JpZ2luIiwib3RoZXJVcmwiLCJiYXNlIiwib3JpZ2luIiwib3RoZXIiLCJjcmVhdGVDRE5XcmFwcGVyIiwid3JhcHBlciIsImNyZWF0ZU9iamVjdFVSTCIsIkJsb2IiLCJoYXMiLCJfcG9ydCIsIl93ZWJXb3JrZXIiLCJfbWVzc2FnZUhhbmRsZXIiLCJfaW5pdGlhbGl6ZUZyb21Qb3J0IiwiX2luaXRpYWxpemUiLCJvbiIsIldvcmtlciIsIl9tYWluVGhyZWFkV29ya2VyTWVzc2FnZUhhbmRsZXIiLCJ3b3JrZXJTcmMiLCJ0ZXJtaW5hdGVFYXJseSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbldvcmtlckVycm9yIiwidGVybWluYXRlIiwiX3NldHVwRmFrZVdvcmtlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZW5kVGVzdCIsInRlc3RPYmoiLCJfc2V0dXBGYWtlV29ya2VyR2xvYmFsIiwiV29ya2VyTWVzc2FnZUhhbmRsZXIiLCJ3b3JrZXJIYW5kbGVyIiwic2V0dXAiLCJwZGZqc1dvcmtlciIsImxvYWRlciIsIm1haW5Xb3JrZXJNZXNzYWdlSGFuZGxlciIsImV2YWwiLCJsb2FkU2NyaXB0IiwiV2Vha01hcCIsImdldFdvcmtlclNyYyIsImZvbnRMb2FkZXIiLCJGb250TG9hZGVyIiwiX29uVW5zdXBwb3J0ZWRGZWF0dXJlIiwiYmluZCIsInN0eWxlRWxlbWVudCIsIl9wYXJhbXMiLCJpc0NvbXByZXNzZWQiLCJjTWFwUGFja2VkIiwiZGVzdHJveUNhcGFiaWxpdHkiLCJfcGFzc3dvcmRDYXBhYmlsaXR5IiwiX25ldHdvcmtTdHJlYW0iLCJfZnVsbFJlYWRlciIsIl9sYXN0UHJvZ3Jlc3MiLCJzZXR1cE1lc3NhZ2VIYW5kbGVyIiwiQW5ub3RhdGlvblN0b3JhZ2UiLCJpc09wTGlzdCIsImxhc3RNb2RpZmllZCIsInBhZ2UiLCJfZGVzdHJveSIsImhhc093blByb3BlcnR5IiwicmVzZXRNb2RpZmllZCIsInRlcm1pbmF0ZWQiLCJfZ2V0RmllbGRPYmplY3RzUHJvbWlzZSIsIl9oYXNKU0FjdGlvbnNQcm9taXNlIiwiY2FuY2VsQWxsUmVxdWVzdHMiLCJzaW5rIiwiZ2V0RnVsbFJlYWRlciIsImV2dCIsIm9uUHVsbCIsImNsb3NlIiwiZW5xdWV1ZSIsIm9uQ2FuY2VsIiwicmVhZHkiLCJyZWFkeVJlYXNvbiIsImhlYWRlcnNDYXBhYmlsaXR5IiwiZnVsbFJlYWRlciIsImhlYWRlcnNSZWFkeSIsImlzU3RyZWFtaW5nU3VwcG9ydGVkIiwiaXNSYW5nZVN1cHBvcnRlZCIsImNvbnRlbnRMZW5ndGgiLCJyYW5nZVJlYWRlciIsImdldFJhbmdlUmVhZGVyIiwiX251bVBhZ2VzIiwiaHRtbEZvclhmYSIsImV4Y2VwdGlvbiIsInVwZGF0ZVBhc3N3b3JkIiwiX3N0YXJ0UmVuZGVyUGFnZSIsImV4cG9ydGVkRGF0YSIsImV4cG9ydGVkRXJyb3IiLCJmb250UmVnaXN0cnkiLCJGb250SW5zcGVjdG9yIiwiZW5hYmxlZCIsInJlZ2lzdGVyRm9udCIsImZvbnRBZGRlZCIsIkZvbnRGYWNlT2JqZWN0IiwiaW1hZ2VEYXRhIiwicGFnZVByb3h5IiwiTUFYX0lNQUdFX1NJWkVfVE9fU1RPUkUiLCJmcmVlemUiLCJmZXRjaCIsImZlYXR1cmVJZCIsImNhY2hlZFByb21pc2UiLCJudW0iLCJnZW4iLCJmaWxlbmFtZSIsInJlc3VsdHMiLCJPcHRpb25hbENvbnRlbnRDb25maWciLCJtZXRhZGF0YSIsIk1ldGFkYXRhIiwiY2xlYW51cFN1Y2Nlc3NmdWwiLCJvYmpJZCIsInNldHRsZWQiLCJfaW50ZXJuYWxSZW5kZXJUYXNrIiwib25Db250aW51ZSIsIm9wZXJhdG9yTGlzdElkeCIsInJ1bm5pbmciLCJncmFwaGljc1JlYWR5Q2FsbGJhY2siLCJncmFwaGljc1JlYWR5IiwiX3VzZVJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbGxlZCIsIl9jYW5jZWxCb3VuZCIsIl9jb250aW51ZUJvdW5kIiwiX2NvbnRpbnVlIiwiX3NjaGVkdWxlTmV4dEJvdW5kIiwiX3NjaGVkdWxlTmV4dCIsIl9uZXh0Qm91bmQiLCJfbmV4dCIsImNhbnZhcyIsIlN0ZXBwZXJNYW5hZ2VyIiwic3RlcHBlciIsImluaXQiLCJuZXh0QnJlYWtQb2ludCIsImdldE5leHRCcmVha1BvaW50IiwiZ2Z4IiwiQ2FudmFzR3JhcGhpY3MiLCJiZWdpbkRyYXdpbmciLCJlbmREcmF3aW5nIiwidXBkYXRlT3BlcmF0b3JMaXN0IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZXhlY3V0ZU9wZXJhdG9yTGlzdCIsIldlYWtTZXQiLCJQaXhlbHNQZXJJbmNoIiwiUERGRGF0ZVN0cmluZyIsIkRPTVNWR0ZhY3RvcnkiLCJnZXRGaWxlbmFtZUZyb21VcmwiLCJnZXRQZGZGaWxlbmFtZUZyb21VcmwiLCJnZXRYZmFQYWdlVmlld3BvcnQiLCJpc1BkZkZpbGUiLCJpc1ZhbGlkRmV0Y2hVcmwiLCJfYmFzZV9mYWN0b3J5IiwiU1ZHX05TIiwiQ1NTIiwiUERGIiwiX2RvY3VtZW50Iiwid2lkdGgiLCJoZWlnaHQiLCJjcmVhdGVFbGVtZW50IiwiQmFzZUNhbnZhc0ZhY3RvcnkiLCJmZXRjaERhdGEiLCJhc1R5cGVkQXJyYXkiLCJiYXNlVVJJIiwicmVzcG9uc2UiLCJvayIsInN0YXR1c1RleHQiLCJhcnJheUJ1ZmZlciIsInRleHQiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwicmVzcG9uc2VUeXBlIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsIkRPTkUiLCJyZXNwb25zZVRleHQiLCJjb21wcmVzc2lvblR5cGUiLCJjTWFwRGF0YSIsIkJhc2VDTWFwUmVhZGVyRmFjdG9yeSIsIkJhc2VTdGFuZGFyZEZvbnREYXRhRmFjdG9yeSIsImNyZWF0ZUVsZW1lbnROUyIsIkJhc2VTVkdGYWN0b3J5IiwiY2VudGVyWCIsImNlbnRlclkiLCJyb3RhdGVBIiwicm90YXRlQiIsInJvdGF0ZUMiLCJyb3RhdGVEIiwib2Zmc2V0Q2FudmFzWCIsIm9mZnNldENhbnZhc1kiLCJ4IiwieSIsInRvcExlZnQiLCJib3R0b21SaWdodCIsImFwcGx5SW52ZXJzZVRyYW5zZm9ybSIsInRyaW0iLCJzdWJzdHJpbmciLCJ0b0xvd2VyQ2FzZSIsImFuY2hvciIsInF1ZXJ5IiwibGFzdEluZGV4T2YiLCJkZWZhdWx0RmlsZW5hbWUiLCJyZVVSSSIsInJlRmlsZW5hbWUiLCJzcGxpdFVSSSIsImV4ZWMiLCJzdWdnZXN0ZWRGaWxlbmFtZSIsImluY2x1ZGVzIiwic3RhcnRlZCIsInRpbWVzIiwibm93Iiwic3RhcnQiLCJvdXRCdWYiLCJsb25nZXN0IiwiZHVyYXRpb24iLCJwYWRFbmQiLCJyZW1vdmVTY3JpcHRFbGVtZW50Iiwic2NyaXB0Iiwib25sb2FkIiwicmVtb3ZlIiwib25lcnJvciIsImhlYWQiLCJkb2N1bWVudEVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsInBkZkRhdGVTdHJpbmdSZWdleCIsImlucHV0IiwiUmVnRXhwIiwibWF0Y2hlcyIsInllYXIiLCJwYXJzZUludCIsIm1vbnRoIiwiZGF5IiwiaG91ciIsIm1pbnV0ZSIsInVuaXZlcnNhbFRpbWVSZWxhdGlvbiIsIm9mZnNldEhvdXIiLCJvZmZzZXRNaW51dGUiLCJVVEMiLCJ4ZmFQYWdlIiwiYXR0cmlidXRlcyIsInN0eWxlIiwiX2NyZWF0ZUNhbnZhcyIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwiY2FudmFzQW5kQ29udGV4dCIsIl9mZXRjaERhdGEiLCJzdmciLCJfY3JlYXRlU1ZHIiwic2V0QXR0cmlidXRlIiwiQmFzZUZvbnRMb2FkZXIiLCJuYXRpdmVGb250RmFjZXMiLCJuYXRpdmVGb250RmFjZSIsImZvbnRzIiwicnVsZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic3R5bGVTaGVldCIsInNoZWV0IiwiaW5zZXJ0UnVsZSIsImNzc1J1bGVzIiwiYXR0YWNoZWQiLCJtaXNzaW5nRmlsZSIsImlzRm9udExvYWRpbmdBUElTdXBwb3J0ZWQiLCJjcmVhdGVOYXRpdmVGb250RmFjZSIsImFkZE5hdGl2ZUZvbnRGYWNlIiwiZmFtaWx5IiwiY3JlYXRlRm9udEZhY2VSdWxlIiwiaXNTeW5jRm9udExvYWRpbmdTdXBwb3J0ZWQiLCJfcXVldWVMb2FkaW5nQ2FsbGJhY2siLCJfcHJlcGFyZUZvbnRMb2FkRXZlbnQiLCJoYXNGb250cyIsInJ1bGVzIiwiZm9udHNUb0xvYWQiLCJsb2FkaW5nQ29udGV4dCIsInJlcXVlc3RzIiwibmV4dFJlcXVlc3RJZCIsImxvYWRUZXN0Rm9udElkIiwic3VwcG9ydGVkIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiY29tcGxldGVSZXF1ZXN0Iiwib3RoZXJSZXF1ZXN0Iiwic2hpZnQiLCJnZXRMb2FkVGVzdEZvbnQiLCJhdG9iIiwiaW50MzIiLCJvZmZzZXQiLCJzcGxpY2VTdHJpbmciLCJzIiwiaW5zZXJ0IiwiY2h1bmsxIiwiY2h1bmsyIiwiY3R4IiwiY2FsbGVkIiwiaXNGb250UmVhZHkiLCJmaWxsVGV4dCIsImdldEltYWdlRGF0YSIsIl9sb2FkVGVzdEZvbnQiLCJDT01NRU5UX09GRlNFVCIsIkNGRl9DSEVDS1NVTV9PRkZTRVQiLCJYWFhYX1ZBTFVFIiwiY2hlY2tzdW0iLCJidG9hIiwibmFtZXMiLCJsb2FkZWROYW1lIiwiZGl2IiwidmlzaWJpbGl0eSIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsInNwYW4iLCJmb250RmFtaWx5IiwiYm9keSIsInRyYW5zbGF0ZWREYXRhIiwiY29tcGlsZWRHbHlwaHMiLCJjc3NGb250SW5mbyIsIkZvbnRGYWNlIiwiY3NzIiwid2VpZ2h0IiwiZm9udFdlaWdodCIsIml0YWxpY0FuZ2xlIiwibWltZXR5cGUiLCJjaGFyYWN0ZXIiLCJjbWRzIiwianNCdWYiLCJjdXJyZW50IiwiYXJncyIsImNtZCIsImZzIiwicmVhZEZpbGUiLCJDYW52YXMiLCJjcmVhdGVDYW52YXMiLCJfc3RvcmFnZSIsIl90aW1lU3RhbXAiLCJfbW9kaWZpZWQiLCJvblNldE1vZGlmaWVkIiwib25SZXNldE1vZGlmaWVkIiwiZGVmYXVsdFZhbHVlIiwibW9kaWZpZWQiLCJlbnRyaWVzIiwiZW50cnkiLCJ2YWwiLCJfc2V0TW9kaWZpZWQiLCJfcGF0dGVybl9oZWxwZXIiLCJNSU5fRk9OVF9TSVpFIiwiTUFYX0ZPTlRfU0laRSIsIk1BWF9HUk9VUF9TSVpFIiwiRVhFQ1VUSU9OX1RJTUUiLCJFWEVDVVRJT05fU1RFUFMiLCJDT01QSUxFX1RZUEUzX0dMWVBIUyIsIk1BWF9TSVpFX1RPX0NPTVBJTEUiLCJGVUxMX0NIVU5LX0hFSUdIVCIsIkxJTkVXSURUSF9TQ0FMRV9GQUNUT1IiLCJtaXJyb3JDb250ZXh0T3BlcmF0aW9ucyIsImRlc3RDdHgiLCJfcmVtb3ZlTWlycm9yaW5nIiwiX19vcmlnaW5hbFNhdmUiLCJfX29yaWdpbmFsUmVzdG9yZSIsIl9fb3JpZ2luYWxSb3RhdGUiLCJfX29yaWdpbmFsU2NhbGUiLCJfX29yaWdpbmFsVHJhbnNsYXRlIiwidHJhbnNsYXRlIiwiX19vcmlnaW5hbFRyYW5zZm9ybSIsIl9fb3JpZ2luYWxTZXRUcmFuc2Zvcm0iLCJzZXRUcmFuc2Zvcm0iLCJfX29yaWdpbmFsUmVzZXRUcmFuc2Zvcm0iLCJyZXNldFRyYW5zZm9ybSIsIl9fb3JpZ2luYWxDbGlwIiwiX19vcmlnaW5hbE1vdmVUbyIsIl9fb3JpZ2luYWxMaW5lVG8iLCJfX29yaWdpbmFsQmV6aWVyQ3VydmVUbyIsImJlemllckN1cnZlVG8iLCJfX29yaWdpbmFsUmVjdCIsIl9fb3JpZ2luYWxDbG9zZVBhdGgiLCJfX29yaWdpbmFsQmVnaW5QYXRoIiwiYmVnaW5QYXRoIiwiY3R4U2F2ZSIsImN0eFJlc3RvcmUiLCJjdHhUcmFuc2xhdGUiLCJjdHhTY2FsZSIsImN0eFRyYW5zZm9ybSIsImYiLCJjdHhTZXRUcmFuc2Zvcm0iLCJjdHhSZXNldFRyYW5zZm9ybSIsImN0eFJvdGF0ZSIsImFuZ2xlIiwiY3AxeCIsImNwMXkiLCJjcDJ4IiwiY3AyeSIsImFkZENvbnRleHRDdXJyZW50VHJhbnNmb3JtIiwiX3RyYW5zZm9ybVN0YWNrIiwibW96Q3VycmVudFRyYW5zZm9ybSIsIl9vcmlnaW5hbFNhdmUiLCJfb3JpZ2luYWxSZXN0b3JlIiwiX29yaWdpbmFsUm90YXRlIiwiX29yaWdpbmFsU2NhbGUiLCJfb3JpZ2luYWxUcmFuc2xhdGUiLCJfb3JpZ2luYWxUcmFuc2Zvcm0iLCJfb3JpZ2luYWxTZXRUcmFuc2Zvcm0iLCJfb3JpZ2luYWxSZXNldFRyYW5zZm9ybSIsIl90cmFuc2Zvcm1NYXRyaXgiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJfc2V0TGluZVdpZHRoIiwiX2dldExpbmVXaWR0aCIsImdldExpbmVXaWR0aCIsIl8iLCJnZXRDdXJyZW50VHJhbnNmb3JtIiwiZ2V0Q3VycmVudFRyYW5zZm9ybUludmVyc2UiLCJhZF9iYyIsImJjX2FkIiwib2xkIiwicHJldiIsInBvcCIsImNvc1ZhbHVlIiwiY29zIiwic2luVmFsdWUiLCJzaW4iLCJDYWNoZWRDYW52YXNlcyIsImNhY2hlIiwidHJhY2tUcmFuc2Zvcm0iLCJjYW52YXNFbnRyeSIsInJlc2V0IiwiY29tcGlsZVR5cGUzR2x5cGgiLCJpbWdEYXRhIiwiUE9JTlRfVE9fUFJPQ0VTU19MSU1JVCIsIlBPSU5UX1RZUEVTIiwid2lkdGgxIiwiajAiLCJwb2ludHMiLCJsaW5lU2l6ZSIsImRhdGEwIiwiZWxlbSIsIm1hc2siLCJjb3VudCIsInN1bSIsInN0ZXBzIiwiSW50MzJBcnJheSIsIm91dGxpbmVzIiwiY29vcmRzIiwicDAiLCJzdGVwIiwicHAiLCJkcmF3T3V0bGluZSIsImsiLCJrayIsIm8iLCJsIiwibGwiLCJDYW52YXNFeHRyYVN0YXRlIiwiYWxwaGFJc1NoYXBlIiwiZm9udFNpemUiLCJmb250U2l6ZVNjYWxlIiwidGV4dE1hdHJpeCIsInRleHRNYXRyaXhTY2FsZSIsImZvbnRNYXRyaXgiLCJsZWFkaW5nIiwibGluZVgiLCJsaW5lWSIsImNoYXJTcGFjaW5nIiwid29yZFNwYWNpbmciLCJ0ZXh0SFNjYWxlIiwidGV4dFJlbmRlcmluZ01vZGUiLCJ0ZXh0UmlzZSIsImZpbGxDb2xvciIsInN0cm9rZUNvbG9yIiwicGF0dGVybkZpbGwiLCJmaWxsQWxwaGEiLCJzdHJva2VBbHBoYSIsImxpbmVXaWR0aCIsImFjdGl2ZVNNYXNrIiwidHJhbnNmZXJNYXBzIiwic3RhcnROZXdQYXRoQW5kQ2xpcEJveCIsImNsb25lIiwiY2xpcEJveCIsIm1pblgiLCJtaW5ZIiwibWF4WCIsIm1heFkiLCJib3giLCJiZXppZXJCb3VuZGluZ0JveCIsInVwZGF0ZVBhdGhNaW5NYXgiLCJwYXRoVHlwZSIsIlBhdGhUeXBlIiwic2luZ3VsYXJWYWx1ZURlY29tcG9zZTJkU2NhbGUiLCJ4U3Ryb2tlUGFkIiwieVN0cm9rZVBhZCIsImludGVyc2VjdCIsImdldFBhdGhCb3VuZGluZ0JveCIsIkluZmluaXR5IiwicHV0QmluYXJ5SW1hZ2VEYXRhIiwiSW1hZ2VEYXRhIiwicHV0SW1hZ2VEYXRhIiwicGFydGlhbENodW5rSGVpZ2h0IiwiZnVsbENodW5rcyIsInRvdGFsQ2h1bmtzIiwiY2h1bmtJbWdEYXRhIiwiY3JlYXRlSW1hZ2VEYXRhIiwic3JjUG9zIiwiZGVzdFBvcyIsImRlc3QiLCJ0aGlzQ2h1bmtIZWlnaHQiLCJlbGVtc0luVGhpc0NodW5rIiwidHJhbnNmZXJNYXBSZWQiLCJ0cmFuc2Zlck1hcEdyZWVuIiwidHJhbnNmZXJNYXBCbHVlIiwidHJhbnNmZXJNYXBHcmF5Iiwia2luZCIsInNyY0xlbmd0aCIsImRlc3QzMiIsImRlc3QzMkRhdGFMZW5ndGgiLCJmdWxsU3JjRGlmZiIsIndoaXRlIiwiYmxhY2siLCJzcmNEaWZmIiwia0VuZCIsImtFbmRVbnJvbGxlZCIsInNyY0J5dGUiLCJoYXNUcmFuc2Zlck1hcHMiLCJwdXRCaW5hcnlJbWFnZU1hc2siLCJjb3B5Q3R4U3RhdGUiLCJzb3VyY2VDdHgiLCJwcm9wZXJ0aWVzIiwicHJvcGVydHkiLCJzZXRMaW5lRGFzaCIsImdldExpbmVEYXNoIiwibGluZURhc2hPZmZzZXQiLCJyZXNldEN0eFRvRGVmYXVsdCIsInN0cm9rZVN0eWxlIiwiZmlsbFN0eWxlIiwiZmlsbFJ1bGUiLCJnbG9iYWxBbHBoYSIsImxpbmVDYXAiLCJsaW5lSm9pbiIsIm1pdGVyTGltaXQiLCJnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24iLCJjb21wb3NlU01hc2tCYWNrZHJvcCIsInIwIiwiZzAiLCJiMCIsImFscGhhIiwiYWxwaGFfIiwiY29tcG9zZVNNYXNrQWxwaGEiLCJtYXNrRGF0YSIsImxheWVyRGF0YSIsInRyYW5zZmVyTWFwIiwiY29tcG9zZVNNYXNrTHVtaW5vc2l0eSIsImdlbmVyaWNDb21wb3NlU01hc2siLCJtYXNrQ3R4IiwibGF5ZXJDdHgiLCJzdWJ0eXBlIiwiYmFja2Ryb3AiLCJsYXllck9mZnNldFgiLCJsYXllck9mZnNldFkiLCJtYXNrT2Zmc2V0WCIsIm1hc2tPZmZzZXRZIiwiaGFzQmFja2Ryb3AiLCJjb21wb3NlRm4iLCJQSVhFTFNfVE9fUFJPQ0VTUyIsImNodW5rU2l6ZSIsImNlaWwiLCJyb3ciLCJjaHVua0hlaWdodCIsImNvbXBvc2VTTWFzayIsImxheWVyQm94IiwibGF5ZXJXaWR0aCIsImxheWVySGVpZ2h0IiwiZHJhd0ltYWdlIiwiZ2V0SW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwiaW50ZXJwb2xhdGUiLCJmcm91bmQiLCJhY3R1YWxTY2FsZSIsImRldmljZVBpeGVsUmF0aW8iLCJQREZfVE9fQ1NTX1VOSVRTIiwiTElORV9DQVBfU1RZTEVTIiwiTElORV9KT0lOX1NUWUxFUyIsIk5PUk1BTF9DTElQIiwiRU9fQ0xJUCIsImNhbnZhc0N0eCIsInN0YXRlU3RhY2siLCJwZW5kaW5nQ2xpcCIsInBlbmRpbmdFT0ZpbGwiLCJyZXMiLCJ4b2JqcyIsImdyb3VwU3RhY2siLCJwcm9jZXNzaW5nVHlwZTMiLCJiYXNlVHJhbnNmb3JtIiwiYmFzZVRyYW5zZm9ybVN0YWNrIiwiZ3JvdXBMZXZlbCIsInNtYXNrU3RhY2siLCJzbWFza0NvdW50ZXIiLCJ0ZW1wU01hc2siLCJzdXNwZW5kZWRDdHgiLCJjb250ZW50VmlzaWJsZSIsIm1hcmtlZENvbnRlbnRTdGFjayIsImNhY2hlZENhbnZhc2VzIiwiY2FjaGVkUGF0dGVybnMiLCJ2aWV3cG9ydFNjYWxlIiwib3V0cHV0U2NhbGVYIiwib3V0cHV0U2NhbGVZIiwiX2NhY2hlZFNjYWxlRm9yU3Ryb2tpbmciLCJfY2FjaGVkR2V0U2luZ2xlUGl4ZWxXaWR0aCIsImZpbGxSZWN0IiwidHJhbnNwYXJlbnRDYW52YXMiLCJnZXRDYW52YXMiLCJjb21wb3NpdGVDdHgiLCJiZWdpbkxheW91dCIsImV4ZWN1dGlvblN0YXJ0SWR4IiwiY29udGludWVDYWxsYmFjayIsImFyZ3NBcnJheUxlbiIsImNodW5rT3BlcmF0aW9ucyIsImVuZFRpbWUiLCJmbklkIiwiYnJlYWtJdCIsImRlcE9iaklkIiwib2Jqc1Bvb2wiLCJpblNNYXNrTW9kZSIsImVuZExheW91dCIsImltZyIsImludmVyc2VUcmFuc2Zvcm0iLCJ3aWR0aFNjYWxlIiwiaHlwb3QiLCJoZWlnaHRTY2FsZSIsInBhaW50V2lkdGgiLCJwYWludEhlaWdodCIsInRtcENhbnZhc0lkIiwidG1wQ2FudmFzIiwidG1wQ3R4IiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJjbGVhclJlY3QiLCJpc1BhdHRlcm5GaWxsIiwibWFza0NhbnZhcyIsIm9ialRvQ2FudmFzIiwibWFza1RvQ2FudmFzIiwiY29yZDEiLCJjb3JkMiIsImRyYXduV2lkdGgiLCJkcmF3bkhlaWdodCIsImZpbGxDYW52YXMiLCJmaWxsQ3R4Iiwic2NhbGVkIiwiX3NjYWxlSW1hZ2UiLCJtb3pDdXJyZW50VHJhbnNmb3JtSW52ZXJzZSIsImltYWdlU21vb3RoaW5nRW5hYmxlZCIsImludmVyc2UiLCJnZXRQYXR0ZXJuIiwicm91bmQiLCJsaW1pdCIsImRhc2hBcnJheSIsImRhc2hQaGFzZSIsImZsYXRuZXNzIiwic3RhdGVzIiwic3RhdGUiLCJjaGVja1NNYXNrU3RhdGUiLCJiZWdpblNNYXNrTW9kZSIsImVuZFNNYXNrTW9kZSIsImNhY2hlSWQiLCJzY3JhdGNoQ2FudmFzIiwiZGlydHlCb3giLCJmbG9vciIsIm9wcyIsInN0YXJ0WCIsInN0YXJ0WSIsInh3IiwieWgiLCJ1cGRhdGVDdXJ2ZVBhdGhNaW5NYXgiLCJzZXRDdXJyZW50UG9pbnQiLCJjb25zdW1lUGF0aCIsInJlc2NhbGVBbmRTdHJva2UiLCJnZXRDbGlwcGVkUGF0aEJvdW5kaW5nQm94IiwibmVlZFJlc3RvcmUiLCJwYXRocyIsInBlbmRpbmdUZXh0UGF0aHMiLCJwYXRoIiwiYWRkVG9QYXRoIiwic3BhY2luZyIsImZvbnRSZWZOYW1lIiwiZm9udE9iaiIsImZvbnREaXJlY3Rpb24iLCJpc1R5cGUzRm9udCIsImJvbGQiLCJpdGFsaWMiLCJ0eXBlZmFjZSIsImZhbGxiYWNrTmFtZSIsImJyb3dzZXJGb250U2l6ZSIsIm1vZGUiLCJyaXNlIiwicGF0dGVyblRyYW5zZm9ybSIsImZpbGxTdHJva2VNb2RlIiwiaXNBZGRUb1BhdGhTZXQiLCJnZXRQYXRoR2VuZXJhdG9yIiwic3Ryb2tlVGV4dCIsImdseXBocyIsInNob3dUeXBlM1RleHQiLCJnbHlwaHNMZW5ndGgiLCJ2ZXJ0aWNhbCIsInNwYWNpbmdEaXIiLCJkZWZhdWx0Vk1ldHJpY3MiLCJ3aWR0aEFkdmFuY2VTY2FsZSIsInNpbXBsZUZpbGxUZXh0IiwicGF0dGVybiIsImdldFNpbmdsZVBpeGVsV2lkdGgiLCJnbHlwaCIsInJlc3RvcmVOZWVkZWQiLCJpc1NwYWNlIiwiZm9udENoYXIiLCJhY2NlbnQiLCJzY2FsZWRYIiwic2NhbGVkWSIsInZtZXRyaWMiLCJ2eCIsInZ5IiwicmVtZWFzdXJlIiwibWVhc3VyZWRXaWR0aCIsIm1lYXN1cmVUZXh0IiwiaXNGb250U3VicGl4ZWxBQUVuYWJsZWQiLCJjaGFyYWN0ZXJTY2FsZVgiLCJpc0luRm9udCIsInBhaW50Q2hhciIsInNjYWxlZEFjY2VudFgiLCJzY2FsZWRBY2NlbnRZIiwiY2hhcldpZHRoIiwiY29tcG9zZSIsImlzVGV4dEludmlzaWJsZSIsInNwYWNpbmdMZW5ndGgiLCJjaGFyUHJvY09wZXJhdG9yTGlzdCIsIm9wZXJhdG9yTGlzdElkIiwidHJhbnNmb3JtZWQiLCJ4V2lkdGgiLCJ5V2lkdGgiLCJsbHgiLCJsbHkiLCJ1cngiLCJ1cnkiLCJJUiIsImNvbG9yIiwiY2FudmFzR3JhcGhpY3NGYWN0b3J5IiwiY3JlYXRlQ2FudmFzR3JhcGhpY3MiLCJUaWxpbmdQYXR0ZXJuIiwiX2dldFBhdHRlcm4iLCJnZXRDb2xvck5fUGF0dGVybiIsIm1ha2VIZXhDb2xvciIsIm1hdHJpeCIsImdldFNoYWRpbmdQYXR0ZXJuIiwiU0hBRElORyIsImludiIsImJsIiwiYnIiLCJ1bCIsInVyIiwiYmJveCIsImlzQXJyYXkiLCJncm91cCIsImN1cnJlbnRDdHgiLCJpc29sYXRlZCIsImtub2Nrb3V0IiwiY3VycmVudFRyYW5zZm9ybSIsImdldEF4aWFsQWxpZ25lZEJvdW5kaW5nQm94IiwiY2FudmFzQm91bmRzIiwic2NhbGVYIiwic2NhbGVZIiwiZ3JvdXBDdHgiLCJzdGFydFRyYW5zZm9ybUludmVyc2UiLCJjdXJyZW50TXR4IiwiaGFzT3duQ2FudmFzIiwiY2FudmFzV2lkdGgiLCJjYW52YXNIZWlnaHQiLCJhbm5vdGF0aW9uQ2FudmFzIiwic2F2ZWRDdHgiLCJjb21waWxlZCIsIl9jcmVhdGVNYXNrQ2FudmFzIiwic2tld1giLCJza2V3WSIsInBvc2l0aW9ucyIsInRyYW5zIiwiaW1hZ2VzIiwiaW1hZ2UiLCJ3IiwiaCIsImltZ1RvUGFpbnQiLCJIVE1MRWxlbWVudCIsImdldENhbnZhc1Bvc2l0aW9uIiwiYXBwZW5kSW1hZ2UiLCJ0YWciLCJ2aXNpYmxlIiwiaXNWaXNpYmxlIiwiaXNDb250ZW50VmlzaWJsZSIsInVwZGF0ZUNsaXBGcm9tUGF0aCIsImFic0RldCIsIm5vcm1YIiwibm9ybVkiLCJzY2FsZWRYTGluZVdpZHRoIiwic2NhbGVkWUxpbmVXaWR0aCIsImJhc2VBcmVhIiwic2F2ZVJlc3RvcmUiLCJnZXRTY2FsZUZvclN0cm9raW5nIiwic2F2ZWRNYXRyaXgiLCJzYXZlZERhc2hlcyIsInNhdmVkRGFzaE9mZnNldCIsIm9wIiwiYXBwbHlCb3VuZGluZ0JveCIsIlBhdGgyRCIsInJlZ2lvbiIsIkJhc2VTaGFkaW5nUGF0dGVybiIsIlJhZGlhbEF4aWFsU2hhZGluZ1BhdHRlcm4iLCJfdHlwZSIsIl9iYm94IiwiX2NvbG9yU3RvcHMiLCJfcDAiLCJfcDEiLCJfcjAiLCJfcjEiLCJncmFkIiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJjcmVhdGVSYWRpYWxHcmFkaWVudCIsImNvbG9yU3RvcCIsImFkZENvbG9yU3RvcCIsIm93bmVyIiwib3duZXJCQm94IiwiX2NyZWF0ZUdyYWRpZW50IiwiY3JlYXRlUGF0dGVybiIsImRvbU1hdHJpeCIsIkRPTU1hdHJpeCIsImRyYXdUcmlhbmdsZSIsImMxIiwiYzIiLCJjMyIsImNvbG9ycyIsInJvd1NpemUiLCJ0bXAiLCJjMXIiLCJjMWciLCJjMWIiLCJjMnIiLCJjMmciLCJjMmIiLCJjM3IiLCJjM2ciLCJjM2IiLCJ4YSIsImNhciIsImNhZyIsImNhYiIsInhiIiwiY2JyIiwiY2JnIiwiY2JiIiwieDFfIiwieDJfIiwiZHJhd0ZpZ3VyZSIsImZpZ3VyZSIsInBzIiwiY3MiLCJ2ZXJ0aWNlc1BlclJvdyIsInJvd3MiLCJjb2xzIiwicSIsIk1lc2hTaGFkaW5nUGF0dGVybiIsIl9jb29yZHMiLCJfY29sb3JzIiwiX2ZpZ3VyZXMiLCJfYm91bmRzIiwiX2JhY2tncm91bmQiLCJjb21iaW5lZFNjYWxlIiwiYmFja2dyb3VuZENvbG9yIiwiRVhQRUNURURfU0NBTEUiLCJNQVhfUEFUVEVSTl9TSVpFIiwiQk9SREVSX1NJWkUiLCJib3VuZHNXaWR0aCIsImJvdW5kc0hlaWdodCIsInBhZGRlZFdpZHRoIiwicGFkZGVkSGVpZ2h0IiwibWF0cml4U2NhbGUiLCJ0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzIiwiX2NyZWF0ZU1lc2hDYW52YXMiLCJEdW1teVNoYWRpbmdQYXR0ZXJuIiwiUGFpbnRUeXBlIiwiQ09MT1JFRCIsIlVOQ09MT1JFRCIsInhzdGVwIiwieXN0ZXAiLCJwYWludFR5cGUiLCJ0aWxpbmdUeXBlIiwiY3VyTWF0cml4U2NhbGUiLCJkaW14IiwiZ2V0U2l6ZUFuZFNjYWxlIiwiZGlteSIsImdyYXBoaWNzIiwic2V0RmlsbEFuZFN0cm9rZVN0eWxlVG9Db250ZXh0IiwiYWRqdXN0ZWRYMCIsImFkanVzdGVkWTAiLCJhZGp1c3RlZFgxIiwiYWRqdXN0ZWRZMSIsImNsaXBCYm94IiwicmVhbE91dHB1dFNpemUiLCJtYXhTaXplIiwiYmJveFdpZHRoIiwiYmJveEhlaWdodCIsImNzc0NvbG9yIiwiY3JlYXRlUGF0dGVybkNhbnZhcyIsIkNhbGxiYWNrS2luZCIsIkRBVEEiLCJFUlJPUiIsIlN0cmVhbUtpbmQiLCJDQU5DRUwiLCJDQU5DRUxfQ09NUExFVEUiLCJDTE9TRSIsIkVOUVVFVUUiLCJQVUxMIiwiUFVMTF9DT01QTEVURSIsIlNUQVJUX0NPTVBMRVRFIiwid3JhcFJlYXNvbiIsInNvdXJjZU5hbWUiLCJ0YXJnZXROYW1lIiwiY29tT2JqIiwiY2FsbGJhY2tJZCIsInN0cmVhbUlkIiwic3RyZWFtU2lua3MiLCJzdHJlYW1Db250cm9sbGVycyIsImNhbGxiYWNrQ2FwYWJpbGl0aWVzIiwiYWN0aW9uSGFuZGxlciIsIl9vbkNvbU9iak9uTWVzc2FnZSIsInN0cmVhbSIsIl9wcm9jZXNzU3RyZWFtTWVzc2FnZSIsImFjdGlvbiIsImNiU291cmNlTmFtZSIsImNiVGFyZ2V0TmFtZSIsInBvc3RNZXNzYWdlIiwiX2NyZWF0ZVN0cmVhbVNpbmsiLCJhY3Rpb25OYW1lIiwiaGFuZGxlciIsImFoIiwicXVldWVpbmdTdHJhdGVneSIsIlJlYWRhYmxlU3RyZWFtIiwiY29udHJvbGxlciIsInN0YXJ0Q2FwYWJpbGl0eSIsInN0YXJ0Q2FsbCIsInB1bGxDYWxsIiwiY2FuY2VsQ2FsbCIsImlzQ2xvc2VkIiwiZGVzaXJlZFNpemUiLCJwdWxsIiwicHVsbENhcGFiaWxpdHkiLCJjYW5jZWxDYXBhYmlsaXR5Iiwic2VsZiIsInN0cmVhbVNpbmsiLCJpc0NhbmNlbGxlZCIsImxhc3REZXNpcmVkU2l6ZSIsInNpbmtDYXBhYmlsaXR5Iiwic3VjY2VzcyIsInN0cmVhbUNvbnRyb2xsZXIiLCJfZGVsZXRlU3RyZWFtQ29udHJvbGxlciIsImFsbFNldHRsZWQiLCJwYXJzZWREYXRhIiwicmF3RGF0YSIsIk9wdGlvbmFsQ29udGVudEdyb3VwIiwiY3JlYXRvciIsIl9vcmRlciIsIl9ncm91cHMiLCJvcmRlciIsImdyb3VwcyIsImJhc2VTdGF0ZSIsIm9mZiIsImFycmF5Iiwib3BlcmF0b3IiLCJlbGVtZW50IiwiX2V2YWx1YXRlVmlzaWJpbGl0eUV4cHJlc3Npb24iLCJleHByZXNzaW9uIiwicG9saWN5IiwiaWRzIiwiZnJvbSIsIl9xdWV1ZWRDaHVua3MiLCJfcHJvZ3Jlc3NpdmVEb25lIiwiX2NvbnRlbnREaXNwb3NpdGlvbkZpbGVuYW1lIiwiX3BkZkRhdGFSYW5nZVRyYW5zcG9ydCIsIl9pc1N0cmVhbWluZ1N1cHBvcnRlZCIsIl9pc1JhbmdlU3VwcG9ydGVkIiwiX2NvbnRlbnRMZW5ndGgiLCJfZnVsbFJlcXVlc3RSZWFkZXIiLCJfcmFuZ2VSZWFkZXJzIiwiYWRkUmFuZ2VMaXN0ZW5lciIsIl9vblJlY2VpdmVEYXRhIiwiYWRkUHJvZ3Jlc3NMaXN0ZW5lciIsIl9vblByb2dyZXNzIiwiYWRkUHJvZ3Jlc3NpdmVSZWFkTGlzdGVuZXIiLCJhZGRQcm9ncmVzc2l2ZURvbmVMaXN0ZW5lciIsIl9vblByb2dyZXNzaXZlRG9uZSIsInRyYW5zcG9ydFJlYWR5IiwiX2VucXVldWUiLCJmb3VuZCIsInNvbWUiLCJfYmVnaW4iLCJfbG9hZGVkIiwiZmlyc3RSZWFkZXIiLCJxdWV1ZWRDaHVua3MiLCJQREZEYXRhVHJhbnNwb3J0U3RyZWFtUmVhZGVyIiwiX3Byb2dyZXNzaXZlRGF0YUxlbmd0aCIsIlBERkRhdGFUcmFuc3BvcnRTdHJlYW1SYW5nZVJlYWRlciIsInJlcXVlc3REYXRhUmFuZ2UiLCJhYm9ydCIsIl9zdHJlYW0iLCJfZG9uZSIsIl9maWxlbmFtZSIsIl9yZXF1ZXN0cyIsIl9oZWFkZXJzUmVhZHkiLCJyZXF1ZXN0Q2FwYWJpbGl0eSIsIl9lbmQiLCJfcXVldWVkQ2h1bmsiLCJyZXF1ZXN0c0NhcGFiaWxpdHkiLCJfcmVtb3ZlUmFuZ2VSZWFkZXIiLCJvdXRwdXQiLCJ3YWxrIiwibm9kZSIsInNob3VsZEJ1aWxkVGV4dCIsImNoaWxkIiwiQW5ub3RhdGlvbkxheWVyIiwiX3NjcmlwdGluZ191dGlscyIsIl94ZmFfbGF5ZXIiLCJERUZBVUxUX1RBQl9JTkRFWCIsIkdldEVsZW1lbnRzQnlOYW1lU2V0IiwiZ2V0UmVjdERpbXMiLCJBbm5vdGF0aW9uRWxlbWVudEZhY3RvcnkiLCJwYXJhbWV0ZXJzIiwiYW5ub3RhdGlvblR5cGUiLCJMaW5rQW5ub3RhdGlvbkVsZW1lbnQiLCJUZXh0QW5ub3RhdGlvbkVsZW1lbnQiLCJmaWVsZFR5cGUiLCJUZXh0V2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQiLCJyYWRpb0J1dHRvbiIsIlJhZGlvQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQiLCJjaGVja0JveCIsIkNoZWNrYm94V2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQiLCJQdXNoQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQiLCJDaG9pY2VXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCIsIldpZGdldEFubm90YXRpb25FbGVtZW50IiwiUG9wdXBBbm5vdGF0aW9uRWxlbWVudCIsIkZyZWVUZXh0QW5ub3RhdGlvbkVsZW1lbnQiLCJMaW5lQW5ub3RhdGlvbkVsZW1lbnQiLCJTcXVhcmVBbm5vdGF0aW9uRWxlbWVudCIsIkNpcmNsZUFubm90YXRpb25FbGVtZW50IiwiUG9seWxpbmVBbm5vdGF0aW9uRWxlbWVudCIsIkNhcmV0QW5ub3RhdGlvbkVsZW1lbnQiLCJJbmtBbm5vdGF0aW9uRWxlbWVudCIsIlBvbHlnb25Bbm5vdGF0aW9uRWxlbWVudCIsIkhpZ2hsaWdodEFubm90YXRpb25FbGVtZW50IiwiVW5kZXJsaW5lQW5ub3RhdGlvbkVsZW1lbnQiLCJTcXVpZ2dseUFubm90YXRpb25FbGVtZW50IiwiU3RyaWtlT3V0QW5ub3RhdGlvbkVsZW1lbnQiLCJTdGFtcEFubm90YXRpb25FbGVtZW50IiwiRmlsZUF0dGFjaG1lbnRBbm5vdGF0aW9uRWxlbWVudCIsIkFubm90YXRpb25FbGVtZW50IiwiaXNSZW5kZXJhYmxlIiwiaWdub3JlQm9yZGVyIiwiY3JlYXRlUXVhZHJpbGF0ZXJhbHMiLCJsYXllciIsImxpbmtTZXJ2aWNlIiwiZG93bmxvYWRNYW5hZ2VyIiwiaW1hZ2VSZXNvdXJjZXNQYXRoIiwicmVuZGVyRm9ybXMiLCJzdmdGYWN0b3J5IiwiZW5hYmxlU2NyaXB0aW5nIiwiX2ZpZWxkT2JqZWN0cyIsImZpZWxkT2JqZWN0cyIsIl9tb3VzZVN0YXRlIiwibW91c2VTdGF0ZSIsImNvbnRhaW5lciIsIl9jcmVhdGVDb250YWluZXIiLCJxdWFkcmlsYXRlcmFscyIsIl9jcmVhdGVRdWFkcmlsYXRlcmFscyIsInNpZ24iLCJ0cmFuc2Zvcm1PcmlnaW4iLCJib3JkZXJTdHlsZSIsImJvcmRlcldpZHRoIiwiaG9yaXpvbnRhbFJhZGl1cyIsImhvcml6b250YWxDb3JuZXJSYWRpdXMiLCJ2ZXJ0aWNhbFJhZGl1cyIsInZlcnRpY2FsQ29ybmVyUmFkaXVzIiwicmFkaXVzIiwiYm9yZGVyUmFkaXVzIiwiYm9yZGVyQm90dG9tU3R5bGUiLCJib3JkZXJDb2xvciIsInF1YWRQb2ludHMiLCJzYXZlZFJlY3QiLCJxdWFkUG9pbnQiLCJ0cmlnZ2VyIiwicG9wdXBFbGVtZW50IiwiUG9wdXBFbGVtZW50IiwibW9kaWZpY2F0aW9uRGF0ZSIsInJpY2hUZXh0IiwiaGlkZVdyYXBwZXIiLCJwb3B1cCIsInJlbmRlciIsImNsYXNzTmFtZSIsInF1YWRyaWxhdGVyYWwiLCJza2lwSWQiLCJmaWVsZHMiLCJmaWVsZE9iaiIsImV4cG9ydFZhbHVlcyIsImV4cG9ydFZhbHVlIiwiZG9tRWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJwbGF0Zm9ybSIsImlzV2luIiwiaXNNYWMiLCJpc1Rvb2x0aXBPbmx5IiwicmVzZXRGb3JtIiwiYWN0aW9ucyIsIkFjdGlvbiIsImxpbmsiLCJhZGRMaW5rQXR0cmlidXRlcyIsIm5ld1dpbmRvdyIsIl9iaW5kTmFtZWRBY3Rpb24iLCJfYmluZExpbmsiLCJoYXNDbGlja0FjdGlvbiIsIl9iaW5kSlNBY3Rpb24iLCJfYmluZFJlc2V0Rm9ybUFjdGlvbiIsIl9yZW5kZXJRdWFkcmlsYXRlcmFscyIsImluZGV4IiwibGlua0VsZW1lbnQiLCJjbG9uZU5vZGUiLCJkZXN0aW5hdGlvbiIsImdldERlc3RpbmF0aW9uSGFzaCIsIm9uY2xpY2siLCJnb1RvRGVzdGluYXRpb24iLCJnZXRBbmNob3JVcmwiLCJleGVjdXRlTmFtZWRBY3Rpb24iLCJqc05hbWUiLCJldmVudEJ1cyIsImRpc3BhdGNoIiwiZGV0YWlsIiwib3RoZXJDbGlja0FjdGlvbiIsInJlc2V0Rm9ybUZpZWxkcyIsInJlc2V0Rm9ybVJlZnMiLCJyZWZzIiwiaW5jbHVkZSIsImFsbEZpZWxkcyIsImZpZWxkSWRzIiwiZmllbGROYW1lIiwiZmllbGQiLCJzdG9yYWdlIiwiYWxsSWRzIiwic2V0VmFsdWUiLCJ2YWx1ZUFzU3RyaW5nIiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwiaGFzUG9wdXAiLCJhbHQiLCJkYXRhc2V0IiwibDEwbklkIiwibDEwbkFyZ3MiLCJKU09OIiwic3RyaW5naWZ5IiwiX2NyZWF0ZVBvcHVwIiwiYWx0ZXJuYXRpdmVUZXh0IiwidGl0bGUiLCJjdHJsS2V5IiwibWV0YUtleSIsImJhc2VOYW1lIiwiZXZlbnROYW1lIiwidmFsdWVHZXR0ZXIiLCJzaGlmdEtleSIsIm1vZGlmaWVyIiwiX2dldEtleU1vZGlmaWVyIiwiZ2V0dGVyIiwiX3NldEV2ZW50TGlzdGVuZXIiLCJqc0V2ZW50Iiwic2V0Q29sb3IiLCJzdHlsZU5hbWUiLCJ0YXJnZXQiLCJDb2xvckNvbnZlcnRlcnMiLCJjb21tb25BY3Rpb25zIiwiZGlzcGxheSIsImhpZGRlbiIsInByaW50IiwiZm9jdXMiLCJwcmV2ZW50U2Nyb2xsIiwidXNlck5hbWUiLCJyZWFkb25seSIsInJlbW92ZUF0dHJpYnV0ZSIsInJlcXVpcmVkIiwiYmdDb2xvciIsImZnQ29sb3IiLCJ0ZXh0Q29sb3IiLCJoYXNBcHBlYXJhbmNlIiwiZmllbGRWYWx1ZSIsImtleUluU3RvcmFnZSIsIl9nZXRFbGVtZW50c0J5TmFtZSIsInN0b3JlZERhdGEiLCJnZXRWYWx1ZSIsImVsZW1lbnREYXRhIiwidXNlclZhbHVlIiwiZm9ybWF0dGVkVmFsdWUiLCJtdWx0aUxpbmUiLCJkaXNhYmxlZCIsInJlYWRPbmx5IiwidGFiSW5kZXgiLCJzZXRQcm9wZXJ0eU9uU2libGluZ3MiLCJkZWZhdWx0RmllbGRWYWx1ZSIsImJsdXJMaXN0ZW5lciIsInNjcm9sbExlZnQiLCJhY3RpdmVFbGVtZW50Iiwic2VsUmFuZ2UiLCJzZWxTdGFydCIsInNlbEVuZCIsInNldFNlbGVjdGlvblJhbmdlIiwiX2Rpc3BhdGNoRXZlbnRGcm9tU2FuZGJveCIsImNvbW1pdEtleSIsIndpbGxDb21taXQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsIl9ibHVyTGlzdGVuZXIiLCJpc0Rvd24iLCJLZXlzdHJva2UiLCJjaGFuZ2UiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJtYXhMZW4iLCJtYXhMZW5ndGgiLCJjb21iIiwiZmllbGRXaWR0aCIsImNvbWJXaWR0aCIsImNsYXNzTGlzdCIsImxldHRlclNwYWNpbmciLCJ2ZXJ0aWNhbEFsaWduIiwiX3NldFRleHRTdHlsZSIsIl9zZXRCYWNrZ3JvdW5kQ29sb3IiLCJURVhUX0FMSUdOTUVOVCIsImRlZmF1bHRBcHBlYXJhbmNlRGF0YSIsImZvbnRDb2xvciIsInRleHRBbGlnbm1lbnQiLCJ0ZXh0QWxpZ24iLCJjaGVja2VkIiwiY2hlY2tib3giLCJjdXJDaGVja2VkIiwiYnV0dG9uVmFsdWUiLCJyYWRpbyIsInBkZkJ1dHRvblZhbHVlIiwiZm9udFNpemVTdHlsZSIsInNlbGVjdEVsZW1lbnQiLCJjb21ibyIsIm11bHRpU2VsZWN0IiwibXVsdGlwbGUiLCJvcHRpb24iLCJzZWxlY3RlZCIsIm9wdGlvbkVsZW1lbnQiLCJkaXNwbGF5VmFsdWUiLCJpc0V4cG9ydCIsInNlbGVjdGVkSW5kZXgiLCJmaWx0ZXIiLCJnZXRJdGVtcyIsIm11bHRpcGxlU2VsZWN0aW9uIiwiZmluZEluZGV4IiwiaW5zZXJ0QmVmb3JlIiwiaW5kaWNlcyIsImVkaXRhYmxlIiwiY2hhbmdlRXgiLCJrZXlEb3duIiwiSUdOT1JFX1RZUEVTIiwicGFyZW50VHlwZSIsInNlbGVjdG9yIiwicGFyZW50SWQiLCJwYXJlbnRFbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJwYXJlbnRSZWN0IiwicG9wdXBMZWZ0IiwicG9wdXBUb3AiLCJwaW5uZWQiLCJCQUNLR1JPVU5EX0VOTElHSFQiLCJoaWRlRWxlbWVudCIsImRpciIsImRhdGVPYmplY3QiLCJ0b0RhdGVPYmplY3QiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJYZmFMYXllciIsInhmYUh0bWwiLCJodG1sIiwibGFzdENoaWxkIiwiY29udGVudHMiLCJfZm9ybWF0Q29udGVudHMiLCJfdG9nZ2xlIiwiX3Nob3ciLCJfaGlkZSIsImxpbmVzIiwic3BsaXQiLCJsaW5lIiwiY3JlYXRlVGV4dE5vZGUiLCJwaW4iLCJ6SW5kZXgiLCJ1bnBpbiIsImxpbmVDb29yZGluYXRlcyIsImFwcGVuZCIsInNxdWFyZSIsImNpcmNsZSIsImNvbnRhaW5lckNsYXNzTmFtZSIsInN2Z0VsZW1lbnROYW1lIiwidmVydGljZXMiLCJjb29yZGluYXRlIiwicG9seWxpbmUiLCJpbmtMaXN0cyIsImlua0xpc3QiLCJmaWxlIiwiY29udGVudCIsIl9kb3dubG9hZCIsIm9wZW5PckRvd25sb2FkRGF0YSIsInNvcnRlZEFubm90YXRpb25zIiwicG9wdXBBbm5vdGF0aW9ucyIsInJlbmRlcmVkIiwicmVuZGVyZWRFbGVtZW50IiwicHJlcGVuZCIsIm93bk1hdHJpeCIsImVsZW1lbnRzIiwib3duVHJhbnNmb3JtIiwicXVlcnlTZWxlY3RvciIsImZpcnN0Q2hpbGQiLCJub2RlTmFtZSIsInJlcGxhY2VDaGlsZCIsIm1ha2VDb2xvckNvbXAiLCJHIiwiUiIsIkIiLCJjb21wb25lbnRzIiwiUkdCX0hUTUwiLCJDTVlLX1JHQiIsInhmYU9uIiwieGZhT2ZmIiwiZ2V0QXR0cmlidXRlIiwiaXNIVE1MQW5jaG9yRWxlbWVudCIsIkhUTUxBbmNob3JFbGVtZW50IiwiZGF0YUlkIiwic2V0dXBTdG9yYWdlIiwicm9vdEh0bWwiLCJzZXRBdHRyaWJ1dGVzIiwic3RhY2siLCJyb290RGl2IiwidGV4dERpdnMiLCJwYXJlbnQiLCJjaGlsZEh0bWwiLCJ4bWxucyIsImVsIiwicmVuZGVyVGV4dExheWVyIiwiTUFYX1RFWFRfRElWU19UT19SRU5ERVIiLCJERUZBVUxUX0ZPTlRfU0laRSIsIkRFRkFVTFRfRk9OVF9BU0NFTlQiLCJhc2NlbnRDYWNoZSIsIkFsbFdoaXRlc3BhY2VSZWdleHAiLCJnZXRBc2NlbnQiLCJjYWNoZWRBc2NlbnQiLCJtZXRyaWNzIiwiYXNjZW50IiwiZm9udEJvdW5kaW5nQm94QXNjZW50IiwiZGVzY2VudCIsImZvbnRCb3VuZGluZ0JveERlc2NlbnQiLCJyYXRpbyIsInBpeGVscyIsImFwcGVuZFRleHQiLCJnZW9tIiwidGV4dERpdiIsInRleHREaXZQcm9wZXJ0aWVzIiwiX2VuaGFuY2VUZXh0U2VsZWN0aW9uIiwiaGFzVGV4dCIsImhhc0VPTCIsIm9yaWdpbmFsVHJhbnNmb3JtIiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ1RvcCIsIl90ZXh0RGl2cyIsInR4IiwiX3ZpZXdwb3J0IiwiYXRhbjIiLCJmb250TmFtZSIsImZvbnRIZWlnaHQiLCJmb250QXNjZW50IiwiX2ZvbnRJbnNwZWN0b3JFbmFibGVkIiwic2hvdWxkU2NhbGVUZXh0IiwiYWJzU2NhbGVYIiwiYWJzU2NhbGVZIiwiX3RleHREaXZQcm9wZXJ0aWVzIiwiX3RleHRDb250ZW50U3RyZWFtIiwiX2xheW91dFRleHQiLCJhbmdsZUNvcyIsImFuZ2xlU2luIiwiZGl2V2lkdGgiLCJkaXZIZWlnaHQiLCJyaWdodCIsImJvdHRvbSIsIl9jYW5jZWxlZCIsInRleHREaXZzTGVuZ3RoIiwiX3JlbmRlcmluZ0RvbmUiLCJmaW5kUG9zaXRpdmVNaW4iLCJ0cyIsImV4cGFuZCIsImV4cGFuZGVkIiwiZXhwYW5kQm91bmRzIiwiZGl2UHJvcGVydGllcyIsIkZsb2F0NjRBcnJheSIsImpqIiwiYm94U2NhbGUiLCJib3hlcyIsIngxTmV3IiwieDJOZXciLCJleHBhbmRCb3VuZHNMVFIiLCJmYWtlQm91bmRhcnkiLCJob3Jpem9uIiwiYm91bmRhcnkiLCJob3Jpem9uUGFydCIsImFmZmVjdGVkQm91bmRhcnkiLCJtYXhYTmV3IiwieE5ldyIsImNoYW5nZWRIb3Jpem9uIiwibGFzdEJvdW5kYXJ5IiwidXNlQm91bmRhcnkiLCJ1bnNoaWZ0IiwidXNlZCIsImNvbmNhdCIsIlRleHRMYXllclJlbmRlclRhc2siLCJ0ZXh0Q29udGVudFN0cmVhbSIsInRleHRDb250ZW50SXRlbXNTdHIiLCJlbmhhbmNlVGV4dFNlbGVjdGlvbiIsIl90ZXh0Q29udGVudCIsIl9jb250YWluZXIiLCJfdGV4dENvbnRlbnRJdGVtc1N0ciIsIl9yZWFkZXIiLCJfbGF5b3V0VGV4dExhc3RGb250U2l6ZSIsIl9sYXlvdXRUZXh0TGFzdEZvbnRGYW1pbHkiLCJfbGF5b3V0VGV4dEN0eCIsIl9yZW5kZXJUaW1lciIsInN0eWxlQ2FjaGUiLCJsZW4iLCJwYXJlbnROb2RlIiwidGltZW91dCIsIm1vek9wYXF1ZSIsInRleHRJdGVtcyIsInRleHRTdHlsZXMiLCJfcHJvY2Vzc0l0ZW1zIiwiZXhwYW5kRGl2cyIsInRyYW5zZm9ybUJ1ZiIsInBhZGRpbmdCdWYiLCJkaXZQcm9wcyIsInBhZGRpbmciLCJyZW5kZXJQYXJhbWV0ZXJzIiwiX3JlbmRlciIsIlNWR0dyYXBoaWNzIiwib3BMaXN0VG9UcmVlIiwib3BMaXN0Iiwib3BUcmVlIiwib3BMaXN0RWxlbWVudCIsImZuIiwicGYiLCJ0b0ZpeGVkIiwicG0iLCJhY29zIiwiU1ZHX0RFRkFVTFRTIiwiZm9udFN0eWxlIiwiWE1MX05TIiwiWExJTktfTlMiLCJjb250ZW50VHlwZSIsImZvcmNlRGF0YVNjaGVtYSIsImRpZ2l0cyIsImIxIiwiYjIiLCJiMyIsImQxIiwiZDIiLCJkMyIsImQ0IiwiY29udmVydEltZ0RhdGFUb1BuZyIsIlBOR19IRUFERVIiLCJDSFVOS19XUkFQUEVSX1NJWkUiLCJjcmNUYWJsZSIsImNyYzMyIiwiY3JjIiwid3JpdGVQbmdDaHVuayIsImFkbGVyMzIiLCJkZWZsYXRlU3luYyIsImxpdGVyYWxzIiwiZGVmbGF0ZVN5bmNVbmNvbXByZXNzZWQiLCJtYXhCbG9ja0xlbmd0aCIsImRlZmxhdGVCbG9ja3MiLCJpZGF0IiwicGkiLCJhZGxlciIsImVuY29kZSIsImlzTWFzayIsImJpdERlcHRoIiwiY29sb3JUeXBlIiwib2Zmc2V0TGl0ZXJhbHMiLCJvZmZzZXRCeXRlcyIsImloZHIiLCJwbmdMZW5ndGgiLCJTVkdFeHRyYVN0YXRlIiwiZGVwZW5kZW5jaWVzIiwiYWN0aXZlQ2xpcFVybCIsImNsaXBHcm91cCIsIm1hc2tJZCIsImNsaXBDb3VudCIsIm1hc2tDb3VudCIsInNoYWRpbmdDb3VudCIsInRyYW5zZm9ybU1hdHJpeCIsInRyYW5zZm9ybVN0YWNrIiwiZXh0cmFTdGFjayIsImVtYmVkRm9udHMiLCJlbWJlZGRlZEZvbnRzIiwiY3NzU3R5bGUiLCJfb3BlcmF0b3JJZE1hcHBpbmciLCJ0Z3JwIiwiZXhlY3V0ZU9wVHJlZSIsInN2Z0VsZW1lbnQiLCJsb2FkRGVwZW5kZW5jaWVzIiwiY29udmVydE9wTGlzdCIsIm9wZXJhdG9ySWRNYXBwaW5nIiwib3BUcmVlRWxlbWVudCIsImxpbmVNYXRyaXgiLCJ4Y29vcmRzIiwieWNvb3JkcyIsInRzcGFuIiwic2V0QXR0cmlidXRlTlMiLCJ0eHRFbGVtZW50IiwidHh0Z3JwIiwibGluZVdpZHRoU2NhbGUiLCJfc2V0U3Ryb2tlQXR0cmlidXRlcyIsIl9lbnN1cmVUcmFuc2Zvcm1Hcm91cCIsImRlZnMiLCJhZGRGb250U3R5bGUiLCJoYXNDaGlsZE5vZGVzIiwiX21ha2VDb2xvck5fUGF0dGVybiIsIl9tYWtlU2hhZGluZ1BhdHRlcm4iLCJfbWFrZVRpbGluZ1BhdHRlcm4iLCJ0aWxpbmdJZCIsInR4MCIsInR5MCIsInR4MSIsInR5MSIsInhzY2FsZSIsInlzY2FsZSIsInR4c3RlcCIsInR5c3RlcCIsInRpbGluZyIsImNoaWxkTm9kZXMiLCJzaGFkaW5nSWQiLCJjb2xvclN0b3BzIiwiZ3JhZGllbnQiLCJwb2ludDAiLCJwb2ludDEiLCJmb2NhbFBvaW50IiwiY2lyY2xlUG9pbnQiLCJmb2NhbFJhZGl1cyIsImNpcmNsZVJhZGl1cyIsInN0b3AiLCJnZXRBdHRyaWJ1dGVOUyIsImNsaXBJZCIsImNsaXBQYXRoIiwiY2xpcEVsZW1lbnQiLCJzZXRTdHJva2VBbHBoYSIsInNldEZpbGxBbHBoYSIsImltZ1NyYyIsImNsaXByZWN0IiwiaW1nRWwiLCJkZWZpbml0aW9ucyIsInJvb3RHcm91cCIsIl9lbnN1cmVDbGlwR3JvdXAiLCJQREZOb2RlU3RyZWFtIiwiX25ldHdvcmtfdXRpbHMiLCJodHRwIiwiaHR0cHMiLCJmaWxlVXJpUmVnZXgiLCJwYXJzZVVybCIsInNvdXJjZVVybCIsInBhcnNlZFVybCIsInBhcnNlIiwiaG9zdCIsImlzSHR0cCIsImlzRnNVcmwiLCJfcmFuZ2VSZXF1ZXN0UmVhZGVycyIsIlBERk5vZGVTdHJlYW1Gc0Z1bGxSZWFkZXIiLCJQREZOb2RlU3RyZWFtRnVsbFJlYWRlciIsIlBERk5vZGVTdHJlYW1Gc1JhbmdlUmVhZGVyIiwiUERGTm9kZVN0cmVhbVJhbmdlUmVhZGVyIiwiQmFzZUZ1bGxSZWFkZXIiLCJfdXJsIiwiX3N0b3JlZEVycm9yIiwiX2Rpc2FibGVSYW5nZSIsIl9yYW5nZUNodW5rU2l6ZSIsIl9yZWFkYWJsZVN0cmVhbSIsIl9yZWFkQ2FwYWJpbGl0eSIsIl9oZWFkZXJzQ2FwYWJpbGl0eSIsIl9lcnJvciIsIkJhc2VSYW5nZVJlYWRlciIsImNyZWF0ZVJlcXVlc3RPcHRpb25zIiwiaGVhZGVycyIsImF1dGgiLCJob3N0bmFtZSIsIm1ldGhvZCIsImhhbmRsZVJlc3BvbnNlIiwic3RhdHVzQ29kZSIsIl9zZXRSZWFkYWJsZVN0cmVhbSIsImdldFJlc3BvbnNlSGVhZGVyIiwidmFsaWRhdGVSYW5nZVJlcXVlc3RDYXBhYmlsaXRpZXMiLCJhbGxvd1JhbmdlUmVxdWVzdHMiLCJzdWdnZXN0ZWRMZW5ndGgiLCJleHRyYWN0RmlsZW5hbWVGcm9tSGVhZGVyIiwiX3JlcXVlc3QiLCJfaHR0cEhlYWRlcnMiLCJSYW5nZSIsImxzdGF0Iiwic3RhdCIsImNyZWF0ZVJlYWRTdHJlYW0iLCJjcmVhdGVSZXNwb25zZVN0YXR1c0Vycm9yIiwidmFsaWRhdGVSZXNwb25zZVN0YXR1cyIsIl9jb250ZW50X2Rpc3Bvc2l0aW9uIiwicmV0dXJuVmFsdWVzIiwiY29udGVudEVuY29kaW5nIiwiY29udGVudERpc3Bvc2l0aW9uIiwiZ2V0RmlsZW5hbWVGcm9tQ29udGVudERpc3Bvc2l0aW9uSGVhZGVyIiwibmVlZHNFbmNvZGluZ0ZpeHVwIiwidG9QYXJhbVJlZ0V4cCIsInJmYzI2MTZ1bnF1b3RlIiwicmZjNTk4N2RlY29kZSIsInJmYzIwNDdkZWNvZGUiLCJmaXh1cEVuY29kaW5nIiwicmZjMjIzMWdldHBhcmFtIiwiYXR0cmlidXRlUGF0dGVybiIsImZsYWdzIiwidGV4dGRlY29kZSIsImNvbnRlbnREaXNwb3NpdGlvblN0ciIsIml0ZXIiLCJxdW90IiwicGFydCIsInBhcnRzIiwicXVvdGluZGV4IiwiZXh0dmFsdWUiLCJlbmNvZGluZ2VuZCIsImxhbmd2YWx1ZSIsImNoYXJzZXQiLCJoZXgiLCJQREZOZXR3b3JrU3RyZWFtIiwiT0tfUkVTUE9OU0UiLCJQQVJUSUFMX0NPTlRFTlRfUkVTUE9OU0UiLCJnZXRBcnJheUJ1ZmZlciIsInhociIsIk5ldHdvcmtNYW5hZ2VyIiwiZ2V0WGhyIiwiTmV0d29ya01hbmFnZXJfZ2V0WGhyIiwiY3VyclhocklkIiwicGVuZGluZ1JlcXVlc3RzIiwibGlzdGVuZXJzIiwieGhySWQiLCJwZW5kaW5nUmVxdWVzdCIsInNldFJlcXVlc3RIZWFkZXIiLCJleHBlY3RlZFN0YXR1cyIsIm9uRXJyb3IiLCJvblN0YXRlQ2hhbmdlIiwib25wcm9ncmVzcyIsIm9uSGVhZGVyc1JlY2VpdmVkIiwib25Eb25lIiwieGhyU3RhdHVzIiwib2tfcmVzcG9uc2Vfb25fcmFuZ2VfcmVxdWVzdCIsInJhbmdlSGVhZGVyIiwiX3NvdXJjZSIsIl9tYW5hZ2VyIiwiUERGTmV0d29ya1N0cmVhbUZ1bGxSZXF1ZXN0UmVhZGVyIiwiUERGTmV0d29ya1N0cmVhbVJhbmdlUmVxdWVzdFJlYWRlciIsIm9uQ2xvc2VkIiwiX29uUmFuZ2VSZXF1ZXN0UmVhZGVyQ2xvc2VkIiwibWFuYWdlciIsIl9vbkhlYWRlcnNSZWNlaXZlZCIsIl9vbkRvbmUiLCJfb25FcnJvciIsIl9mdWxsUmVxdWVzdElkIiwicmVxdWVzdEZ1bGwiLCJfaGVhZGVyc1JlY2VpdmVkQ2FwYWJpbGl0eSIsIl9jYWNoZWRDaHVua3MiLCJmdWxsUmVxdWVzdFhocklkIiwiZnVsbFJlcXVlc3RYaHIiLCJnZXRSZXF1ZXN0WGhyIiwiYWJvcnRSZXF1ZXN0IiwibGVuZ3RoQ29tcHV0YWJsZSIsImlzUGVuZGluZ1JlcXVlc3QiLCJfcmVxdWVzdElkIiwicmVxdWVzdFJhbmdlIiwiX2Nsb3NlIiwiUERGRmV0Y2hTdHJlYW0iLCJjcmVhdGVGZXRjaE9wdGlvbnMiLCJhYm9ydENvbnRyb2xsZXIiLCJzaWduYWwiLCJjcmVkZW50aWFscyIsInJlZGlyZWN0IiwiY3JlYXRlSGVhZGVycyIsIkhlYWRlcnMiLCJQREZGZXRjaFN0cmVhbVJlYWRlciIsIlBERkZldGNoU3RyZWFtUmFuZ2VSZWFkZXIiLCJfd2l0aENyZWRlbnRpYWxzIiwiQWJvcnRDb250cm9sbGVyIiwiX2Fib3J0Q29udHJvbGxlciIsIl9oZWFkZXJzIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiX2Fubm90YXRpb25fbGF5ZXIiLCJfYXBpIiwiX3N2ZyIsIl90ZXh0X2xheWVyIiwicGRmanNWZXJzaW9uIiwicGRmanNCdWlsZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/pdf.js\n");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLGtCQUFrQjtBQUNsQixtQkFBbUI7QUFDbkIscUJBQXFCOztBQUVyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUMsU0FBUztBQUM1QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLFNBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixTQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkNBQTJDLFVBQVU7QUFDckQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanM/Mzc3MCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/base64-js/index.js\n");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = __webpack_require__.g.TYPED_ARRAY_SUPPORT !== undefined\n  ? __webpack_require__.g.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/buffer/index.js\n");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsV0FBVzs7QUFFcEI7QUFDQTtBQUNBO0FBQ0EsU0FBUyxXQUFXOztBQUVwQjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLFdBQVc7O0FBRXBCO0FBQ0E7QUFDQSxTQUFTLFVBQVU7O0FBRW5CO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcz9lYmMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBpZWVlNzU0LiBCU0QtMy1DbGF1c2UgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ieee754/index.js\n");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/***/ ((module) => {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzP2I2OGUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/isarray/index.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ ((module) => {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isc0JBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0M7O0FBRXRDO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcz81Y2IzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/querystring/decode.js":
/*!********************************************!*\
  !*** ./node_modules/querystring/decode.js ***!
  \********************************************/
/***/ ((module) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmcvZGVjb2RlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCLFNBQVM7QUFDM0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nL2RlY29kZS5qcz9jMTQwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8vIElmIG9iai5oYXNPd25Qcm9wZXJ0eSBoYXMgYmVlbiBvdmVycmlkZGVuLCB0aGVuIGNhbGxpbmdcbi8vIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSB3aWxsIGJyZWFrLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzE3MDdcbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocXMsIHNlcCwgZXEsIG9wdGlvbnMpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIHZhciBvYmogPSB7fTtcblxuICBpZiAodHlwZW9mIHFzICE9PSAnc3RyaW5nJyB8fCBxcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IC9cXCsvZztcbiAgcXMgPSBxcy5zcGxpdChzZXApO1xuXG4gIHZhciBtYXhLZXlzID0gMTAwMDtcbiAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMubWF4S2V5cyA9PT0gJ251bWJlcicpIHtcbiAgICBtYXhLZXlzID0gb3B0aW9ucy5tYXhLZXlzO1xuICB9XG5cbiAgdmFyIGxlbiA9IHFzLmxlbmd0aDtcbiAgLy8gbWF4S2V5cyA8PSAwIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIG5vdCBsaW1pdCBrZXlzIGNvdW50XG4gIGlmIChtYXhLZXlzID4gMCAmJiBsZW4gPiBtYXhLZXlzKSB7XG4gICAgbGVuID0gbWF4S2V5cztcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgeCA9IHFzW2ldLnJlcGxhY2UocmVnZXhwLCAnJTIwJyksXG4gICAgICAgIGlkeCA9IHguaW5kZXhPZihlcSksXG4gICAgICAgIGtzdHIsIHZzdHIsIGssIHY7XG5cbiAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgIGtzdHIgPSB4LnN1YnN0cigwLCBpZHgpO1xuICAgICAgdnN0ciA9IHguc3Vic3RyKGlkeCArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBrc3RyID0geDtcbiAgICAgIHZzdHIgPSAnJztcbiAgICB9XG5cbiAgICBrID0gZGVjb2RlVVJJQ29tcG9uZW50KGtzdHIpO1xuICAgIHYgPSBkZWNvZGVVUklDb21wb25lbnQodnN0cik7XG5cbiAgICBpZiAoIWhhc093blByb3BlcnR5KG9iaiwgaykpIHtcbiAgICAgIG9ialtrXSA9IHY7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9ialtrXSkpIHtcbiAgICAgIG9ialtrXS5wdXNoKHYpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmpba10gPSBbb2JqW2tdLCB2XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/querystring/decode.js\n");

/***/ }),

/***/ "./node_modules/querystring/encode.js":
/*!********************************************!*\
  !*** ./node_modules/querystring/encode.js ***!
  \********************************************/
/***/ ((module) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmcvZW5jb2RlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nL2VuY29kZS5qcz81NzFjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnlQcmltaXRpdmUgPSBmdW5jdGlvbih2KSB7XG4gIHN3aXRjaCAodHlwZW9mIHYpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIHY7XG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiB2ID8gJ3RydWUnIDogJ2ZhbHNlJztcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gaXNGaW5pdGUodikgPyB2IDogJyc7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iaiwgc2VwLCBlcSwgbmFtZSkge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgIG9iaiA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbihrKSB7XG4gICAgICB2YXIga3MgPSBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKGspKSArIGVxO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgICByZXR1cm4gb2JqW2tdLm1hcChmdW5jdGlvbih2KSB7XG4gICAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZSh2KSk7XG4gICAgICAgIH0pLmpvaW4oc2VwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqW2tdKSk7XG4gICAgICB9XG4gICAgfSkuam9pbihzZXApO1xuXG4gIH1cblxuICBpZiAoIW5hbWUpIHJldHVybiAnJztcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUobmFtZSkpICsgZXEgK1xuICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmopKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/querystring/encode.js\n");

/***/ }),

/***/ "./node_modules/querystring/index.js":
/*!*******************************************!*\
  !*** ./node_modules/querystring/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.decode = exports.parse = __webpack_require__(/*! ./decode */ \"./node_modules/querystring/decode.js\");\nexports.encode = exports.stringify = __webpack_require__(/*! ./encode */ \"./node_modules/querystring/encode.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmcvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsY0FBYyxHQUFHLDJGQUFtQztBQUNwRCxjQUFjLEdBQUcsK0ZBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nL2luZGV4LmpzPzZkNTciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLmRlY29kZSA9IGV4cG9ydHMucGFyc2UgPSByZXF1aXJlKCcuL2RlY29kZScpO1xuZXhwb3J0cy5lbmNvZGUgPSBleHBvcnRzLnN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vZW5jb2RlJyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/querystring/index.js\n");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime.js\n");

/***/ }),

/***/ "./node_modules/url/node_modules/punycode/punycode.js":
/*!************************************************************!*\
  !*** ./node_modules/url/node_modules/punycode/punycode.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.3.2 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports =  true && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule =  true && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.3.2',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttrue\n\t) {\n\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\t\treturn punycode;\n\t\t}).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n\n}(this));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/url/node_modules/punycode/punycode.js\n");

/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar punycode = __webpack_require__(/*! punycode */ \"./node_modules/url/node_modules/punycode/punycode.js\");\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/url/util.js\");\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = __webpack_require__(/*! querystring */ \"./node_modules/querystring/index.js\");\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/url/url.js\n");

/***/ }),

/***/ "./node_modules/url/util.js":
/*!**********************************!*\
  !*** ./node_modules/url/util.js ***!
  \**********************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXJsL3V0aWwuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91cmwvdXRpbC5qcz84OWIyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzU3RyaW5nOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdzdHJpbmcnO1xuICB9LFxuICBpc09iamVjdDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZihhcmcpID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG4gIH0sXG4gIGlzTnVsbDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbiAgfSxcbiAgaXNOdWxsT3JVbmRlZmluZWQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBhcmcgPT0gbnVsbDtcbiAgfVxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/url/util.js\n");

/***/ })

}]);