<?php

namespace {{controllerNamespace}};

use {{modelNamespace}}\{{modelName}};
use {{requestNamespace}}\{{modelName}}Request;
use {{interfaceNamespace}}\{{modelName}}RepositoryInterface;
use App\Http\Controllers\Controller;

class {{modelName}}Controller extends Controller
{
   protected ${{modelNamePluralLowerCase}}Repository;

   public function __construct({{modelName}}RepositoryInterface ${{modelNamePluralLowerCase}}Repository)
   {
       $this->{{modelNamePluralLowerCase}}Repository = ${{modelNamePluralLowerCase}}Repository;
   }

         public function index({{modelName}}DataTable $dataTable)
          {
              return $dataTable->render('{{modelView}}.index');
          }

    public function create()
    {
        ${{modelNameLowerCase}} = new {{modelName}}();
        return view('{{modelView}}.create', compact('{{modelNameLowerCase}}'));
    }


    public function store({{modelName}}Request $request)
    {
        $this->{{modelNamePluralLowerCase}}Repository->store($request->validated());
        return redirect()->route('{{modelRoute}}.index')
            ->with('success', trans('common.Created successfully'));
    }


    public function show($id)
    {
        ${{modelNameLowerCase}} =  $this->{{modelNamePluralLowerCase}}Repository->findById($id);

        return view('{{modelView}}.show', compact('{{modelNameLowerCase}}'));
    }

    public function edit($id)
    {
      ${{modelNameLowerCase}} =  $this->{{modelNamePluralLowerCase}}Repository->findById($id);

        return view('{{modelView}}.edit', compact('{{modelNameLowerCase}}'));
    }

    public function update({{modelName}}Request $request, $id)
    {
        $this->{{modelNamePluralLowerCase}}Repository->update($id,$request->validated());
        return redirect()->route('{{modelRoute}}.index')
            ->with('success', trans('common.Updated successfully'));
    }

    public function destroy($id)
    {
        $this->{{modelNamePluralLowerCase}}Repository->deleteById($id);
        return redirect()->route('{{modelRoute}}.index')
            ->with('success', trans('common.Deleted successfully'));
    }
}
